
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800352c  0800352c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800352c  0800352c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0000452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003534  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000005c  08003590  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08003590  0000537c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000907d  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001983  00000000  00000000  0000e101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e5  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010738  00000000  00000000  00010815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaff  00000000  00000000  00020f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061a39  00000000  00000000  0002ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  0008d4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0008f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800346c 	.word	0x0800346c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800346c 	.word	0x0800346c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	@ 0x24
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb2d 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f82f 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f937 	bl	80004b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f000 f90f 	bl	8000468 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f8dd 	bl	8000408 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800024e:	f000 f87f 	bl	8000350 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  char msg[] = "lorem ipsum dolor sit amet\r\n";
 8000252:	003b      	movs	r3, r7
 8000254:	4a0e      	ldr	r2, [pc, #56]	@ (8000290 <main+0x5c>)
 8000256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000258:	c313      	stmia	r3!, {r0, r1, r4}
 800025a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025c:	c313      	stmia	r3!, {r0, r1, r4}
 800025e:	6811      	ldr	r1, [r2, #0]
 8000260:	6019      	str	r1, [r3, #0]
 8000262:	7912      	ldrb	r2, [r2, #4]
 8000264:	711a      	strb	r2, [r3, #4]

  if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, ADC_BUF_LEN) != HAL_OK)
 8000266:	490b      	ldr	r1, [pc, #44]	@ (8000294 <main+0x60>)
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <main+0x64>)
 800026a:	2232      	movs	r2, #50	@ 0x32
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fcdb 	bl	8000c28 <HAL_ADC_Start_DMA>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d007      	beq.n	8000286 <main+0x52>
  {
    sprintf(msg, "Error starting ADC DMA\r\n");
 8000276:	4a09      	ldr	r2, [pc, #36]	@ (800029c <main+0x68>)
 8000278:	003b      	movs	r3, r7
 800027a:	0011      	movs	r1, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f002 fc57 	bl	8002b30 <siprintf>
    // Handle error
    Error_Handler();
 8000282:	f000 f95f 	bl	8000544 <Error_Handler>
    //HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);

    // toggle LED1
    //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    //HAL_Delay(500);
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 fb6a 	bl	8000960 <HAL_Delay>
 800028c:	e7fb      	b.n	8000286 <main+0x52>
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	080034a0 	.word	0x080034a0
 8000294:	200001c8 	.word	0x200001c8
 8000298:	20000078 	.word	0x20000078
 800029c:	08003484 	.word	0x08003484

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b095      	sub	sp, #84	@ 0x54
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2420      	movs	r4, #32
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2330      	movs	r3, #48	@ 0x30
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 fc5d 	bl	8002b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	2310      	movs	r3, #16
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	0018      	movs	r0, r3
 80002bc:	2310      	movs	r3, #16
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fc55 	bl	8002b70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2310      	movs	r3, #16
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f002 fc4e 	bl	8002b70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2210      	movs	r2, #16
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fb45 	bl	8001980 <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fa:	f000 f923 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	2110      	movs	r1, #16
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2207      	movs	r2, #7
 8000304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fe49 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000326:	f000 f90d 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800032a:	003b      	movs	r3, r7
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	f001 ff7f 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000342:	f000 f8ff 	bl	8000544 <Error_Handler>
  }
}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b015      	add	sp, #84	@ 0x54
 800034c:	bd90      	pop	{r4, r7, pc}
	...

08000350 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	230c      	movs	r3, #12
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f002 fc06 	bl	8002b70 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000364:	4b26      	ldr	r3, [pc, #152]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000366:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <MX_ADC_Init+0xb4>)
 8000368:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800036a:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_ADC_Init+0xb0>)
 800036c:	2280      	movs	r2, #128	@ 0x80
 800036e:	05d2      	lsls	r2, r2, #23
 8000370:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000372:	4b23      	ldr	r3, [pc, #140]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000378:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_ADC_Init+0xb0>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000380:	2201      	movs	r2, #1
 8000382:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000386:	2204      	movs	r2, #4
 8000388:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800038a:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_ADC_Init+0xb0>)
 800038c:	2200      	movs	r2, #0
 800038e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000392:	2200      	movs	r2, #0
 8000394:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_ADC_Init+0xb0>)
 8000398:	2201      	movs	r2, #1
 800039a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_ADC_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003a4:	22c2      	movs	r2, #194	@ 0xc2
 80003a6:	32ff      	adds	r2, #255	@ 0xff
 80003a8:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003b2:	2224      	movs	r2, #36	@ 0x24
 80003b4:	2101      	movs	r1, #1
 80003b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 faf1 	bl	80009a8 <HAL_ADC_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80003ca:	f000 f8bb 	bl	8000544 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2280      	movs	r2, #128	@ 0x80
 80003d8:	0152      	lsls	r2, r2, #5
 80003da:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	0552      	lsls	r2, r2, #21
 80003e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e4:	1d3a      	adds	r2, r7, #4
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_ADC_Init+0xb0>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fcb6 	bl	8000d5c <HAL_ADC_ConfigChannel>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 80003f4:	f000 f8a6 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b004      	add	sp, #16
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000078 	.word	0x20000078
 8000404:	40012400 	.word	0x40012400

08000408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800040c:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <MX_USART1_UART_Init+0x5c>)
 8000410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000412:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000414:	22e1      	movs	r2, #225	@ 0xe1
 8000416:	0252      	lsls	r2, r2, #9
 8000418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044a:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <MX_USART1_UART_Init+0x58>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 ffc3 	bl	80023d8 <HAL_UART_Init>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000456:	f000 f875 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000fc 	.word	0x200000fc
 8000464:	40013800 	.word	0x40013800

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <MX_DMA_Init+0x48>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_DMA_Init+0x48>)
 8000474:	2101      	movs	r1, #1
 8000476:	430a      	orrs	r2, r1
 8000478:	615a      	str	r2, [r3, #20]
 800047a:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <MX_DMA_Init+0x48>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	2201      	movs	r2, #1
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2009      	movs	r0, #9
 800048c:	f000 ff28 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	2009      	movs	r0, #9
 8000492:	f000 ff3a 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	200a      	movs	r0, #10
 800049c:	f000 ff20 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004a0:	200a      	movs	r0, #10
 80004a2:	f000 ff32 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b089      	sub	sp, #36	@ 0x24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	240c      	movs	r4, #12
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2314      	movs	r3, #20
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 fb53 	bl	8002b70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <MX_GPIO_Init+0x88>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_GPIO_Init+0x88>)
 80004d0:	2180      	movs	r1, #128	@ 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_GPIO_Init+0x88>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_GPIO_Init+0x88>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_GPIO_Init+0x88>)
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	02c9      	lsls	r1, r1, #11
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_GPIO_Init+0x88>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	02db      	lsls	r3, r3, #11
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_GPIO_Init+0x8c>)
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fa1b 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2208      	movs	r2, #8
 8000514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000528:	187b      	adds	r3, r7, r1
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <MX_GPIO_Init+0x8c>)
 800052c:	0019      	movs	r1, r3
 800052e:	0010      	movs	r0, r2
 8000530:	f001 f8a0 	bl	8001674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b009      	add	sp, #36	@ 0x24
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	48000400 	.word	0x48000400

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <HAL_MspInit+0x44>)
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <HAL_MspInit+0x44>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	@ 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <HAL_MspInit+0x44>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b08b      	sub	sp, #44	@ 0x2c
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	2414      	movs	r4, #20
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fae0 	bl	8002b70 <memset>
  if(hadc->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a2d      	ldr	r2, [pc, #180]	@ (800066c <HAL_ADC_MspInit+0xd4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d154      	bne.n	8000664 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005c0:	2180      	movs	r1, #128	@ 0x80
 80005c2:	0089      	lsls	r1, r1, #2
 80005c4:	430a      	orrs	r2, r1
 80005c6:	619a      	str	r2, [r3, #24]
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	2380      	movs	r3, #128	@ 0x80
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005dc:	2180      	movs	r1, #128	@ 0x80
 80005de:	0289      	lsls	r1, r1, #10
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <HAL_ADC_MspInit+0xd8>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	029b      	lsls	r3, r3, #10
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2203      	movs	r2, #3
 80005fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	193a      	adds	r2, r7, r4
 8000606:	2390      	movs	r3, #144	@ 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f001 f831 	bl	8001674 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000614:	4a18      	ldr	r2, [pc, #96]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 8000616:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	0052      	lsls	r2, r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	00d2      	lsls	r2, r2, #3
 8000638:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 800063c:	2220      	movs	r2, #32
 800063e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000642:	22c0      	movs	r2, #192	@ 0xc0
 8000644:	0192      	lsls	r2, r2, #6
 8000646:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fe7a 	bl	8001344 <HAL_DMA_Init>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000654:	f7ff ff76 	bl	8000544 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a06      	ldr	r2, [pc, #24]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b00b      	add	sp, #44	@ 0x2c
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40012400 	.word	0x40012400
 8000670:	40021000 	.word	0x40021000
 8000674:	200000b8 	.word	0x200000b8
 8000678:	40020008 	.word	0x40020008

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08b      	sub	sp, #44	@ 0x2c
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	2414      	movs	r4, #20
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0018      	movs	r0, r3
 800068a:	2314      	movs	r3, #20
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f002 fa6e 	bl	8002b70 <memset>
  if(huart->Instance==USART1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <HAL_UART_MspInit+0xdc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d158      	bne.n	8000750 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	01c9      	lsls	r1, r1, #7
 80006a8:	430a      	orrs	r2, r1
 80006aa:	619a      	str	r2, [r3, #24]
 80006ac:	4b2b      	ldr	r3, [pc, #172]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	01db      	lsls	r3, r3, #7
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b27      	ldr	r3, [pc, #156]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <HAL_UART_MspInit+0xe0>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006d6:	0021      	movs	r1, r4
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2203      	movs	r2, #3
 80006ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	2390      	movs	r3, #144	@ 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ffb8 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000706:	4a17      	ldr	r2, [pc, #92]	@ (8000764 <HAL_UART_MspInit+0xe8>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 800070c:	2210      	movs	r2, #16
 800070e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fe04 	bl	8001344 <HAL_DMA_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000740:	f7ff ff00 	bl	8000544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 8000748:	671a      	str	r2, [r3, #112]	@ 0x70
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_UART_MspInit+0xe4>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b00b      	add	sp, #44	@ 0x2c
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40013800 	.word	0x40013800
 800075c:	40021000 	.word	0x40021000
 8000760:	20000184 	.word	0x20000184
 8000764:	4002001c 	.word	0x4002001c

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8ca 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <DMA1_Channel1_IRQHandler+0x14>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fe7c 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	200000b8 	.word	0x200000b8

080007b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fe70 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000184 	.word	0x20000184

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f002 f9c0 	bl	8002b80 <__errno>
 8000800:	0003      	movs	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	2301      	movs	r3, #1
 8000808:	425b      	negs	r3, r3
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	18d2      	adds	r2, r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <_sbrk+0x64>)
 800081c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b006      	add	sp, #24
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20001000 	.word	0x20001000
 800082c:	00000400 	.word	0x00000400
 8000830:	2000022c 	.word	0x2000022c
 8000834:	20000380 	.word	0x20000380

08000838 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f7ff fff6 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f002 f98b 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fcdd 	bl	8000234 <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000888:	08003534 	.word	0x08003534
  ldr r2, =_sbss
 800088c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000890:	2000037c 	.word	0x2000037c

08000894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_IRQHandler>
	...

08000898 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <HAL_Init+0x24>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_Init+0x24>)
 80008a2:	2110      	movs	r1, #16
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f809 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ae:	f7ff fe4f 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_InitTick+0x5c>)
 80008ca:	681c      	ldr	r4, [r3, #0]
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <HAL_InitTick+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	23fa      	movs	r3, #250	@ 0xfa
 80008d4:	0098      	lsls	r0, r3, #2
 80008d6:	f7ff fc21 	bl	800011c <__udivsi3>
 80008da:	0003      	movs	r3, r0
 80008dc:	0019      	movs	r1, r3
 80008de:	0020      	movs	r0, r4
 80008e0:	f7ff fc1c 	bl	800011c <__udivsi3>
 80008e4:	0003      	movs	r3, r0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fd1f 	bl	800132a <HAL_SYSTICK_Config>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00f      	b.n	8000914 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d80b      	bhi.n	8000912 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	2200      	movs	r2, #0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fcec 	bl	80012e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_InitTick+0x64>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	18d2      	adds	r2, r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_IncTick+0x20>)
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	20000008 	.word	0x20000008
 8000948:	20000230 	.word	0x20000230

0800094c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	@ (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	20000230 	.word	0x20000230

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff fff0 	bl	800094c <HAL_GetTick>
 800096c:	0003      	movs	r3, r0
 800096e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3301      	adds	r3, #1
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001a      	movs	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	189b      	adds	r3, r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	f7ff ffe0 	bl	800094c <HAL_GetTick>
 800098c:	0002      	movs	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b004      	add	sp, #16
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e125      	b.n	8000c12 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2234      	movs	r2, #52	@ 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fdda 	bl	8000598 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009e8:	2210      	movs	r2, #16
 80009ea:	4013      	ands	r3, r2
 80009ec:	d000      	beq.n	80009f0 <HAL_ADC_Init+0x48>
 80009ee:	e103      	b.n	8000bf8 <HAL_ADC_Init+0x250>
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <HAL_ADC_Init+0x54>
 80009fa:	e0fd      	b.n	8000bf8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2204      	movs	r2, #4
 8000a04:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a06:	d000      	beq.n	8000a0a <HAL_ADC_Init+0x62>
 8000a08:	e0f6      	b.n	8000bf8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a0e:	4a83      	ldr	r2, [pc, #524]	@ (8000c1c <HAL_ADC_Init+0x274>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	2202      	movs	r2, #2
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2203      	movs	r2, #3
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d112      	bne.n	8000a4e <HAL_ADC_Init+0xa6>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d009      	beq.n	8000a4a <HAL_ADC_Init+0xa2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	401a      	ands	r2, r3
 8000a42:	2380      	movs	r3, #128	@ 0x80
 8000a44:	021b      	lsls	r3, r3, #8
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d101      	bne.n	8000a4e <HAL_ADC_Init+0xa6>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <HAL_ADC_Init+0xa8>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d116      	bne.n	8000a82 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	4393      	bics	r3, r2
 8000a5e:	0019      	movs	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	0899      	lsrs	r1, r3, #2
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4964      	ldr	r1, [pc, #400]	@ (8000c20 <HAL_ADC_Init+0x278>)
 8000a8e:	400a      	ands	r2, r1
 8000a90:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7e1b      	ldrb	r3, [r3, #24]
 8000a96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7e5b      	ldrb	r3, [r3, #25]
 8000a9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7e9b      	ldrb	r3, [r3, #26]
 8000aa4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000aa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d002      	beq.n	8000ab6 <HAL_ADC_Init+0x10e>
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	015b      	lsls	r3, r3, #5
 8000ab4:	e000      	b.n	8000ab8 <HAL_ADC_Init+0x110>
 8000ab6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ab8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000abe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d101      	bne.n	8000acc <HAL_ADC_Init+0x124>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	e000      	b.n	8000ace <HAL_ADC_Init+0x126>
 8000acc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ace:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2124      	movs	r1, #36	@ 0x24
 8000ad4:	5c5b      	ldrb	r3, [r3, r1]
 8000ad6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ad8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7edb      	ldrb	r3, [r3, #27]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d115      	bne.n	8000b14 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7e9b      	ldrb	r3, [r3, #26]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d105      	bne.n	8000afc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2280      	movs	r2, #128	@ 0x80
 8000af4:	0252      	lsls	r2, r2, #9
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e00b      	b.n	8000b14 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b00:	2220      	movs	r2, #32
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69da      	ldr	r2, [r3, #28]
 8000b18:	23c2      	movs	r3, #194	@ 0xc2
 8000b1a:	33ff      	adds	r3, #255	@ 0xff
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d007      	beq.n	8000b30 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68d9      	ldr	r1, [r3, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	055b      	lsls	r3, r3, #21
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d01b      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d017      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d013      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d00f      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d00b      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d007      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d003      	beq.n	8000b84 <HAL_ADC_Init+0x1dc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d112      	bne.n	8000baa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2107      	movs	r1, #7
 8000b90:	438a      	bics	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6959      	ldr	r1, [r3, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <HAL_ADC_Init+0x27c>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d10b      	bne.n	8000bd2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4393      	bics	r3, r2
 8000bc8:	2201      	movs	r2, #1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bd0:	e01c      	b.n	8000c0c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd6:	2212      	movs	r2, #18
 8000bd8:	4393      	bics	r3, r2
 8000bda:	2210      	movs	r2, #16
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000be6:	2201      	movs	r2, #1
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bf6:	e009      	b.n	8000c0c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	fffffefd 	.word	0xfffffefd
 8000c20:	fffe0219 	.word	0xfffe0219
 8000c24:	833fffe7 	.word	0x833fffe7

08000c28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c34:	2317      	movs	r3, #23
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2204      	movs	r2, #4
 8000c44:	4013      	ands	r3, r2
 8000c46:	d15e      	bne.n	8000d06 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2234      	movs	r2, #52	@ 0x34
 8000c4c:	5c9b      	ldrb	r3, [r3, r2]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ADC_Start_DMA+0x2e>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e05e      	b.n	8000d14 <HAL_ADC_Start_DMA+0xec>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2234      	movs	r2, #52	@ 0x34
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7e5b      	ldrb	r3, [r3, #25]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d007      	beq.n	8000c76 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000c66:	2317      	movs	r3, #23
 8000c68:	18fc      	adds	r4, r7, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f983 	bl	8000f78 <ADC_Enable>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c76:	2317      	movs	r3, #23
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d146      	bne.n	8000d0e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <HAL_ADC_Start_DMA+0xf4>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2234      	movs	r2, #52	@ 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <HAL_ADC_Start_DMA+0xf8>)
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <HAL_ADC_Start_DMA+0xfc>)
 8000cae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <HAL_ADC_Start_DMA+0x100>)
 8000cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	221c      	movs	r2, #28
 8000cbe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2110      	movs	r1, #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3340      	adds	r3, #64	@ 0x40
 8000cea:	0019      	movs	r1, r3
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f000 fb70 	bl	80013d4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2104      	movs	r1, #4
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	e003      	b.n	8000d0e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	2317      	movs	r3, #23
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b007      	add	sp, #28
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	fffff0fe 	.word	0xfffff0fe
 8000d20:	08001081 	.word	0x08001081
 8000d24:	08001135 	.word	0x08001135
 8000d28:	08001153 	.word	0x08001153

08000d2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d76:	2380      	movs	r3, #128	@ 0x80
 8000d78:	055b      	lsls	r3, r3, #21
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d011      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x46>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d00d      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x46>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d009      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x46>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d005      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x46>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d001      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x46>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2234      	movs	r2, #52	@ 0x34
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x54>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e0d0      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x1f6>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2234      	movs	r2, #52	@ 0x34
 8000db4:	2101      	movs	r1, #1
 8000db6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d000      	beq.n	8000dc6 <HAL_ADC_ConfigChannel+0x6a>
 8000dc4:	e0b4      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4a64      	ldr	r2, [pc, #400]	@ (8000f5c <HAL_ADC_ConfigChannel+0x200>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d100      	bne.n	8000dd2 <HAL_ADC_ConfigChannel+0x76>
 8000dd0:	e082      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	055b      	lsls	r3, r3, #21
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d037      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d033      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d02f      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d02b      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d027      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d023      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d01f      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d01b      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	2107      	movs	r1, #7
 8000e38:	400b      	ands	r3, r1
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d012      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6959      	ldr	r1, [r3, #20]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2207      	movs	r2, #7
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b10      	cmp	r3, #16
 8000e6a:	d007      	beq.n	8000e7c <HAL_ADC_ConfigChannel+0x120>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b11      	cmp	r3, #17
 8000e72:	d003      	beq.n	8000e7c <HAL_ADC_ConfigChannel+0x120>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d163      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e7c:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <HAL_ADC_ConfigChannel+0x204>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b10      	cmp	r3, #16
 8000e86:	d009      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x140>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	d102      	bne.n	8000e96 <HAL_ADC_ConfigChannel+0x13a>
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	03db      	lsls	r3, r3, #15
 8000e94:	e004      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0x144>
 8000e96:	2380      	movs	r3, #128	@ 0x80
 8000e98:	045b      	lsls	r3, r3, #17
 8000e9a:	e001      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0x144>
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f60 <HAL_ADC_ConfigChannel+0x204>)
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d14a      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eae:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <HAL_ADC_ConfigChannel+0x208>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	492d      	ldr	r1, [pc, #180]	@ (8000f68 <HAL_ADC_ConfigChannel+0x20c>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff f931 	bl	800011c <__udivsi3>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	189b      	adds	r3, r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec8:	e002      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f9      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x16e>
 8000ed6:	e035      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4099      	lsls	r1, r3
 8000ee6:	000b      	movs	r3, r1
 8000ee8:	43d9      	mvns	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	400a      	ands	r2, r1
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_ConfigChannel+0x1ae>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b11      	cmp	r3, #17
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_ConfigChannel+0x1ae>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d11c      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_ADC_ConfigChannel+0x204>)
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_ConfigChannel+0x1ca>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x1c6>
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_ADC_ConfigChannel+0x210>)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1cc>
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_ADC_ConfigChannel+0x214>)
 8000f24:	e000      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1cc>
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <HAL_ADC_ConfigChannel+0x218>)
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <HAL_ADC_ConfigChannel+0x204>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e009      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f34:	2220      	movs	r2, #32
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2234      	movs	r2, #52	@ 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	781b      	ldrb	r3, [r3, #0]
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	00001001 	.word	0x00001001
 8000f60:	40012708 	.word	0x40012708
 8000f64:	20000000 	.word	0x20000000
 8000f68:	000f4240 	.word	0x000f4240
 8000f6c:	ffbfffff 	.word	0xffbfffff
 8000f70:	feffffff 	.word	0xfeffffff
 8000f74:	ff7fffff 	.word	0xff7fffff

08000f78 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d112      	bne.n	8000fbc <ADC_Enable+0x44>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d009      	beq.n	8000fb8 <ADC_Enable+0x40>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	401a      	ands	r2, r3
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d101      	bne.n	8000fbc <ADC_Enable+0x44>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <ADC_Enable+0x46>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d152      	bne.n	8001068 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001074 <ADC_Enable+0xfc>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fde:	2201      	movs	r2, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e03f      	b.n	800106a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <ADC_Enable+0x100>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	491f      	ldr	r1, [pc, #124]	@ (800107c <ADC_Enable+0x104>)
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f88b 	bl	800011c <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800100a:	e002      	b.n	8001012 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3b01      	subs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f9      	bne.n	800100c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001018:	f7ff fc98 	bl	800094c <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001020:	e01b      	b.n	800105a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001022:	f7ff fc93 	bl	800094c <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d914      	bls.n	800105a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	2b01      	cmp	r3, #1
 800103c:	d00d      	beq.n	800105a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	2210      	movs	r2, #16
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104e:	2201      	movs	r2, #1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e007      	b.n	800106a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	2b01      	cmp	r3, #1
 8001066:	d1dc      	bne.n	8001022 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	80000017 	.word	0x80000017
 8001078:	20000000 	.word	0x20000000
 800107c:	000f4240 	.word	0x000f4240

08001080 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001092:	2250      	movs	r2, #80	@ 0x50
 8001094:	4013      	ands	r3, r2
 8001096:	d140      	bne.n	800111a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	23c0      	movs	r3, #192	@ 0xc0
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	d12d      	bne.n	8001110 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d129      	bne.n	8001110 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d122      	bne.n	8001110 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2204      	movs	r2, #4
 80010d2:	4013      	ands	r3, r2
 80010d4:	d110      	bne.n	80010f8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	210c      	movs	r1, #12
 80010e2:	438a      	bics	r2, r1
 80010e4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ea:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <ADC_DMAConvCplt+0xb0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	2201      	movs	r2, #1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f6:	e00b      	b.n	8001110 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fc:	2220      	movs	r2, #32
 80010fe:	431a      	orrs	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001108:	2201      	movs	r2, #1
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fe0a 	bl	8000d2c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001118:	e005      	b.n	8001126 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0010      	movs	r0, r2
 8001124:	4798      	blx	r3
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	fffffefe 	.word	0xfffffefe

08001134 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001140:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fdf9 	bl	8000d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001164:	2240      	movs	r2, #64	@ 0x40
 8001166:	431a      	orrs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001170:	2204      	movs	r2, #4
 8001172:	431a      	orrs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff fde6 	bl	8000d4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b7f      	cmp	r3, #127	@ 0x7f
 800119a:	d809      	bhi.n	80011b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	231f      	movs	r3, #31
 80011a4:	401a      	ands	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_EnableIRQ+0x30>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	4091      	lsls	r1, r2
 80011ac:	000a      	movs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
  }
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d0:	d828      	bhi.n	8001224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <__NVIC_SetPriority+0xd4>)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	33c0      	adds	r3, #192	@ 0xc0
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	589b      	ldr	r3, [r3, r2]
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	0011      	movs	r1, r2
 80011e8:	2203      	movs	r2, #3
 80011ea:	400a      	ands	r2, r1
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	21ff      	movs	r1, #255	@ 0xff
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	401a      	ands	r2, r3
 80011f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	22ff      	movs	r2, #255	@ 0xff
 8001200:	401a      	ands	r2, r3
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	2303      	movs	r3, #3
 800120a:	4003      	ands	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	481f      	ldr	r0, [pc, #124]	@ (8001290 <__NVIC_SetPriority+0xd4>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	430a      	orrs	r2, r1
 800121c:	33c0      	adds	r3, #192	@ 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001222:	e031      	b.n	8001288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <__NVIC_SetPriority+0xd8>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0019      	movs	r1, r3
 800122c:	230f      	movs	r3, #15
 800122e:	400b      	ands	r3, r1
 8001230:	3b08      	subs	r3, #8
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3306      	adds	r3, #6
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	@ 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4809      	ldr	r0, [pc, #36]	@ (8001294 <__NVIC_SetPriority+0xd8>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	001c      	movs	r4, r3
 8001274:	230f      	movs	r3, #15
 8001276:	4023      	ands	r3, r4
 8001278:	3b08      	subs	r3, #8
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	430a      	orrs	r2, r1
 800127e:	3306      	adds	r3, #6
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	18c3      	adds	r3, r0, r3
 8001284:	3304      	adds	r3, #4
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b003      	add	sp, #12
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	045b      	lsls	r3, r3, #17
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d301      	bcc.n	80012b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ac:	2301      	movs	r3, #1
 80012ae:	e010      	b.n	80012d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <SysTick_Config+0x44>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	3a01      	subs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b8:	2301      	movs	r3, #1
 80012ba:	425b      	negs	r3, r3
 80012bc:	2103      	movs	r1, #3
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff7c 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x44>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x44>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	210f      	movs	r1, #15
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	1c02      	adds	r2, r0, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	0002      	movs	r2, r0
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff33 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ffaf 	bl	8001298 <SysTick_Config>
 800133a:	0003      	movs	r3, r0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e036      	b.n	80013c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2221      	movs	r2, #33	@ 0x21
 800135e:	2102      	movs	r1, #2
 8001360:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_DMA_Init+0x8c>)
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f946 	bl	800163c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2221      	movs	r2, #33	@ 0x21
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b004      	add	sp, #16
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	ffffc00f 	.word	0xffffc00f

080013d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2317      	movs	r3, #23
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_DMA_Start_IT+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e04f      	b.n	8001498 <HAL_DMA_Start_IT+0xc4>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2220      	movs	r2, #32
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2221      	movs	r2, #33	@ 0x21
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d13a      	bne.n	8001482 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	@ 0x21
 8001410:	2102      	movs	r1, #2
 8001412:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f8d7 	bl	80015e4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	210e      	movs	r1, #14
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00f      	b.n	8001470 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	210a      	movs	r1, #10
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2104      	movs	r1, #4
 800146c:	438a      	bics	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001492:	2317      	movs	r3, #23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b006      	add	sp, #24
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	2204      	movs	r2, #4
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	d024      	beq.n	8001512 <HAL_DMA_IRQHandler+0x72>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2204      	movs	r2, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d020      	beq.n	8001512 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2220      	movs	r2, #32
 80014d8:	4013      	ands	r3, r2
 80014da:	d107      	bne.n	80014ec <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2104      	movs	r1, #4
 80014e8:	438a      	bics	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f4:	2104      	movs	r1, #4
 80014f6:	4091      	lsls	r1, r2
 80014f8:	000a      	movs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d100      	bne.n	8001506 <HAL_DMA_IRQHandler+0x66>
 8001504:	e06a      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	0010      	movs	r0, r2
 800150e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001510:	e064      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	2202      	movs	r2, #2
 8001518:	409a      	lsls	r2, r3
 800151a:	0013      	movs	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	d02b      	beq.n	800157a <HAL_DMA_IRQHandler+0xda>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d027      	beq.n	800157a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2220      	movs	r2, #32
 8001532:	4013      	ands	r3, r2
 8001534:	d10b      	bne.n	800154e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	210a      	movs	r1, #10
 8001542:	438a      	bics	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2221      	movs	r2, #33	@ 0x21
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001556:	2102      	movs	r1, #2
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	0010      	movs	r0, r2
 8001576:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001578:	e030      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	d028      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2208      	movs	r2, #8
 800158e:	4013      	ands	r3, r2
 8001590:	d024      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	210e      	movs	r1, #14
 800159e:	438a      	bics	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	2101      	movs	r1, #1
 80015ac:	4091      	lsls	r1, r2
 80015ae:	000a      	movs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2221      	movs	r2, #33	@ 0x21
 80015bc:	2101      	movs	r1, #1
 80015be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	0010      	movs	r0, r2
 80015d8:	4798      	blx	r3
    }
  }
}
 80015da:	e7ff      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
 80015dc:	46c0      	nop			@ (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fa:	2101      	movs	r1, #1
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d108      	bne.n	8001624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001622:	e007      	b.n	8001634 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <DMA_CalcBaseAndBitshift+0x30>)
 800164a:	4694      	mov	ip, r2
 800164c:	4463      	add	r3, ip
 800164e:	2114      	movs	r1, #20
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fd63 	bl	800011c <__udivsi3>
 8001656:	0003      	movs	r3, r0
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a03      	ldr	r2, [pc, #12]	@ (8001670 <DMA_CalcBaseAndBitshift+0x34>)
 8001662:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001664:	46c0      	nop			@ (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	bffdfff8 	.word	0xbffdfff8
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e149      	b.n	8001918 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <HAL_GPIO_Init+0x28>
 800169a:	e13a      	b.n	8001912 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	58d3      	ldr	r3, [r2, r3]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2207      	movs	r2, #7
 8001770:	4013      	ands	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2107      	movs	r1, #7
 800178a:	400b      	ands	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	23c0      	movs	r3, #192	@ 0xc0
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_GPIO_Init+0x174>
 80017e6:	e094      	b.n	8001912 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b51      	ldr	r3, [pc, #324]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a4c      	ldr	r2, [pc, #304]	@ (8001934 <HAL_GPIO_Init+0x2c0>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	589b      	ldr	r3, [r3, r2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2203      	movs	r2, #3
 8001812:	4013      	ands	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	409a      	lsls	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	43da      	mvns	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	2390      	movs	r3, #144	@ 0x90
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	429a      	cmp	r2, r3
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x1d6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a41      	ldr	r2, [pc, #260]	@ (8001938 <HAL_GPIO_Init+0x2c4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x1d2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a40      	ldr	r2, [pc, #256]	@ (800193c <HAL_GPIO_Init+0x2c8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x1ce>
 800183e:	2302      	movs	r3, #2
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 8001842:	2305      	movs	r3, #5
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	2103      	movs	r1, #3
 8001850:	400a      	ands	r2, r1
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	@ (8001934 <HAL_GPIO_Init+0x2c0>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	035b      	lsls	r3, r3, #13
 8001882:	4013      	ands	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800188e:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	4013      	ands	r3, r2
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43da      	mvns	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	029b      	lsls	r3, r3, #10
 80018d6:	4013      	ands	r3, r2
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018e2:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018e8:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	4013      	ands	r3, r2
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	40da      	lsrs	r2, r3
 8001920:	1e13      	subs	r3, r2, #0
 8001922:	d000      	beq.n	8001926 <HAL_GPIO_Init+0x2b2>
 8001924:	e6ae      	b.n	8001684 <HAL_GPIO_Init+0x10>
  } 
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b006      	add	sp, #24
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	1c7b      	adds	r3, r7, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e301      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	d100      	bne.n	800199e <HAL_RCC_OscConfig+0x1e>
 800199c:	e08d      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800199e:	4bc3      	ldr	r3, [pc, #780]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	220c      	movs	r2, #12
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00e      	beq.n	80019c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019aa:	4bc0      	ldr	r3, [pc, #768]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x64>
 80019b6:	4bbd      	ldr	r3, [pc, #756]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10d      	bne.n	80019e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4bb8      	ldr	r3, [pc, #736]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x56>
 80019d4:	e070      	b.n	8001ab8 <HAL_RCC_OscConfig+0x138>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <HAL_RCC_OscConfig+0x60>
 80019de:	e06b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e2d8      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x7c>
 80019ec:	4baf      	ldr	r3, [pc, #700]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4bae      	ldr	r3, [pc, #696]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	0249      	lsls	r1, r1, #9
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e02f      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x9e>
 8001a04:	4ba9      	ldr	r3, [pc, #676]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4ba8      	ldr	r3, [pc, #672]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	49a9      	ldr	r1, [pc, #676]	@ (8001cb0 <HAL_RCC_OscConfig+0x330>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4ba6      	ldr	r3, [pc, #664]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4ba5      	ldr	r3, [pc, #660]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a16:	49a7      	ldr	r1, [pc, #668]	@ (8001cb4 <HAL_RCC_OscConfig+0x334>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e01e      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0xc4>
 8001a26:	4ba1      	ldr	r3, [pc, #644]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	2180      	movs	r1, #128	@ 0x80
 8001a2e:	02c9      	lsls	r1, r1, #11
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4b9d      	ldr	r3, [pc, #628]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b9c      	ldr	r3, [pc, #624]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	0249      	lsls	r1, r1, #9
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 8001a44:	4b99      	ldr	r3, [pc, #612]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b98      	ldr	r3, [pc, #608]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	4999      	ldr	r1, [pc, #612]	@ (8001cb0 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b96      	ldr	r3, [pc, #600]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b95      	ldr	r3, [pc, #596]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a56:	4997      	ldr	r1, [pc, #604]	@ (8001cb4 <HAL_RCC_OscConfig+0x334>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe ff72 	bl	800094c <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7fe ff6d 	bl	800094c <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e28a      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0xee>
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ff5d 	bl	800094c <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7fe ff58 	bl	800094c <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	@ 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e275      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b80      	ldr	r3, [pc, #512]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x118>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x146>
 8001ac4:	e069      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac6:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	220c      	movs	r2, #12
 8001acc:	4013      	ands	r3, r2
 8001ace:	d00b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ad0:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x196>
 8001adc:	4b73      	ldr	r3, [pc, #460]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d116      	bne.n	8001b16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae8:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e24b      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b6b      	ldr	r3, [pc, #428]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	22f8      	movs	r2, #248	@ 0xf8
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00da      	lsls	r2, r3, #3
 8001b0e:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	e041      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d024      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1e:	4b63      	ldr	r3, [pc, #396]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b62      	ldr	r3, [pc, #392]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ff0f 	bl	800094c <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7fe ff0a 	bl	800094c <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e227      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d0f1      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b56      	ldr	r3, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	22f8      	movs	r2, #248	@ 0xf8
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00da      	lsls	r2, r3, #3
 8001b60:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	438a      	bics	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe feea 	bl	800094c <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7fe fee5 	bl	800094c <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e202      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b90:	4b46      	ldr	r3, [pc, #280]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f1      	bne.n	8001b7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d036      	beq.n	8001c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7fe fec8 	bl	800094c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7fe fec3 	bl	800094c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1e0      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd4:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f1      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x242>
 8001bde:	e018      	b.n	8001c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7fe feae 	bl	800094c <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7fe fea9 	bl	800094c <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1c6      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x29e>
 8001c1c:	e0b4      	b.n	8001d88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	201f      	movs	r0, #31
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	055b      	lsls	r3, r3, #21
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d110      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	0549      	lsls	r1, r1, #21
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d11a      	bne.n	8001c96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	0049      	lsls	r1, r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fe6d 	bl	800094c <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe fe68 	bl	800094c <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e185      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0x33c>
 8001c9e:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	4b02      	ldr	r3, [pc, #8]	@ (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	621a      	str	r2, [r3, #32]
 8001caa:	e035      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	fffbffff 	.word	0xfffbffff
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x35e>
 8001cc4:	4bb6      	ldr	r3, [pc, #728]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4bb5      	ldr	r3, [pc, #724]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]
 8001cd0:	4bb3      	ldr	r3, [pc, #716]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	4bb2      	ldr	r3, [pc, #712]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	438a      	bics	r2, r1
 8001cda:	621a      	str	r2, [r3, #32]
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x380>
 8001ce6:	4bae      	ldr	r3, [pc, #696]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4bad      	ldr	r3, [pc, #692]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cec:	2104      	movs	r1, #4
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	621a      	str	r2, [r3, #32]
 8001cf2:	4bab      	ldr	r3, [pc, #684]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4baa      	ldr	r3, [pc, #680]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001d00:	4ba7      	ldr	r3, [pc, #668]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	4ba6      	ldr	r3, [pc, #664]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4ba3      	ldr	r3, [pc, #652]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d014      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7fe fe14 	bl	800094c <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fe0f 	bl	800094c <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a9b      	ldr	r2, [pc, #620]	@ (8001fa4 <HAL_RCC_OscConfig+0x624>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e12b      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	4b98      	ldr	r3, [pc, #608]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
 8001d48:	e013      	b.n	8001d72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fdff 	bl	800094c <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	e009      	b.n	8001d68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe fdfa 	bl	800094c <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a91      	ldr	r2, [pc, #580]	@ (8001fa4 <HAL_RCC_OscConfig+0x624>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e116      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	4b87      	ldr	r3, [pc, #540]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d82:	4989      	ldr	r1, [pc, #548]	@ (8001fa8 <HAL_RCC_OscConfig+0x628>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d9a:	4b81      	ldr	r3, [pc, #516]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d9e:	4b80      	ldr	r3, [pc, #512]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001da6:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7fe fdcb 	bl	800094c <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dbc:	f7fe fdc6 	bl	800094c <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0e3      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0f1      	beq.n	8001dbc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dd8:	4b71      	ldr	r3, [pc, #452]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	22f8      	movs	r2, #248	@ 0xf8
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	00da      	lsls	r2, r3, #3
 8001de8:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dee:	e034      	b.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	3305      	adds	r3, #5
 8001df6:	d111      	bne.n	8001e1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001df8:	4b69      	ldr	r3, [pc, #420]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	2104      	movs	r1, #4
 8001e00:	438a      	bics	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	22f8      	movs	r2, #248	@ 0xf8
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	00da      	lsls	r2, r3, #3
 8001e14:	4b62      	ldr	r3, [pc, #392]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1a:	e01e      	b.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e1c:	4b60      	ldr	r3, [pc, #384]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e20:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e22:	2104      	movs	r1, #4
 8001e24:	430a      	orrs	r2, r1
 8001e26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e28:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fd8a 	bl	800094c <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e3e:	f7fe fd85 	bl	800094c <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0a2      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e50:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f1      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d100      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4e4>
 8001e62:	e097      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	220c      	movs	r2, #12
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d100      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d14c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b48      	ldr	r3, [pc, #288]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e80:	494a      	ldr	r1, [pc, #296]	@ (8001fac <HAL_RCC_OscConfig+0x62c>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fd61 	bl	800094c <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe fd5c 	bl	800094c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e079      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	049b      	lsls	r3, r3, #18
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eae:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebc:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <HAL_RCC_OscConfig+0x630>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	0449      	lsls	r1, r1, #17
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fd2f 	bl	800094c <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fd2a 	bl	800094c <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e047      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	049b      	lsls	r3, r3, #18
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x574>
 8001f12:	e03f      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	4924      	ldr	r1, [pc, #144]	@ (8001fac <HAL_RCC_OscConfig+0x62c>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fd14 	bl	800094c <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fd0f 	bl	800094c <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e02c      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	049b      	lsls	r3, r3, #18
 8001f44:	4013      	ands	r3, r2
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5aa>
 8001f48:	e024      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e01f      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10e      	bne.n	8001f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	220f      	movs	r2, #15
 8001f76:	401a      	ands	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	23f0      	movs	r3, #240	@ 0xf0
 8001f84:	039b      	lsls	r3, r3, #14
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	efffffff 	.word	0xefffffff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	ffc2ffff 	.word	0xffc2ffff

08001fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b3      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d911      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b58      	ldr	r3, [pc, #352]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4393      	bics	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e09a      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d015      	beq.n	8002030 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2204      	movs	r2, #4
 800200a:	4013      	ands	r3, r2
 800200c:	d006      	beq.n	800201c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800200e:	4b4b      	ldr	r3, [pc, #300]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002014:	21e0      	movs	r1, #224	@ 0xe0
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	22f0      	movs	r2, #240	@ 0xf0
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b44      	ldr	r3, [pc, #272]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d114      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06e      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d108      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e062      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b34      	ldr	r3, [pc, #208]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e05b      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002078:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	4393      	bics	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fc5e 	bl	800094c <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002094:	e009      	b.n	80020aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe fc59 	bl	800094c <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_RCC_ClockConfig+0x18c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e042      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d211      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e020      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <HAL_RCC_ClockConfig+0x190>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800210c:	f000 f820 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002110:	0001      	movs	r1, r0
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_RCC_ClockConfig+0x188>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_RCC_ClockConfig+0x194>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	000a      	movs	r2, r1
 8002122:	40da      	lsrs	r2, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x198>)
 8002126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002128:	2003      	movs	r0, #3
 800212a:	f7fe fbc9 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b004      	add	sp, #16
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	00001388 	.word	0x00001388
 8002144:	fffff8ff 	.word	0xfffff8ff
 8002148:	080034c0 	.word	0x080034c0
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	220c      	movs	r2, #12
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x36>
 800217e:	e02c      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002182:	613b      	str	r3, [r7, #16]
      break;
 8002184:	e02c      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	220f      	movs	r2, #15
 800218c:	4013      	ands	r3, r2
 800218e:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	220f      	movs	r2, #15
 800219a:	4013      	ands	r3, r2
 800219c:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	025b      	lsls	r3, r3, #9
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4810      	ldr	r0, [pc, #64]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b0:	f7fd ffb4 	bl	800011c <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	001a      	movs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4353      	muls	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	000a      	movs	r2, r1
 80021c4:	0152      	lsls	r2, r2, #5
 80021c6:	1a52      	subs	r2, r2, r1
 80021c8:	0193      	lsls	r3, r2, #6
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	185b      	adds	r3, r3, r1
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	e002      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021da:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021e0:	693b      	ldr	r3, [r7, #16]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b006      	add	sp, #24
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	080034d8 	.word	0x080034d8
 80021f8:	080034e8 	.word	0x080034e8

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <HAL_RCC_GetHCLKFreq+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002214:	f7ff fff2 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002218:	0001      	movs	r1, r0
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	2207      	movs	r2, #7
 8002222:	4013      	ands	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	40d9      	lsrs	r1, r3
 800222a:	000b      	movs	r3, r1
}    
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	40021000 	.word	0x40021000
 8002238:	080034d0 	.word	0x080034d0

0800223c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	025b      	lsls	r3, r3, #9
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002258:	e08e      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2017      	movs	r0, #23
 800225c:	183b      	adds	r3, r7, r0
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b57      	ldr	r3, [pc, #348]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	055b      	lsls	r3, r3, #21
 800226a:	4013      	ands	r3, r2
 800226c:	d110      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b54      	ldr	r3, [pc, #336]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	4b53      	ldr	r3, [pc, #332]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0549      	lsls	r1, r1, #21
 8002278:	430a      	orrs	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
 800227c:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	055b      	lsls	r3, r3, #21
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	183b      	adds	r3, r7, r0
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b4c      	ldr	r3, [pc, #304]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d11a      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229c:	4b49      	ldr	r3, [pc, #292]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b48      	ldr	r3, [pc, #288]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0049      	lsls	r1, r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fb4f 	bl	800094c <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	e008      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fb4a 	bl	800094c <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	@ 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e077      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b3f      	ldr	r3, [pc, #252]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	23c0      	movs	r3, #192	@ 0xc0
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d034      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	23c0      	movs	r3, #192	@ 0xc0
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d02c      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f4:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a33      	ldr	r2, [pc, #204]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022fe:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0249      	lsls	r1, r1, #9
 8002308:	430a      	orrs	r2, r1
 800230a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800230c:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002312:	492e      	ldr	r1, [pc, #184]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002314:	400a      	ands	r2, r1
 8002316:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fb11 	bl	800094c <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	e009      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe fb0c 	bl	800094c <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	4a25      	ldr	r2, [pc, #148]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e038      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d0f0      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800234e:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800235e:	430a      	orrs	r2, r1
 8002360:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002362:	2317      	movs	r3, #23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002372:	4918      	ldr	r1, [pc, #96]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002374:	400a      	ands	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	2203      	movs	r2, #3
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002392:	430a      	orrs	r2, r1
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	2210      	movs	r2, #16
 80023a6:	4393      	bics	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b006      	add	sp, #24
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
 80023c8:	fffffcff 	.word	0xfffffcff
 80023cc:	fffeffff 	.word	0xfffeffff
 80023d0:	00001388 	.word	0x00001388
 80023d4:	efffffff 	.word	0xefffffff

080023d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e044      	b.n	8002474 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2278      	movs	r2, #120	@ 0x78
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7fe f93d 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2224      	movs	r2, #36	@ 0x24
 8002406:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2101      	movs	r1, #1
 8002414:	438a      	bics	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f954 	bl	80026d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f828 	bl	8002480 <UART_SetConfig>
 8002430:	0003      	movs	r3, r0
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01c      	b.n	8002474 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	490d      	ldr	r1, [pc, #52]	@ (800247c <HAL_UART_Init+0xa4>)
 8002446:	400a      	ands	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	212a      	movs	r1, #42	@ 0x2a
 8002456:	438a      	bics	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 f9e3 	bl	8002838 <UART_CheckIdleState>
 8002472:	0003      	movs	r3, r0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffffb7ff 	.word	0xffffb7ff

08002480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002488:	231e      	movs	r3, #30
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a83      	ldr	r2, [pc, #524]	@ (80026bc <UART_SetConfig+0x23c>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a7e      	ldr	r2, [pc, #504]	@ (80026c0 <UART_SetConfig+0x240>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a75      	ldr	r2, [pc, #468]	@ (80026c4 <UART_SetConfig+0x244>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024fc:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <UART_SetConfig+0x248>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	2203      	movs	r2, #3
 8002502:	4013      	ands	r3, r2
 8002504:	2b03      	cmp	r3, #3
 8002506:	d00d      	beq.n	8002524 <UART_SetConfig+0xa4>
 8002508:	d81b      	bhi.n	8002542 <UART_SetConfig+0xc2>
 800250a:	2b02      	cmp	r3, #2
 800250c:	d014      	beq.n	8002538 <UART_SetConfig+0xb8>
 800250e:	d818      	bhi.n	8002542 <UART_SetConfig+0xc2>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <UART_SetConfig+0x9a>
 8002514:	2b01      	cmp	r3, #1
 8002516:	d00a      	beq.n	800252e <UART_SetConfig+0xae>
 8002518:	e013      	b.n	8002542 <UART_SetConfig+0xc2>
 800251a:	231f      	movs	r3, #31
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e012      	b.n	800254a <UART_SetConfig+0xca>
 8002524:	231f      	movs	r3, #31
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e00d      	b.n	800254a <UART_SetConfig+0xca>
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2204      	movs	r2, #4
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e008      	b.n	800254a <UART_SetConfig+0xca>
 8002538:	231f      	movs	r3, #31
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2208      	movs	r2, #8
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e003      	b.n	800254a <UART_SetConfig+0xca>
 8002542:	231f      	movs	r3, #31
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2210      	movs	r2, #16
 8002548:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	429a      	cmp	r2, r3
 8002554:	d15c      	bne.n	8002610 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d015      	beq.n	800258c <UART_SetConfig+0x10c>
 8002560:	dc18      	bgt.n	8002594 <UART_SetConfig+0x114>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d00d      	beq.n	8002582 <UART_SetConfig+0x102>
 8002566:	dc15      	bgt.n	8002594 <UART_SetConfig+0x114>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <UART_SetConfig+0xf2>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d005      	beq.n	800257c <UART_SetConfig+0xfc>
 8002570:	e010      	b.n	8002594 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002572:	f7ff fe4d 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002576:	0003      	movs	r3, r0
 8002578:	61bb      	str	r3, [r7, #24]
        break;
 800257a:	e012      	b.n	80025a2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <UART_SetConfig+0x24c>)
 800257e:	61bb      	str	r3, [r7, #24]
        break;
 8002580:	e00f      	b.n	80025a2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002582:	f7ff fde5 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002586:	0003      	movs	r3, r0
 8002588:	61bb      	str	r3, [r7, #24]
        break;
 800258a:	e00a      	b.n	80025a2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	61bb      	str	r3, [r7, #24]
        break;
 8002592:	e006      	b.n	80025a2 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002598:	231e      	movs	r3, #30
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
        break;
 80025a0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <UART_SetConfig+0x12a>
 80025a8:	e07a      	b.n	80026a0 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	005a      	lsls	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	18d2      	adds	r2, r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	0019      	movs	r1, r3
 80025bc:	0010      	movs	r0, r2
 80025be:	f7fd fdad 	bl	800011c <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d91c      	bls.n	8002606 <UART_SetConfig+0x186>
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	025b      	lsls	r3, r3, #9
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d217      	bcs.n	8002606 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	200e      	movs	r0, #14
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	210f      	movs	r1, #15
 80025e0:	438a      	bics	r2, r1
 80025e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2207      	movs	r2, #7
 80025ec:	4013      	ands	r3, r2
 80025ee:	b299      	uxth	r1, r3
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	183a      	adds	r2, r7, r0
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	e04c      	b.n	80026a0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002606:	231e      	movs	r3, #30
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e047      	b.n	80026a0 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002610:	231f      	movs	r3, #31
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d015      	beq.n	8002646 <UART_SetConfig+0x1c6>
 800261a:	dc18      	bgt.n	800264e <UART_SetConfig+0x1ce>
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00d      	beq.n	800263c <UART_SetConfig+0x1bc>
 8002620:	dc15      	bgt.n	800264e <UART_SetConfig+0x1ce>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <UART_SetConfig+0x1ac>
 8002626:	2b02      	cmp	r3, #2
 8002628:	d005      	beq.n	8002636 <UART_SetConfig+0x1b6>
 800262a:	e010      	b.n	800264e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff fdf0 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002630:	0003      	movs	r3, r0
 8002632:	61bb      	str	r3, [r7, #24]
        break;
 8002634:	e012      	b.n	800265c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <UART_SetConfig+0x24c>)
 8002638:	61bb      	str	r3, [r7, #24]
        break;
 800263a:	e00f      	b.n	800265c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800263c:	f7ff fd88 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002640:	0003      	movs	r3, r0
 8002642:	61bb      	str	r3, [r7, #24]
        break;
 8002644:	e00a      	b.n	800265c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	61bb      	str	r3, [r7, #24]
        break;
 800264c:	e006      	b.n	800265c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002652:	231e      	movs	r3, #30
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
        break;
 800265a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01e      	beq.n	80026a0 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	085a      	lsrs	r2, r3, #1
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	18d2      	adds	r2, r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	0019      	movs	r1, r3
 8002672:	0010      	movs	r0, r2
 8002674:	f7fd fd52 	bl	800011c <__udivsi3>
 8002678:	0003      	movs	r3, r0
 800267a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	d90a      	bls.n	8002698 <UART_SetConfig+0x218>
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	429a      	cmp	r2, r3
 800268a:	d205      	bcs.n	8002698 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	e003      	b.n	80026a0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002698:	231e      	movs	r3, #30
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80026ac:	231e      	movs	r3, #30
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b008      	add	sp, #32
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	ffff69f3 	.word	0xffff69f3
 80026c0:	ffffcfff 	.word	0xffffcfff
 80026c4:	fffff4ff 	.word	0xfffff4ff
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	2208      	movs	r2, #8
 80026de:	4013      	ands	r3, r2
 80026e0:	d00b      	beq.n	80026fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <UART_AdvFeatureConfig+0x144>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d00b      	beq.n	800271c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a43      	ldr	r2, [pc, #268]	@ (8002818 <UART_AdvFeatureConfig+0x148>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	2202      	movs	r2, #2
 8002722:	4013      	ands	r3, r2
 8002724:	d00b      	beq.n	800273e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <UART_AdvFeatureConfig+0x14c>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	d00b      	beq.n	8002760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a34      	ldr	r2, [pc, #208]	@ (8002820 <UART_AdvFeatureConfig+0x150>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	2210      	movs	r2, #16
 8002766:	4013      	ands	r3, r2
 8002768:	d00b      	beq.n	8002782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a2c      	ldr	r2, [pc, #176]	@ (8002824 <UART_AdvFeatureConfig+0x154>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	2220      	movs	r2, #32
 8002788:	4013      	ands	r3, r2
 800278a:	d00b      	beq.n	80027a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4a25      	ldr	r2, [pc, #148]	@ (8002828 <UART_AdvFeatureConfig+0x158>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	4013      	ands	r3, r2
 80027ac:	d01d      	beq.n	80027ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <UART_AdvFeatureConfig+0x15c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	035b      	lsls	r3, r3, #13
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10b      	bne.n	80027ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <UART_AdvFeatureConfig+0x160>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00b      	beq.n	800280c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002834 <UART_AdvFeatureConfig+0x164>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
  }
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	ffff7fff 	.word	0xffff7fff
 8002818:	fffdffff 	.word	0xfffdffff
 800281c:	fffeffff 	.word	0xfffeffff
 8002820:	fffbffff 	.word	0xfffbffff
 8002824:	ffffefff 	.word	0xffffefff
 8002828:	ffffdfff 	.word	0xffffdfff
 800282c:	ffefffff 	.word	0xffefffff
 8002830:	ff9fffff 	.word	0xff9fffff
 8002834:	fff7ffff 	.word	0xfff7ffff

08002838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b092      	sub	sp, #72	@ 0x48
 800283c:	af02      	add	r7, sp, #8
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2284      	movs	r2, #132	@ 0x84
 8002844:	2100      	movs	r1, #0
 8002846:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002848:	f7fe f880 	bl	800094c <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	4013      	ands	r3, r2
 800285a:	2b08      	cmp	r3, #8
 800285c:	d12c      	bne.n	80028b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800285e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	0391      	lsls	r1, r2, #14
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4a46      	ldr	r2, [pc, #280]	@ (8002980 <UART_CheckIdleState+0x148>)
 8002868:	9200      	str	r2, [sp, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	f000 f88c 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d021      	beq.n	80028b8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002874:	f3ef 8310 	mrs	r3, PRIMASK
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800287e:	2301      	movs	r3, #1
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002884:	f383 8810 	msr	PRIMASK, r3
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	438a      	bics	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	f383 8810 	msr	PRIMASK, r3
}
 80028a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2278      	movs	r2, #120	@ 0x78
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e05f      	b.n	8002978 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d146      	bne.n	8002954 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	03d1      	lsls	r1, r2, #15
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002980 <UART_CheckIdleState+0x148>)
 80028d0:	9200      	str	r2, [sp, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f000 f858 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d03b      	beq.n	8002954 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e6:	2301      	movs	r3, #1
 80028e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4921      	ldr	r1, [pc, #132]	@ (8002984 <UART_CheckIdleState+0x14c>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290e:	f3ef 8310 	mrs	r3, PRIMASK
 8002912:	61bb      	str	r3, [r7, #24]
  return(result);
 8002914:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002916:	633b      	str	r3, [r7, #48]	@ 0x30
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	2120      	movs	r1, #32
 8002946:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2278      	movs	r2, #120	@ 0x78
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e011      	b.n	8002978 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	@ 0x80
 800295e:	2120      	movs	r1, #32
 8002960:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2278      	movs	r2, #120	@ 0x78
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b010      	add	sp, #64	@ 0x40
 800297e:	bd80      	pop	{r7, pc}
 8002980:	01ffffff 	.word	0x01ffffff
 8002984:	fffffedf 	.word	0xfffffedf

08002988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002998:	e051      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3301      	adds	r3, #1
 800299e:	d04e      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7fd ffd4 	bl	800094c <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e051      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2204      	movs	r2, #4
 80029c2:	4013      	ands	r3, r2
 80029c4:	d03b      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b80      	cmp	r3, #128	@ 0x80
 80029ca:	d038      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b40      	cmp	r3, #64	@ 0x40
 80029d0:	d035      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2208      	movs	r2, #8
 80029da:	4013      	ands	r3, r2
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d111      	bne.n	8002a04 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f83c 	bl	8002a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2284      	movs	r2, #132	@ 0x84
 80029f4:	2108      	movs	r1, #8
 80029f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2278      	movs	r2, #120	@ 0x78
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e02c      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	401a      	ands	r2, r3
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d112      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f81f 	bl	8002a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2284      	movs	r2, #132	@ 0x84
 8002a2e:	2120      	movs	r1, #32
 8002a30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2278      	movs	r2, #120	@ 0x78
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e00f      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	425a      	negs	r2, r3
 8002a4e:	4153      	adcs	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	001a      	movs	r2, r3
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d09e      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	@ 0x38
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a70:	f3ef 8310 	mrs	r3, PRIMASK
 8002a74:	617b      	str	r3, [r7, #20]
  return(result);
 8002a76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f383 8810 	msr	PRIMASK, r3
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4926      	ldr	r1, [pc, #152]	@ (8002b2c <UART_EndRxTransfer+0xc4>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f383 8810 	msr	PRIMASK, r3
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa6:	623b      	str	r3, [r7, #32]
  return(result);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aac:	2301      	movs	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	f383 8810 	msr	PRIMASK, r3
}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d118      	bne.n	8002b0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002adc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2110      	movs	r1, #16
 8002afe:	438a      	bics	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	2120      	movs	r1, #32
 8002b14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b00e      	add	sp, #56	@ 0x38
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	fffffedf 	.word	0xfffffedf

08002b30 <siprintf>:
 8002b30:	b40e      	push	{r1, r2, r3}
 8002b32:	b500      	push	{lr}
 8002b34:	490b      	ldr	r1, [pc, #44]	@ (8002b64 <siprintf+0x34>)
 8002b36:	b09c      	sub	sp, #112	@ 0x70
 8002b38:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b3a:	9002      	str	r0, [sp, #8]
 8002b3c:	9006      	str	r0, [sp, #24]
 8002b3e:	9107      	str	r1, [sp, #28]
 8002b40:	9104      	str	r1, [sp, #16]
 8002b42:	4809      	ldr	r0, [pc, #36]	@ (8002b68 <siprintf+0x38>)
 8002b44:	4909      	ldr	r1, [pc, #36]	@ (8002b6c <siprintf+0x3c>)
 8002b46:	cb04      	ldmia	r3!, {r2}
 8002b48:	9105      	str	r1, [sp, #20]
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	a902      	add	r1, sp, #8
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	f000 f99e 	bl	8002e90 <_svfiprintf_r>
 8002b54:	2200      	movs	r2, #0
 8002b56:	9b02      	ldr	r3, [sp, #8]
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	b01c      	add	sp, #112	@ 0x70
 8002b5c:	bc08      	pop	{r3}
 8002b5e:	b003      	add	sp, #12
 8002b60:	4718      	bx	r3
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	7fffffff 	.word	0x7fffffff
 8002b68:	2000000c 	.word	0x2000000c
 8002b6c:	ffff0208 	.word	0xffff0208

08002b70 <memset>:
 8002b70:	0003      	movs	r3, r0
 8002b72:	1882      	adds	r2, r0, r2
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d100      	bne.n	8002b7a <memset+0xa>
 8002b78:	4770      	bx	lr
 8002b7a:	7019      	strb	r1, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	e7f9      	b.n	8002b74 <memset+0x4>

08002b80 <__errno>:
 8002b80:	4b01      	ldr	r3, [pc, #4]	@ (8002b88 <__errno+0x8>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	4770      	bx	lr
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	2000000c 	.word	0x2000000c

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4c0c      	ldr	r4, [pc, #48]	@ (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	f000 fc65 	bl	800346c <_init>
 8002ba2:	4c0a      	ldr	r4, [pc, #40]	@ (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4d0a      	ldr	r5, [pc, #40]	@ (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	00b3      	lsls	r3, r6, #2
 8002bb2:	58eb      	ldr	r3, [r5, r3]
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	00b3      	lsls	r3, r6, #2
 8002bbc:	58eb      	ldr	r3, [r5, r3]
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	0800352c 	.word	0x0800352c
 8002bc8:	0800352c 	.word	0x0800352c
 8002bcc:	08003530 	.word	0x08003530
 8002bd0:	0800352c 	.word	0x0800352c

08002bd4 <__retarget_lock_acquire_recursive>:
 8002bd4:	4770      	bx	lr

08002bd6 <__retarget_lock_release_recursive>:
 8002bd6:	4770      	bx	lr

08002bd8 <_free_r>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	0005      	movs	r5, r0
 8002bdc:	1e0c      	subs	r4, r1, #0
 8002bde:	d010      	beq.n	8002c02 <_free_r+0x2a>
 8002be0:	3c04      	subs	r4, #4
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da00      	bge.n	8002bea <_free_r+0x12>
 8002be8:	18e4      	adds	r4, r4, r3
 8002bea:	0028      	movs	r0, r5
 8002bec:	f000 f8e0 	bl	8002db0 <__malloc_lock>
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c68 <_free_r+0x90>)
 8002bf2:	6813      	ldr	r3, [r2, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <_free_r+0x2c>
 8002bf8:	6063      	str	r3, [r4, #4]
 8002bfa:	6014      	str	r4, [r2, #0]
 8002bfc:	0028      	movs	r0, r5
 8002bfe:	f000 f8df 	bl	8002dc0 <__malloc_unlock>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	d908      	bls.n	8002c1a <_free_r+0x42>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	1821      	adds	r1, r4, r0
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d1f3      	bne.n	8002bf8 <_free_r+0x20>
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	1809      	adds	r1, r1, r0
 8002c16:	6021      	str	r1, [r4, #0]
 8002c18:	e7ee      	b.n	8002bf8 <_free_r+0x20>
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <_free_r+0x4e>
 8002c22:	42a3      	cmp	r3, r4
 8002c24:	d9f9      	bls.n	8002c1a <_free_r+0x42>
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	1850      	adds	r0, r2, r1
 8002c2a:	42a0      	cmp	r0, r4
 8002c2c:	d10b      	bne.n	8002c46 <_free_r+0x6e>
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	1809      	adds	r1, r1, r0
 8002c32:	1850      	adds	r0, r2, r1
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	4283      	cmp	r3, r0
 8002c38:	d1e0      	bne.n	8002bfc <_free_r+0x24>
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	1841      	adds	r1, r0, r1
 8002c40:	6011      	str	r1, [r2, #0]
 8002c42:	6053      	str	r3, [r2, #4]
 8002c44:	e7da      	b.n	8002bfc <_free_r+0x24>
 8002c46:	42a0      	cmp	r0, r4
 8002c48:	d902      	bls.n	8002c50 <_free_r+0x78>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	602b      	str	r3, [r5, #0]
 8002c4e:	e7d5      	b.n	8002bfc <_free_r+0x24>
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	1821      	adds	r1, r4, r0
 8002c54:	428b      	cmp	r3, r1
 8002c56:	d103      	bne.n	8002c60 <_free_r+0x88>
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	1809      	adds	r1, r1, r0
 8002c5e:	6021      	str	r1, [r4, #0]
 8002c60:	6063      	str	r3, [r4, #4]
 8002c62:	6054      	str	r4, [r2, #4]
 8002c64:	e7ca      	b.n	8002bfc <_free_r+0x24>
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	20000378 	.word	0x20000378

08002c6c <sbrk_aligned>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002cac <sbrk_aligned+0x40>)
 8002c70:	000d      	movs	r5, r1
 8002c72:	6831      	ldr	r1, [r6, #0]
 8002c74:	0004      	movs	r4, r0
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d102      	bne.n	8002c80 <sbrk_aligned+0x14>
 8002c7a:	f000 fb99 	bl	80033b0 <_sbrk_r>
 8002c7e:	6030      	str	r0, [r6, #0]
 8002c80:	0029      	movs	r1, r5
 8002c82:	0020      	movs	r0, r4
 8002c84:	f000 fb94 	bl	80033b0 <_sbrk_r>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d103      	bne.n	8002c94 <sbrk_aligned+0x28>
 8002c8c:	2501      	movs	r5, #1
 8002c8e:	426d      	negs	r5, r5
 8002c90:	0028      	movs	r0, r5
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	2303      	movs	r3, #3
 8002c96:	1cc5      	adds	r5, r0, #3
 8002c98:	439d      	bics	r5, r3
 8002c9a:	42a8      	cmp	r0, r5
 8002c9c:	d0f8      	beq.n	8002c90 <sbrk_aligned+0x24>
 8002c9e:	1a29      	subs	r1, r5, r0
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fb85 	bl	80033b0 <_sbrk_r>
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d1f2      	bne.n	8002c90 <sbrk_aligned+0x24>
 8002caa:	e7ef      	b.n	8002c8c <sbrk_aligned+0x20>
 8002cac:	20000374 	.word	0x20000374

08002cb0 <_malloc_r>:
 8002cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	1ccb      	adds	r3, r1, #3
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	3308      	adds	r3, #8
 8002cba:	0005      	movs	r5, r0
 8002cbc:	001f      	movs	r7, r3
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d234      	bcs.n	8002d2c <_malloc_r+0x7c>
 8002cc2:	270c      	movs	r7, #12
 8002cc4:	42b9      	cmp	r1, r7
 8002cc6:	d833      	bhi.n	8002d30 <_malloc_r+0x80>
 8002cc8:	0028      	movs	r0, r5
 8002cca:	f000 f871 	bl	8002db0 <__malloc_lock>
 8002cce:	4e37      	ldr	r6, [pc, #220]	@ (8002dac <_malloc_r+0xfc>)
 8002cd0:	6833      	ldr	r3, [r6, #0]
 8002cd2:	001c      	movs	r4, r3
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	d12f      	bne.n	8002d38 <_malloc_r+0x88>
 8002cd8:	0039      	movs	r1, r7
 8002cda:	0028      	movs	r0, r5
 8002cdc:	f7ff ffc6 	bl	8002c6c <sbrk_aligned>
 8002ce0:	0004      	movs	r4, r0
 8002ce2:	1c43      	adds	r3, r0, #1
 8002ce4:	d15f      	bne.n	8002da6 <_malloc_r+0xf6>
 8002ce6:	6834      	ldr	r4, [r6, #0]
 8002ce8:	9400      	str	r4, [sp, #0]
 8002cea:	9b00      	ldr	r3, [sp, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d14a      	bne.n	8002d86 <_malloc_r+0xd6>
 8002cf0:	2c00      	cmp	r4, #0
 8002cf2:	d052      	beq.n	8002d9a <_malloc_r+0xea>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	0028      	movs	r0, r5
 8002cf8:	18e3      	adds	r3, r4, r3
 8002cfa:	9900      	ldr	r1, [sp, #0]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	f000 fb57 	bl	80033b0 <_sbrk_r>
 8002d02:	9b01      	ldr	r3, [sp, #4]
 8002d04:	4283      	cmp	r3, r0
 8002d06:	d148      	bne.n	8002d9a <_malloc_r+0xea>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	0028      	movs	r0, r5
 8002d0c:	1aff      	subs	r7, r7, r3
 8002d0e:	0039      	movs	r1, r7
 8002d10:	f7ff ffac 	bl	8002c6c <sbrk_aligned>
 8002d14:	3001      	adds	r0, #1
 8002d16:	d040      	beq.n	8002d9a <_malloc_r+0xea>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	6833      	ldr	r3, [r6, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d133      	bne.n	8002d8e <_malloc_r+0xde>
 8002d26:	9b00      	ldr	r3, [sp, #0]
 8002d28:	6033      	str	r3, [r6, #0]
 8002d2a:	e019      	b.n	8002d60 <_malloc_r+0xb0>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dac9      	bge.n	8002cc4 <_malloc_r+0x14>
 8002d30:	230c      	movs	r3, #12
 8002d32:	602b      	str	r3, [r5, #0]
 8002d34:	2000      	movs	r0, #0
 8002d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d38:	6821      	ldr	r1, [r4, #0]
 8002d3a:	1bc9      	subs	r1, r1, r7
 8002d3c:	d420      	bmi.n	8002d80 <_malloc_r+0xd0>
 8002d3e:	290b      	cmp	r1, #11
 8002d40:	d90a      	bls.n	8002d58 <_malloc_r+0xa8>
 8002d42:	19e2      	adds	r2, r4, r7
 8002d44:	6027      	str	r7, [r4, #0]
 8002d46:	42a3      	cmp	r3, r4
 8002d48:	d104      	bne.n	8002d54 <_malloc_r+0xa4>
 8002d4a:	6032      	str	r2, [r6, #0]
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	6053      	str	r3, [r2, #4]
 8002d52:	e005      	b.n	8002d60 <_malloc_r+0xb0>
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	e7f9      	b.n	8002d4c <_malloc_r+0x9c>
 8002d58:	6862      	ldr	r2, [r4, #4]
 8002d5a:	42a3      	cmp	r3, r4
 8002d5c:	d10e      	bne.n	8002d7c <_malloc_r+0xcc>
 8002d5e:	6032      	str	r2, [r6, #0]
 8002d60:	0028      	movs	r0, r5
 8002d62:	f000 f82d 	bl	8002dc0 <__malloc_unlock>
 8002d66:	0020      	movs	r0, r4
 8002d68:	2207      	movs	r2, #7
 8002d6a:	300b      	adds	r0, #11
 8002d6c:	1d23      	adds	r3, r4, #4
 8002d6e:	4390      	bics	r0, r2
 8002d70:	1ac2      	subs	r2, r0, r3
 8002d72:	4298      	cmp	r0, r3
 8002d74:	d0df      	beq.n	8002d36 <_malloc_r+0x86>
 8002d76:	1a1b      	subs	r3, r3, r0
 8002d78:	50a3      	str	r3, [r4, r2]
 8002d7a:	e7dc      	b.n	8002d36 <_malloc_r+0x86>
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	e7ef      	b.n	8002d60 <_malloc_r+0xb0>
 8002d80:	0023      	movs	r3, r4
 8002d82:	6864      	ldr	r4, [r4, #4]
 8002d84:	e7a6      	b.n	8002cd4 <_malloc_r+0x24>
 8002d86:	9c00      	ldr	r4, [sp, #0]
 8002d88:	6863      	ldr	r3, [r4, #4]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	e7ad      	b.n	8002cea <_malloc_r+0x3a>
 8002d8e:	001a      	movs	r2, r3
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	42a3      	cmp	r3, r4
 8002d94:	d1fb      	bne.n	8002d8e <_malloc_r+0xde>
 8002d96:	2300      	movs	r3, #0
 8002d98:	e7da      	b.n	8002d50 <_malloc_r+0xa0>
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f000 f80e 	bl	8002dc0 <__malloc_unlock>
 8002da4:	e7c6      	b.n	8002d34 <_malloc_r+0x84>
 8002da6:	6007      	str	r7, [r0, #0]
 8002da8:	e7da      	b.n	8002d60 <_malloc_r+0xb0>
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	20000378 	.word	0x20000378

08002db0 <__malloc_lock>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <__malloc_lock+0xc>)
 8002db4:	f7ff ff0e 	bl	8002bd4 <__retarget_lock_acquire_recursive>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	20000370 	.word	0x20000370

08002dc0 <__malloc_unlock>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4802      	ldr	r0, [pc, #8]	@ (8002dcc <__malloc_unlock+0xc>)
 8002dc4:	f7ff ff07 	bl	8002bd6 <__retarget_lock_release_recursive>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	20000370 	.word	0x20000370

08002dd0 <__ssputs_r>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	688e      	ldr	r6, [r1, #8]
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	001f      	movs	r7, r3
 8002dd8:	000c      	movs	r4, r1
 8002dda:	680b      	ldr	r3, [r1, #0]
 8002ddc:	9002      	str	r0, [sp, #8]
 8002dde:	9203      	str	r2, [sp, #12]
 8002de0:	42be      	cmp	r6, r7
 8002de2:	d830      	bhi.n	8002e46 <__ssputs_r+0x76>
 8002de4:	210c      	movs	r1, #12
 8002de6:	5e62      	ldrsh	r2, [r4, r1]
 8002de8:	2190      	movs	r1, #144	@ 0x90
 8002dea:	00c9      	lsls	r1, r1, #3
 8002dec:	420a      	tst	r2, r1
 8002dee:	d028      	beq.n	8002e42 <__ssputs_r+0x72>
 8002df0:	2003      	movs	r0, #3
 8002df2:	6921      	ldr	r1, [r4, #16]
 8002df4:	1a5b      	subs	r3, r3, r1
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	6963      	ldr	r3, [r4, #20]
 8002dfa:	4343      	muls	r3, r0
 8002dfc:	9801      	ldr	r0, [sp, #4]
 8002dfe:	0fdd      	lsrs	r5, r3, #31
 8002e00:	18ed      	adds	r5, r5, r3
 8002e02:	1c7b      	adds	r3, r7, #1
 8002e04:	181b      	adds	r3, r3, r0
 8002e06:	106d      	asrs	r5, r5, #1
 8002e08:	42ab      	cmp	r3, r5
 8002e0a:	d900      	bls.n	8002e0e <__ssputs_r+0x3e>
 8002e0c:	001d      	movs	r5, r3
 8002e0e:	0552      	lsls	r2, r2, #21
 8002e10:	d528      	bpl.n	8002e64 <__ssputs_r+0x94>
 8002e12:	0029      	movs	r1, r5
 8002e14:	9802      	ldr	r0, [sp, #8]
 8002e16:	f7ff ff4b 	bl	8002cb0 <_malloc_r>
 8002e1a:	1e06      	subs	r6, r0, #0
 8002e1c:	d02c      	beq.n	8002e78 <__ssputs_r+0xa8>
 8002e1e:	9a01      	ldr	r2, [sp, #4]
 8002e20:	6921      	ldr	r1, [r4, #16]
 8002e22:	f000 fae2 	bl	80033ea <memcpy>
 8002e26:	89a2      	ldrh	r2, [r4, #12]
 8002e28:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <__ssputs_r+0xbc>)
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	81a3      	strh	r3, [r4, #12]
 8002e32:	9b01      	ldr	r3, [sp, #4]
 8002e34:	6126      	str	r6, [r4, #16]
 8002e36:	18f6      	adds	r6, r6, r3
 8002e38:	6026      	str	r6, [r4, #0]
 8002e3a:	003e      	movs	r6, r7
 8002e3c:	6165      	str	r5, [r4, #20]
 8002e3e:	1aed      	subs	r5, r5, r3
 8002e40:	60a5      	str	r5, [r4, #8]
 8002e42:	42be      	cmp	r6, r7
 8002e44:	d900      	bls.n	8002e48 <__ssputs_r+0x78>
 8002e46:	003e      	movs	r6, r7
 8002e48:	0032      	movs	r2, r6
 8002e4a:	9903      	ldr	r1, [sp, #12]
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	f000 fa9b 	bl	8003388 <memmove>
 8002e52:	2000      	movs	r0, #0
 8002e54:	68a3      	ldr	r3, [r4, #8]
 8002e56:	1b9b      	subs	r3, r3, r6
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	199b      	adds	r3, r3, r6
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	b005      	add	sp, #20
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e64:	002a      	movs	r2, r5
 8002e66:	9802      	ldr	r0, [sp, #8]
 8002e68:	f000 fac8 	bl	80033fc <_realloc_r>
 8002e6c:	1e06      	subs	r6, r0, #0
 8002e6e:	d1e0      	bne.n	8002e32 <__ssputs_r+0x62>
 8002e70:	6921      	ldr	r1, [r4, #16]
 8002e72:	9802      	ldr	r0, [sp, #8]
 8002e74:	f7ff feb0 	bl	8002bd8 <_free_r>
 8002e78:	230c      	movs	r3, #12
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	9a02      	ldr	r2, [sp, #8]
 8002e7e:	4240      	negs	r0, r0
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	89a2      	ldrh	r2, [r4, #12]
 8002e84:	3334      	adds	r3, #52	@ 0x34
 8002e86:	4313      	orrs	r3, r2
 8002e88:	81a3      	strh	r3, [r4, #12]
 8002e8a:	e7e9      	b.n	8002e60 <__ssputs_r+0x90>
 8002e8c:	fffffb7f 	.word	0xfffffb7f

08002e90 <_svfiprintf_r>:
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	b0a1      	sub	sp, #132	@ 0x84
 8002e94:	9003      	str	r0, [sp, #12]
 8002e96:	001d      	movs	r5, r3
 8002e98:	898b      	ldrh	r3, [r1, #12]
 8002e9a:	000f      	movs	r7, r1
 8002e9c:	0016      	movs	r6, r2
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	d511      	bpl.n	8002ec6 <_svfiprintf_r+0x36>
 8002ea2:	690b      	ldr	r3, [r1, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10e      	bne.n	8002ec6 <_svfiprintf_r+0x36>
 8002ea8:	2140      	movs	r1, #64	@ 0x40
 8002eaa:	f7ff ff01 	bl	8002cb0 <_malloc_r>
 8002eae:	6038      	str	r0, [r7, #0]
 8002eb0:	6138      	str	r0, [r7, #16]
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d105      	bne.n	8002ec2 <_svfiprintf_r+0x32>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	9a03      	ldr	r2, [sp, #12]
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	4240      	negs	r0, r0
 8002ec0:	e0cf      	b.n	8003062 <_svfiprintf_r+0x1d2>
 8002ec2:	2340      	movs	r3, #64	@ 0x40
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	ac08      	add	r4, sp, #32
 8002eca:	6163      	str	r3, [r4, #20]
 8002ecc:	3320      	adds	r3, #32
 8002ece:	7663      	strb	r3, [r4, #25]
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	76a3      	strb	r3, [r4, #26]
 8002ed4:	9507      	str	r5, [sp, #28]
 8002ed6:	0035      	movs	r5, r6
 8002ed8:	782b      	ldrb	r3, [r5, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_svfiprintf_r+0x52>
 8002ede:	2b25      	cmp	r3, #37	@ 0x25
 8002ee0:	d148      	bne.n	8002f74 <_svfiprintf_r+0xe4>
 8002ee2:	1bab      	subs	r3, r5, r6
 8002ee4:	9305      	str	r3, [sp, #20]
 8002ee6:	42b5      	cmp	r5, r6
 8002ee8:	d00b      	beq.n	8002f02 <_svfiprintf_r+0x72>
 8002eea:	0032      	movs	r2, r6
 8002eec:	0039      	movs	r1, r7
 8002eee:	9803      	ldr	r0, [sp, #12]
 8002ef0:	f7ff ff6e 	bl	8002dd0 <__ssputs_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d100      	bne.n	8002efa <_svfiprintf_r+0x6a>
 8002ef8:	e0ae      	b.n	8003058 <_svfiprintf_r+0x1c8>
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	9a05      	ldr	r2, [sp, #20]
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	6163      	str	r3, [r4, #20]
 8002f02:	782b      	ldrb	r3, [r5, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d100      	bne.n	8002f0a <_svfiprintf_r+0x7a>
 8002f08:	e0a6      	b.n	8003058 <_svfiprintf_r+0x1c8>
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4252      	negs	r2, r2
 8002f10:	6062      	str	r2, [r4, #4]
 8002f12:	a904      	add	r1, sp, #16
 8002f14:	3254      	adds	r2, #84	@ 0x54
 8002f16:	1852      	adds	r2, r2, r1
 8002f18:	1c6e      	adds	r6, r5, #1
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	60e3      	str	r3, [r4, #12]
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	7013      	strb	r3, [r2, #0]
 8002f22:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002f24:	4b54      	ldr	r3, [pc, #336]	@ (8003078 <_svfiprintf_r+0x1e8>)
 8002f26:	2205      	movs	r2, #5
 8002f28:	0018      	movs	r0, r3
 8002f2a:	7831      	ldrb	r1, [r6, #0]
 8002f2c:	9305      	str	r3, [sp, #20]
 8002f2e:	f000 fa51 	bl	80033d4 <memchr>
 8002f32:	1c75      	adds	r5, r6, #1
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d11f      	bne.n	8002f78 <_svfiprintf_r+0xe8>
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	06d3      	lsls	r3, r2, #27
 8002f3c:	d504      	bpl.n	8002f48 <_svfiprintf_r+0xb8>
 8002f3e:	2353      	movs	r3, #83	@ 0x53
 8002f40:	a904      	add	r1, sp, #16
 8002f42:	185b      	adds	r3, r3, r1
 8002f44:	2120      	movs	r1, #32
 8002f46:	7019      	strb	r1, [r3, #0]
 8002f48:	0713      	lsls	r3, r2, #28
 8002f4a:	d504      	bpl.n	8002f56 <_svfiprintf_r+0xc6>
 8002f4c:	2353      	movs	r3, #83	@ 0x53
 8002f4e:	a904      	add	r1, sp, #16
 8002f50:	185b      	adds	r3, r3, r1
 8002f52:	212b      	movs	r1, #43	@ 0x2b
 8002f54:	7019      	strb	r1, [r3, #0]
 8002f56:	7833      	ldrb	r3, [r6, #0]
 8002f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f5a:	d016      	beq.n	8002f8a <_svfiprintf_r+0xfa>
 8002f5c:	0035      	movs	r5, r6
 8002f5e:	2100      	movs	r1, #0
 8002f60:	200a      	movs	r0, #10
 8002f62:	68e3      	ldr	r3, [r4, #12]
 8002f64:	782a      	ldrb	r2, [r5, #0]
 8002f66:	1c6e      	adds	r6, r5, #1
 8002f68:	3a30      	subs	r2, #48	@ 0x30
 8002f6a:	2a09      	cmp	r2, #9
 8002f6c:	d950      	bls.n	8003010 <_svfiprintf_r+0x180>
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d111      	bne.n	8002f96 <_svfiprintf_r+0x106>
 8002f72:	e017      	b.n	8002fa4 <_svfiprintf_r+0x114>
 8002f74:	3501      	adds	r5, #1
 8002f76:	e7af      	b.n	8002ed8 <_svfiprintf_r+0x48>
 8002f78:	9b05      	ldr	r3, [sp, #20]
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	1ac0      	subs	r0, r0, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4083      	lsls	r3, r0
 8002f82:	4313      	orrs	r3, r2
 8002f84:	002e      	movs	r6, r5
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	e7cc      	b.n	8002f24 <_svfiprintf_r+0x94>
 8002f8a:	9b07      	ldr	r3, [sp, #28]
 8002f8c:	1d19      	adds	r1, r3, #4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	9107      	str	r1, [sp, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db01      	blt.n	8002f9a <_svfiprintf_r+0x10a>
 8002f96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f98:	e004      	b.n	8002fa4 <_svfiprintf_r+0x114>
 8002f9a:	425b      	negs	r3, r3
 8002f9c:	60e3      	str	r3, [r4, #12]
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	6023      	str	r3, [r4, #0]
 8002fa4:	782b      	ldrb	r3, [r5, #0]
 8002fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fa8:	d10c      	bne.n	8002fc4 <_svfiprintf_r+0x134>
 8002faa:	786b      	ldrb	r3, [r5, #1]
 8002fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fae:	d134      	bne.n	800301a <_svfiprintf_r+0x18a>
 8002fb0:	9b07      	ldr	r3, [sp, #28]
 8002fb2:	3502      	adds	r5, #2
 8002fb4:	1d1a      	adds	r2, r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9207      	str	r2, [sp, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da01      	bge.n	8002fc2 <_svfiprintf_r+0x132>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc4:	4e2d      	ldr	r6, [pc, #180]	@ (800307c <_svfiprintf_r+0x1ec>)
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	0030      	movs	r0, r6
 8002fca:	7829      	ldrb	r1, [r5, #0]
 8002fcc:	f000 fa02 	bl	80033d4 <memchr>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d006      	beq.n	8002fe2 <_svfiprintf_r+0x152>
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	1b80      	subs	r0, r0, r6
 8002fd8:	4083      	lsls	r3, r0
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	3501      	adds	r5, #1
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	7829      	ldrb	r1, [r5, #0]
 8002fe4:	2206      	movs	r2, #6
 8002fe6:	4826      	ldr	r0, [pc, #152]	@ (8003080 <_svfiprintf_r+0x1f0>)
 8002fe8:	1c6e      	adds	r6, r5, #1
 8002fea:	7621      	strb	r1, [r4, #24]
 8002fec:	f000 f9f2 	bl	80033d4 <memchr>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d038      	beq.n	8003066 <_svfiprintf_r+0x1d6>
 8002ff4:	4b23      	ldr	r3, [pc, #140]	@ (8003084 <_svfiprintf_r+0x1f4>)
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d122      	bne.n	8003040 <_svfiprintf_r+0x1b0>
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	9b07      	ldr	r3, [sp, #28]
 8002ffe:	3307      	adds	r3, #7
 8003000:	4393      	bics	r3, r2
 8003002:	3308      	adds	r3, #8
 8003004:	9307      	str	r3, [sp, #28]
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	9a04      	ldr	r2, [sp, #16]
 800300a:	189b      	adds	r3, r3, r2
 800300c:	6163      	str	r3, [r4, #20]
 800300e:	e762      	b.n	8002ed6 <_svfiprintf_r+0x46>
 8003010:	4343      	muls	r3, r0
 8003012:	0035      	movs	r5, r6
 8003014:	2101      	movs	r1, #1
 8003016:	189b      	adds	r3, r3, r2
 8003018:	e7a4      	b.n	8002f64 <_svfiprintf_r+0xd4>
 800301a:	2300      	movs	r3, #0
 800301c:	200a      	movs	r0, #10
 800301e:	0019      	movs	r1, r3
 8003020:	3501      	adds	r5, #1
 8003022:	6063      	str	r3, [r4, #4]
 8003024:	782a      	ldrb	r2, [r5, #0]
 8003026:	1c6e      	adds	r6, r5, #1
 8003028:	3a30      	subs	r2, #48	@ 0x30
 800302a:	2a09      	cmp	r2, #9
 800302c:	d903      	bls.n	8003036 <_svfiprintf_r+0x1a6>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0c8      	beq.n	8002fc4 <_svfiprintf_r+0x134>
 8003032:	9109      	str	r1, [sp, #36]	@ 0x24
 8003034:	e7c6      	b.n	8002fc4 <_svfiprintf_r+0x134>
 8003036:	4341      	muls	r1, r0
 8003038:	0035      	movs	r5, r6
 800303a:	2301      	movs	r3, #1
 800303c:	1889      	adds	r1, r1, r2
 800303e:	e7f1      	b.n	8003024 <_svfiprintf_r+0x194>
 8003040:	aa07      	add	r2, sp, #28
 8003042:	9200      	str	r2, [sp, #0]
 8003044:	0021      	movs	r1, r4
 8003046:	003a      	movs	r2, r7
 8003048:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <_svfiprintf_r+0x1f8>)
 800304a:	9803      	ldr	r0, [sp, #12]
 800304c:	e000      	b.n	8003050 <_svfiprintf_r+0x1c0>
 800304e:	bf00      	nop
 8003050:	9004      	str	r0, [sp, #16]
 8003052:	9b04      	ldr	r3, [sp, #16]
 8003054:	3301      	adds	r3, #1
 8003056:	d1d6      	bne.n	8003006 <_svfiprintf_r+0x176>
 8003058:	89bb      	ldrh	r3, [r7, #12]
 800305a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800305c:	065b      	lsls	r3, r3, #25
 800305e:	d500      	bpl.n	8003062 <_svfiprintf_r+0x1d2>
 8003060:	e72c      	b.n	8002ebc <_svfiprintf_r+0x2c>
 8003062:	b021      	add	sp, #132	@ 0x84
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	aa07      	add	r2, sp, #28
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	0021      	movs	r1, r4
 800306c:	003a      	movs	r2, r7
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <_svfiprintf_r+0x1f8>)
 8003070:	9803      	ldr	r0, [sp, #12]
 8003072:	f000 f87b 	bl	800316c <_printf_i>
 8003076:	e7eb      	b.n	8003050 <_svfiprintf_r+0x1c0>
 8003078:	080034f8 	.word	0x080034f8
 800307c:	080034fe 	.word	0x080034fe
 8003080:	08003502 	.word	0x08003502
 8003084:	00000000 	.word	0x00000000
 8003088:	08002dd1 	.word	0x08002dd1

0800308c <_printf_common>:
 800308c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800308e:	0016      	movs	r6, r2
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	688a      	ldr	r2, [r1, #8]
 8003094:	690b      	ldr	r3, [r1, #16]
 8003096:	000c      	movs	r4, r1
 8003098:	9000      	str	r0, [sp, #0]
 800309a:	4293      	cmp	r3, r2
 800309c:	da00      	bge.n	80030a0 <_printf_common+0x14>
 800309e:	0013      	movs	r3, r2
 80030a0:	0022      	movs	r2, r4
 80030a2:	6033      	str	r3, [r6, #0]
 80030a4:	3243      	adds	r2, #67	@ 0x43
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d001      	beq.n	80030b0 <_printf_common+0x24>
 80030ac:	3301      	adds	r3, #1
 80030ae:	6033      	str	r3, [r6, #0]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	d502      	bpl.n	80030bc <_printf_common+0x30>
 80030b6:	6833      	ldr	r3, [r6, #0]
 80030b8:	3302      	adds	r3, #2
 80030ba:	6033      	str	r3, [r6, #0]
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	2306      	movs	r3, #6
 80030c0:	0015      	movs	r5, r2
 80030c2:	401d      	ands	r5, r3
 80030c4:	421a      	tst	r2, r3
 80030c6:	d027      	beq.n	8003118 <_printf_common+0x8c>
 80030c8:	0023      	movs	r3, r4
 80030ca:	3343      	adds	r3, #67	@ 0x43
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	1e5a      	subs	r2, r3, #1
 80030d0:	4193      	sbcs	r3, r2
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	0692      	lsls	r2, r2, #26
 80030d6:	d430      	bmi.n	800313a <_printf_common+0xae>
 80030d8:	0022      	movs	r2, r4
 80030da:	9901      	ldr	r1, [sp, #4]
 80030dc:	9800      	ldr	r0, [sp, #0]
 80030de:	9d08      	ldr	r5, [sp, #32]
 80030e0:	3243      	adds	r2, #67	@ 0x43
 80030e2:	47a8      	blx	r5
 80030e4:	3001      	adds	r0, #1
 80030e6:	d025      	beq.n	8003134 <_printf_common+0xa8>
 80030e8:	2206      	movs	r2, #6
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	2500      	movs	r5, #0
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d105      	bne.n	8003100 <_printf_common+0x74>
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	68e5      	ldr	r5, [r4, #12]
 80030f8:	1aed      	subs	r5, r5, r3
 80030fa:	43eb      	mvns	r3, r5
 80030fc:	17db      	asrs	r3, r3, #31
 80030fe:	401d      	ands	r5, r3
 8003100:	68a3      	ldr	r3, [r4, #8]
 8003102:	6922      	ldr	r2, [r4, #16]
 8003104:	4293      	cmp	r3, r2
 8003106:	dd01      	ble.n	800310c <_printf_common+0x80>
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	18ed      	adds	r5, r5, r3
 800310c:	2600      	movs	r6, #0
 800310e:	42b5      	cmp	r5, r6
 8003110:	d120      	bne.n	8003154 <_printf_common+0xc8>
 8003112:	2000      	movs	r0, #0
 8003114:	e010      	b.n	8003138 <_printf_common+0xac>
 8003116:	3501      	adds	r5, #1
 8003118:	68e3      	ldr	r3, [r4, #12]
 800311a:	6832      	ldr	r2, [r6, #0]
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	42ab      	cmp	r3, r5
 8003120:	ddd2      	ble.n	80030c8 <_printf_common+0x3c>
 8003122:	0022      	movs	r2, r4
 8003124:	2301      	movs	r3, #1
 8003126:	9901      	ldr	r1, [sp, #4]
 8003128:	9800      	ldr	r0, [sp, #0]
 800312a:	9f08      	ldr	r7, [sp, #32]
 800312c:	3219      	adds	r2, #25
 800312e:	47b8      	blx	r7
 8003130:	3001      	adds	r0, #1
 8003132:	d1f0      	bne.n	8003116 <_printf_common+0x8a>
 8003134:	2001      	movs	r0, #1
 8003136:	4240      	negs	r0, r0
 8003138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800313a:	2030      	movs	r0, #48	@ 0x30
 800313c:	18e1      	adds	r1, r4, r3
 800313e:	3143      	adds	r1, #67	@ 0x43
 8003140:	7008      	strb	r0, [r1, #0]
 8003142:	0021      	movs	r1, r4
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	3145      	adds	r1, #69	@ 0x45
 8003148:	7809      	ldrb	r1, [r1, #0]
 800314a:	18a2      	adds	r2, r4, r2
 800314c:	3243      	adds	r2, #67	@ 0x43
 800314e:	3302      	adds	r3, #2
 8003150:	7011      	strb	r1, [r2, #0]
 8003152:	e7c1      	b.n	80030d8 <_printf_common+0x4c>
 8003154:	0022      	movs	r2, r4
 8003156:	2301      	movs	r3, #1
 8003158:	9901      	ldr	r1, [sp, #4]
 800315a:	9800      	ldr	r0, [sp, #0]
 800315c:	9f08      	ldr	r7, [sp, #32]
 800315e:	321a      	adds	r2, #26
 8003160:	47b8      	blx	r7
 8003162:	3001      	adds	r0, #1
 8003164:	d0e6      	beq.n	8003134 <_printf_common+0xa8>
 8003166:	3601      	adds	r6, #1
 8003168:	e7d1      	b.n	800310e <_printf_common+0x82>
	...

0800316c <_printf_i>:
 800316c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800316e:	b08b      	sub	sp, #44	@ 0x2c
 8003170:	9206      	str	r2, [sp, #24]
 8003172:	000a      	movs	r2, r1
 8003174:	3243      	adds	r2, #67	@ 0x43
 8003176:	9307      	str	r3, [sp, #28]
 8003178:	9005      	str	r0, [sp, #20]
 800317a:	9203      	str	r2, [sp, #12]
 800317c:	7e0a      	ldrb	r2, [r1, #24]
 800317e:	000c      	movs	r4, r1
 8003180:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003182:	2a78      	cmp	r2, #120	@ 0x78
 8003184:	d809      	bhi.n	800319a <_printf_i+0x2e>
 8003186:	2a62      	cmp	r2, #98	@ 0x62
 8003188:	d80b      	bhi.n	80031a2 <_printf_i+0x36>
 800318a:	2a00      	cmp	r2, #0
 800318c:	d100      	bne.n	8003190 <_printf_i+0x24>
 800318e:	e0bc      	b.n	800330a <_printf_i+0x19e>
 8003190:	497b      	ldr	r1, [pc, #492]	@ (8003380 <_printf_i+0x214>)
 8003192:	9104      	str	r1, [sp, #16]
 8003194:	2a58      	cmp	r2, #88	@ 0x58
 8003196:	d100      	bne.n	800319a <_printf_i+0x2e>
 8003198:	e090      	b.n	80032bc <_printf_i+0x150>
 800319a:	0025      	movs	r5, r4
 800319c:	3542      	adds	r5, #66	@ 0x42
 800319e:	702a      	strb	r2, [r5, #0]
 80031a0:	e022      	b.n	80031e8 <_printf_i+0x7c>
 80031a2:	0010      	movs	r0, r2
 80031a4:	3863      	subs	r0, #99	@ 0x63
 80031a6:	2815      	cmp	r0, #21
 80031a8:	d8f7      	bhi.n	800319a <_printf_i+0x2e>
 80031aa:	f7fc ffad 	bl	8000108 <__gnu_thumb1_case_shi>
 80031ae:	0016      	.short	0x0016
 80031b0:	fff6001f 	.word	0xfff6001f
 80031b4:	fff6fff6 	.word	0xfff6fff6
 80031b8:	001ffff6 	.word	0x001ffff6
 80031bc:	fff6fff6 	.word	0xfff6fff6
 80031c0:	fff6fff6 	.word	0xfff6fff6
 80031c4:	003600a1 	.word	0x003600a1
 80031c8:	fff60080 	.word	0xfff60080
 80031cc:	00b2fff6 	.word	0x00b2fff6
 80031d0:	0036fff6 	.word	0x0036fff6
 80031d4:	fff6fff6 	.word	0xfff6fff6
 80031d8:	0084      	.short	0x0084
 80031da:	0025      	movs	r5, r4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	3542      	adds	r5, #66	@ 0x42
 80031e0:	1d11      	adds	r1, r2, #4
 80031e2:	6019      	str	r1, [r3, #0]
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	702b      	strb	r3, [r5, #0]
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0a0      	b.n	800332e <_printf_i+0x1c2>
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	6809      	ldr	r1, [r1, #0]
 80031f0:	1d02      	adds	r2, r0, #4
 80031f2:	060d      	lsls	r5, r1, #24
 80031f4:	d50b      	bpl.n	800320e <_printf_i+0xa2>
 80031f6:	6806      	ldr	r6, [r0, #0]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	da03      	bge.n	8003206 <_printf_i+0x9a>
 80031fe:	232d      	movs	r3, #45	@ 0x2d
 8003200:	9a03      	ldr	r2, [sp, #12]
 8003202:	4276      	negs	r6, r6
 8003204:	7013      	strb	r3, [r2, #0]
 8003206:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <_printf_i+0x214>)
 8003208:	270a      	movs	r7, #10
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	e018      	b.n	8003240 <_printf_i+0xd4>
 800320e:	6806      	ldr	r6, [r0, #0]
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	0649      	lsls	r1, r1, #25
 8003214:	d5f1      	bpl.n	80031fa <_printf_i+0x8e>
 8003216:	b236      	sxth	r6, r6
 8003218:	e7ef      	b.n	80031fa <_printf_i+0x8e>
 800321a:	6808      	ldr	r0, [r1, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	c940      	ldmia	r1!, {r6}
 8003220:	0605      	lsls	r5, r0, #24
 8003222:	d402      	bmi.n	800322a <_printf_i+0xbe>
 8003224:	0640      	lsls	r0, r0, #25
 8003226:	d500      	bpl.n	800322a <_printf_i+0xbe>
 8003228:	b2b6      	uxth	r6, r6
 800322a:	6019      	str	r1, [r3, #0]
 800322c:	4b54      	ldr	r3, [pc, #336]	@ (8003380 <_printf_i+0x214>)
 800322e:	270a      	movs	r7, #10
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	2a6f      	cmp	r2, #111	@ 0x6f
 8003234:	d100      	bne.n	8003238 <_printf_i+0xcc>
 8003236:	3f02      	subs	r7, #2
 8003238:	0023      	movs	r3, r4
 800323a:	2200      	movs	r2, #0
 800323c:	3343      	adds	r3, #67	@ 0x43
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	60a3      	str	r3, [r4, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db03      	blt.n	8003250 <_printf_i+0xe4>
 8003248:	2104      	movs	r1, #4
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	438a      	bics	r2, r1
 800324e:	6022      	str	r2, [r4, #0]
 8003250:	2e00      	cmp	r6, #0
 8003252:	d102      	bne.n	800325a <_printf_i+0xee>
 8003254:	9d03      	ldr	r5, [sp, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <_printf_i+0x108>
 800325a:	9d03      	ldr	r5, [sp, #12]
 800325c:	0030      	movs	r0, r6
 800325e:	0039      	movs	r1, r7
 8003260:	f7fc ffe2 	bl	8000228 <__aeabi_uidivmod>
 8003264:	9b04      	ldr	r3, [sp, #16]
 8003266:	3d01      	subs	r5, #1
 8003268:	5c5b      	ldrb	r3, [r3, r1]
 800326a:	702b      	strb	r3, [r5, #0]
 800326c:	0033      	movs	r3, r6
 800326e:	0006      	movs	r6, r0
 8003270:	429f      	cmp	r7, r3
 8003272:	d9f3      	bls.n	800325c <_printf_i+0xf0>
 8003274:	2f08      	cmp	r7, #8
 8003276:	d109      	bne.n	800328c <_printf_i+0x120>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	07db      	lsls	r3, r3, #31
 800327c:	d506      	bpl.n	800328c <_printf_i+0x120>
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	6923      	ldr	r3, [r4, #16]
 8003282:	429a      	cmp	r2, r3
 8003284:	dc02      	bgt.n	800328c <_printf_i+0x120>
 8003286:	2330      	movs	r3, #48	@ 0x30
 8003288:	3d01      	subs	r5, #1
 800328a:	702b      	strb	r3, [r5, #0]
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	1b5b      	subs	r3, r3, r5
 8003290:	6123      	str	r3, [r4, #16]
 8003292:	9b07      	ldr	r3, [sp, #28]
 8003294:	0021      	movs	r1, r4
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	9805      	ldr	r0, [sp, #20]
 800329a:	9b06      	ldr	r3, [sp, #24]
 800329c:	aa09      	add	r2, sp, #36	@ 0x24
 800329e:	f7ff fef5 	bl	800308c <_printf_common>
 80032a2:	3001      	adds	r0, #1
 80032a4:	d148      	bne.n	8003338 <_printf_i+0x1cc>
 80032a6:	2001      	movs	r0, #1
 80032a8:	4240      	negs	r0, r0
 80032aa:	b00b      	add	sp, #44	@ 0x2c
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ae:	2220      	movs	r2, #32
 80032b0:	6809      	ldr	r1, [r1, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	6022      	str	r2, [r4, #0]
 80032b6:	2278      	movs	r2, #120	@ 0x78
 80032b8:	4932      	ldr	r1, [pc, #200]	@ (8003384 <_printf_i+0x218>)
 80032ba:	9104      	str	r1, [sp, #16]
 80032bc:	0021      	movs	r1, r4
 80032be:	3145      	adds	r1, #69	@ 0x45
 80032c0:	700a      	strb	r2, [r1, #0]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	c940      	ldmia	r1!, {r6}
 80032c8:	0610      	lsls	r0, r2, #24
 80032ca:	d402      	bmi.n	80032d2 <_printf_i+0x166>
 80032cc:	0650      	lsls	r0, r2, #25
 80032ce:	d500      	bpl.n	80032d2 <_printf_i+0x166>
 80032d0:	b2b6      	uxth	r6, r6
 80032d2:	6019      	str	r1, [r3, #0]
 80032d4:	07d3      	lsls	r3, r2, #31
 80032d6:	d502      	bpl.n	80032de <_printf_i+0x172>
 80032d8:	2320      	movs	r3, #32
 80032da:	4313      	orrs	r3, r2
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	2e00      	cmp	r6, #0
 80032e0:	d001      	beq.n	80032e6 <_printf_i+0x17a>
 80032e2:	2710      	movs	r7, #16
 80032e4:	e7a8      	b.n	8003238 <_printf_i+0xcc>
 80032e6:	2220      	movs	r2, #32
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	4393      	bics	r3, r2
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	e7f8      	b.n	80032e2 <_printf_i+0x176>
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	680d      	ldr	r5, [r1, #0]
 80032f4:	1d10      	adds	r0, r2, #4
 80032f6:	6949      	ldr	r1, [r1, #20]
 80032f8:	6018      	str	r0, [r3, #0]
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	062e      	lsls	r6, r5, #24
 80032fe:	d501      	bpl.n	8003304 <_printf_i+0x198>
 8003300:	6019      	str	r1, [r3, #0]
 8003302:	e002      	b.n	800330a <_printf_i+0x19e>
 8003304:	066d      	lsls	r5, r5, #25
 8003306:	d5fb      	bpl.n	8003300 <_printf_i+0x194>
 8003308:	8019      	strh	r1, [r3, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	9d03      	ldr	r5, [sp, #12]
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	e7bf      	b.n	8003292 <_printf_i+0x126>
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	1d11      	adds	r1, r2, #4
 8003316:	6019      	str	r1, [r3, #0]
 8003318:	6815      	ldr	r5, [r2, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	0028      	movs	r0, r5
 800331e:	6862      	ldr	r2, [r4, #4]
 8003320:	f000 f858 	bl	80033d4 <memchr>
 8003324:	2800      	cmp	r0, #0
 8003326:	d001      	beq.n	800332c <_printf_i+0x1c0>
 8003328:	1b40      	subs	r0, r0, r5
 800332a:	6060      	str	r0, [r4, #4]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	6123      	str	r3, [r4, #16]
 8003330:	2300      	movs	r3, #0
 8003332:	9a03      	ldr	r2, [sp, #12]
 8003334:	7013      	strb	r3, [r2, #0]
 8003336:	e7ac      	b.n	8003292 <_printf_i+0x126>
 8003338:	002a      	movs	r2, r5
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	9906      	ldr	r1, [sp, #24]
 800333e:	9805      	ldr	r0, [sp, #20]
 8003340:	9d07      	ldr	r5, [sp, #28]
 8003342:	47a8      	blx	r5
 8003344:	3001      	adds	r0, #1
 8003346:	d0ae      	beq.n	80032a6 <_printf_i+0x13a>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	079b      	lsls	r3, r3, #30
 800334c:	d415      	bmi.n	800337a <_printf_i+0x20e>
 800334e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003350:	68e0      	ldr	r0, [r4, #12]
 8003352:	4298      	cmp	r0, r3
 8003354:	daa9      	bge.n	80032aa <_printf_i+0x13e>
 8003356:	0018      	movs	r0, r3
 8003358:	e7a7      	b.n	80032aa <_printf_i+0x13e>
 800335a:	0022      	movs	r2, r4
 800335c:	2301      	movs	r3, #1
 800335e:	9906      	ldr	r1, [sp, #24]
 8003360:	9805      	ldr	r0, [sp, #20]
 8003362:	9e07      	ldr	r6, [sp, #28]
 8003364:	3219      	adds	r2, #25
 8003366:	47b0      	blx	r6
 8003368:	3001      	adds	r0, #1
 800336a:	d09c      	beq.n	80032a6 <_printf_i+0x13a>
 800336c:	3501      	adds	r5, #1
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	42ab      	cmp	r3, r5
 8003376:	dcf0      	bgt.n	800335a <_printf_i+0x1ee>
 8003378:	e7e9      	b.n	800334e <_printf_i+0x1e2>
 800337a:	2500      	movs	r5, #0
 800337c:	e7f7      	b.n	800336e <_printf_i+0x202>
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	08003509 	.word	0x08003509
 8003384:	0800351a 	.word	0x0800351a

08003388 <memmove>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4288      	cmp	r0, r1
 800338c:	d806      	bhi.n	800339c <memmove+0x14>
 800338e:	2300      	movs	r3, #0
 8003390:	429a      	cmp	r2, r3
 8003392:	d008      	beq.n	80033a6 <memmove+0x1e>
 8003394:	5ccc      	ldrb	r4, [r1, r3]
 8003396:	54c4      	strb	r4, [r0, r3]
 8003398:	3301      	adds	r3, #1
 800339a:	e7f9      	b.n	8003390 <memmove+0x8>
 800339c:	188b      	adds	r3, r1, r2
 800339e:	4298      	cmp	r0, r3
 80033a0:	d2f5      	bcs.n	800338e <memmove+0x6>
 80033a2:	3a01      	subs	r2, #1
 80033a4:	d200      	bcs.n	80033a8 <memmove+0x20>
 80033a6:	bd10      	pop	{r4, pc}
 80033a8:	5c8b      	ldrb	r3, [r1, r2]
 80033aa:	5483      	strb	r3, [r0, r2]
 80033ac:	e7f9      	b.n	80033a2 <memmove+0x1a>
	...

080033b0 <_sbrk_r>:
 80033b0:	2300      	movs	r3, #0
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	4d06      	ldr	r5, [pc, #24]	@ (80033d0 <_sbrk_r+0x20>)
 80033b6:	0004      	movs	r4, r0
 80033b8:	0008      	movs	r0, r1
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	f7fd fa06 	bl	80007cc <_sbrk>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d103      	bne.n	80033cc <_sbrk_r+0x1c>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d000      	beq.n	80033cc <_sbrk_r+0x1c>
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	2000036c 	.word	0x2000036c

080033d4 <memchr>:
 80033d4:	b2c9      	uxtb	r1, r1
 80033d6:	1882      	adds	r2, r0, r2
 80033d8:	4290      	cmp	r0, r2
 80033da:	d101      	bne.n	80033e0 <memchr+0xc>
 80033dc:	2000      	movs	r0, #0
 80033de:	4770      	bx	lr
 80033e0:	7803      	ldrb	r3, [r0, #0]
 80033e2:	428b      	cmp	r3, r1
 80033e4:	d0fb      	beq.n	80033de <memchr+0xa>
 80033e6:	3001      	adds	r0, #1
 80033e8:	e7f6      	b.n	80033d8 <memchr+0x4>

080033ea <memcpy>:
 80033ea:	2300      	movs	r3, #0
 80033ec:	b510      	push	{r4, lr}
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d100      	bne.n	80033f4 <memcpy+0xa>
 80033f2:	bd10      	pop	{r4, pc}
 80033f4:	5ccc      	ldrb	r4, [r1, r3]
 80033f6:	54c4      	strb	r4, [r0, r3]
 80033f8:	3301      	adds	r3, #1
 80033fa:	e7f8      	b.n	80033ee <memcpy+0x4>

080033fc <_realloc_r>:
 80033fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033fe:	0006      	movs	r6, r0
 8003400:	000c      	movs	r4, r1
 8003402:	0015      	movs	r5, r2
 8003404:	2900      	cmp	r1, #0
 8003406:	d105      	bne.n	8003414 <_realloc_r+0x18>
 8003408:	0011      	movs	r1, r2
 800340a:	f7ff fc51 	bl	8002cb0 <_malloc_r>
 800340e:	0004      	movs	r4, r0
 8003410:	0020      	movs	r0, r4
 8003412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003414:	2a00      	cmp	r2, #0
 8003416:	d103      	bne.n	8003420 <_realloc_r+0x24>
 8003418:	f7ff fbde 	bl	8002bd8 <_free_r>
 800341c:	2400      	movs	r4, #0
 800341e:	e7f7      	b.n	8003410 <_realloc_r+0x14>
 8003420:	f000 f81b 	bl	800345a <_malloc_usable_size_r>
 8003424:	0007      	movs	r7, r0
 8003426:	4285      	cmp	r5, r0
 8003428:	d802      	bhi.n	8003430 <_realloc_r+0x34>
 800342a:	0843      	lsrs	r3, r0, #1
 800342c:	42ab      	cmp	r3, r5
 800342e:	d3ef      	bcc.n	8003410 <_realloc_r+0x14>
 8003430:	0029      	movs	r1, r5
 8003432:	0030      	movs	r0, r6
 8003434:	f7ff fc3c 	bl	8002cb0 <_malloc_r>
 8003438:	9001      	str	r0, [sp, #4]
 800343a:	2800      	cmp	r0, #0
 800343c:	d0ee      	beq.n	800341c <_realloc_r+0x20>
 800343e:	002a      	movs	r2, r5
 8003440:	42bd      	cmp	r5, r7
 8003442:	d900      	bls.n	8003446 <_realloc_r+0x4a>
 8003444:	003a      	movs	r2, r7
 8003446:	0021      	movs	r1, r4
 8003448:	9801      	ldr	r0, [sp, #4]
 800344a:	f7ff ffce 	bl	80033ea <memcpy>
 800344e:	0021      	movs	r1, r4
 8003450:	0030      	movs	r0, r6
 8003452:	f7ff fbc1 	bl	8002bd8 <_free_r>
 8003456:	9c01      	ldr	r4, [sp, #4]
 8003458:	e7da      	b.n	8003410 <_realloc_r+0x14>

0800345a <_malloc_usable_size_r>:
 800345a:	1f0b      	subs	r3, r1, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1f18      	subs	r0, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	da01      	bge.n	8003468 <_malloc_usable_size_r+0xe>
 8003464:	580b      	ldr	r3, [r1, r0]
 8003466:	18c0      	adds	r0, r0, r3
 8003468:	4770      	bx	lr
	...

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
