
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003490  08003490  00004490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003538  08003538  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003538  08003538  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003540  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000005c  0800359c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800359c  00005518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000907e  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001983  00000000  00000000  0000e102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e5  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010738  00000000  00000000  00010815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab05  00000000  00000000  00020f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061a3a  00000000  00000000  0002ba52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d48c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  0008d4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0008f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003478 	.word	0x08003478

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003478 	.word	0x08003478

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	@ 0x24
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb33 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f82f 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f93d 	bl	80004c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f000 f915 	bl	8000474 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f8e3 	bl	8000414 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800024e:	f000 f885 	bl	800035c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  char msg[] = "lorem ipsum dolor sit amet\r\n";
 8000252:	003b      	movs	r3, r7
 8000254:	4a0e      	ldr	r2, [pc, #56]	@ (8000290 <main+0x5c>)
 8000256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000258:	c313      	stmia	r3!, {r0, r1, r4}
 800025a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025c:	c313      	stmia	r3!, {r0, r1, r4}
 800025e:	6811      	ldr	r1, [r2, #0]
 8000260:	6019      	str	r1, [r3, #0]
 8000262:	7912      	ldrb	r2, [r2, #4]
 8000264:	711a      	strb	r2, [r3, #4]

  if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, ADC_BUF_LEN) != HAL_OK)
 8000266:	2380      	movs	r3, #128	@ 0x80
 8000268:	005a      	lsls	r2, r3, #1
 800026a:	490a      	ldr	r1, [pc, #40]	@ (8000294 <main+0x60>)
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <main+0x64>)
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fce0 	bl	8000c34 <HAL_ADC_Start_DMA>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d007      	beq.n	8000288 <main+0x54>
  {
    sprintf(msg, "Error starting ADC DMA\r\n");
 8000278:	4a08      	ldr	r2, [pc, #32]	@ (800029c <main+0x68>)
 800027a:	003b      	movs	r3, r7
 800027c:	0011      	movs	r1, r2
 800027e:	0018      	movs	r0, r3
 8000280:	f002 fc5c 	bl	8002b3c <siprintf>
    // Handle error
    Error_Handler();
 8000284:	f000 f964 	bl	8000550 <Error_Handler>
    //HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);

    // toggle LED1
    //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    //HAL_Delay(500);
	HAL_Delay(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fb6f 	bl	800096c <HAL_Delay>
 800028e:	e7fb      	b.n	8000288 <main+0x54>
 8000290:	080034ac 	.word	0x080034ac
 8000294:	200001c8 	.word	0x200001c8
 8000298:	20000078 	.word	0x20000078
 800029c:	08003490 	.word	0x08003490

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b095      	sub	sp, #84	@ 0x54
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2420      	movs	r4, #32
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2330      	movs	r3, #48	@ 0x30
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 fc63 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	2310      	movs	r3, #16
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	0018      	movs	r0, r3
 80002bc:	2310      	movs	r3, #16
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fc5b 	bl	8002b7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2310      	movs	r3, #16
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f002 fc54 	bl	8002b7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2212      	movs	r2, #18
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2201      	movs	r2, #1
 80002e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2210      	movs	r2, #16
 80002ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fb45 	bl	800198c <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000306:	f000 f923 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	2110      	movs	r1, #16
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2100      	movs	r1, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fe49 	bl	8001fc0 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000332:	f000 f90d 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000336:	003b      	movs	r3, r7
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	f001 ff7f 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800034e:	f000 f8ff 	bl	8000550 <Error_Handler>
  }
}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b015      	add	sp, #84	@ 0x54
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	0018      	movs	r0, r3
 8000366:	230c      	movs	r3, #12
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f002 fc06 	bl	8002b7c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000370:	4b26      	ldr	r3, [pc, #152]	@ (800040c <MX_ADC_Init+0xb0>)
 8000372:	4a27      	ldr	r2, [pc, #156]	@ (8000410 <MX_ADC_Init+0xb4>)
 8000374:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000376:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_ADC_Init+0xb0>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800037c:	4b23      	ldr	r3, [pc, #140]	@ (800040c <MX_ADC_Init+0xb0>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_ADC_Init+0xb0>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <MX_ADC_Init+0xb0>)
 800038a:	2201      	movs	r2, #1
 800038c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038e:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_ADC_Init+0xb0>)
 8000390:	2204      	movs	r2, #4
 8000392:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000394:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <MX_ADC_Init+0xb0>)
 8000396:	2200      	movs	r2, #0
 8000398:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <MX_ADC_Init+0xb0>)
 800039c:	2200      	movs	r2, #0
 800039e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_ADC_Init+0xb0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b19      	ldr	r3, [pc, #100]	@ (800040c <MX_ADC_Init+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_ADC_Init+0xb0>)
 80003ae:	22c2      	movs	r2, #194	@ 0xc2
 80003b0:	32ff      	adds	r2, #255	@ 0xff
 80003b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_ADC_Init+0xb0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_ADC_Init+0xb0>)
 80003bc:	2224      	movs	r2, #36	@ 0x24
 80003be:	2101      	movs	r1, #1
 80003c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_ADC_Init+0xb0>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_ADC_Init+0xb0>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 faf2 	bl	80009b4 <HAL_ADC_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003d4:	f000 f8bc 	bl	8000550 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2280      	movs	r2, #128	@ 0x80
 80003e2:	0152      	lsls	r2, r2, #5
 80003e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2280      	movs	r2, #128	@ 0x80
 80003ea:	0552      	lsls	r2, r2, #21
 80003ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_ADC_Init+0xb0>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fcb7 	bl	8000d68 <HAL_ADC_ConfigChannel>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003fe:	f000 f8a7 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b004      	add	sp, #16
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000078 	.word	0x20000078
 8000410:	40012400 	.word	0x40012400

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_USART1_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	@ (8000470 <MX_USART1_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041e:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000420:	22e1      	movs	r2, #225	@ 0xe1
 8000422:	0252      	lsls	r2, r2, #9
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <MX_USART1_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000456:	4b05      	ldr	r3, [pc, #20]	@ (800046c <MX_USART1_UART_Init+0x58>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 ffc3 	bl	80023e4 <HAL_UART_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f875 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000fc 	.word	0x200000fc
 8000470:	40013800 	.word	0x40013800

08000474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <MX_DMA_Init+0x48>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <MX_DMA_Init+0x48>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <MX_DMA_Init+0x48>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	2009      	movs	r0, #9
 8000498:	f000 ff28 	bl	80012ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800049c:	2009      	movs	r0, #9
 800049e:	f000 ff3a 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	200a      	movs	r0, #10
 80004a8:	f000 ff20 	bl	80012ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f000 ff32 	bl	8001316 <HAL_NVIC_EnableIRQ>

}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	@ 0x24
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	240c      	movs	r4, #12
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2314      	movs	r3, #20
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f002 fb53 	bl	8002b7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_GPIO_Init+0x88>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <MX_GPIO_Init+0x88>)
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	0289      	lsls	r1, r1, #10
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_GPIO_Init+0x88>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	029b      	lsls	r3, r3, #10
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_GPIO_Init+0x88>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_GPIO_Init+0x88>)
 80004f8:	2180      	movs	r1, #128	@ 0x80
 80004fa:	02c9      	lsls	r1, r1, #11
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_GPIO_Init+0x88>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	02db      	lsls	r3, r3, #11
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_GPIO_Init+0x8c>)
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fa1b 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2208      	movs	r2, #8
 8000520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000534:	187b      	adds	r3, r7, r1
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <MX_GPIO_Init+0x8c>)
 8000538:	0019      	movs	r1, r3
 800053a:	0010      	movs	r0, r2
 800053c:	f001 f8a0 	bl	8001680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b009      	add	sp, #36	@ 0x24
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	48000400 	.word	0x48000400

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	e7fd      	b.n	8000558 <Error_Handler+0x8>

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_MspInit+0x44>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_MspInit+0x44>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_MspInit+0x44>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_MspInit+0x44>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_MspInit+0x44>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b08b      	sub	sp, #44	@ 0x2c
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	2414      	movs	r4, #20
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 fae0 	bl	8002b7c <memset>
  if(hadc->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <HAL_ADC_MspInit+0xd4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d153      	bne.n	800066e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005c8:	699a      	ldr	r2, [r3, #24]
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	0089      	lsls	r1, r1, #2
 80005d0:	430a      	orrs	r2, r1
 80005d2:	619a      	str	r2, [r3, #24]
 80005d4:	4b29      	ldr	r3, [pc, #164]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005d6:	699a      	ldr	r2, [r3, #24]
 80005d8:	2380      	movs	r3, #128	@ 0x80
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2203      	movs	r2, #3
 8000608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	193a      	adds	r2, r7, r4
 8000612:	2390      	movs	r3, #144	@ 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f001 f831 	bl	8001680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000620:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <HAL_ADC_MspInit+0xe0>)
 8000622:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	00d2      	lsls	r2, r2, #3
 8000644:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000648:	2220      	movs	r2, #32
 800064a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe7b 	bl	8001350 <HAL_DMA_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800065e:	f7ff ff77 	bl	8000550 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b00b      	add	sp, #44	@ 0x2c
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	40012400 	.word	0x40012400
 800067c:	40021000 	.word	0x40021000
 8000680:	200000b8 	.word	0x200000b8
 8000684:	40020008 	.word	0x40020008

08000688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b08b      	sub	sp, #44	@ 0x2c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2414      	movs	r4, #20
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 fa6e 	bl	8002b7c <memset>
  if(huart->Instance==USART1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000764 <HAL_UART_MspInit+0xdc>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d158      	bne.n	800075c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	01c9      	lsls	r1, r1, #7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	619a      	str	r2, [r3, #24]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006ba:	699a      	ldr	r2, [r3, #24]
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	01db      	lsls	r3, r3, #7
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	0289      	lsls	r1, r1, #10
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <HAL_UART_MspInit+0xe0>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	@ 0x80
 80006da:	029b      	lsls	r3, r3, #10
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2202      	movs	r2, #2
 80006ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2203      	movs	r2, #3
 80006fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2201      	movs	r2, #1
 8000700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	187a      	adds	r2, r7, r1
 8000704:	2390      	movs	r3, #144	@ 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 ffb8 	bl	8001680 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000712:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <HAL_UART_MspInit+0xe8>)
 8000714:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000718:	2210      	movs	r2, #16
 800071a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <HAL_UART_MspInit+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_UART_MspInit+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_UART_MspInit+0xe4>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fe04 	bl	8001350 <HAL_DMA_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800074c:	f7ff ff00 	bl	8000550 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a06      	ldr	r2, [pc, #24]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000754:	671a      	str	r2, [r3, #112]	@ 0x70
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_UART_MspInit+0xe4>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00b      	add	sp, #44	@ 0x2c
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40013800 	.word	0x40013800
 8000768:	40021000 	.word	0x40021000
 800076c:	20000184 	.word	0x20000184
 8000770:	4002001c 	.word	0x4002001c

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f8ca 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <DMA1_Channel1_IRQHandler+0x14>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fe7c 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	200000b8 	.word	0x200000b8

080007c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fe70 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	20000184 	.word	0x20000184

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f002 f9c0 	bl	8002b8c <__errno>
 800080c:	0003      	movs	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	2301      	movs	r3, #1
 8000814:	425b      	negs	r3, r3
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	18d2      	adds	r2, r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <_sbrk+0x64>)
 8000828:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b006      	add	sp, #24
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20001000 	.word	0x20001000
 8000838:	00000400 	.word	0x00000400
 800083c:	200003c8 	.word	0x200003c8
 8000840:	20000518 	.word	0x20000518

08000844 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000850:	480d      	ldr	r0, [pc, #52]	@ (8000888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000852:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000854:	f7ff fff6 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	@ (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	@ (800089c <LoopForever+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800087e:	f002 f98b 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fcd7 	bl	8000234 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   r0, =_estack
 8000888:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000894:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 8000898:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800089c:	20000518 	.word	0x20000518

080008a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <HAL_Init+0x24>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_Init+0x24>)
 80008ae:	2110      	movs	r1, #16
 80008b0:	430a      	orrs	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f809 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ba:	f7ff fe4f 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_InitTick+0x5c>)
 80008d6:	681c      	ldr	r4, [r3, #0]
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_InitTick+0x60>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	23fa      	movs	r3, #250	@ 0xfa
 80008e0:	0098      	lsls	r0, r3, #2
 80008e2:	f7ff fc1b 	bl	800011c <__udivsi3>
 80008e6:	0003      	movs	r3, r0
 80008e8:	0019      	movs	r1, r3
 80008ea:	0020      	movs	r0, r4
 80008ec:	f7ff fc16 	bl	800011c <__udivsi3>
 80008f0:	0003      	movs	r3, r0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fd1f 	bl	8001336 <HAL_SYSTICK_Config>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e00f      	b.n	8000920 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d80b      	bhi.n	800091e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2301      	movs	r3, #1
 800090a:	425b      	negs	r3, r3
 800090c:	2200      	movs	r2, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fcec 	bl	80012ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_InitTick+0x64>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b003      	add	sp, #12
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	18d2      	adds	r2, r2, r3
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <HAL_IncTick+0x20>)
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	20000008 	.word	0x20000008
 8000954:	200003cc 	.word	0x200003cc

08000958 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	200003cc 	.word	0x200003cc

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	0003      	movs	r3, r0
 800097a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001a      	movs	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	189b      	adds	r3, r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	0002      	movs	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	20000008 	.word	0x20000008

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	230f      	movs	r3, #15
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e125      	b.n	8000c1e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10a      	bne.n	80009f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2234      	movs	r2, #52	@ 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fdda 	bl	80005a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f4:	2210      	movs	r2, #16
 80009f6:	4013      	ands	r3, r2
 80009f8:	d000      	beq.n	80009fc <HAL_ADC_Init+0x48>
 80009fa:	e103      	b.n	8000c04 <HAL_ADC_Init+0x250>
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d000      	beq.n	8000a08 <HAL_ADC_Init+0x54>
 8000a06:	e0fd      	b.n	8000c04 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a12:	d000      	beq.n	8000a16 <HAL_ADC_Init+0x62>
 8000a14:	e0f6      	b.n	8000c04 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1a:	4a83      	ldr	r2, [pc, #524]	@ (8000c28 <HAL_ADC_Init+0x274>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2202      	movs	r2, #2
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d112      	bne.n	8000a5a <HAL_ADC_Init+0xa6>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d009      	beq.n	8000a56 <HAL_ADC_Init+0xa2>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d101      	bne.n	8000a5a <HAL_ADC_Init+0xa6>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_ADC_Init+0xa8>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d116      	bne.n	8000a8e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2218      	movs	r2, #24
 8000a68:	4393      	bics	r3, r2
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	0899      	lsrs	r1, r3, #2
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4964      	ldr	r1, [pc, #400]	@ (8000c2c <HAL_ADC_Init+0x278>)
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7e1b      	ldrb	r3, [r3, #24]
 8000aa2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7e5b      	ldrb	r3, [r3, #25]
 8000aa8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000aaa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7e9b      	ldrb	r3, [r3, #26]
 8000ab0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ab2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d002      	beq.n	8000ac2 <HAL_ADC_Init+0x10e>
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	015b      	lsls	r3, r3, #5
 8000ac0:	e000      	b.n	8000ac4 <HAL_ADC_Init+0x110>
 8000ac2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ac4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000aca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_ADC_Init+0x124>
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	e000      	b.n	8000ada <HAL_ADC_Init+0x126>
 8000ad8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ada:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2124      	movs	r1, #36	@ 0x24
 8000ae0:	5c5b      	ldrb	r3, [r3, r1]
 8000ae2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ae4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7edb      	ldrb	r3, [r3, #27]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d115      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7e9b      	ldrb	r3, [r3, #26]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	0252      	lsls	r2, r2, #9
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	e00b      	b.n	8000b20 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b18:	2201      	movs	r2, #1
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69da      	ldr	r2, [r3, #28]
 8000b24:	23c2      	movs	r3, #194	@ 0xc2
 8000b26:	33ff      	adds	r3, #255	@ 0xff
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d007      	beq.n	8000b3c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b34:	4313      	orrs	r3, r2
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68d9      	ldr	r1, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	055b      	lsls	r3, r3, #21
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d01b      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d017      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d013      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d00f      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d00b      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d007      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	d003      	beq.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	d112      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2107      	movs	r1, #7
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6959      	ldr	r1, [r3, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	2207      	movs	r2, #7
 8000bac:	401a      	ands	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <HAL_ADC_Init+0x27c>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d10b      	bne.n	8000bde <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4393      	bics	r3, r2
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bdc:	e01c      	b.n	8000c18 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be2:	2212      	movs	r2, #18
 8000be4:	4393      	bics	r3, r2
 8000be6:	2210      	movs	r2, #16
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c02:	e009      	b.n	8000c18 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c08:	2210      	movs	r2, #16
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	fffffefd 	.word	0xfffffefd
 8000c2c:	fffe0219 	.word	0xfffe0219
 8000c30:	833fffe7 	.word	0x833fffe7

08000c34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2317      	movs	r3, #23
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4013      	ands	r3, r2
 8000c52:	d15e      	bne.n	8000d12 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2234      	movs	r2, #52	@ 0x34
 8000c58:	5c9b      	ldrb	r3, [r3, r2]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Start_DMA+0x2e>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e05e      	b.n	8000d20 <HAL_ADC_Start_DMA+0xec>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2234      	movs	r2, #52	@ 0x34
 8000c66:	2101      	movs	r1, #1
 8000c68:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	7e5b      	ldrb	r3, [r3, #25]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d007      	beq.n	8000c82 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000c72:	2317      	movs	r3, #23
 8000c74:	18fc      	adds	r4, r7, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 f983 	bl	8000f84 <ADC_Enable>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c82:	2317      	movs	r3, #23
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d146      	bne.n	8000d1a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c90:	4a25      	ldr	r2, [pc, #148]	@ (8000d28 <HAL_ADC_Start_DMA+0xf4>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	0052      	lsls	r2, r2, #1
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2234      	movs	r2, #52	@ 0x34
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_ADC_Start_DMA+0xf8>)
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d30 <HAL_ADC_Start_DMA+0xfc>)
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <HAL_ADC_Start_DMA+0x100>)
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	221c      	movs	r2, #28
 8000cca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3340      	adds	r3, #64	@ 0x40
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f000 fb70 	bl	80013e0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	e003      	b.n	8000d1a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d12:	2317      	movs	r3, #23
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2202      	movs	r2, #2
 8000d18:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d1a:	2317      	movs	r3, #23
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b007      	add	sp, #28
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	fffff0fe 	.word	0xfffff0fe
 8000d2c:	0800108d 	.word	0x0800108d
 8000d30:	08001141 	.word	0x08001141
 8000d34:	0800115f 	.word	0x0800115f

08000d38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d72:	230f      	movs	r3, #15
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	055b      	lsls	r3, r3, #21
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d011      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x46>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00d      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x46>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d009      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x46>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d005      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x46>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d001      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x46>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2234      	movs	r2, #52	@ 0x34
 8000db2:	5c9b      	ldrb	r3, [r3, r2]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d101      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x54>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e0d0      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x1f6>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2234      	movs	r2, #52	@ 0x34
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2204      	movs	r2, #4
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d000      	beq.n	8000dd2 <HAL_ADC_ConfigChannel+0x6a>
 8000dd0:	e0b4      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4a64      	ldr	r2, [pc, #400]	@ (8000f68 <HAL_ADC_ConfigChannel+0x200>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d100      	bne.n	8000dde <HAL_ADC_ConfigChannel+0x76>
 8000ddc:	e082      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2201      	movs	r2, #1
 8000dea:	409a      	lsls	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d037      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d033      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d02f      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d02b      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d027      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d023      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d01f      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d01b      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2107      	movs	r1, #7
 8000e44:	400b      	ands	r3, r1
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d012      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2107      	movs	r1, #7
 8000e56:	438a      	bics	r2, r1
 8000e58:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6959      	ldr	r1, [r3, #20]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2207      	movs	r2, #7
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b10      	cmp	r3, #16
 8000e76:	d007      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x120>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b11      	cmp	r3, #17
 8000e7e:	d003      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x120>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b12      	cmp	r3, #18
 8000e86:	d163      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e88:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <HAL_ADC_ConfigChannel+0x204>)
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d009      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x140>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d102      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x13a>
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	03db      	lsls	r3, r3, #15
 8000ea0:	e004      	b.n	8000eac <HAL_ADC_ConfigChannel+0x144>
 8000ea2:	2380      	movs	r3, #128	@ 0x80
 8000ea4:	045b      	lsls	r3, r3, #17
 8000ea6:	e001      	b.n	8000eac <HAL_ADC_ConfigChannel+0x144>
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	4a2f      	ldr	r2, [pc, #188]	@ (8000f6c <HAL_ADC_ConfigChannel+0x204>)
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	d14a      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eba:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <HAL_ADC_ConfigChannel+0x208>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	492d      	ldr	r1, [pc, #180]	@ (8000f74 <HAL_ADC_ConfigChannel+0x20c>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff f92b 	bl	800011c <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	001a      	movs	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed4:	e002      	b.n	8000edc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f9      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x16e>
 8000ee2:	e035      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4099      	lsls	r1, r3
 8000ef2:	000b      	movs	r3, r1
 8000ef4:	43d9      	mvns	r1, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	400a      	ands	r2, r1
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b10      	cmp	r3, #16
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x1ae>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b11      	cmp	r3, #17
 8000f0c:	d003      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x1ae>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d11c      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_ADC_ConfigChannel+0x204>)
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b10      	cmp	r3, #16
 8000f20:	d007      	beq.n	8000f32 <HAL_ADC_ConfigChannel+0x1ca>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x1c6>
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_ADC_ConfigChannel+0x210>)
 8000f2c:	e002      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x1cc>
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <HAL_ADC_ConfigChannel+0x214>)
 8000f30:	e000      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x1cc>
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <HAL_ADC_ConfigChannel+0x218>)
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_ADC_ConfigChannel+0x204>)
 8000f36:	400b      	ands	r3, r1
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e009      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f40:	2220      	movs	r2, #32
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2234      	movs	r2, #52	@ 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	00001001 	.word	0x00001001
 8000f6c:	40012708 	.word	0x40012708
 8000f70:	20000000 	.word	0x20000000
 8000f74:	000f4240 	.word	0x000f4240
 8000f78:	ffbfffff 	.word	0xffbfffff
 8000f7c:	feffffff 	.word	0xfeffffff
 8000f80:	ff7fffff 	.word	0xff7fffff

08000f84 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d112      	bne.n	8000fc8 <ADC_Enable+0x44>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d009      	beq.n	8000fc4 <ADC_Enable+0x40>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	401a      	ands	r2, r3
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d101      	bne.n	8000fc8 <ADC_Enable+0x44>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <ADC_Enable+0x46>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d152      	bne.n	8001074 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <ADC_Enable+0xfc>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fde:	2210      	movs	r2, #16
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fea:	2201      	movs	r2, #1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e03f      	b.n	8001076 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <ADC_Enable+0x100>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	491f      	ldr	r1, [pc, #124]	@ (8001088 <ADC_Enable+0x104>)
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff f885 	bl	800011c <__udivsi3>
 8001012:	0003      	movs	r3, r0
 8001014:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001016:	e002      	b.n	800101e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3b01      	subs	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f9      	bne.n	8001018 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001024:	f7ff fc98 	bl	8000958 <HAL_GetTick>
 8001028:	0003      	movs	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800102c:	e01b      	b.n	8001066 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800102e:	f7ff fc93 	bl	8000958 <HAL_GetTick>
 8001032:	0002      	movs	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d914      	bls.n	8001066 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	2b01      	cmp	r3, #1
 8001048:	d00d      	beq.n	8001066 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104e:	2210      	movs	r2, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105a:	2201      	movs	r2, #1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e007      	b.n	8001076 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4013      	ands	r3, r2
 8001070:	2b01      	cmp	r3, #1
 8001072:	d1dc      	bne.n	800102e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	80000017 	.word	0x80000017
 8001084:	20000000 	.word	0x20000000
 8001088:	000f4240 	.word	0x000f4240

0800108c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109e:	2250      	movs	r2, #80	@ 0x50
 80010a0:	4013      	ands	r3, r2
 80010a2:	d140      	bne.n	8001126 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	23c0      	movs	r3, #192	@ 0xc0
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4013      	ands	r3, r2
 80010be:	d12d      	bne.n	800111c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d129      	bne.n	800111c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2208      	movs	r2, #8
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d122      	bne.n	800111c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2204      	movs	r2, #4
 80010de:	4013      	ands	r3, r2
 80010e0:	d110      	bne.n	8001104 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	210c      	movs	r1, #12
 80010ee:	438a      	bics	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <ADC_DMAConvCplt+0xb0>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	2201      	movs	r2, #1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38
 8001102:	e00b      	b.n	800111c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001108:	2220      	movs	r2, #32
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	2201      	movs	r2, #1
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fe0a 	bl	8000d38 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001124:	e005      	b.n	8001132 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	0010      	movs	r0, r2
 8001130:	4798      	blx	r3
}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	fffffefe 	.word	0xfffffefe

08001140 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fdf9 	bl	8000d48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001170:	2240      	movs	r2, #64	@ 0x40
 8001172:	431a      	orrs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117c:	2204      	movs	r2, #4
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fde6 	bl	8000d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	0002      	movs	r2, r0
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a6:	d809      	bhi.n	80011bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	001a      	movs	r2, r3
 80011ae:	231f      	movs	r3, #31
 80011b0:	401a      	ands	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_EnableIRQ+0x30>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	4091      	lsls	r1, r2
 80011b8:	000a      	movs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
  }
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b7f      	cmp	r3, #127	@ 0x7f
 80011dc:	d828      	bhi.n	8001230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011de:	4a2f      	ldr	r2, [pc, #188]	@ (800129c <__NVIC_SetPriority+0xd4>)
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	33c0      	adds	r3, #192	@ 0xc0
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	589b      	ldr	r3, [r3, r2]
 80011ee:	1dfa      	adds	r2, r7, #7
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	0011      	movs	r1, r2
 80011f4:	2203      	movs	r2, #3
 80011f6:	400a      	ands	r2, r1
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	21ff      	movs	r1, #255	@ 0xff
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	43d2      	mvns	r2, r2
 8001202:	401a      	ands	r2, r3
 8001204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	22ff      	movs	r2, #255	@ 0xff
 800120c:	401a      	ands	r2, r3
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	2303      	movs	r3, #3
 8001216:	4003      	ands	r3, r0
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121c:	481f      	ldr	r0, [pc, #124]	@ (800129c <__NVIC_SetPriority+0xd4>)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	430a      	orrs	r2, r1
 8001228:	33c0      	adds	r3, #192	@ 0xc0
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800122e:	e031      	b.n	8001294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <__NVIC_SetPriority+0xd8>)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0019      	movs	r1, r3
 8001238:	230f      	movs	r3, #15
 800123a:	400b      	ands	r3, r1
 800123c:	3b08      	subs	r3, #8
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3306      	adds	r3, #6
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1dfa      	adds	r2, r7, #7
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	0011      	movs	r1, r2
 8001250:	2203      	movs	r2, #3
 8001252:	400a      	ands	r2, r1
 8001254:	00d2      	lsls	r2, r2, #3
 8001256:	21ff      	movs	r1, #255	@ 0xff
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	43d2      	mvns	r2, r2
 800125e:	401a      	ands	r2, r3
 8001260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	401a      	ands	r2, r3
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0018      	movs	r0, r3
 8001270:	2303      	movs	r3, #3
 8001272:	4003      	ands	r3, r0
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	001c      	movs	r4, r3
 8001280:	230f      	movs	r3, #15
 8001282:	4023      	ands	r3, r4
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	430a      	orrs	r2, r1
 800128a:	3306      	adds	r3, #6
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	18c3      	adds	r3, r0, r3
 8001290:	3304      	adds	r3, #4
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b003      	add	sp, #12
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	1e5a      	subs	r2, r3, #1
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	045b      	lsls	r3, r3, #17
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d301      	bcc.n	80012bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b8:	2301      	movs	r3, #1
 80012ba:	e010      	b.n	80012de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <SysTick_Config+0x44>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	3a01      	subs	r2, #1
 80012c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c4:	2301      	movs	r3, #1
 80012c6:	425b      	negs	r3, r3
 80012c8:	2103      	movs	r1, #3
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff ff7c 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x44>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x44>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	210f      	movs	r1, #15
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	1c02      	adds	r2, r0, #0
 80012fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	187b      	adds	r3, r7, r1
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	0002      	movs	r2, r0
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ff33 	bl	8001194 <__NVIC_EnableIRQ>
}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ffaf 	bl	80012a4 <SysTick_Config>
 8001346:	0003      	movs	r3, r0
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e036      	b.n	80013d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2221      	movs	r2, #33	@ 0x21
 800136a:	2102      	movs	r1, #2
 800136c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_DMA_Init+0x8c>)
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f946 	bl	8001648 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2221      	movs	r2, #33	@ 0x21
 80013c6:	2101      	movs	r1, #1
 80013c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2220      	movs	r2, #32
 80013ce:	2100      	movs	r1, #0
 80013d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	ffffc00f 	.word	0xffffc00f

080013e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2317      	movs	r3, #23
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2220      	movs	r2, #32
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Start_IT+0x24>
 8001400:	2302      	movs	r3, #2
 8001402:	e04f      	b.n	80014a4 <HAL_DMA_Start_IT+0xc4>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2220      	movs	r2, #32
 8001408:	2101      	movs	r1, #1
 800140a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	@ 0x21
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d13a      	bne.n	800148e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2221      	movs	r2, #33	@ 0x21
 800141c:	2102      	movs	r1, #2
 800141e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	438a      	bics	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f8d7 	bl	80015f0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	210e      	movs	r1, #14
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00f      	b.n	800147c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	210a      	movs	r1, #10
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2104      	movs	r1, #4
 8001478:	438a      	bics	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2220      	movs	r2, #32
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001496:	2317      	movs	r3, #23
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2202      	movs	r2, #2
 800149c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800149e:	2317      	movs	r3, #23
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b006      	add	sp, #24
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	2204      	movs	r2, #4
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	d024      	beq.n	800151e <HAL_DMA_IRQHandler+0x72>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2204      	movs	r2, #4
 80014d8:	4013      	ands	r3, r2
 80014da:	d020      	beq.n	800151e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2220      	movs	r2, #32
 80014e4:	4013      	ands	r3, r2
 80014e6:	d107      	bne.n	80014f8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001500:	2104      	movs	r1, #4
 8001502:	4091      	lsls	r1, r2
 8001504:	000a      	movs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d100      	bne.n	8001512 <HAL_DMA_IRQHandler+0x66>
 8001510:	e06a      	b.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	0010      	movs	r0, r2
 800151a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800151c:	e064      	b.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	2202      	movs	r2, #2
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_DMA_IRQHandler+0xda>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d027      	beq.n	8001586 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2220      	movs	r2, #32
 800153e:	4013      	ands	r3, r2
 8001540:	d10b      	bne.n	800155a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	210a      	movs	r1, #10
 800154e:	438a      	bics	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2221      	movs	r2, #33	@ 0x21
 8001556:	2101      	movs	r1, #1
 8001558:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001562:	2102      	movs	r1, #2
 8001564:	4091      	lsls	r1, r2
 8001566:	000a      	movs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d036      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	0010      	movs	r0, r2
 8001582:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001584:	e030      	b.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	2208      	movs	r2, #8
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	d028      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2208      	movs	r2, #8
 800159a:	4013      	ands	r3, r2
 800159c:	d024      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	210e      	movs	r1, #14
 80015aa:	438a      	bics	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b6:	2101      	movs	r1, #1
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2221      	movs	r2, #33	@ 0x21
 80015c8:	2101      	movs	r1, #1
 80015ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2220      	movs	r2, #32
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	0010      	movs	r0, r2
 80015e4:	4798      	blx	r3
    }
  }
}
 80015e6:	e7ff      	b.n	80015e8 <HAL_DMA_IRQHandler+0x13c>
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001606:	2101      	movs	r1, #1
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b10      	cmp	r3, #16
 800161c:	d108      	bne.n	8001630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800162e:	e007      	b.n	8001640 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b004      	add	sp, #16
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <DMA_CalcBaseAndBitshift+0x30>)
 8001656:	4694      	mov	ip, r2
 8001658:	4463      	add	r3, ip
 800165a:	2114      	movs	r1, #20
 800165c:	0018      	movs	r0, r3
 800165e:	f7fe fd5d 	bl	800011c <__udivsi3>
 8001662:	0003      	movs	r3, r0
 8001664:	009a      	lsls	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a03      	ldr	r2, [pc, #12]	@ (800167c <DMA_CalcBaseAndBitshift+0x34>)
 800166e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001670:	46c0      	nop			@ (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e149      	b.n	8001924 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4091      	lsls	r1, r2
 800169a:	000a      	movs	r2, r1
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d100      	bne.n	80016a8 <HAL_GPIO_Init+0x28>
 80016a6:	e13a      	b.n	800191e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d005      	beq.n	80016c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	2201      	movs	r2, #1
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	4013      	ands	r3, r2
 800172a:	2b03      	cmp	r3, #3
 800172c:	d017      	beq.n	800175e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	4013      	ands	r3, r2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d123      	bne.n	80017b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	58d3      	ldr	r3, [r2, r3]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2107      	movs	r1, #7
 8001796:	400b      	ands	r3, r1
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	401a      	ands	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	23c0      	movs	r3, #192	@ 0xc0
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4013      	ands	r3, r2
 80017f0:	d100      	bne.n	80017f4 <HAL_GPIO_Init+0x174>
 80017f2:	e094      	b.n	800191e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	4b51      	ldr	r3, [pc, #324]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	619a      	str	r2, [r3, #24]
 8001800:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800180c:	4a4c      	ldr	r2, [pc, #304]	@ (8001940 <HAL_GPIO_Init+0x2c0>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	589b      	ldr	r3, [r3, r2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2203      	movs	r2, #3
 800181e:	4013      	ands	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	409a      	lsls	r2, r3
 8001826:	0013      	movs	r3, r2
 8001828:	43da      	mvns	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	2390      	movs	r3, #144	@ 0x90
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	429a      	cmp	r2, r3
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x1d6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a41      	ldr	r2, [pc, #260]	@ (8001944 <HAL_GPIO_Init+0x2c4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x1d2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a40      	ldr	r2, [pc, #256]	@ (8001948 <HAL_GPIO_Init+0x2c8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x1ce>
 800184a:	2302      	movs	r3, #2
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x1d8>
 800184e:	2305      	movs	r3, #5
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x1d8>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x1d8>
 8001856:	2300      	movs	r3, #0
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	2103      	movs	r1, #3
 800185c:	400a      	ands	r2, r1
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	@ (8001940 <HAL_GPIO_Init+0x2c0>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b35      	ldr	r3, [pc, #212]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800189a:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018a0:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	039b      	lsls	r3, r3, #14
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ee:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4013      	ands	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	40da      	lsrs	r2, r3
 800192c:	1e13      	subs	r3, r2, #0
 800192e:	d000      	beq.n	8001932 <HAL_GPIO_Init+0x2b2>
 8001930:	e6ae      	b.n	8001690 <HAL_GPIO_Init+0x10>
  } 
}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b006      	add	sp, #24
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	0008      	movs	r0, r1
 800195a:	0011      	movs	r1, r2
 800195c:	1cbb      	adds	r3, r7, #2
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	1c7b      	adds	r3, r7, #1
 8001964:	1c0a      	adds	r2, r1, #0
 8001966:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	1c7b      	adds	r3, r7, #1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001970:	1cbb      	adds	r3, r7, #2
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e301      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x1e>
 80019a8:	e08d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019aa:	4bc3      	ldr	r3, [pc, #780]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00e      	beq.n	80019d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b6:	4bc0      	ldr	r3, [pc, #768]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	220c      	movs	r2, #12
 80019bc:	4013      	ands	r3, r2
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x64>
 80019c2:	4bbd      	ldr	r3, [pc, #756]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	025b      	lsls	r3, r3, #9
 80019ca:	401a      	ands	r2, r3
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	025b      	lsls	r3, r3, #9
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4bb8      	ldr	r3, [pc, #736]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d100      	bne.n	80019e2 <HAL_RCC_OscConfig+0x56>
 80019e0:	e070      	b.n	8001ac4 <HAL_RCC_OscConfig+0x138>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d000      	beq.n	80019ec <HAL_RCC_OscConfig+0x60>
 80019ea:	e06b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e2d8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x7c>
 80019f8:	4baf      	ldr	r3, [pc, #700]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4bae      	ldr	r3, [pc, #696]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e02f      	b.n	8001a68 <HAL_RCC_OscConfig+0xdc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x9e>
 8001a10:	4ba9      	ldr	r3, [pc, #676]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4ba8      	ldr	r3, [pc, #672]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	49a9      	ldr	r1, [pc, #676]	@ (8001cbc <HAL_RCC_OscConfig+0x330>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4ba6      	ldr	r3, [pc, #664]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4ba5      	ldr	r3, [pc, #660]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	49a7      	ldr	r1, [pc, #668]	@ (8001cc0 <HAL_RCC_OscConfig+0x334>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e01e      	b.n	8001a68 <HAL_RCC_OscConfig+0xdc>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0xc4>
 8001a32:	4ba1      	ldr	r3, [pc, #644]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	02c9      	lsls	r1, r1, #11
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xdc>
 8001a50:	4b99      	ldr	r3, [pc, #612]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b98      	ldr	r3, [pc, #608]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	4999      	ldr	r1, [pc, #612]	@ (8001cbc <HAL_RCC_OscConfig+0x330>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	4b96      	ldr	r3, [pc, #600]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b95      	ldr	r3, [pc, #596]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	4997      	ldr	r1, [pc, #604]	@ (8001cc0 <HAL_RCC_OscConfig+0x334>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d014      	beq.n	8001a9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe ff72 	bl	8000958 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7fe ff6d 	bl	8000958 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	@ 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e28a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0xee>
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe ff5d 	bl	8000958 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7fe ff58 	bl	8000958 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e275      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b80      	ldr	r3, [pc, #512]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x118>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x146>
 8001ad0:	e069      	b.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ad2:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d00b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001adc:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d11c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x196>
 8001ae8:	4b73      	ldr	r3, [pc, #460]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	025b      	lsls	r3, r3, #9
 8001af0:	4013      	ands	r3, r2
 8001af2:	d116      	bne.n	8001b22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af4:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e24b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	22f8      	movs	r2, #248	@ 0xf8
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00da      	lsls	r2, r3, #3
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b20:	e041      	b.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d024      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2a:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b62      	ldr	r3, [pc, #392]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe ff0f 	bl	8000958 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7fe ff0a 	bl	8000958 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e227      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d0f1      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b56      	ldr	r3, [pc, #344]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	22f8      	movs	r2, #248	@ 0xf8
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00da      	lsls	r2, r3, #3
 8001b6c:	4b52      	ldr	r3, [pc, #328]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b74:	4b50      	ldr	r3, [pc, #320]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe feea 	bl	8000958 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7fe fee5 	bl	8000958 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e202      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9c:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f1      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2208      	movs	r2, #8
 8001bac:	4013      	ands	r3, r2
 8001bae:	d036      	beq.n	8001c1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7fe fec8 	bl	8000958 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe fec3 	bl	8000958 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1e0      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f1      	beq.n	8001bce <HAL_RCC_OscConfig+0x242>
 8001bea:	e018      	b.n	8001c1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe feae 	bl	8000958 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fea9 	bl	8000958 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1c6      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x29e>
 8001c28:	e0b4      	b.n	8001d94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	201f      	movs	r0, #31
 8001c2c:	183b      	adds	r3, r7, r0
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	055b      	lsls	r3, r3, #21
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d110      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	0549      	lsls	r1, r1, #21
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_RCC_OscConfig+0x338>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d11a      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_RCC_OscConfig+0x338>)
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0049      	lsls	r1, r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fe6d 	bl	8000958 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7fe fe68 	bl	8000958 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e185      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_RCC_OscConfig+0x338>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x33c>
 8001caa:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	4b02      	ldr	r3, [pc, #8]	@ (8001cb8 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	e035      	b.n	8001d24 <HAL_RCC_OscConfig+0x398>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	fffeffff 	.word	0xfffeffff
 8001cc0:	fffbffff 	.word	0xfffbffff
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x35e>
 8001cd0:	4bb6      	ldr	r3, [pc, #728]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	4bb5      	ldr	r3, [pc, #724]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	438a      	bics	r2, r1
 8001cda:	621a      	str	r2, [r3, #32]
 8001cdc:	4bb3      	ldr	r3, [pc, #716]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	4bb2      	ldr	r3, [pc, #712]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	621a      	str	r2, [r3, #32]
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x398>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x380>
 8001cf2:	4bae      	ldr	r3, [pc, #696]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4bad      	ldr	r3, [pc, #692]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	4bab      	ldr	r3, [pc, #684]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	4baa      	ldr	r3, [pc, #680]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	621a      	str	r2, [r3, #32]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x398>
 8001d0c:	4ba7      	ldr	r3, [pc, #668]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4ba6      	ldr	r3, [pc, #664]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	4ba4      	ldr	r3, [pc, #656]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4ba3      	ldr	r3, [pc, #652]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d1e:	2104      	movs	r1, #4
 8001d20:	438a      	bics	r2, r1
 8001d22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d014      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7fe fe14 	bl	8000958 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	e009      	b.n	8001d4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7fe fe0f 	bl	8000958 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a9b      	ldr	r2, [pc, #620]	@ (8001fb0 <HAL_RCC_OscConfig+0x624>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e12b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	4b98      	ldr	r3, [pc, #608]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
 8001d54:	e013      	b.n	8001d7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe fdff 	bl	8000958 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	e009      	b.n	8001d74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe fdfa 	bl	8000958 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	4a91      	ldr	r2, [pc, #580]	@ (8001fb0 <HAL_RCC_OscConfig+0x624>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e116      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b8d      	ldr	r3, [pc, #564]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	4b87      	ldr	r3, [pc, #540]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001d8e:	4989      	ldr	r1, [pc, #548]	@ (8001fb4 <HAL_RCC_OscConfig+0x628>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d12a      	bne.n	8001dfc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001da6:	4b81      	ldr	r3, [pc, #516]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	4b80      	ldr	r3, [pc, #512]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001dac:	2104      	movs	r1, #4
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001db2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fdcb 	bl	8000958 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dc8:	f7fe fdc6 	bl	8000958 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0e3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dda:	4b74      	ldr	r3, [pc, #464]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d0f1      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001de4:	4b71      	ldr	r3, [pc, #452]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de8:	22f8      	movs	r2, #248	@ 0xf8
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	00da      	lsls	r2, r3, #3
 8001df4:	4b6d      	ldr	r3, [pc, #436]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dfa:	e034      	b.n	8001e66 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	3305      	adds	r3, #5
 8001e02:	d111      	bne.n	8001e28 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e04:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e08:	4b68      	ldr	r3, [pc, #416]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	22f8      	movs	r2, #248	@ 0xf8
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	4b62      	ldr	r3, [pc, #392]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e26:	e01e      	b.n	8001e66 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e28:	4b60      	ldr	r3, [pc, #384]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e2e:	2104      	movs	r1, #4
 8001e30:	430a      	orrs	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e34:	4b5d      	ldr	r3, [pc, #372]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e38:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fd8a 	bl	8000958 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e4a:	f7fe fd85 	bl	8000958 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0a2      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e5c:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f1      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d100      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4e4>
 8001e6e:	e097      	b.n	8001fa0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b4e      	ldr	r3, [pc, #312]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	220c      	movs	r2, #12
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4f2>
 8001e7c:	e06b      	b.n	8001f56 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d14c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001e8c:	494a      	ldr	r1, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x62c>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fd61 	bl	8000958 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe fd5c 	bl	8000958 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e079      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	049b      	lsls	r3, r3, #18
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eba:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec8:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ece:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fbc <HAL_RCC_OscConfig+0x630>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	4b32      	ldr	r3, [pc, #200]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	0449      	lsls	r1, r1, #17
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fd2f 	bl	8000958 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fd2a 	bl	8000958 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e047      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f12:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	049b      	lsls	r3, r3, #18
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x574>
 8001f1e:	e03f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f26:	4924      	ldr	r1, [pc, #144]	@ (8001fb8 <HAL_RCC_OscConfig+0x62c>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd14 	bl	8000958 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe fd0f 	bl	8000958 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e02c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5aa>
 8001f54:	e024      	b.n	8001fa0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01f      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_RCC_OscConfig+0x620>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10e      	bne.n	8001f9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	220f      	movs	r2, #15
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	23f0      	movs	r3, #240	@ 0xf0
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b008      	add	sp, #32
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	00001388 	.word	0x00001388
 8001fb4:	efffffff 	.word	0xefffffff
 8001fb8:	feffffff 	.word	0xfeffffff
 8001fbc:	ffc2ffff 	.word	0xffc2ffff

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b3      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d911      	bls.n	8002006 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4393      	bics	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	4b55      	ldr	r3, [pc, #340]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e09a      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d015      	beq.n	800203c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d006      	beq.n	8002028 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800201a:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002020:	21e0      	movs	r1, #224	@ 0xe0
 8002022:	00c9      	lsls	r1, r1, #3
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	22f0      	movs	r2, #240	@ 0xf0
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d040      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d114      	bne.n	8002084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06e      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	049b      	lsls	r3, r3, #18
 800206e:	4013      	ands	r3, r2
 8002070:	d108      	bne.n	8002084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e062      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e05b      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002084:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fc5e 	bl	8000958 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f7fe fc59 	bl	8000958 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a27      	ldr	r2, [pc, #156]	@ (800214c <HAL_RCC_ClockConfig+0x18c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e042      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	220c      	movs	r2, #12
 80020bc:	401a      	ands	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ec      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d211      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_RCC_ClockConfig+0x184>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e020      	b.n	800213c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2204      	movs	r2, #4
 8002100:	4013      	ands	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_RCC_ClockConfig+0x190>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002118:	f000 f820 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211c:	0001      	movs	r1, r0
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_RCC_ClockConfig+0x188>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	220f      	movs	r2, #15
 8002126:	4013      	ands	r3, r2
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_RCC_ClockConfig+0x194>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	000a      	movs	r2, r1
 800212e:	40da      	lsrs	r2, r3
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_ClockConfig+0x198>)
 8002132:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002134:	2003      	movs	r0, #3
 8002136:	f7fe fbc9 	bl	80008cc <HAL_InitTick>
  
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	00001388 	.word	0x00001388
 8002150:	fffff8ff 	.word	0xfffff8ff
 8002154:	080034cc 	.word	0x080034cc
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	220c      	movs	r2, #12
 8002180:	4013      	ands	r3, r2
 8002182:	2b04      	cmp	r3, #4
 8002184:	d002      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x30>
 8002186:	2b08      	cmp	r3, #8
 8002188:	d003      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x36>
 800218a:	e02c      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800218e:	613b      	str	r3, [r7, #16]
      break;
 8002190:	e02c      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	220f      	movs	r2, #15
 8002198:	4013      	ands	r3, r2
 800219a:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_RCC_GetSysClockFreq+0xa4>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	220f      	movs	r2, #15
 80021a6:	4013      	ands	r3, r2
 80021a8:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <HAL_RCC_GetSysClockFreq+0xa8>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	025b      	lsls	r3, r3, #9
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4810      	ldr	r0, [pc, #64]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80021bc:	f7fd ffae 	bl	800011c <__udivsi3>
 80021c0:	0003      	movs	r3, r0
 80021c2:	001a      	movs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4353      	muls	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	000a      	movs	r2, r1
 80021d0:	0152      	lsls	r2, r2, #5
 80021d2:	1a52      	subs	r2, r2, r1
 80021d4:	0193      	lsls	r3, r2, #6
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	185b      	adds	r3, r3, r1
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e8:	613b      	str	r3, [r7, #16]
      break;
 80021ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021ec:	693b      	ldr	r3, [r7, #16]
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b006      	add	sp, #24
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	080034e4 	.word	0x080034e4
 8002204:	080034f4 	.word	0x080034f4

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <HAL_RCC_GetHCLKFreq+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002220:	f7ff fff2 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002224:	0001      	movs	r1, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	2207      	movs	r2, #7
 800222e:	4013      	ands	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	40d9      	lsrs	r1, r3
 8002236:	000b      	movs	r3, r1
}    
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	080034dc 	.word	0x080034dc

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	4013      	ands	r3, r2
 8002262:	d100      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002264:	e08e      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2017      	movs	r0, #23
 8002268:	183b      	adds	r3, r7, r0
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b57      	ldr	r3, [pc, #348]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	4013      	ands	r3, r2
 8002278:	d110      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002280:	2180      	movs	r1, #128	@ 0x80
 8002282:	0549      	lsls	r1, r1, #21
 8002284:	430a      	orrs	r2, r1
 8002286:	61da      	str	r2, [r3, #28]
 8002288:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	183b      	adds	r3, r7, r0
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b4c      	ldr	r3, [pc, #304]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d11a      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a8:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022ae:	2180      	movs	r1, #128	@ 0x80
 80022b0:	0049      	lsls	r1, r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fb4f 	bl	8000958 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	e008      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c0:	f7fe fb4a 	bl	8000958 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e077      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022e0:	6a1a      	ldr	r2, [r3, #32]
 80022e2:	23c0      	movs	r3, #192	@ 0xc0
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d034      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	23c0      	movs	r3, #192	@ 0xc0
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d02c      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002300:	4b32      	ldr	r3, [pc, #200]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a33      	ldr	r2, [pc, #204]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230a:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	0249      	lsls	r1, r1, #9
 8002314:	430a      	orrs	r2, r1
 8002316:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002318:	4b2c      	ldr	r3, [pc, #176]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800231e:	492e      	ldr	r1, [pc, #184]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002320:	400a      	ands	r2, r1
 8002322:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002324:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fb11 	bl	8000958 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e009      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fb0c 	bl	8000958 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a25      	ldr	r2, [pc, #148]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e038      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d0f0      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800236a:	430a      	orrs	r2, r1
 800236c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800236e:	2317      	movs	r3, #23
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800237e:	4918      	ldr	r1, [pc, #96]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002380:	400a      	ands	r2, r1
 8002382:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	4013      	ands	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	2203      	movs	r2, #3
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2220      	movs	r2, #32
 80023a8:	4013      	ands	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	2210      	movs	r2, #16
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b006      	add	sp, #24
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
 80023d4:	fffffcff 	.word	0xfffffcff
 80023d8:	fffeffff 	.word	0xfffeffff
 80023dc:	00001388 	.word	0x00001388
 80023e0:	efffffff 	.word	0xefffffff

080023e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e044      	b.n	8002480 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2278      	movs	r2, #120	@ 0x78
 8002402:	2100      	movs	r1, #0
 8002404:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe f93d 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2224      	movs	r2, #36	@ 0x24
 8002412:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	438a      	bics	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f954 	bl	80026dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0018      	movs	r0, r3
 8002438:	f000 f828 	bl	800248c <UART_SetConfig>
 800243c:	0003      	movs	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e01c      	b.n	8002480 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	490d      	ldr	r1, [pc, #52]	@ (8002488 <HAL_UART_Init+0xa4>)
 8002452:	400a      	ands	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	212a      	movs	r1, #42	@ 0x2a
 8002462:	438a      	bics	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f000 f9e3 	bl	8002844 <UART_CheckIdleState>
 800247e:	0003      	movs	r3, r0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}
 8002488:	ffffb7ff 	.word	0xffffb7ff

0800248c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002494:	231e      	movs	r3, #30
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a83      	ldr	r2, [pc, #524]	@ (80026c8 <UART_SetConfig+0x23c>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a7e      	ldr	r2, [pc, #504]	@ (80026cc <UART_SetConfig+0x240>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a75      	ldr	r2, [pc, #468]	@ (80026d0 <UART_SetConfig+0x244>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002508:	4b72      	ldr	r3, [pc, #456]	@ (80026d4 <UART_SetConfig+0x248>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	2203      	movs	r2, #3
 800250e:	4013      	ands	r3, r2
 8002510:	2b03      	cmp	r3, #3
 8002512:	d00d      	beq.n	8002530 <UART_SetConfig+0xa4>
 8002514:	d81b      	bhi.n	800254e <UART_SetConfig+0xc2>
 8002516:	2b02      	cmp	r3, #2
 8002518:	d014      	beq.n	8002544 <UART_SetConfig+0xb8>
 800251a:	d818      	bhi.n	800254e <UART_SetConfig+0xc2>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <UART_SetConfig+0x9a>
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00a      	beq.n	800253a <UART_SetConfig+0xae>
 8002524:	e013      	b.n	800254e <UART_SetConfig+0xc2>
 8002526:	231f      	movs	r3, #31
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e012      	b.n	8002556 <UART_SetConfig+0xca>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e00d      	b.n	8002556 <UART_SetConfig+0xca>
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e008      	b.n	8002556 <UART_SetConfig+0xca>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2208      	movs	r2, #8
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e003      	b.n	8002556 <UART_SetConfig+0xca>
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2210      	movs	r2, #16
 8002554:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	429a      	cmp	r2, r3
 8002560:	d15c      	bne.n	800261c <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d015      	beq.n	8002598 <UART_SetConfig+0x10c>
 800256c:	dc18      	bgt.n	80025a0 <UART_SetConfig+0x114>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00d      	beq.n	800258e <UART_SetConfig+0x102>
 8002572:	dc15      	bgt.n	80025a0 <UART_SetConfig+0x114>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <UART_SetConfig+0xf2>
 8002578:	2b02      	cmp	r3, #2
 800257a:	d005      	beq.n	8002588 <UART_SetConfig+0xfc>
 800257c:	e010      	b.n	80025a0 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800257e:	f7ff fe4d 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002582:	0003      	movs	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
        break;
 8002586:	e012      	b.n	80025ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002588:	4b53      	ldr	r3, [pc, #332]	@ (80026d8 <UART_SetConfig+0x24c>)
 800258a:	61bb      	str	r3, [r7, #24]
        break;
 800258c:	e00f      	b.n	80025ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800258e:	f7ff fde5 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8002592:	0003      	movs	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]
        break;
 8002596:	e00a      	b.n	80025ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	61bb      	str	r3, [r7, #24]
        break;
 800259e:	e006      	b.n	80025ae <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025a4:	231e      	movs	r3, #30
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
        break;
 80025ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d100      	bne.n	80025b6 <UART_SetConfig+0x12a>
 80025b4:	e07a      	b.n	80026ac <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	005a      	lsls	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	18d2      	adds	r2, r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	0019      	movs	r1, r3
 80025c8:	0010      	movs	r0, r2
 80025ca:	f7fd fda7 	bl	800011c <__udivsi3>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d91c      	bls.n	8002612 <UART_SetConfig+0x186>
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	025b      	lsls	r3, r3, #9
 80025de:	429a      	cmp	r2, r3
 80025e0:	d217      	bcs.n	8002612 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	200e      	movs	r0, #14
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	210f      	movs	r1, #15
 80025ec:	438a      	bics	r2, r1
 80025ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	b299      	uxth	r1, r3
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	183a      	adds	r2, r7, r0
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	e04c      	b.n	80026ac <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002612:	231e      	movs	r3, #30
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e047      	b.n	80026ac <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b08      	cmp	r3, #8
 8002624:	d015      	beq.n	8002652 <UART_SetConfig+0x1c6>
 8002626:	dc18      	bgt.n	800265a <UART_SetConfig+0x1ce>
 8002628:	2b04      	cmp	r3, #4
 800262a:	d00d      	beq.n	8002648 <UART_SetConfig+0x1bc>
 800262c:	dc15      	bgt.n	800265a <UART_SetConfig+0x1ce>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <UART_SetConfig+0x1ac>
 8002632:	2b02      	cmp	r3, #2
 8002634:	d005      	beq.n	8002642 <UART_SetConfig+0x1b6>
 8002636:	e010      	b.n	800265a <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002638:	f7ff fdf0 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 800263c:	0003      	movs	r3, r0
 800263e:	61bb      	str	r3, [r7, #24]
        break;
 8002640:	e012      	b.n	8002668 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002642:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <UART_SetConfig+0x24c>)
 8002644:	61bb      	str	r3, [r7, #24]
        break;
 8002646:	e00f      	b.n	8002668 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002648:	f7ff fd88 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800264c:	0003      	movs	r3, r0
 800264e:	61bb      	str	r3, [r7, #24]
        break;
 8002650:	e00a      	b.n	8002668 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	61bb      	str	r3, [r7, #24]
        break;
 8002658:	e006      	b.n	8002668 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800265e:	231e      	movs	r3, #30
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
        break;
 8002666:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01e      	beq.n	80026ac <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	085a      	lsrs	r2, r3, #1
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	18d2      	adds	r2, r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7fd fd4c 	bl	800011c <__udivsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d90a      	bls.n	80026a4 <UART_SetConfig+0x218>
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	025b      	lsls	r3, r3, #9
 8002694:	429a      	cmp	r2, r3
 8002696:	d205      	bcs.n	80026a4 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	e003      	b.n	80026ac <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80026a4:	231e      	movs	r3, #30
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80026b8:	231e      	movs	r3, #30
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b008      	add	sp, #32
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	ffff69f3 	.word	0xffff69f3
 80026cc:	ffffcfff 	.word	0xffffcfff
 80026d0:	fffff4ff 	.word	0xfffff4ff
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200

080026dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	2208      	movs	r2, #8
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00b      	beq.n	8002706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002820 <UART_AdvFeatureConfig+0x144>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d00b      	beq.n	8002728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a43      	ldr	r2, [pc, #268]	@ (8002824 <UART_AdvFeatureConfig+0x148>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d00b      	beq.n	800274a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a3b      	ldr	r2, [pc, #236]	@ (8002828 <UART_AdvFeatureConfig+0x14c>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	2204      	movs	r2, #4
 8002750:	4013      	ands	r3, r2
 8002752:	d00b      	beq.n	800276c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a34      	ldr	r2, [pc, #208]	@ (800282c <UART_AdvFeatureConfig+0x150>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d00b      	beq.n	800278e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a2c      	ldr	r2, [pc, #176]	@ (8002830 <UART_AdvFeatureConfig+0x154>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	2220      	movs	r2, #32
 8002794:	4013      	ands	r3, r2
 8002796:	d00b      	beq.n	80027b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4a25      	ldr	r2, [pc, #148]	@ (8002834 <UART_AdvFeatureConfig+0x158>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	2240      	movs	r2, #64	@ 0x40
 80027b6:	4013      	ands	r3, r2
 80027b8:	d01d      	beq.n	80027f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <UART_AdvFeatureConfig+0x15c>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	035b      	lsls	r3, r3, #13
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10b      	bne.n	80027f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a15      	ldr	r2, [pc, #84]	@ (800283c <UART_AdvFeatureConfig+0x160>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a0e      	ldr	r2, [pc, #56]	@ (8002840 <UART_AdvFeatureConfig+0x164>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
  }
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	ffff7fff 	.word	0xffff7fff
 8002824:	fffdffff 	.word	0xfffdffff
 8002828:	fffeffff 	.word	0xfffeffff
 800282c:	fffbffff 	.word	0xfffbffff
 8002830:	ffffefff 	.word	0xffffefff
 8002834:	ffffdfff 	.word	0xffffdfff
 8002838:	ffefffff 	.word	0xffefffff
 800283c:	ff9fffff 	.word	0xff9fffff
 8002840:	fff7ffff 	.word	0xfff7ffff

08002844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b092      	sub	sp, #72	@ 0x48
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2284      	movs	r2, #132	@ 0x84
 8002850:	2100      	movs	r1, #0
 8002852:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002854:	f7fe f880 	bl	8000958 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2208      	movs	r2, #8
 8002864:	4013      	ands	r3, r2
 8002866:	2b08      	cmp	r3, #8
 8002868:	d12c      	bne.n	80028c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	0391      	lsls	r1, r2, #14
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4a46      	ldr	r2, [pc, #280]	@ (800298c <UART_CheckIdleState+0x148>)
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	f000 f88c 	bl	8002994 <UART_WaitOnFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d021      	beq.n	80028c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002880:	f3ef 8310 	mrs	r3, PRIMASK
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800288a:	2301      	movs	r3, #1
 800288c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	f383 8810 	msr	PRIMASK, r3
}
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	438a      	bics	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	f383 8810 	msr	PRIMASK, r3
}
 80028b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2278      	movs	r2, #120	@ 0x78
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e05f      	b.n	8002984 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2204      	movs	r2, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d146      	bne.n	8002960 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	03d1      	lsls	r1, r2, #15
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <UART_CheckIdleState+0x148>)
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	f000 f858 	bl	8002994 <UART_WaitOnFlagUntilTimeout>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d03b      	beq.n	8002960 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f2:	2301      	movs	r3, #1
 80028f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f383 8810 	msr	PRIMASK, r3
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4921      	ldr	r1, [pc, #132]	@ (8002990 <UART_CheckIdleState+0x14c>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291a:	f3ef 8310 	mrs	r3, PRIMASK
 800291e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002920:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f383 8810 	msr	PRIMASK, r3
}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	2120      	movs	r1, #32
 8002952:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2278      	movs	r2, #120	@ 0x78
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e011      	b.n	8002984 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	@ 0x80
 800296a:	2120      	movs	r1, #32
 800296c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2278      	movs	r2, #120	@ 0x78
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b010      	add	sp, #64	@ 0x40
 800298a:	bd80      	pop	{r7, pc}
 800298c:	01ffffff 	.word	0x01ffffff
 8002990:	fffffedf 	.word	0xfffffedf

08002994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a4:	e051      	b.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3301      	adds	r3, #1
 80029aa:	d04e      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fd ffd4 	bl	8000958 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e051      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2204      	movs	r2, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	d03b      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b80      	cmp	r3, #128	@ 0x80
 80029d6:	d038      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b40      	cmp	r3, #64	@ 0x40
 80029dc:	d035      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d111      	bne.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f83c 	bl	8002a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2284      	movs	r2, #132	@ 0x84
 8002a00:	2108      	movs	r1, #8
 8002a02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2278      	movs	r2, #120	@ 0x78
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e02c      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d112      	bne.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f81f 	bl	8002a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2284      	movs	r2, #132	@ 0x84
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2278      	movs	r2, #120	@ 0x78
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e00f      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	425a      	negs	r2, r3
 8002a5a:	4153      	adcs	r3, r2
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	001a      	movs	r2, r3
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d09e      	beq.n	80029a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a80:	617b      	str	r3, [r7, #20]
  return(result);
 8002a82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a86:	2301      	movs	r3, #1
 8002a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f383 8810 	msr	PRIMASK, r3
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4926      	ldr	r1, [pc, #152]	@ (8002b38 <UART_EndRxTransfer+0xc4>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aae:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab2:	623b      	str	r3, [r7, #32]
  return(result);
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ab8:	2301      	movs	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	f383 8810 	msr	PRIMASK, r3
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d118      	bne.n	8002b1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	2301      	movs	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2110      	movs	r1, #16
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	2120      	movs	r1, #32
 8002b20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b00e      	add	sp, #56	@ 0x38
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	fffffedf 	.word	0xfffffedf

08002b3c <siprintf>:
 8002b3c:	b40e      	push	{r1, r2, r3}
 8002b3e:	b500      	push	{lr}
 8002b40:	490b      	ldr	r1, [pc, #44]	@ (8002b70 <siprintf+0x34>)
 8002b42:	b09c      	sub	sp, #112	@ 0x70
 8002b44:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b46:	9002      	str	r0, [sp, #8]
 8002b48:	9006      	str	r0, [sp, #24]
 8002b4a:	9107      	str	r1, [sp, #28]
 8002b4c:	9104      	str	r1, [sp, #16]
 8002b4e:	4809      	ldr	r0, [pc, #36]	@ (8002b74 <siprintf+0x38>)
 8002b50:	4909      	ldr	r1, [pc, #36]	@ (8002b78 <siprintf+0x3c>)
 8002b52:	cb04      	ldmia	r3!, {r2}
 8002b54:	9105      	str	r1, [sp, #20]
 8002b56:	6800      	ldr	r0, [r0, #0]
 8002b58:	a902      	add	r1, sp, #8
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	f000 f99e 	bl	8002e9c <_svfiprintf_r>
 8002b60:	2200      	movs	r2, #0
 8002b62:	9b02      	ldr	r3, [sp, #8]
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	b01c      	add	sp, #112	@ 0x70
 8002b68:	bc08      	pop	{r3}
 8002b6a:	b003      	add	sp, #12
 8002b6c:	4718      	bx	r3
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	7fffffff 	.word	0x7fffffff
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	ffff0208 	.word	0xffff0208

08002b7c <memset>:
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	1882      	adds	r2, r0, r2
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	7019      	strb	r1, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <__errno>:
 8002b8c:	4b01      	ldr	r3, [pc, #4]	@ (8002b94 <__errno+0x8>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	4770      	bx	lr
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	2000000c 	.word	0x2000000c

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd0 <__libc_init_array+0x38>)
 8002b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bd4 <__libc_init_array+0x3c>)
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	42a6      	cmp	r6, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	2600      	movs	r6, #0
 8002baa:	f000 fc65 	bl	8003478 <_init>
 8002bae:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd8 <__libc_init_array+0x40>)
 8002bb0:	4d0a      	ldr	r5, [pc, #40]	@ (8002bdc <__libc_init_array+0x44>)
 8002bb2:	1b64      	subs	r4, r4, r5
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	42a6      	cmp	r6, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	00b3      	lsls	r3, r6, #2
 8002bbe:	58eb      	ldr	r3, [r5, r3]
 8002bc0:	4798      	blx	r3
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	00b3      	lsls	r3, r6, #2
 8002bc8:	58eb      	ldr	r3, [r5, r3]
 8002bca:	4798      	blx	r3
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08003538 	.word	0x08003538
 8002bd4:	08003538 	.word	0x08003538
 8002bd8:	0800353c 	.word	0x0800353c
 8002bdc:	08003538 	.word	0x08003538

08002be0 <__retarget_lock_acquire_recursive>:
 8002be0:	4770      	bx	lr

08002be2 <__retarget_lock_release_recursive>:
 8002be2:	4770      	bx	lr

08002be4 <_free_r>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	0005      	movs	r5, r0
 8002be8:	1e0c      	subs	r4, r1, #0
 8002bea:	d010      	beq.n	8002c0e <_free_r+0x2a>
 8002bec:	3c04      	subs	r4, #4
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da00      	bge.n	8002bf6 <_free_r+0x12>
 8002bf4:	18e4      	adds	r4, r4, r3
 8002bf6:	0028      	movs	r0, r5
 8002bf8:	f000 f8e0 	bl	8002dbc <__malloc_lock>
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <_free_r+0x90>)
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <_free_r+0x2c>
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	6014      	str	r4, [r2, #0]
 8002c08:	0028      	movs	r0, r5
 8002c0a:	f000 f8df 	bl	8002dcc <__malloc_unlock>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	d908      	bls.n	8002c26 <_free_r+0x42>
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	1821      	adds	r1, r4, r0
 8002c18:	428b      	cmp	r3, r1
 8002c1a:	d1f3      	bne.n	8002c04 <_free_r+0x20>
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	1809      	adds	r1, r1, r0
 8002c22:	6021      	str	r1, [r4, #0]
 8002c24:	e7ee      	b.n	8002c04 <_free_r+0x20>
 8002c26:	001a      	movs	r2, r3
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <_free_r+0x4e>
 8002c2e:	42a3      	cmp	r3, r4
 8002c30:	d9f9      	bls.n	8002c26 <_free_r+0x42>
 8002c32:	6811      	ldr	r1, [r2, #0]
 8002c34:	1850      	adds	r0, r2, r1
 8002c36:	42a0      	cmp	r0, r4
 8002c38:	d10b      	bne.n	8002c52 <_free_r+0x6e>
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	1809      	adds	r1, r1, r0
 8002c3e:	1850      	adds	r0, r2, r1
 8002c40:	6011      	str	r1, [r2, #0]
 8002c42:	4283      	cmp	r3, r0
 8002c44:	d1e0      	bne.n	8002c08 <_free_r+0x24>
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	1841      	adds	r1, r0, r1
 8002c4c:	6011      	str	r1, [r2, #0]
 8002c4e:	6053      	str	r3, [r2, #4]
 8002c50:	e7da      	b.n	8002c08 <_free_r+0x24>
 8002c52:	42a0      	cmp	r0, r4
 8002c54:	d902      	bls.n	8002c5c <_free_r+0x78>
 8002c56:	230c      	movs	r3, #12
 8002c58:	602b      	str	r3, [r5, #0]
 8002c5a:	e7d5      	b.n	8002c08 <_free_r+0x24>
 8002c5c:	6820      	ldr	r0, [r4, #0]
 8002c5e:	1821      	adds	r1, r4, r0
 8002c60:	428b      	cmp	r3, r1
 8002c62:	d103      	bne.n	8002c6c <_free_r+0x88>
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	1809      	adds	r1, r1, r0
 8002c6a:	6021      	str	r1, [r4, #0]
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	6054      	str	r4, [r2, #4]
 8002c70:	e7ca      	b.n	8002c08 <_free_r+0x24>
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	20000514 	.word	0x20000514

08002c78 <sbrk_aligned>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002cb8 <sbrk_aligned+0x40>)
 8002c7c:	000d      	movs	r5, r1
 8002c7e:	6831      	ldr	r1, [r6, #0]
 8002c80:	0004      	movs	r4, r0
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d102      	bne.n	8002c8c <sbrk_aligned+0x14>
 8002c86:	f000 fb99 	bl	80033bc <_sbrk_r>
 8002c8a:	6030      	str	r0, [r6, #0]
 8002c8c:	0029      	movs	r1, r5
 8002c8e:	0020      	movs	r0, r4
 8002c90:	f000 fb94 	bl	80033bc <_sbrk_r>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d103      	bne.n	8002ca0 <sbrk_aligned+0x28>
 8002c98:	2501      	movs	r5, #1
 8002c9a:	426d      	negs	r5, r5
 8002c9c:	0028      	movs	r0, r5
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	1cc5      	adds	r5, r0, #3
 8002ca4:	439d      	bics	r5, r3
 8002ca6:	42a8      	cmp	r0, r5
 8002ca8:	d0f8      	beq.n	8002c9c <sbrk_aligned+0x24>
 8002caa:	1a29      	subs	r1, r5, r0
 8002cac:	0020      	movs	r0, r4
 8002cae:	f000 fb85 	bl	80033bc <_sbrk_r>
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d1f2      	bne.n	8002c9c <sbrk_aligned+0x24>
 8002cb6:	e7ef      	b.n	8002c98 <sbrk_aligned+0x20>
 8002cb8:	20000510 	.word	0x20000510

08002cbc <_malloc_r>:
 8002cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	1ccb      	adds	r3, r1, #3
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	0005      	movs	r5, r0
 8002cc8:	001f      	movs	r7, r3
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d234      	bcs.n	8002d38 <_malloc_r+0x7c>
 8002cce:	270c      	movs	r7, #12
 8002cd0:	42b9      	cmp	r1, r7
 8002cd2:	d833      	bhi.n	8002d3c <_malloc_r+0x80>
 8002cd4:	0028      	movs	r0, r5
 8002cd6:	f000 f871 	bl	8002dbc <__malloc_lock>
 8002cda:	4e37      	ldr	r6, [pc, #220]	@ (8002db8 <_malloc_r+0xfc>)
 8002cdc:	6833      	ldr	r3, [r6, #0]
 8002cde:	001c      	movs	r4, r3
 8002ce0:	2c00      	cmp	r4, #0
 8002ce2:	d12f      	bne.n	8002d44 <_malloc_r+0x88>
 8002ce4:	0039      	movs	r1, r7
 8002ce6:	0028      	movs	r0, r5
 8002ce8:	f7ff ffc6 	bl	8002c78 <sbrk_aligned>
 8002cec:	0004      	movs	r4, r0
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d15f      	bne.n	8002db2 <_malloc_r+0xf6>
 8002cf2:	6834      	ldr	r4, [r6, #0]
 8002cf4:	9400      	str	r4, [sp, #0]
 8002cf6:	9b00      	ldr	r3, [sp, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d14a      	bne.n	8002d92 <_malloc_r+0xd6>
 8002cfc:	2c00      	cmp	r4, #0
 8002cfe:	d052      	beq.n	8002da6 <_malloc_r+0xea>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	0028      	movs	r0, r5
 8002d04:	18e3      	adds	r3, r4, r3
 8002d06:	9900      	ldr	r1, [sp, #0]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	f000 fb57 	bl	80033bc <_sbrk_r>
 8002d0e:	9b01      	ldr	r3, [sp, #4]
 8002d10:	4283      	cmp	r3, r0
 8002d12:	d148      	bne.n	8002da6 <_malloc_r+0xea>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	0028      	movs	r0, r5
 8002d18:	1aff      	subs	r7, r7, r3
 8002d1a:	0039      	movs	r1, r7
 8002d1c:	f7ff ffac 	bl	8002c78 <sbrk_aligned>
 8002d20:	3001      	adds	r0, #1
 8002d22:	d040      	beq.n	8002da6 <_malloc_r+0xea>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	6833      	ldr	r3, [r6, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	2a00      	cmp	r2, #0
 8002d30:	d133      	bne.n	8002d9a <_malloc_r+0xde>
 8002d32:	9b00      	ldr	r3, [sp, #0]
 8002d34:	6033      	str	r3, [r6, #0]
 8002d36:	e019      	b.n	8002d6c <_malloc_r+0xb0>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dac9      	bge.n	8002cd0 <_malloc_r+0x14>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	2000      	movs	r0, #0
 8002d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d44:	6821      	ldr	r1, [r4, #0]
 8002d46:	1bc9      	subs	r1, r1, r7
 8002d48:	d420      	bmi.n	8002d8c <_malloc_r+0xd0>
 8002d4a:	290b      	cmp	r1, #11
 8002d4c:	d90a      	bls.n	8002d64 <_malloc_r+0xa8>
 8002d4e:	19e2      	adds	r2, r4, r7
 8002d50:	6027      	str	r7, [r4, #0]
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	d104      	bne.n	8002d60 <_malloc_r+0xa4>
 8002d56:	6032      	str	r2, [r6, #0]
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	6053      	str	r3, [r2, #4]
 8002d5e:	e005      	b.n	8002d6c <_malloc_r+0xb0>
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	e7f9      	b.n	8002d58 <_malloc_r+0x9c>
 8002d64:	6862      	ldr	r2, [r4, #4]
 8002d66:	42a3      	cmp	r3, r4
 8002d68:	d10e      	bne.n	8002d88 <_malloc_r+0xcc>
 8002d6a:	6032      	str	r2, [r6, #0]
 8002d6c:	0028      	movs	r0, r5
 8002d6e:	f000 f82d 	bl	8002dcc <__malloc_unlock>
 8002d72:	0020      	movs	r0, r4
 8002d74:	2207      	movs	r2, #7
 8002d76:	300b      	adds	r0, #11
 8002d78:	1d23      	adds	r3, r4, #4
 8002d7a:	4390      	bics	r0, r2
 8002d7c:	1ac2      	subs	r2, r0, r3
 8002d7e:	4298      	cmp	r0, r3
 8002d80:	d0df      	beq.n	8002d42 <_malloc_r+0x86>
 8002d82:	1a1b      	subs	r3, r3, r0
 8002d84:	50a3      	str	r3, [r4, r2]
 8002d86:	e7dc      	b.n	8002d42 <_malloc_r+0x86>
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e7ef      	b.n	8002d6c <_malloc_r+0xb0>
 8002d8c:	0023      	movs	r3, r4
 8002d8e:	6864      	ldr	r4, [r4, #4]
 8002d90:	e7a6      	b.n	8002ce0 <_malloc_r+0x24>
 8002d92:	9c00      	ldr	r4, [sp, #0]
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	e7ad      	b.n	8002cf6 <_malloc_r+0x3a>
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	42a3      	cmp	r3, r4
 8002da0:	d1fb      	bne.n	8002d9a <_malloc_r+0xde>
 8002da2:	2300      	movs	r3, #0
 8002da4:	e7da      	b.n	8002d5c <_malloc_r+0xa0>
 8002da6:	230c      	movs	r3, #12
 8002da8:	0028      	movs	r0, r5
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	f000 f80e 	bl	8002dcc <__malloc_unlock>
 8002db0:	e7c6      	b.n	8002d40 <_malloc_r+0x84>
 8002db2:	6007      	str	r7, [r0, #0]
 8002db4:	e7da      	b.n	8002d6c <_malloc_r+0xb0>
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	20000514 	.word	0x20000514

08002dbc <__malloc_lock>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4802      	ldr	r0, [pc, #8]	@ (8002dc8 <__malloc_lock+0xc>)
 8002dc0:	f7ff ff0e 	bl	8002be0 <__retarget_lock_acquire_recursive>
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	2000050c 	.word	0x2000050c

08002dcc <__malloc_unlock>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	4802      	ldr	r0, [pc, #8]	@ (8002dd8 <__malloc_unlock+0xc>)
 8002dd0:	f7ff ff07 	bl	8002be2 <__retarget_lock_release_recursive>
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	2000050c 	.word	0x2000050c

08002ddc <__ssputs_r>:
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	688e      	ldr	r6, [r1, #8]
 8002de0:	b085      	sub	sp, #20
 8002de2:	001f      	movs	r7, r3
 8002de4:	000c      	movs	r4, r1
 8002de6:	680b      	ldr	r3, [r1, #0]
 8002de8:	9002      	str	r0, [sp, #8]
 8002dea:	9203      	str	r2, [sp, #12]
 8002dec:	42be      	cmp	r6, r7
 8002dee:	d830      	bhi.n	8002e52 <__ssputs_r+0x76>
 8002df0:	210c      	movs	r1, #12
 8002df2:	5e62      	ldrsh	r2, [r4, r1]
 8002df4:	2190      	movs	r1, #144	@ 0x90
 8002df6:	00c9      	lsls	r1, r1, #3
 8002df8:	420a      	tst	r2, r1
 8002dfa:	d028      	beq.n	8002e4e <__ssputs_r+0x72>
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	1a5b      	subs	r3, r3, r1
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6963      	ldr	r3, [r4, #20]
 8002e06:	4343      	muls	r3, r0
 8002e08:	9801      	ldr	r0, [sp, #4]
 8002e0a:	0fdd      	lsrs	r5, r3, #31
 8002e0c:	18ed      	adds	r5, r5, r3
 8002e0e:	1c7b      	adds	r3, r7, #1
 8002e10:	181b      	adds	r3, r3, r0
 8002e12:	106d      	asrs	r5, r5, #1
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	d900      	bls.n	8002e1a <__ssputs_r+0x3e>
 8002e18:	001d      	movs	r5, r3
 8002e1a:	0552      	lsls	r2, r2, #21
 8002e1c:	d528      	bpl.n	8002e70 <__ssputs_r+0x94>
 8002e1e:	0029      	movs	r1, r5
 8002e20:	9802      	ldr	r0, [sp, #8]
 8002e22:	f7ff ff4b 	bl	8002cbc <_malloc_r>
 8002e26:	1e06      	subs	r6, r0, #0
 8002e28:	d02c      	beq.n	8002e84 <__ssputs_r+0xa8>
 8002e2a:	9a01      	ldr	r2, [sp, #4]
 8002e2c:	6921      	ldr	r1, [r4, #16]
 8002e2e:	f000 fae2 	bl	80033f6 <memcpy>
 8002e32:	89a2      	ldrh	r2, [r4, #12]
 8002e34:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <__ssputs_r+0xbc>)
 8002e36:	401a      	ands	r2, r3
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	6126      	str	r6, [r4, #16]
 8002e42:	18f6      	adds	r6, r6, r3
 8002e44:	6026      	str	r6, [r4, #0]
 8002e46:	003e      	movs	r6, r7
 8002e48:	6165      	str	r5, [r4, #20]
 8002e4a:	1aed      	subs	r5, r5, r3
 8002e4c:	60a5      	str	r5, [r4, #8]
 8002e4e:	42be      	cmp	r6, r7
 8002e50:	d900      	bls.n	8002e54 <__ssputs_r+0x78>
 8002e52:	003e      	movs	r6, r7
 8002e54:	0032      	movs	r2, r6
 8002e56:	9903      	ldr	r1, [sp, #12]
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	f000 fa9b 	bl	8003394 <memmove>
 8002e5e:	2000      	movs	r0, #0
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	1b9b      	subs	r3, r3, r6
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	199b      	adds	r3, r3, r6
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	b005      	add	sp, #20
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	002a      	movs	r2, r5
 8002e72:	9802      	ldr	r0, [sp, #8]
 8002e74:	f000 fac8 	bl	8003408 <_realloc_r>
 8002e78:	1e06      	subs	r6, r0, #0
 8002e7a:	d1e0      	bne.n	8002e3e <__ssputs_r+0x62>
 8002e7c:	6921      	ldr	r1, [r4, #16]
 8002e7e:	9802      	ldr	r0, [sp, #8]
 8002e80:	f7ff feb0 	bl	8002be4 <_free_r>
 8002e84:	230c      	movs	r3, #12
 8002e86:	2001      	movs	r0, #1
 8002e88:	9a02      	ldr	r2, [sp, #8]
 8002e8a:	4240      	negs	r0, r0
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	89a2      	ldrh	r2, [r4, #12]
 8002e90:	3334      	adds	r3, #52	@ 0x34
 8002e92:	4313      	orrs	r3, r2
 8002e94:	81a3      	strh	r3, [r4, #12]
 8002e96:	e7e9      	b.n	8002e6c <__ssputs_r+0x90>
 8002e98:	fffffb7f 	.word	0xfffffb7f

08002e9c <_svfiprintf_r>:
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b0a1      	sub	sp, #132	@ 0x84
 8002ea0:	9003      	str	r0, [sp, #12]
 8002ea2:	001d      	movs	r5, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	000f      	movs	r7, r1
 8002ea8:	0016      	movs	r6, r2
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	d511      	bpl.n	8002ed2 <_svfiprintf_r+0x36>
 8002eae:	690b      	ldr	r3, [r1, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <_svfiprintf_r+0x36>
 8002eb4:	2140      	movs	r1, #64	@ 0x40
 8002eb6:	f7ff ff01 	bl	8002cbc <_malloc_r>
 8002eba:	6038      	str	r0, [r7, #0]
 8002ebc:	6138      	str	r0, [r7, #16]
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d105      	bne.n	8002ece <_svfiprintf_r+0x32>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	9a03      	ldr	r2, [sp, #12]
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	2001      	movs	r0, #1
 8002eca:	4240      	negs	r0, r0
 8002ecc:	e0cf      	b.n	800306e <_svfiprintf_r+0x1d2>
 8002ece:	2340      	movs	r3, #64	@ 0x40
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	ac08      	add	r4, sp, #32
 8002ed6:	6163      	str	r3, [r4, #20]
 8002ed8:	3320      	adds	r3, #32
 8002eda:	7663      	strb	r3, [r4, #25]
 8002edc:	3310      	adds	r3, #16
 8002ede:	76a3      	strb	r3, [r4, #26]
 8002ee0:	9507      	str	r5, [sp, #28]
 8002ee2:	0035      	movs	r5, r6
 8002ee4:	782b      	ldrb	r3, [r5, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <_svfiprintf_r+0x52>
 8002eea:	2b25      	cmp	r3, #37	@ 0x25
 8002eec:	d148      	bne.n	8002f80 <_svfiprintf_r+0xe4>
 8002eee:	1bab      	subs	r3, r5, r6
 8002ef0:	9305      	str	r3, [sp, #20]
 8002ef2:	42b5      	cmp	r5, r6
 8002ef4:	d00b      	beq.n	8002f0e <_svfiprintf_r+0x72>
 8002ef6:	0032      	movs	r2, r6
 8002ef8:	0039      	movs	r1, r7
 8002efa:	9803      	ldr	r0, [sp, #12]
 8002efc:	f7ff ff6e 	bl	8002ddc <__ssputs_r>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d100      	bne.n	8002f06 <_svfiprintf_r+0x6a>
 8002f04:	e0ae      	b.n	8003064 <_svfiprintf_r+0x1c8>
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	9a05      	ldr	r2, [sp, #20]
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	6163      	str	r3, [r4, #20]
 8002f0e:	782b      	ldrb	r3, [r5, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d100      	bne.n	8002f16 <_svfiprintf_r+0x7a>
 8002f14:	e0a6      	b.n	8003064 <_svfiprintf_r+0x1c8>
 8002f16:	2201      	movs	r2, #1
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4252      	negs	r2, r2
 8002f1c:	6062      	str	r2, [r4, #4]
 8002f1e:	a904      	add	r1, sp, #16
 8002f20:	3254      	adds	r2, #84	@ 0x54
 8002f22:	1852      	adds	r2, r2, r1
 8002f24:	1c6e      	adds	r6, r5, #1
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	60e3      	str	r3, [r4, #12]
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	7013      	strb	r3, [r2, #0]
 8002f2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002f30:	4b54      	ldr	r3, [pc, #336]	@ (8003084 <_svfiprintf_r+0x1e8>)
 8002f32:	2205      	movs	r2, #5
 8002f34:	0018      	movs	r0, r3
 8002f36:	7831      	ldrb	r1, [r6, #0]
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	f000 fa51 	bl	80033e0 <memchr>
 8002f3e:	1c75      	adds	r5, r6, #1
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d11f      	bne.n	8002f84 <_svfiprintf_r+0xe8>
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	06d3      	lsls	r3, r2, #27
 8002f48:	d504      	bpl.n	8002f54 <_svfiprintf_r+0xb8>
 8002f4a:	2353      	movs	r3, #83	@ 0x53
 8002f4c:	a904      	add	r1, sp, #16
 8002f4e:	185b      	adds	r3, r3, r1
 8002f50:	2120      	movs	r1, #32
 8002f52:	7019      	strb	r1, [r3, #0]
 8002f54:	0713      	lsls	r3, r2, #28
 8002f56:	d504      	bpl.n	8002f62 <_svfiprintf_r+0xc6>
 8002f58:	2353      	movs	r3, #83	@ 0x53
 8002f5a:	a904      	add	r1, sp, #16
 8002f5c:	185b      	adds	r3, r3, r1
 8002f5e:	212b      	movs	r1, #43	@ 0x2b
 8002f60:	7019      	strb	r1, [r3, #0]
 8002f62:	7833      	ldrb	r3, [r6, #0]
 8002f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f66:	d016      	beq.n	8002f96 <_svfiprintf_r+0xfa>
 8002f68:	0035      	movs	r5, r6
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	68e3      	ldr	r3, [r4, #12]
 8002f70:	782a      	ldrb	r2, [r5, #0]
 8002f72:	1c6e      	adds	r6, r5, #1
 8002f74:	3a30      	subs	r2, #48	@ 0x30
 8002f76:	2a09      	cmp	r2, #9
 8002f78:	d950      	bls.n	800301c <_svfiprintf_r+0x180>
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d111      	bne.n	8002fa2 <_svfiprintf_r+0x106>
 8002f7e:	e017      	b.n	8002fb0 <_svfiprintf_r+0x114>
 8002f80:	3501      	adds	r5, #1
 8002f82:	e7af      	b.n	8002ee4 <_svfiprintf_r+0x48>
 8002f84:	9b05      	ldr	r3, [sp, #20]
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	1ac0      	subs	r0, r0, r3
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4083      	lsls	r3, r0
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	002e      	movs	r6, r5
 8002f92:	6023      	str	r3, [r4, #0]
 8002f94:	e7cc      	b.n	8002f30 <_svfiprintf_r+0x94>
 8002f96:	9b07      	ldr	r3, [sp, #28]
 8002f98:	1d19      	adds	r1, r3, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	9107      	str	r1, [sp, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db01      	blt.n	8002fa6 <_svfiprintf_r+0x10a>
 8002fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fa4:	e004      	b.n	8002fb0 <_svfiprintf_r+0x114>
 8002fa6:	425b      	negs	r3, r3
 8002fa8:	60e3      	str	r3, [r4, #12]
 8002faa:	2302      	movs	r3, #2
 8002fac:	4313      	orrs	r3, r2
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	782b      	ldrb	r3, [r5, #0]
 8002fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fb4:	d10c      	bne.n	8002fd0 <_svfiprintf_r+0x134>
 8002fb6:	786b      	ldrb	r3, [r5, #1]
 8002fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fba:	d134      	bne.n	8003026 <_svfiprintf_r+0x18a>
 8002fbc:	9b07      	ldr	r3, [sp, #28]
 8002fbe:	3502      	adds	r5, #2
 8002fc0:	1d1a      	adds	r2, r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	9207      	str	r2, [sp, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da01      	bge.n	8002fce <_svfiprintf_r+0x132>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	425b      	negs	r3, r3
 8002fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fd0:	4e2d      	ldr	r6, [pc, #180]	@ (8003088 <_svfiprintf_r+0x1ec>)
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	0030      	movs	r0, r6
 8002fd6:	7829      	ldrb	r1, [r5, #0]
 8002fd8:	f000 fa02 	bl	80033e0 <memchr>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d006      	beq.n	8002fee <_svfiprintf_r+0x152>
 8002fe0:	2340      	movs	r3, #64	@ 0x40
 8002fe2:	1b80      	subs	r0, r0, r6
 8002fe4:	4083      	lsls	r3, r0
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	3501      	adds	r5, #1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	7829      	ldrb	r1, [r5, #0]
 8002ff0:	2206      	movs	r2, #6
 8002ff2:	4826      	ldr	r0, [pc, #152]	@ (800308c <_svfiprintf_r+0x1f0>)
 8002ff4:	1c6e      	adds	r6, r5, #1
 8002ff6:	7621      	strb	r1, [r4, #24]
 8002ff8:	f000 f9f2 	bl	80033e0 <memchr>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d038      	beq.n	8003072 <_svfiprintf_r+0x1d6>
 8003000:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <_svfiprintf_r+0x1f4>)
 8003002:	2b00      	cmp	r3, #0
 8003004:	d122      	bne.n	800304c <_svfiprintf_r+0x1b0>
 8003006:	2207      	movs	r2, #7
 8003008:	9b07      	ldr	r3, [sp, #28]
 800300a:	3307      	adds	r3, #7
 800300c:	4393      	bics	r3, r2
 800300e:	3308      	adds	r3, #8
 8003010:	9307      	str	r3, [sp, #28]
 8003012:	6963      	ldr	r3, [r4, #20]
 8003014:	9a04      	ldr	r2, [sp, #16]
 8003016:	189b      	adds	r3, r3, r2
 8003018:	6163      	str	r3, [r4, #20]
 800301a:	e762      	b.n	8002ee2 <_svfiprintf_r+0x46>
 800301c:	4343      	muls	r3, r0
 800301e:	0035      	movs	r5, r6
 8003020:	2101      	movs	r1, #1
 8003022:	189b      	adds	r3, r3, r2
 8003024:	e7a4      	b.n	8002f70 <_svfiprintf_r+0xd4>
 8003026:	2300      	movs	r3, #0
 8003028:	200a      	movs	r0, #10
 800302a:	0019      	movs	r1, r3
 800302c:	3501      	adds	r5, #1
 800302e:	6063      	str	r3, [r4, #4]
 8003030:	782a      	ldrb	r2, [r5, #0]
 8003032:	1c6e      	adds	r6, r5, #1
 8003034:	3a30      	subs	r2, #48	@ 0x30
 8003036:	2a09      	cmp	r2, #9
 8003038:	d903      	bls.n	8003042 <_svfiprintf_r+0x1a6>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0c8      	beq.n	8002fd0 <_svfiprintf_r+0x134>
 800303e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003040:	e7c6      	b.n	8002fd0 <_svfiprintf_r+0x134>
 8003042:	4341      	muls	r1, r0
 8003044:	0035      	movs	r5, r6
 8003046:	2301      	movs	r3, #1
 8003048:	1889      	adds	r1, r1, r2
 800304a:	e7f1      	b.n	8003030 <_svfiprintf_r+0x194>
 800304c:	aa07      	add	r2, sp, #28
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	0021      	movs	r1, r4
 8003052:	003a      	movs	r2, r7
 8003054:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <_svfiprintf_r+0x1f8>)
 8003056:	9803      	ldr	r0, [sp, #12]
 8003058:	e000      	b.n	800305c <_svfiprintf_r+0x1c0>
 800305a:	bf00      	nop
 800305c:	9004      	str	r0, [sp, #16]
 800305e:	9b04      	ldr	r3, [sp, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	d1d6      	bne.n	8003012 <_svfiprintf_r+0x176>
 8003064:	89bb      	ldrh	r3, [r7, #12]
 8003066:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003068:	065b      	lsls	r3, r3, #25
 800306a:	d500      	bpl.n	800306e <_svfiprintf_r+0x1d2>
 800306c:	e72c      	b.n	8002ec8 <_svfiprintf_r+0x2c>
 800306e:	b021      	add	sp, #132	@ 0x84
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	aa07      	add	r2, sp, #28
 8003074:	9200      	str	r2, [sp, #0]
 8003076:	0021      	movs	r1, r4
 8003078:	003a      	movs	r2, r7
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <_svfiprintf_r+0x1f8>)
 800307c:	9803      	ldr	r0, [sp, #12]
 800307e:	f000 f87b 	bl	8003178 <_printf_i>
 8003082:	e7eb      	b.n	800305c <_svfiprintf_r+0x1c0>
 8003084:	08003504 	.word	0x08003504
 8003088:	0800350a 	.word	0x0800350a
 800308c:	0800350e 	.word	0x0800350e
 8003090:	00000000 	.word	0x00000000
 8003094:	08002ddd 	.word	0x08002ddd

08003098 <_printf_common>:
 8003098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309a:	0016      	movs	r6, r2
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	688a      	ldr	r2, [r1, #8]
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	000c      	movs	r4, r1
 80030a4:	9000      	str	r0, [sp, #0]
 80030a6:	4293      	cmp	r3, r2
 80030a8:	da00      	bge.n	80030ac <_printf_common+0x14>
 80030aa:	0013      	movs	r3, r2
 80030ac:	0022      	movs	r2, r4
 80030ae:	6033      	str	r3, [r6, #0]
 80030b0:	3243      	adds	r2, #67	@ 0x43
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	d001      	beq.n	80030bc <_printf_common+0x24>
 80030b8:	3301      	adds	r3, #1
 80030ba:	6033      	str	r3, [r6, #0]
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	d502      	bpl.n	80030c8 <_printf_common+0x30>
 80030c2:	6833      	ldr	r3, [r6, #0]
 80030c4:	3302      	adds	r3, #2
 80030c6:	6033      	str	r3, [r6, #0]
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	2306      	movs	r3, #6
 80030cc:	0015      	movs	r5, r2
 80030ce:	401d      	ands	r5, r3
 80030d0:	421a      	tst	r2, r3
 80030d2:	d027      	beq.n	8003124 <_printf_common+0x8c>
 80030d4:	0023      	movs	r3, r4
 80030d6:	3343      	adds	r3, #67	@ 0x43
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	4193      	sbcs	r3, r2
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	0692      	lsls	r2, r2, #26
 80030e2:	d430      	bmi.n	8003146 <_printf_common+0xae>
 80030e4:	0022      	movs	r2, r4
 80030e6:	9901      	ldr	r1, [sp, #4]
 80030e8:	9800      	ldr	r0, [sp, #0]
 80030ea:	9d08      	ldr	r5, [sp, #32]
 80030ec:	3243      	adds	r2, #67	@ 0x43
 80030ee:	47a8      	blx	r5
 80030f0:	3001      	adds	r0, #1
 80030f2:	d025      	beq.n	8003140 <_printf_common+0xa8>
 80030f4:	2206      	movs	r2, #6
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	2500      	movs	r5, #0
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d105      	bne.n	800310c <_printf_common+0x74>
 8003100:	6833      	ldr	r3, [r6, #0]
 8003102:	68e5      	ldr	r5, [r4, #12]
 8003104:	1aed      	subs	r5, r5, r3
 8003106:	43eb      	mvns	r3, r5
 8003108:	17db      	asrs	r3, r3, #31
 800310a:	401d      	ands	r5, r3
 800310c:	68a3      	ldr	r3, [r4, #8]
 800310e:	6922      	ldr	r2, [r4, #16]
 8003110:	4293      	cmp	r3, r2
 8003112:	dd01      	ble.n	8003118 <_printf_common+0x80>
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	18ed      	adds	r5, r5, r3
 8003118:	2600      	movs	r6, #0
 800311a:	42b5      	cmp	r5, r6
 800311c:	d120      	bne.n	8003160 <_printf_common+0xc8>
 800311e:	2000      	movs	r0, #0
 8003120:	e010      	b.n	8003144 <_printf_common+0xac>
 8003122:	3501      	adds	r5, #1
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	6832      	ldr	r2, [r6, #0]
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	42ab      	cmp	r3, r5
 800312c:	ddd2      	ble.n	80030d4 <_printf_common+0x3c>
 800312e:	0022      	movs	r2, r4
 8003130:	2301      	movs	r3, #1
 8003132:	9901      	ldr	r1, [sp, #4]
 8003134:	9800      	ldr	r0, [sp, #0]
 8003136:	9f08      	ldr	r7, [sp, #32]
 8003138:	3219      	adds	r2, #25
 800313a:	47b8      	blx	r7
 800313c:	3001      	adds	r0, #1
 800313e:	d1f0      	bne.n	8003122 <_printf_common+0x8a>
 8003140:	2001      	movs	r0, #1
 8003142:	4240      	negs	r0, r0
 8003144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003146:	2030      	movs	r0, #48	@ 0x30
 8003148:	18e1      	adds	r1, r4, r3
 800314a:	3143      	adds	r1, #67	@ 0x43
 800314c:	7008      	strb	r0, [r1, #0]
 800314e:	0021      	movs	r1, r4
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	3145      	adds	r1, #69	@ 0x45
 8003154:	7809      	ldrb	r1, [r1, #0]
 8003156:	18a2      	adds	r2, r4, r2
 8003158:	3243      	adds	r2, #67	@ 0x43
 800315a:	3302      	adds	r3, #2
 800315c:	7011      	strb	r1, [r2, #0]
 800315e:	e7c1      	b.n	80030e4 <_printf_common+0x4c>
 8003160:	0022      	movs	r2, r4
 8003162:	2301      	movs	r3, #1
 8003164:	9901      	ldr	r1, [sp, #4]
 8003166:	9800      	ldr	r0, [sp, #0]
 8003168:	9f08      	ldr	r7, [sp, #32]
 800316a:	321a      	adds	r2, #26
 800316c:	47b8      	blx	r7
 800316e:	3001      	adds	r0, #1
 8003170:	d0e6      	beq.n	8003140 <_printf_common+0xa8>
 8003172:	3601      	adds	r6, #1
 8003174:	e7d1      	b.n	800311a <_printf_common+0x82>
	...

08003178 <_printf_i>:
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b08b      	sub	sp, #44	@ 0x2c
 800317c:	9206      	str	r2, [sp, #24]
 800317e:	000a      	movs	r2, r1
 8003180:	3243      	adds	r2, #67	@ 0x43
 8003182:	9307      	str	r3, [sp, #28]
 8003184:	9005      	str	r0, [sp, #20]
 8003186:	9203      	str	r2, [sp, #12]
 8003188:	7e0a      	ldrb	r2, [r1, #24]
 800318a:	000c      	movs	r4, r1
 800318c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800318e:	2a78      	cmp	r2, #120	@ 0x78
 8003190:	d809      	bhi.n	80031a6 <_printf_i+0x2e>
 8003192:	2a62      	cmp	r2, #98	@ 0x62
 8003194:	d80b      	bhi.n	80031ae <_printf_i+0x36>
 8003196:	2a00      	cmp	r2, #0
 8003198:	d100      	bne.n	800319c <_printf_i+0x24>
 800319a:	e0bc      	b.n	8003316 <_printf_i+0x19e>
 800319c:	497b      	ldr	r1, [pc, #492]	@ (800338c <_printf_i+0x214>)
 800319e:	9104      	str	r1, [sp, #16]
 80031a0:	2a58      	cmp	r2, #88	@ 0x58
 80031a2:	d100      	bne.n	80031a6 <_printf_i+0x2e>
 80031a4:	e090      	b.n	80032c8 <_printf_i+0x150>
 80031a6:	0025      	movs	r5, r4
 80031a8:	3542      	adds	r5, #66	@ 0x42
 80031aa:	702a      	strb	r2, [r5, #0]
 80031ac:	e022      	b.n	80031f4 <_printf_i+0x7c>
 80031ae:	0010      	movs	r0, r2
 80031b0:	3863      	subs	r0, #99	@ 0x63
 80031b2:	2815      	cmp	r0, #21
 80031b4:	d8f7      	bhi.n	80031a6 <_printf_i+0x2e>
 80031b6:	f7fc ffa7 	bl	8000108 <__gnu_thumb1_case_shi>
 80031ba:	0016      	.short	0x0016
 80031bc:	fff6001f 	.word	0xfff6001f
 80031c0:	fff6fff6 	.word	0xfff6fff6
 80031c4:	001ffff6 	.word	0x001ffff6
 80031c8:	fff6fff6 	.word	0xfff6fff6
 80031cc:	fff6fff6 	.word	0xfff6fff6
 80031d0:	003600a1 	.word	0x003600a1
 80031d4:	fff60080 	.word	0xfff60080
 80031d8:	00b2fff6 	.word	0x00b2fff6
 80031dc:	0036fff6 	.word	0x0036fff6
 80031e0:	fff6fff6 	.word	0xfff6fff6
 80031e4:	0084      	.short	0x0084
 80031e6:	0025      	movs	r5, r4
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	3542      	adds	r5, #66	@ 0x42
 80031ec:	1d11      	adds	r1, r2, #4
 80031ee:	6019      	str	r1, [r3, #0]
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	702b      	strb	r3, [r5, #0]
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0a0      	b.n	800333a <_printf_i+0x1c2>
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	6809      	ldr	r1, [r1, #0]
 80031fc:	1d02      	adds	r2, r0, #4
 80031fe:	060d      	lsls	r5, r1, #24
 8003200:	d50b      	bpl.n	800321a <_printf_i+0xa2>
 8003202:	6806      	ldr	r6, [r0, #0]
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	2e00      	cmp	r6, #0
 8003208:	da03      	bge.n	8003212 <_printf_i+0x9a>
 800320a:	232d      	movs	r3, #45	@ 0x2d
 800320c:	9a03      	ldr	r2, [sp, #12]
 800320e:	4276      	negs	r6, r6
 8003210:	7013      	strb	r3, [r2, #0]
 8003212:	4b5e      	ldr	r3, [pc, #376]	@ (800338c <_printf_i+0x214>)
 8003214:	270a      	movs	r7, #10
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	e018      	b.n	800324c <_printf_i+0xd4>
 800321a:	6806      	ldr	r6, [r0, #0]
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	0649      	lsls	r1, r1, #25
 8003220:	d5f1      	bpl.n	8003206 <_printf_i+0x8e>
 8003222:	b236      	sxth	r6, r6
 8003224:	e7ef      	b.n	8003206 <_printf_i+0x8e>
 8003226:	6808      	ldr	r0, [r1, #0]
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	c940      	ldmia	r1!, {r6}
 800322c:	0605      	lsls	r5, r0, #24
 800322e:	d402      	bmi.n	8003236 <_printf_i+0xbe>
 8003230:	0640      	lsls	r0, r0, #25
 8003232:	d500      	bpl.n	8003236 <_printf_i+0xbe>
 8003234:	b2b6      	uxth	r6, r6
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	4b54      	ldr	r3, [pc, #336]	@ (800338c <_printf_i+0x214>)
 800323a:	270a      	movs	r7, #10
 800323c:	9304      	str	r3, [sp, #16]
 800323e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003240:	d100      	bne.n	8003244 <_printf_i+0xcc>
 8003242:	3f02      	subs	r7, #2
 8003244:	0023      	movs	r3, r4
 8003246:	2200      	movs	r2, #0
 8003248:	3343      	adds	r3, #67	@ 0x43
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	60a3      	str	r3, [r4, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db03      	blt.n	800325c <_printf_i+0xe4>
 8003254:	2104      	movs	r1, #4
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	438a      	bics	r2, r1
 800325a:	6022      	str	r2, [r4, #0]
 800325c:	2e00      	cmp	r6, #0
 800325e:	d102      	bne.n	8003266 <_printf_i+0xee>
 8003260:	9d03      	ldr	r5, [sp, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <_printf_i+0x108>
 8003266:	9d03      	ldr	r5, [sp, #12]
 8003268:	0030      	movs	r0, r6
 800326a:	0039      	movs	r1, r7
 800326c:	f7fc ffdc 	bl	8000228 <__aeabi_uidivmod>
 8003270:	9b04      	ldr	r3, [sp, #16]
 8003272:	3d01      	subs	r5, #1
 8003274:	5c5b      	ldrb	r3, [r3, r1]
 8003276:	702b      	strb	r3, [r5, #0]
 8003278:	0033      	movs	r3, r6
 800327a:	0006      	movs	r6, r0
 800327c:	429f      	cmp	r7, r3
 800327e:	d9f3      	bls.n	8003268 <_printf_i+0xf0>
 8003280:	2f08      	cmp	r7, #8
 8003282:	d109      	bne.n	8003298 <_printf_i+0x120>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	07db      	lsls	r3, r3, #31
 8003288:	d506      	bpl.n	8003298 <_printf_i+0x120>
 800328a:	6862      	ldr	r2, [r4, #4]
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	dc02      	bgt.n	8003298 <_printf_i+0x120>
 8003292:	2330      	movs	r3, #48	@ 0x30
 8003294:	3d01      	subs	r5, #1
 8003296:	702b      	strb	r3, [r5, #0]
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	1b5b      	subs	r3, r3, r5
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	9b07      	ldr	r3, [sp, #28]
 80032a0:	0021      	movs	r1, r4
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	9805      	ldr	r0, [sp, #20]
 80032a6:	9b06      	ldr	r3, [sp, #24]
 80032a8:	aa09      	add	r2, sp, #36	@ 0x24
 80032aa:	f7ff fef5 	bl	8003098 <_printf_common>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d148      	bne.n	8003344 <_printf_i+0x1cc>
 80032b2:	2001      	movs	r0, #1
 80032b4:	4240      	negs	r0, r0
 80032b6:	b00b      	add	sp, #44	@ 0x2c
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ba:	2220      	movs	r2, #32
 80032bc:	6809      	ldr	r1, [r1, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	6022      	str	r2, [r4, #0]
 80032c2:	2278      	movs	r2, #120	@ 0x78
 80032c4:	4932      	ldr	r1, [pc, #200]	@ (8003390 <_printf_i+0x218>)
 80032c6:	9104      	str	r1, [sp, #16]
 80032c8:	0021      	movs	r1, r4
 80032ca:	3145      	adds	r1, #69	@ 0x45
 80032cc:	700a      	strb	r2, [r1, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	c940      	ldmia	r1!, {r6}
 80032d4:	0610      	lsls	r0, r2, #24
 80032d6:	d402      	bmi.n	80032de <_printf_i+0x166>
 80032d8:	0650      	lsls	r0, r2, #25
 80032da:	d500      	bpl.n	80032de <_printf_i+0x166>
 80032dc:	b2b6      	uxth	r6, r6
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	07d3      	lsls	r3, r2, #31
 80032e2:	d502      	bpl.n	80032ea <_printf_i+0x172>
 80032e4:	2320      	movs	r3, #32
 80032e6:	4313      	orrs	r3, r2
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	2e00      	cmp	r6, #0
 80032ec:	d001      	beq.n	80032f2 <_printf_i+0x17a>
 80032ee:	2710      	movs	r7, #16
 80032f0:	e7a8      	b.n	8003244 <_printf_i+0xcc>
 80032f2:	2220      	movs	r2, #32
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	4393      	bics	r3, r2
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	e7f8      	b.n	80032ee <_printf_i+0x176>
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	680d      	ldr	r5, [r1, #0]
 8003300:	1d10      	adds	r0, r2, #4
 8003302:	6949      	ldr	r1, [r1, #20]
 8003304:	6018      	str	r0, [r3, #0]
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	062e      	lsls	r6, r5, #24
 800330a:	d501      	bpl.n	8003310 <_printf_i+0x198>
 800330c:	6019      	str	r1, [r3, #0]
 800330e:	e002      	b.n	8003316 <_printf_i+0x19e>
 8003310:	066d      	lsls	r5, r5, #25
 8003312:	d5fb      	bpl.n	800330c <_printf_i+0x194>
 8003314:	8019      	strh	r1, [r3, #0]
 8003316:	2300      	movs	r3, #0
 8003318:	9d03      	ldr	r5, [sp, #12]
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	e7bf      	b.n	800329e <_printf_i+0x126>
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	1d11      	adds	r1, r2, #4
 8003322:	6019      	str	r1, [r3, #0]
 8003324:	6815      	ldr	r5, [r2, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	0028      	movs	r0, r5
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	f000 f858 	bl	80033e0 <memchr>
 8003330:	2800      	cmp	r0, #0
 8003332:	d001      	beq.n	8003338 <_printf_i+0x1c0>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	9a03      	ldr	r2, [sp, #12]
 8003340:	7013      	strb	r3, [r2, #0]
 8003342:	e7ac      	b.n	800329e <_printf_i+0x126>
 8003344:	002a      	movs	r2, r5
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	9906      	ldr	r1, [sp, #24]
 800334a:	9805      	ldr	r0, [sp, #20]
 800334c:	9d07      	ldr	r5, [sp, #28]
 800334e:	47a8      	blx	r5
 8003350:	3001      	adds	r0, #1
 8003352:	d0ae      	beq.n	80032b2 <_printf_i+0x13a>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	079b      	lsls	r3, r3, #30
 8003358:	d415      	bmi.n	8003386 <_printf_i+0x20e>
 800335a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800335c:	68e0      	ldr	r0, [r4, #12]
 800335e:	4298      	cmp	r0, r3
 8003360:	daa9      	bge.n	80032b6 <_printf_i+0x13e>
 8003362:	0018      	movs	r0, r3
 8003364:	e7a7      	b.n	80032b6 <_printf_i+0x13e>
 8003366:	0022      	movs	r2, r4
 8003368:	2301      	movs	r3, #1
 800336a:	9906      	ldr	r1, [sp, #24]
 800336c:	9805      	ldr	r0, [sp, #20]
 800336e:	9e07      	ldr	r6, [sp, #28]
 8003370:	3219      	adds	r2, #25
 8003372:	47b0      	blx	r6
 8003374:	3001      	adds	r0, #1
 8003376:	d09c      	beq.n	80032b2 <_printf_i+0x13a>
 8003378:	3501      	adds	r5, #1
 800337a:	68e3      	ldr	r3, [r4, #12]
 800337c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	42ab      	cmp	r3, r5
 8003382:	dcf0      	bgt.n	8003366 <_printf_i+0x1ee>
 8003384:	e7e9      	b.n	800335a <_printf_i+0x1e2>
 8003386:	2500      	movs	r5, #0
 8003388:	e7f7      	b.n	800337a <_printf_i+0x202>
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	08003515 	.word	0x08003515
 8003390:	08003526 	.word	0x08003526

08003394 <memmove>:
 8003394:	b510      	push	{r4, lr}
 8003396:	4288      	cmp	r0, r1
 8003398:	d806      	bhi.n	80033a8 <memmove+0x14>
 800339a:	2300      	movs	r3, #0
 800339c:	429a      	cmp	r2, r3
 800339e:	d008      	beq.n	80033b2 <memmove+0x1e>
 80033a0:	5ccc      	ldrb	r4, [r1, r3]
 80033a2:	54c4      	strb	r4, [r0, r3]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e7f9      	b.n	800339c <memmove+0x8>
 80033a8:	188b      	adds	r3, r1, r2
 80033aa:	4298      	cmp	r0, r3
 80033ac:	d2f5      	bcs.n	800339a <memmove+0x6>
 80033ae:	3a01      	subs	r2, #1
 80033b0:	d200      	bcs.n	80033b4 <memmove+0x20>
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	5c8b      	ldrb	r3, [r1, r2]
 80033b6:	5483      	strb	r3, [r0, r2]
 80033b8:	e7f9      	b.n	80033ae <memmove+0x1a>
	...

080033bc <_sbrk_r>:
 80033bc:	2300      	movs	r3, #0
 80033be:	b570      	push	{r4, r5, r6, lr}
 80033c0:	4d06      	ldr	r5, [pc, #24]	@ (80033dc <_sbrk_r+0x20>)
 80033c2:	0004      	movs	r4, r0
 80033c4:	0008      	movs	r0, r1
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	f7fd fa06 	bl	80007d8 <_sbrk>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d103      	bne.n	80033d8 <_sbrk_r+0x1c>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d000      	beq.n	80033d8 <_sbrk_r+0x1c>
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	bd70      	pop	{r4, r5, r6, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	20000508 	.word	0x20000508

080033e0 <memchr>:
 80033e0:	b2c9      	uxtb	r1, r1
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	4290      	cmp	r0, r2
 80033e6:	d101      	bne.n	80033ec <memchr+0xc>
 80033e8:	2000      	movs	r0, #0
 80033ea:	4770      	bx	lr
 80033ec:	7803      	ldrb	r3, [r0, #0]
 80033ee:	428b      	cmp	r3, r1
 80033f0:	d0fb      	beq.n	80033ea <memchr+0xa>
 80033f2:	3001      	adds	r0, #1
 80033f4:	e7f6      	b.n	80033e4 <memchr+0x4>

080033f6 <memcpy>:
 80033f6:	2300      	movs	r3, #0
 80033f8:	b510      	push	{r4, lr}
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d100      	bne.n	8003400 <memcpy+0xa>
 80033fe:	bd10      	pop	{r4, pc}
 8003400:	5ccc      	ldrb	r4, [r1, r3]
 8003402:	54c4      	strb	r4, [r0, r3]
 8003404:	3301      	adds	r3, #1
 8003406:	e7f8      	b.n	80033fa <memcpy+0x4>

08003408 <_realloc_r>:
 8003408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800340a:	0006      	movs	r6, r0
 800340c:	000c      	movs	r4, r1
 800340e:	0015      	movs	r5, r2
 8003410:	2900      	cmp	r1, #0
 8003412:	d105      	bne.n	8003420 <_realloc_r+0x18>
 8003414:	0011      	movs	r1, r2
 8003416:	f7ff fc51 	bl	8002cbc <_malloc_r>
 800341a:	0004      	movs	r4, r0
 800341c:	0020      	movs	r0, r4
 800341e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003420:	2a00      	cmp	r2, #0
 8003422:	d103      	bne.n	800342c <_realloc_r+0x24>
 8003424:	f7ff fbde 	bl	8002be4 <_free_r>
 8003428:	2400      	movs	r4, #0
 800342a:	e7f7      	b.n	800341c <_realloc_r+0x14>
 800342c:	f000 f81b 	bl	8003466 <_malloc_usable_size_r>
 8003430:	0007      	movs	r7, r0
 8003432:	4285      	cmp	r5, r0
 8003434:	d802      	bhi.n	800343c <_realloc_r+0x34>
 8003436:	0843      	lsrs	r3, r0, #1
 8003438:	42ab      	cmp	r3, r5
 800343a:	d3ef      	bcc.n	800341c <_realloc_r+0x14>
 800343c:	0029      	movs	r1, r5
 800343e:	0030      	movs	r0, r6
 8003440:	f7ff fc3c 	bl	8002cbc <_malloc_r>
 8003444:	9001      	str	r0, [sp, #4]
 8003446:	2800      	cmp	r0, #0
 8003448:	d0ee      	beq.n	8003428 <_realloc_r+0x20>
 800344a:	002a      	movs	r2, r5
 800344c:	42bd      	cmp	r5, r7
 800344e:	d900      	bls.n	8003452 <_realloc_r+0x4a>
 8003450:	003a      	movs	r2, r7
 8003452:	0021      	movs	r1, r4
 8003454:	9801      	ldr	r0, [sp, #4]
 8003456:	f7ff ffce 	bl	80033f6 <memcpy>
 800345a:	0021      	movs	r1, r4
 800345c:	0030      	movs	r0, r6
 800345e:	f7ff fbc1 	bl	8002be4 <_free_r>
 8003462:	9c01      	ldr	r4, [sp, #4]
 8003464:	e7da      	b.n	800341c <_realloc_r+0x14>

08003466 <_malloc_usable_size_r>:
 8003466:	1f0b      	subs	r3, r1, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1f18      	subs	r0, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	da01      	bge.n	8003474 <_malloc_usable_size_r+0xe>
 8003470:	580b      	ldr	r3, [r1, r0]
 8003472:	18c0      	adds	r0, r0, r3
 8003474:	4770      	bx	lr
	...

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
