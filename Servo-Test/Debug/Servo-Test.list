
Servo-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d30  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea4  08005ea4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ea4  08005ea4  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ea4  08005ea4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005eac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000005c  08005f08  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005f08  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e619  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c7  00000000  00000000  0001569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00017868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a77  00000000  00000000  000185b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001180f  00000000  00000000  00019027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a39  00000000  00000000  0002a836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a8b5  00000000  00000000  0003b26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5b24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000a5b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000a917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005dd8 	.word	0x08005dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005dd8 	.word	0x08005dd8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_dadd>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	4657      	mov	r7, sl
 800040c:	464e      	mov	r6, r9
 800040e:	4645      	mov	r5, r8
 8000410:	46de      	mov	lr, fp
 8000412:	b5e0      	push	{r5, r6, r7, lr}
 8000414:	b083      	sub	sp, #12
 8000416:	9000      	str	r0, [sp, #0]
 8000418:	9101      	str	r1, [sp, #4]
 800041a:	030c      	lsls	r4, r1, #12
 800041c:	004f      	lsls	r7, r1, #1
 800041e:	0fce      	lsrs	r6, r1, #31
 8000420:	0a61      	lsrs	r1, r4, #9
 8000422:	9c00      	ldr	r4, [sp, #0]
 8000424:	031d      	lsls	r5, r3, #12
 8000426:	0f64      	lsrs	r4, r4, #29
 8000428:	430c      	orrs	r4, r1
 800042a:	9900      	ldr	r1, [sp, #0]
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	00c8      	lsls	r0, r1, #3
 8000432:	0059      	lsls	r1, r3, #1
 8000434:	0d4b      	lsrs	r3, r1, #21
 8000436:	4699      	mov	r9, r3
 8000438:	9a00      	ldr	r2, [sp, #0]
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	0a6d      	lsrs	r5, r5, #9
 800043e:	0fd9      	lsrs	r1, r3, #31
 8000440:	0f53      	lsrs	r3, r2, #29
 8000442:	432b      	orrs	r3, r5
 8000444:	469a      	mov	sl, r3
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	0d7f      	lsrs	r7, r7, #21
 800044a:	00da      	lsls	r2, r3, #3
 800044c:	4694      	mov	ip, r2
 800044e:	464a      	mov	r2, r9
 8000450:	46b0      	mov	r8, r6
 8000452:	1aba      	subs	r2, r7, r2
 8000454:	428e      	cmp	r6, r1
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x52>
 8000458:	e0b0      	b.n	80005bc <__aeabi_dadd+0x1b4>
 800045a:	2a00      	cmp	r2, #0
 800045c:	dc00      	bgt.n	8000460 <__aeabi_dadd+0x58>
 800045e:	e078      	b.n	8000552 <__aeabi_dadd+0x14a>
 8000460:	4649      	mov	r1, r9
 8000462:	2900      	cmp	r1, #0
 8000464:	d100      	bne.n	8000468 <__aeabi_dadd+0x60>
 8000466:	e0e9      	b.n	800063c <__aeabi_dadd+0x234>
 8000468:	49c9      	ldr	r1, [pc, #804]	@ (8000790 <__aeabi_dadd+0x388>)
 800046a:	428f      	cmp	r7, r1
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x68>
 800046e:	e195      	b.n	800079c <__aeabi_dadd+0x394>
 8000470:	2501      	movs	r5, #1
 8000472:	2a38      	cmp	r2, #56	@ 0x38
 8000474:	dc16      	bgt.n	80004a4 <__aeabi_dadd+0x9c>
 8000476:	2180      	movs	r1, #128	@ 0x80
 8000478:	4653      	mov	r3, sl
 800047a:	0409      	lsls	r1, r1, #16
 800047c:	430b      	orrs	r3, r1
 800047e:	469a      	mov	sl, r3
 8000480:	2a1f      	cmp	r2, #31
 8000482:	dd00      	ble.n	8000486 <__aeabi_dadd+0x7e>
 8000484:	e1e7      	b.n	8000856 <__aeabi_dadd+0x44e>
 8000486:	2120      	movs	r1, #32
 8000488:	4655      	mov	r5, sl
 800048a:	1a8b      	subs	r3, r1, r2
 800048c:	4661      	mov	r1, ip
 800048e:	409d      	lsls	r5, r3
 8000490:	40d1      	lsrs	r1, r2
 8000492:	430d      	orrs	r5, r1
 8000494:	4661      	mov	r1, ip
 8000496:	4099      	lsls	r1, r3
 8000498:	1e4b      	subs	r3, r1, #1
 800049a:	4199      	sbcs	r1, r3
 800049c:	4653      	mov	r3, sl
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	430d      	orrs	r5, r1
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	1b45      	subs	r5, r0, r5
 80004a6:	42a8      	cmp	r0, r5
 80004a8:	4180      	sbcs	r0, r0
 80004aa:	4240      	negs	r0, r0
 80004ac:	1a24      	subs	r4, r4, r0
 80004ae:	0223      	lsls	r3, r4, #8
 80004b0:	d400      	bmi.n	80004b4 <__aeabi_dadd+0xac>
 80004b2:	e10f      	b.n	80006d4 <__aeabi_dadd+0x2cc>
 80004b4:	0264      	lsls	r4, r4, #9
 80004b6:	0a64      	lsrs	r4, r4, #9
 80004b8:	2c00      	cmp	r4, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_dadd+0xb6>
 80004bc:	e139      	b.n	8000732 <__aeabi_dadd+0x32a>
 80004be:	0020      	movs	r0, r4
 80004c0:	f001 fcee 	bl	8001ea0 <__clzsi2>
 80004c4:	0003      	movs	r3, r0
 80004c6:	3b08      	subs	r3, #8
 80004c8:	2120      	movs	r1, #32
 80004ca:	0028      	movs	r0, r5
 80004cc:	1aca      	subs	r2, r1, r3
 80004ce:	40d0      	lsrs	r0, r2
 80004d0:	409c      	lsls	r4, r3
 80004d2:	0002      	movs	r2, r0
 80004d4:	409d      	lsls	r5, r3
 80004d6:	4322      	orrs	r2, r4
 80004d8:	429f      	cmp	r7, r3
 80004da:	dd00      	ble.n	80004de <__aeabi_dadd+0xd6>
 80004dc:	e173      	b.n	80007c6 <__aeabi_dadd+0x3be>
 80004de:	1bd8      	subs	r0, r3, r7
 80004e0:	3001      	adds	r0, #1
 80004e2:	1a09      	subs	r1, r1, r0
 80004e4:	002c      	movs	r4, r5
 80004e6:	408d      	lsls	r5, r1
 80004e8:	40c4      	lsrs	r4, r0
 80004ea:	1e6b      	subs	r3, r5, #1
 80004ec:	419d      	sbcs	r5, r3
 80004ee:	0013      	movs	r3, r2
 80004f0:	40c2      	lsrs	r2, r0
 80004f2:	408b      	lsls	r3, r1
 80004f4:	4325      	orrs	r5, r4
 80004f6:	2700      	movs	r7, #0
 80004f8:	0014      	movs	r4, r2
 80004fa:	431d      	orrs	r5, r3
 80004fc:	076b      	lsls	r3, r5, #29
 80004fe:	d009      	beq.n	8000514 <__aeabi_dadd+0x10c>
 8000500:	230f      	movs	r3, #15
 8000502:	402b      	ands	r3, r5
 8000504:	2b04      	cmp	r3, #4
 8000506:	d005      	beq.n	8000514 <__aeabi_dadd+0x10c>
 8000508:	1d2b      	adds	r3, r5, #4
 800050a:	42ab      	cmp	r3, r5
 800050c:	41ad      	sbcs	r5, r5
 800050e:	426d      	negs	r5, r5
 8000510:	1964      	adds	r4, r4, r5
 8000512:	001d      	movs	r5, r3
 8000514:	0223      	lsls	r3, r4, #8
 8000516:	d400      	bmi.n	800051a <__aeabi_dadd+0x112>
 8000518:	e12d      	b.n	8000776 <__aeabi_dadd+0x36e>
 800051a:	4a9d      	ldr	r2, [pc, #628]	@ (8000790 <__aeabi_dadd+0x388>)
 800051c:	3701      	adds	r7, #1
 800051e:	4297      	cmp	r7, r2
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x11c>
 8000522:	e0d3      	b.n	80006cc <__aeabi_dadd+0x2c4>
 8000524:	4646      	mov	r6, r8
 8000526:	499b      	ldr	r1, [pc, #620]	@ (8000794 <__aeabi_dadd+0x38c>)
 8000528:	08ed      	lsrs	r5, r5, #3
 800052a:	4021      	ands	r1, r4
 800052c:	074a      	lsls	r2, r1, #29
 800052e:	432a      	orrs	r2, r5
 8000530:	057c      	lsls	r4, r7, #21
 8000532:	024d      	lsls	r5, r1, #9
 8000534:	0b2d      	lsrs	r5, r5, #12
 8000536:	0d64      	lsrs	r4, r4, #21
 8000538:	0524      	lsls	r4, r4, #20
 800053a:	432c      	orrs	r4, r5
 800053c:	07f6      	lsls	r6, r6, #31
 800053e:	4334      	orrs	r4, r6
 8000540:	0010      	movs	r0, r2
 8000542:	0021      	movs	r1, r4
 8000544:	b003      	add	sp, #12
 8000546:	bcf0      	pop	{r4, r5, r6, r7}
 8000548:	46bb      	mov	fp, r7
 800054a:	46b2      	mov	sl, r6
 800054c:	46a9      	mov	r9, r5
 800054e:	46a0      	mov	r8, r4
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000552:	2a00      	cmp	r2, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0x150>
 8000556:	e084      	b.n	8000662 <__aeabi_dadd+0x25a>
 8000558:	464a      	mov	r2, r9
 800055a:	1bd2      	subs	r2, r2, r7
 800055c:	2f00      	cmp	r7, #0
 800055e:	d000      	beq.n	8000562 <__aeabi_dadd+0x15a>
 8000560:	e16d      	b.n	800083e <__aeabi_dadd+0x436>
 8000562:	0025      	movs	r5, r4
 8000564:	4305      	orrs	r5, r0
 8000566:	d100      	bne.n	800056a <__aeabi_dadd+0x162>
 8000568:	e127      	b.n	80007ba <__aeabi_dadd+0x3b2>
 800056a:	1e56      	subs	r6, r2, #1
 800056c:	2a01      	cmp	r2, #1
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x16a>
 8000570:	e23b      	b.n	80009ea <__aeabi_dadd+0x5e2>
 8000572:	4d87      	ldr	r5, [pc, #540]	@ (8000790 <__aeabi_dadd+0x388>)
 8000574:	42aa      	cmp	r2, r5
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0x172>
 8000578:	e26a      	b.n	8000a50 <__aeabi_dadd+0x648>
 800057a:	2501      	movs	r5, #1
 800057c:	2e38      	cmp	r6, #56	@ 0x38
 800057e:	dc12      	bgt.n	80005a6 <__aeabi_dadd+0x19e>
 8000580:	0032      	movs	r2, r6
 8000582:	2a1f      	cmp	r2, #31
 8000584:	dd00      	ble.n	8000588 <__aeabi_dadd+0x180>
 8000586:	e1f8      	b.n	800097a <__aeabi_dadd+0x572>
 8000588:	2620      	movs	r6, #32
 800058a:	0025      	movs	r5, r4
 800058c:	1ab6      	subs	r6, r6, r2
 800058e:	0007      	movs	r7, r0
 8000590:	4653      	mov	r3, sl
 8000592:	40b0      	lsls	r0, r6
 8000594:	40d4      	lsrs	r4, r2
 8000596:	40b5      	lsls	r5, r6
 8000598:	40d7      	lsrs	r7, r2
 800059a:	1e46      	subs	r6, r0, #1
 800059c:	41b0      	sbcs	r0, r6
 800059e:	1b1b      	subs	r3, r3, r4
 80005a0:	469a      	mov	sl, r3
 80005a2:	433d      	orrs	r5, r7
 80005a4:	4305      	orrs	r5, r0
 80005a6:	4662      	mov	r2, ip
 80005a8:	1b55      	subs	r5, r2, r5
 80005aa:	45ac      	cmp	ip, r5
 80005ac:	4192      	sbcs	r2, r2
 80005ae:	4653      	mov	r3, sl
 80005b0:	4252      	negs	r2, r2
 80005b2:	000e      	movs	r6, r1
 80005b4:	464f      	mov	r7, r9
 80005b6:	4688      	mov	r8, r1
 80005b8:	1a9c      	subs	r4, r3, r2
 80005ba:	e778      	b.n	80004ae <__aeabi_dadd+0xa6>
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_dadd+0x1ba>
 80005c0:	e08e      	b.n	80006e0 <__aeabi_dadd+0x2d8>
 80005c2:	4649      	mov	r1, r9
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d175      	bne.n	80006b4 <__aeabi_dadd+0x2ac>
 80005c8:	4661      	mov	r1, ip
 80005ca:	4653      	mov	r3, sl
 80005cc:	4319      	orrs	r1, r3
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x1ca>
 80005d0:	e0f6      	b.n	80007c0 <__aeabi_dadd+0x3b8>
 80005d2:	1e51      	subs	r1, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x1d2>
 80005d8:	e191      	b.n	80008fe <__aeabi_dadd+0x4f6>
 80005da:	4d6d      	ldr	r5, [pc, #436]	@ (8000790 <__aeabi_dadd+0x388>)
 80005dc:	42aa      	cmp	r2, r5
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x1da>
 80005e0:	e0dc      	b.n	800079c <__aeabi_dadd+0x394>
 80005e2:	2501      	movs	r5, #1
 80005e4:	2938      	cmp	r1, #56	@ 0x38
 80005e6:	dc14      	bgt.n	8000612 <__aeabi_dadd+0x20a>
 80005e8:	000a      	movs	r2, r1
 80005ea:	2a1f      	cmp	r2, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x1e8>
 80005ee:	e1a2      	b.n	8000936 <__aeabi_dadd+0x52e>
 80005f0:	2120      	movs	r1, #32
 80005f2:	4653      	mov	r3, sl
 80005f4:	1a89      	subs	r1, r1, r2
 80005f6:	408b      	lsls	r3, r1
 80005f8:	001d      	movs	r5, r3
 80005fa:	4663      	mov	r3, ip
 80005fc:	40d3      	lsrs	r3, r2
 80005fe:	431d      	orrs	r5, r3
 8000600:	4663      	mov	r3, ip
 8000602:	408b      	lsls	r3, r1
 8000604:	0019      	movs	r1, r3
 8000606:	1e4b      	subs	r3, r1, #1
 8000608:	4199      	sbcs	r1, r3
 800060a:	4653      	mov	r3, sl
 800060c:	40d3      	lsrs	r3, r2
 800060e:	430d      	orrs	r5, r1
 8000610:	18e4      	adds	r4, r4, r3
 8000612:	182d      	adds	r5, r5, r0
 8000614:	4285      	cmp	r5, r0
 8000616:	4180      	sbcs	r0, r0
 8000618:	4240      	negs	r0, r0
 800061a:	1824      	adds	r4, r4, r0
 800061c:	0223      	lsls	r3, r4, #8
 800061e:	d559      	bpl.n	80006d4 <__aeabi_dadd+0x2cc>
 8000620:	4b5b      	ldr	r3, [pc, #364]	@ (8000790 <__aeabi_dadd+0x388>)
 8000622:	3701      	adds	r7, #1
 8000624:	429f      	cmp	r7, r3
 8000626:	d051      	beq.n	80006cc <__aeabi_dadd+0x2c4>
 8000628:	2101      	movs	r1, #1
 800062a:	4b5a      	ldr	r3, [pc, #360]	@ (8000794 <__aeabi_dadd+0x38c>)
 800062c:	086a      	lsrs	r2, r5, #1
 800062e:	401c      	ands	r4, r3
 8000630:	4029      	ands	r1, r5
 8000632:	430a      	orrs	r2, r1
 8000634:	07e5      	lsls	r5, r4, #31
 8000636:	4315      	orrs	r5, r2
 8000638:	0864      	lsrs	r4, r4, #1
 800063a:	e75f      	b.n	80004fc <__aeabi_dadd+0xf4>
 800063c:	4661      	mov	r1, ip
 800063e:	4653      	mov	r3, sl
 8000640:	4319      	orrs	r1, r3
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x23e>
 8000644:	e0bc      	b.n	80007c0 <__aeabi_dadd+0x3b8>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x246>
 800064c:	e164      	b.n	8000918 <__aeabi_dadd+0x510>
 800064e:	4d50      	ldr	r5, [pc, #320]	@ (8000790 <__aeabi_dadd+0x388>)
 8000650:	42aa      	cmp	r2, r5
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x24e>
 8000654:	e16a      	b.n	800092c <__aeabi_dadd+0x524>
 8000656:	2501      	movs	r5, #1
 8000658:	2938      	cmp	r1, #56	@ 0x38
 800065a:	dd00      	ble.n	800065e <__aeabi_dadd+0x256>
 800065c:	e722      	b.n	80004a4 <__aeabi_dadd+0x9c>
 800065e:	000a      	movs	r2, r1
 8000660:	e70e      	b.n	8000480 <__aeabi_dadd+0x78>
 8000662:	4a4d      	ldr	r2, [pc, #308]	@ (8000798 <__aeabi_dadd+0x390>)
 8000664:	1c7d      	adds	r5, r7, #1
 8000666:	4215      	tst	r5, r2
 8000668:	d000      	beq.n	800066c <__aeabi_dadd+0x264>
 800066a:	e0d0      	b.n	800080e <__aeabi_dadd+0x406>
 800066c:	0025      	movs	r5, r4
 800066e:	4662      	mov	r2, ip
 8000670:	4653      	mov	r3, sl
 8000672:	4305      	orrs	r5, r0
 8000674:	431a      	orrs	r2, r3
 8000676:	2f00      	cmp	r7, #0
 8000678:	d000      	beq.n	800067c <__aeabi_dadd+0x274>
 800067a:	e137      	b.n	80008ec <__aeabi_dadd+0x4e4>
 800067c:	2d00      	cmp	r5, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x27a>
 8000680:	e1a8      	b.n	80009d4 <__aeabi_dadd+0x5cc>
 8000682:	2a00      	cmp	r2, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x280>
 8000686:	e16a      	b.n	800095e <__aeabi_dadd+0x556>
 8000688:	4663      	mov	r3, ip
 800068a:	1ac5      	subs	r5, r0, r3
 800068c:	4653      	mov	r3, sl
 800068e:	1ae2      	subs	r2, r4, r3
 8000690:	42a8      	cmp	r0, r5
 8000692:	419b      	sbcs	r3, r3
 8000694:	425b      	negs	r3, r3
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	021a      	lsls	r2, r3, #8
 800069a:	d400      	bmi.n	800069e <__aeabi_dadd+0x296>
 800069c:	e203      	b.n	8000aa6 <__aeabi_dadd+0x69e>
 800069e:	4663      	mov	r3, ip
 80006a0:	1a1d      	subs	r5, r3, r0
 80006a2:	45ac      	cmp	ip, r5
 80006a4:	4192      	sbcs	r2, r2
 80006a6:	4653      	mov	r3, sl
 80006a8:	4252      	negs	r2, r2
 80006aa:	1b1c      	subs	r4, r3, r4
 80006ac:	000e      	movs	r6, r1
 80006ae:	4688      	mov	r8, r1
 80006b0:	1aa4      	subs	r4, r4, r2
 80006b2:	e723      	b.n	80004fc <__aeabi_dadd+0xf4>
 80006b4:	4936      	ldr	r1, [pc, #216]	@ (8000790 <__aeabi_dadd+0x388>)
 80006b6:	428f      	cmp	r7, r1
 80006b8:	d070      	beq.n	800079c <__aeabi_dadd+0x394>
 80006ba:	2501      	movs	r5, #1
 80006bc:	2a38      	cmp	r2, #56	@ 0x38
 80006be:	dca8      	bgt.n	8000612 <__aeabi_dadd+0x20a>
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	4653      	mov	r3, sl
 80006c4:	0409      	lsls	r1, r1, #16
 80006c6:	430b      	orrs	r3, r1
 80006c8:	469a      	mov	sl, r3
 80006ca:	e78e      	b.n	80005ea <__aeabi_dadd+0x1e2>
 80006cc:	003c      	movs	r4, r7
 80006ce:	2500      	movs	r5, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	e731      	b.n	8000538 <__aeabi_dadd+0x130>
 80006d4:	2307      	movs	r3, #7
 80006d6:	402b      	ands	r3, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x2d6>
 80006dc:	e710      	b.n	8000500 <__aeabi_dadd+0xf8>
 80006de:	e093      	b.n	8000808 <__aeabi_dadd+0x400>
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d074      	beq.n	80007ce <__aeabi_dadd+0x3c6>
 80006e4:	464a      	mov	r2, r9
 80006e6:	1bd2      	subs	r2, r2, r7
 80006e8:	2f00      	cmp	r7, #0
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x2e6>
 80006ec:	e0c7      	b.n	800087e <__aeabi_dadd+0x476>
 80006ee:	4928      	ldr	r1, [pc, #160]	@ (8000790 <__aeabi_dadd+0x388>)
 80006f0:	4589      	cmp	r9, r1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x2ee>
 80006f4:	e185      	b.n	8000a02 <__aeabi_dadd+0x5fa>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2a38      	cmp	r2, #56	@ 0x38
 80006fa:	dc12      	bgt.n	8000722 <__aeabi_dadd+0x31a>
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	0409      	lsls	r1, r1, #16
 8000700:	430c      	orrs	r4, r1
 8000702:	2a1f      	cmp	r2, #31
 8000704:	dd00      	ble.n	8000708 <__aeabi_dadd+0x300>
 8000706:	e1ab      	b.n	8000a60 <__aeabi_dadd+0x658>
 8000708:	2120      	movs	r1, #32
 800070a:	0025      	movs	r5, r4
 800070c:	1a89      	subs	r1, r1, r2
 800070e:	0007      	movs	r7, r0
 8000710:	4088      	lsls	r0, r1
 8000712:	408d      	lsls	r5, r1
 8000714:	40d7      	lsrs	r7, r2
 8000716:	1e41      	subs	r1, r0, #1
 8000718:	4188      	sbcs	r0, r1
 800071a:	40d4      	lsrs	r4, r2
 800071c:	433d      	orrs	r5, r7
 800071e:	4305      	orrs	r5, r0
 8000720:	44a2      	add	sl, r4
 8000722:	4465      	add	r5, ip
 8000724:	4565      	cmp	r5, ip
 8000726:	4192      	sbcs	r2, r2
 8000728:	4252      	negs	r2, r2
 800072a:	4452      	add	r2, sl
 800072c:	0014      	movs	r4, r2
 800072e:	464f      	mov	r7, r9
 8000730:	e774      	b.n	800061c <__aeabi_dadd+0x214>
 8000732:	0028      	movs	r0, r5
 8000734:	f001 fbb4 	bl	8001ea0 <__clzsi2>
 8000738:	0003      	movs	r3, r0
 800073a:	3318      	adds	r3, #24
 800073c:	2b1f      	cmp	r3, #31
 800073e:	dc00      	bgt.n	8000742 <__aeabi_dadd+0x33a>
 8000740:	e6c2      	b.n	80004c8 <__aeabi_dadd+0xc0>
 8000742:	002a      	movs	r2, r5
 8000744:	3808      	subs	r0, #8
 8000746:	4082      	lsls	r2, r0
 8000748:	429f      	cmp	r7, r3
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x346>
 800074c:	e0a9      	b.n	80008a2 <__aeabi_dadd+0x49a>
 800074e:	1bdb      	subs	r3, r3, r7
 8000750:	1c58      	adds	r0, r3, #1
 8000752:	281f      	cmp	r0, #31
 8000754:	dc00      	bgt.n	8000758 <__aeabi_dadd+0x350>
 8000756:	e1ac      	b.n	8000ab2 <__aeabi_dadd+0x6aa>
 8000758:	0015      	movs	r5, r2
 800075a:	3b1f      	subs	r3, #31
 800075c:	40dd      	lsrs	r5, r3
 800075e:	2820      	cmp	r0, #32
 8000760:	d005      	beq.n	800076e <__aeabi_dadd+0x366>
 8000762:	2340      	movs	r3, #64	@ 0x40
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	409a      	lsls	r2, r3
 8000768:	1e53      	subs	r3, r2, #1
 800076a:	419a      	sbcs	r2, r3
 800076c:	4315      	orrs	r5, r2
 800076e:	2307      	movs	r3, #7
 8000770:	2700      	movs	r7, #0
 8000772:	402b      	ands	r3, r5
 8000774:	e7b0      	b.n	80006d8 <__aeabi_dadd+0x2d0>
 8000776:	08ed      	lsrs	r5, r5, #3
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <__aeabi_dadd+0x388>)
 800077a:	0762      	lsls	r2, r4, #29
 800077c:	432a      	orrs	r2, r5
 800077e:	08e4      	lsrs	r4, r4, #3
 8000780:	429f      	cmp	r7, r3
 8000782:	d00f      	beq.n	80007a4 <__aeabi_dadd+0x39c>
 8000784:	0324      	lsls	r4, r4, #12
 8000786:	0b25      	lsrs	r5, r4, #12
 8000788:	057c      	lsls	r4, r7, #21
 800078a:	0d64      	lsrs	r4, r4, #21
 800078c:	e6d4      	b.n	8000538 <__aeabi_dadd+0x130>
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	000007ff 	.word	0x000007ff
 8000794:	ff7fffff 	.word	0xff7fffff
 8000798:	000007fe 	.word	0x000007fe
 800079c:	08c0      	lsrs	r0, r0, #3
 800079e:	0762      	lsls	r2, r4, #29
 80007a0:	4302      	orrs	r2, r0
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	0013      	movs	r3, r2
 80007a6:	4323      	orrs	r3, r4
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x3a4>
 80007aa:	e186      	b.n	8000aba <__aeabi_dadd+0x6b2>
 80007ac:	2580      	movs	r5, #128	@ 0x80
 80007ae:	032d      	lsls	r5, r5, #12
 80007b0:	4325      	orrs	r5, r4
 80007b2:	032d      	lsls	r5, r5, #12
 80007b4:	4cc3      	ldr	r4, [pc, #780]	@ (8000ac4 <__aeabi_dadd+0x6bc>)
 80007b6:	0b2d      	lsrs	r5, r5, #12
 80007b8:	e6be      	b.n	8000538 <__aeabi_dadd+0x130>
 80007ba:	4660      	mov	r0, ip
 80007bc:	4654      	mov	r4, sl
 80007be:	000e      	movs	r6, r1
 80007c0:	0017      	movs	r7, r2
 80007c2:	08c5      	lsrs	r5, r0, #3
 80007c4:	e7d8      	b.n	8000778 <__aeabi_dadd+0x370>
 80007c6:	4cc0      	ldr	r4, [pc, #768]	@ (8000ac8 <__aeabi_dadd+0x6c0>)
 80007c8:	1aff      	subs	r7, r7, r3
 80007ca:	4014      	ands	r4, r2
 80007cc:	e696      	b.n	80004fc <__aeabi_dadd+0xf4>
 80007ce:	4abf      	ldr	r2, [pc, #764]	@ (8000acc <__aeabi_dadd+0x6c4>)
 80007d0:	1c79      	adds	r1, r7, #1
 80007d2:	4211      	tst	r1, r2
 80007d4:	d16b      	bne.n	80008ae <__aeabi_dadd+0x4a6>
 80007d6:	0022      	movs	r2, r4
 80007d8:	4302      	orrs	r2, r0
 80007da:	2f00      	cmp	r7, #0
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x3d8>
 80007de:	e0db      	b.n	8000998 <__aeabi_dadd+0x590>
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x3de>
 80007e4:	e12d      	b.n	8000a42 <__aeabi_dadd+0x63a>
 80007e6:	4662      	mov	r2, ip
 80007e8:	4653      	mov	r3, sl
 80007ea:	431a      	orrs	r2, r3
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x3e8>
 80007ee:	e0b6      	b.n	800095e <__aeabi_dadd+0x556>
 80007f0:	4663      	mov	r3, ip
 80007f2:	18c5      	adds	r5, r0, r3
 80007f4:	4285      	cmp	r5, r0
 80007f6:	4180      	sbcs	r0, r0
 80007f8:	4454      	add	r4, sl
 80007fa:	4240      	negs	r0, r0
 80007fc:	1824      	adds	r4, r4, r0
 80007fe:	0223      	lsls	r3, r4, #8
 8000800:	d502      	bpl.n	8000808 <__aeabi_dadd+0x400>
 8000802:	000f      	movs	r7, r1
 8000804:	4bb0      	ldr	r3, [pc, #704]	@ (8000ac8 <__aeabi_dadd+0x6c0>)
 8000806:	401c      	ands	r4, r3
 8000808:	003a      	movs	r2, r7
 800080a:	0028      	movs	r0, r5
 800080c:	e7d8      	b.n	80007c0 <__aeabi_dadd+0x3b8>
 800080e:	4662      	mov	r2, ip
 8000810:	1a85      	subs	r5, r0, r2
 8000812:	42a8      	cmp	r0, r5
 8000814:	4192      	sbcs	r2, r2
 8000816:	4653      	mov	r3, sl
 8000818:	4252      	negs	r2, r2
 800081a:	4691      	mov	r9, r2
 800081c:	1ae3      	subs	r3, r4, r3
 800081e:	001a      	movs	r2, r3
 8000820:	464b      	mov	r3, r9
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	0013      	movs	r3, r2
 8000826:	4691      	mov	r9, r2
 8000828:	021a      	lsls	r2, r3, #8
 800082a:	d454      	bmi.n	80008d6 <__aeabi_dadd+0x4ce>
 800082c:	464a      	mov	r2, r9
 800082e:	464c      	mov	r4, r9
 8000830:	432a      	orrs	r2, r5
 8000832:	d000      	beq.n	8000836 <__aeabi_dadd+0x42e>
 8000834:	e640      	b.n	80004b8 <__aeabi_dadd+0xb0>
 8000836:	2600      	movs	r6, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2500      	movs	r5, #0
 800083c:	e67c      	b.n	8000538 <__aeabi_dadd+0x130>
 800083e:	4da1      	ldr	r5, [pc, #644]	@ (8000ac4 <__aeabi_dadd+0x6bc>)
 8000840:	45a9      	cmp	r9, r5
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x43e>
 8000844:	e090      	b.n	8000968 <__aeabi_dadd+0x560>
 8000846:	2501      	movs	r5, #1
 8000848:	2a38      	cmp	r2, #56	@ 0x38
 800084a:	dd00      	ble.n	800084e <__aeabi_dadd+0x446>
 800084c:	e6ab      	b.n	80005a6 <__aeabi_dadd+0x19e>
 800084e:	2580      	movs	r5, #128	@ 0x80
 8000850:	042d      	lsls	r5, r5, #16
 8000852:	432c      	orrs	r4, r5
 8000854:	e695      	b.n	8000582 <__aeabi_dadd+0x17a>
 8000856:	0011      	movs	r1, r2
 8000858:	4655      	mov	r5, sl
 800085a:	3920      	subs	r1, #32
 800085c:	40cd      	lsrs	r5, r1
 800085e:	46a9      	mov	r9, r5
 8000860:	2a20      	cmp	r2, #32
 8000862:	d006      	beq.n	8000872 <__aeabi_dadd+0x46a>
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	4653      	mov	r3, sl
 8000868:	1a8a      	subs	r2, r1, r2
 800086a:	4093      	lsls	r3, r2
 800086c:	4662      	mov	r2, ip
 800086e:	431a      	orrs	r2, r3
 8000870:	4694      	mov	ip, r2
 8000872:	4665      	mov	r5, ip
 8000874:	1e6b      	subs	r3, r5, #1
 8000876:	419d      	sbcs	r5, r3
 8000878:	464b      	mov	r3, r9
 800087a:	431d      	orrs	r5, r3
 800087c:	e612      	b.n	80004a4 <__aeabi_dadd+0x9c>
 800087e:	0021      	movs	r1, r4
 8000880:	4301      	orrs	r1, r0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x47e>
 8000884:	e0c4      	b.n	8000a10 <__aeabi_dadd+0x608>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x486>
 800088c:	e0fb      	b.n	8000a86 <__aeabi_dadd+0x67e>
 800088e:	4d8d      	ldr	r5, [pc, #564]	@ (8000ac4 <__aeabi_dadd+0x6bc>)
 8000890:	42aa      	cmp	r2, r5
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x48e>
 8000894:	e0b5      	b.n	8000a02 <__aeabi_dadd+0x5fa>
 8000896:	2501      	movs	r5, #1
 8000898:	2938      	cmp	r1, #56	@ 0x38
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x496>
 800089c:	e741      	b.n	8000722 <__aeabi_dadd+0x31a>
 800089e:	000a      	movs	r2, r1
 80008a0:	e72f      	b.n	8000702 <__aeabi_dadd+0x2fa>
 80008a2:	4c89      	ldr	r4, [pc, #548]	@ (8000ac8 <__aeabi_dadd+0x6c0>)
 80008a4:	1aff      	subs	r7, r7, r3
 80008a6:	4014      	ands	r4, r2
 80008a8:	0762      	lsls	r2, r4, #29
 80008aa:	08e4      	lsrs	r4, r4, #3
 80008ac:	e76a      	b.n	8000784 <__aeabi_dadd+0x37c>
 80008ae:	4a85      	ldr	r2, [pc, #532]	@ (8000ac4 <__aeabi_dadd+0x6bc>)
 80008b0:	4291      	cmp	r1, r2
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x4ae>
 80008b4:	e0e3      	b.n	8000a7e <__aeabi_dadd+0x676>
 80008b6:	4663      	mov	r3, ip
 80008b8:	18c2      	adds	r2, r0, r3
 80008ba:	4282      	cmp	r2, r0
 80008bc:	4180      	sbcs	r0, r0
 80008be:	0023      	movs	r3, r4
 80008c0:	4240      	negs	r0, r0
 80008c2:	4453      	add	r3, sl
 80008c4:	181b      	adds	r3, r3, r0
 80008c6:	07dd      	lsls	r5, r3, #31
 80008c8:	085c      	lsrs	r4, r3, #1
 80008ca:	2307      	movs	r3, #7
 80008cc:	0852      	lsrs	r2, r2, #1
 80008ce:	4315      	orrs	r5, r2
 80008d0:	000f      	movs	r7, r1
 80008d2:	402b      	ands	r3, r5
 80008d4:	e700      	b.n	80006d8 <__aeabi_dadd+0x2d0>
 80008d6:	4663      	mov	r3, ip
 80008d8:	1a1d      	subs	r5, r3, r0
 80008da:	45ac      	cmp	ip, r5
 80008dc:	4192      	sbcs	r2, r2
 80008de:	4653      	mov	r3, sl
 80008e0:	4252      	negs	r2, r2
 80008e2:	1b1c      	subs	r4, r3, r4
 80008e4:	000e      	movs	r6, r1
 80008e6:	4688      	mov	r8, r1
 80008e8:	1aa4      	subs	r4, r4, r2
 80008ea:	e5e5      	b.n	80004b8 <__aeabi_dadd+0xb0>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x4ea>
 80008f0:	e091      	b.n	8000a16 <__aeabi_dadd+0x60e>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d138      	bne.n	8000968 <__aeabi_dadd+0x560>
 80008f6:	2480      	movs	r4, #128	@ 0x80
 80008f8:	2600      	movs	r6, #0
 80008fa:	0324      	lsls	r4, r4, #12
 80008fc:	e756      	b.n	80007ac <__aeabi_dadd+0x3a4>
 80008fe:	4663      	mov	r3, ip
 8000900:	18c5      	adds	r5, r0, r3
 8000902:	4285      	cmp	r5, r0
 8000904:	4180      	sbcs	r0, r0
 8000906:	4454      	add	r4, sl
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	2701      	movs	r7, #1
 800090e:	0223      	lsls	r3, r4, #8
 8000910:	d400      	bmi.n	8000914 <__aeabi_dadd+0x50c>
 8000912:	e6df      	b.n	80006d4 <__aeabi_dadd+0x2cc>
 8000914:	2702      	movs	r7, #2
 8000916:	e687      	b.n	8000628 <__aeabi_dadd+0x220>
 8000918:	4663      	mov	r3, ip
 800091a:	1ac5      	subs	r5, r0, r3
 800091c:	42a8      	cmp	r0, r5
 800091e:	4180      	sbcs	r0, r0
 8000920:	4653      	mov	r3, sl
 8000922:	4240      	negs	r0, r0
 8000924:	1ae4      	subs	r4, r4, r3
 8000926:	2701      	movs	r7, #1
 8000928:	1a24      	subs	r4, r4, r0
 800092a:	e5c0      	b.n	80004ae <__aeabi_dadd+0xa6>
 800092c:	0762      	lsls	r2, r4, #29
 800092e:	08c0      	lsrs	r0, r0, #3
 8000930:	4302      	orrs	r2, r0
 8000932:	08e4      	lsrs	r4, r4, #3
 8000934:	e736      	b.n	80007a4 <__aeabi_dadd+0x39c>
 8000936:	0011      	movs	r1, r2
 8000938:	4653      	mov	r3, sl
 800093a:	3920      	subs	r1, #32
 800093c:	40cb      	lsrs	r3, r1
 800093e:	4699      	mov	r9, r3
 8000940:	2a20      	cmp	r2, #32
 8000942:	d006      	beq.n	8000952 <__aeabi_dadd+0x54a>
 8000944:	2140      	movs	r1, #64	@ 0x40
 8000946:	4653      	mov	r3, sl
 8000948:	1a8a      	subs	r2, r1, r2
 800094a:	4093      	lsls	r3, r2
 800094c:	4662      	mov	r2, ip
 800094e:	431a      	orrs	r2, r3
 8000950:	4694      	mov	ip, r2
 8000952:	4665      	mov	r5, ip
 8000954:	1e6b      	subs	r3, r5, #1
 8000956:	419d      	sbcs	r5, r3
 8000958:	464b      	mov	r3, r9
 800095a:	431d      	orrs	r5, r3
 800095c:	e659      	b.n	8000612 <__aeabi_dadd+0x20a>
 800095e:	0762      	lsls	r2, r4, #29
 8000960:	08c0      	lsrs	r0, r0, #3
 8000962:	4302      	orrs	r2, r0
 8000964:	08e4      	lsrs	r4, r4, #3
 8000966:	e70d      	b.n	8000784 <__aeabi_dadd+0x37c>
 8000968:	4653      	mov	r3, sl
 800096a:	075a      	lsls	r2, r3, #29
 800096c:	4663      	mov	r3, ip
 800096e:	08d8      	lsrs	r0, r3, #3
 8000970:	4653      	mov	r3, sl
 8000972:	000e      	movs	r6, r1
 8000974:	4302      	orrs	r2, r0
 8000976:	08dc      	lsrs	r4, r3, #3
 8000978:	e714      	b.n	80007a4 <__aeabi_dadd+0x39c>
 800097a:	0015      	movs	r5, r2
 800097c:	0026      	movs	r6, r4
 800097e:	3d20      	subs	r5, #32
 8000980:	40ee      	lsrs	r6, r5
 8000982:	2a20      	cmp	r2, #32
 8000984:	d003      	beq.n	800098e <__aeabi_dadd+0x586>
 8000986:	2540      	movs	r5, #64	@ 0x40
 8000988:	1aaa      	subs	r2, r5, r2
 800098a:	4094      	lsls	r4, r2
 800098c:	4320      	orrs	r0, r4
 800098e:	1e42      	subs	r2, r0, #1
 8000990:	4190      	sbcs	r0, r2
 8000992:	0005      	movs	r5, r0
 8000994:	4335      	orrs	r5, r6
 8000996:	e606      	b.n	80005a6 <__aeabi_dadd+0x19e>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d07c      	beq.n	8000a96 <__aeabi_dadd+0x68e>
 800099c:	4662      	mov	r2, ip
 800099e:	4653      	mov	r3, sl
 80009a0:	08c0      	lsrs	r0, r0, #3
 80009a2:	431a      	orrs	r2, r3
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x5a0>
 80009a6:	e6fa      	b.n	800079e <__aeabi_dadd+0x396>
 80009a8:	0762      	lsls	r2, r4, #29
 80009aa:	4310      	orrs	r0, r2
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	0312      	lsls	r2, r2, #12
 80009b2:	4214      	tst	r4, r2
 80009b4:	d008      	beq.n	80009c8 <__aeabi_dadd+0x5c0>
 80009b6:	08d9      	lsrs	r1, r3, #3
 80009b8:	4211      	tst	r1, r2
 80009ba:	d105      	bne.n	80009c8 <__aeabi_dadd+0x5c0>
 80009bc:	4663      	mov	r3, ip
 80009be:	08d8      	lsrs	r0, r3, #3
 80009c0:	4653      	mov	r3, sl
 80009c2:	000c      	movs	r4, r1
 80009c4:	075b      	lsls	r3, r3, #29
 80009c6:	4318      	orrs	r0, r3
 80009c8:	0f42      	lsrs	r2, r0, #29
 80009ca:	00c0      	lsls	r0, r0, #3
 80009cc:	08c0      	lsrs	r0, r0, #3
 80009ce:	0752      	lsls	r2, r2, #29
 80009d0:	4302      	orrs	r2, r0
 80009d2:	e6e7      	b.n	80007a4 <__aeabi_dadd+0x39c>
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x5d2>
 80009d8:	e72d      	b.n	8000836 <__aeabi_dadd+0x42e>
 80009da:	4663      	mov	r3, ip
 80009dc:	08d8      	lsrs	r0, r3, #3
 80009de:	4653      	mov	r3, sl
 80009e0:	075a      	lsls	r2, r3, #29
 80009e2:	000e      	movs	r6, r1
 80009e4:	4302      	orrs	r2, r0
 80009e6:	08dc      	lsrs	r4, r3, #3
 80009e8:	e6cc      	b.n	8000784 <__aeabi_dadd+0x37c>
 80009ea:	4663      	mov	r3, ip
 80009ec:	1a1d      	subs	r5, r3, r0
 80009ee:	45ac      	cmp	ip, r5
 80009f0:	4192      	sbcs	r2, r2
 80009f2:	4653      	mov	r3, sl
 80009f4:	4252      	negs	r2, r2
 80009f6:	1b1c      	subs	r4, r3, r4
 80009f8:	000e      	movs	r6, r1
 80009fa:	4688      	mov	r8, r1
 80009fc:	1aa4      	subs	r4, r4, r2
 80009fe:	3701      	adds	r7, #1
 8000a00:	e555      	b.n	80004ae <__aeabi_dadd+0xa6>
 8000a02:	4663      	mov	r3, ip
 8000a04:	08d9      	lsrs	r1, r3, #3
 8000a06:	4653      	mov	r3, sl
 8000a08:	075a      	lsls	r2, r3, #29
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	08dc      	lsrs	r4, r3, #3
 8000a0e:	e6c9      	b.n	80007a4 <__aeabi_dadd+0x39c>
 8000a10:	4660      	mov	r0, ip
 8000a12:	4654      	mov	r4, sl
 8000a14:	e6d4      	b.n	80007c0 <__aeabi_dadd+0x3b8>
 8000a16:	08c0      	lsrs	r0, r0, #3
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x616>
 8000a1c:	e6bf      	b.n	800079e <__aeabi_dadd+0x396>
 8000a1e:	0762      	lsls	r2, r4, #29
 8000a20:	4310      	orrs	r0, r2
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	08e4      	lsrs	r4, r4, #3
 8000a26:	0312      	lsls	r2, r2, #12
 8000a28:	4214      	tst	r4, r2
 8000a2a:	d0cd      	beq.n	80009c8 <__aeabi_dadd+0x5c0>
 8000a2c:	08dd      	lsrs	r5, r3, #3
 8000a2e:	4215      	tst	r5, r2
 8000a30:	d1ca      	bne.n	80009c8 <__aeabi_dadd+0x5c0>
 8000a32:	4663      	mov	r3, ip
 8000a34:	08d8      	lsrs	r0, r3, #3
 8000a36:	4653      	mov	r3, sl
 8000a38:	075b      	lsls	r3, r3, #29
 8000a3a:	000e      	movs	r6, r1
 8000a3c:	002c      	movs	r4, r5
 8000a3e:	4318      	orrs	r0, r3
 8000a40:	e7c2      	b.n	80009c8 <__aeabi_dadd+0x5c0>
 8000a42:	4663      	mov	r3, ip
 8000a44:	08d9      	lsrs	r1, r3, #3
 8000a46:	4653      	mov	r3, sl
 8000a48:	075a      	lsls	r2, r3, #29
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	08dc      	lsrs	r4, r3, #3
 8000a4e:	e699      	b.n	8000784 <__aeabi_dadd+0x37c>
 8000a50:	4663      	mov	r3, ip
 8000a52:	08d8      	lsrs	r0, r3, #3
 8000a54:	4653      	mov	r3, sl
 8000a56:	075a      	lsls	r2, r3, #29
 8000a58:	000e      	movs	r6, r1
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	08dc      	lsrs	r4, r3, #3
 8000a5e:	e6a1      	b.n	80007a4 <__aeabi_dadd+0x39c>
 8000a60:	0011      	movs	r1, r2
 8000a62:	0027      	movs	r7, r4
 8000a64:	3920      	subs	r1, #32
 8000a66:	40cf      	lsrs	r7, r1
 8000a68:	2a20      	cmp	r2, #32
 8000a6a:	d003      	beq.n	8000a74 <__aeabi_dadd+0x66c>
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	1a8a      	subs	r2, r1, r2
 8000a70:	4094      	lsls	r4, r2
 8000a72:	4320      	orrs	r0, r4
 8000a74:	1e42      	subs	r2, r0, #1
 8000a76:	4190      	sbcs	r0, r2
 8000a78:	0005      	movs	r5, r0
 8000a7a:	433d      	orrs	r5, r7
 8000a7c:	e651      	b.n	8000722 <__aeabi_dadd+0x31a>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	2500      	movs	r5, #0
 8000a82:	2200      	movs	r2, #0
 8000a84:	e558      	b.n	8000538 <__aeabi_dadd+0x130>
 8000a86:	4460      	add	r0, ip
 8000a88:	4560      	cmp	r0, ip
 8000a8a:	4192      	sbcs	r2, r2
 8000a8c:	4454      	add	r4, sl
 8000a8e:	4252      	negs	r2, r2
 8000a90:	0005      	movs	r5, r0
 8000a92:	18a4      	adds	r4, r4, r2
 8000a94:	e73a      	b.n	800090c <__aeabi_dadd+0x504>
 8000a96:	4653      	mov	r3, sl
 8000a98:	075a      	lsls	r2, r3, #29
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	08dc      	lsrs	r4, r3, #3
 8000aa4:	e67e      	b.n	80007a4 <__aeabi_dadd+0x39c>
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	432a      	orrs	r2, r5
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x6a8>
 8000aae:	e6ab      	b.n	8000808 <__aeabi_dadd+0x400>
 8000ab0:	e6c1      	b.n	8000836 <__aeabi_dadd+0x42e>
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	1a09      	subs	r1, r1, r0
 8000ab8:	e519      	b.n	80004ee <__aeabi_dadd+0xe6>
 8000aba:	2200      	movs	r2, #0
 8000abc:	2500      	movs	r5, #0
 8000abe:	4c01      	ldr	r4, [pc, #4]	@ (8000ac4 <__aeabi_dadd+0x6bc>)
 8000ac0:	e53a      	b.n	8000538 <__aeabi_dadd+0x130>
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff
 8000acc:	000007fe 	.word	0x000007fe

08000ad0 <__aeabi_ddiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	46de      	mov	lr, fp
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	4657      	mov	r7, sl
 8000ad8:	464e      	mov	r6, r9
 8000ada:	b5e0      	push	{r5, r6, r7, lr}
 8000adc:	b087      	sub	sp, #28
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	030b      	lsls	r3, r1, #12
 8000ae4:	0b1b      	lsrs	r3, r3, #12
 8000ae6:	469b      	mov	fp, r3
 8000ae8:	0fca      	lsrs	r2, r1, #31
 8000aea:	004b      	lsls	r3, r1, #1
 8000aec:	0004      	movs	r4, r0
 8000aee:	4680      	mov	r8, r0
 8000af0:	0d5b      	lsrs	r3, r3, #21
 8000af2:	9202      	str	r2, [sp, #8]
 8000af4:	d100      	bne.n	8000af8 <__aeabi_ddiv+0x28>
 8000af6:	e16a      	b.n	8000dce <__aeabi_ddiv+0x2fe>
 8000af8:	4ad4      	ldr	r2, [pc, #848]	@ (8000e4c <__aeabi_ddiv+0x37c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d100      	bne.n	8000b00 <__aeabi_ddiv+0x30>
 8000afe:	e18c      	b.n	8000e1a <__aeabi_ddiv+0x34a>
 8000b00:	4659      	mov	r1, fp
 8000b02:	0f42      	lsrs	r2, r0, #29
 8000b04:	00c9      	lsls	r1, r1, #3
 8000b06:	430a      	orrs	r2, r1
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	0409      	lsls	r1, r1, #16
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	00c2      	lsls	r2, r0, #3
 8000b10:	4690      	mov	r8, r2
 8000b12:	4acf      	ldr	r2, [pc, #828]	@ (8000e50 <__aeabi_ddiv+0x380>)
 8000b14:	4689      	mov	r9, r1
 8000b16:	4692      	mov	sl, r2
 8000b18:	449a      	add	sl, r3
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2400      	movs	r4, #0
 8000b1e:	9303      	str	r3, [sp, #12]
 8000b20:	9e00      	ldr	r6, [sp, #0]
 8000b22:	9f01      	ldr	r7, [sp, #4]
 8000b24:	033b      	lsls	r3, r7, #12
 8000b26:	0b1b      	lsrs	r3, r3, #12
 8000b28:	469b      	mov	fp, r3
 8000b2a:	007b      	lsls	r3, r7, #1
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	0d5b      	lsrs	r3, r3, #21
 8000b30:	0ffd      	lsrs	r5, r7, #31
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_ddiv+0x68>
 8000b36:	e128      	b.n	8000d8a <__aeabi_ddiv+0x2ba>
 8000b38:	4ac4      	ldr	r2, [pc, #784]	@ (8000e4c <__aeabi_ddiv+0x37c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_ddiv+0x70>
 8000b3e:	e177      	b.n	8000e30 <__aeabi_ddiv+0x360>
 8000b40:	4659      	mov	r1, fp
 8000b42:	0f72      	lsrs	r2, r6, #29
 8000b44:	00c9      	lsls	r1, r1, #3
 8000b46:	430a      	orrs	r2, r1
 8000b48:	2180      	movs	r1, #128	@ 0x80
 8000b4a:	0409      	lsls	r1, r1, #16
 8000b4c:	4311      	orrs	r1, r2
 8000b4e:	468b      	mov	fp, r1
 8000b50:	49bf      	ldr	r1, [pc, #764]	@ (8000e50 <__aeabi_ddiv+0x380>)
 8000b52:	00f2      	lsls	r2, r6, #3
 8000b54:	468c      	mov	ip, r1
 8000b56:	4651      	mov	r1, sl
 8000b58:	4463      	add	r3, ip
 8000b5a:	1acb      	subs	r3, r1, r3
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9e02      	ldr	r6, [sp, #8]
 8000b62:	406e      	eors	r6, r5
 8000b64:	2c0f      	cmp	r4, #15
 8000b66:	d827      	bhi.n	8000bb8 <__aeabi_ddiv+0xe8>
 8000b68:	49ba      	ldr	r1, [pc, #744]	@ (8000e54 <__aeabi_ddiv+0x384>)
 8000b6a:	00a4      	lsls	r4, r4, #2
 8000b6c:	5909      	ldr	r1, [r1, r4]
 8000b6e:	468f      	mov	pc, r1
 8000b70:	46cb      	mov	fp, r9
 8000b72:	4642      	mov	r2, r8
 8000b74:	9e02      	ldr	r6, [sp, #8]
 8000b76:	9b03      	ldr	r3, [sp, #12]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d016      	beq.n	8000baa <__aeabi_ddiv+0xda>
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_ddiv+0xb2>
 8000b80:	e2a6      	b.n	80010d0 <__aeabi_ddiv+0x600>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d000      	beq.n	8000b88 <__aeabi_ddiv+0xb8>
 8000b86:	e0df      	b.n	8000d48 <__aeabi_ddiv+0x278>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	4690      	mov	r8, r2
 8000b90:	051b      	lsls	r3, r3, #20
 8000b92:	4323      	orrs	r3, r4
 8000b94:	07f6      	lsls	r6, r6, #31
 8000b96:	4333      	orrs	r3, r6
 8000b98:	4640      	mov	r0, r8
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	b007      	add	sp, #28
 8000b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba0:	46bb      	mov	fp, r7
 8000ba2:	46b2      	mov	sl, r6
 8000ba4:	46a9      	mov	r9, r5
 8000ba6:	46a0      	mov	r8, r4
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	2200      	movs	r2, #0
 8000bac:	2400      	movs	r4, #0
 8000bae:	4690      	mov	r8, r2
 8000bb0:	4ba6      	ldr	r3, [pc, #664]	@ (8000e4c <__aeabi_ddiv+0x37c>)
 8000bb2:	e7ed      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000bb4:	002e      	movs	r6, r5
 8000bb6:	e7df      	b.n	8000b78 <__aeabi_ddiv+0xa8>
 8000bb8:	45cb      	cmp	fp, r9
 8000bba:	d200      	bcs.n	8000bbe <__aeabi_ddiv+0xee>
 8000bbc:	e1d4      	b.n	8000f68 <__aeabi_ddiv+0x498>
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xf2>
 8000bc0:	e1cf      	b.n	8000f62 <__aeabi_ddiv+0x492>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	4644      	mov	r4, r8
 8000bca:	4648      	mov	r0, r9
 8000bcc:	2700      	movs	r7, #0
 8000bce:	44e2      	add	sl, ip
 8000bd0:	465b      	mov	r3, fp
 8000bd2:	0e15      	lsrs	r5, r2, #24
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	431d      	orrs	r5, r3
 8000bd8:	0c19      	lsrs	r1, r3, #16
 8000bda:	042b      	lsls	r3, r5, #16
 8000bdc:	0212      	lsls	r2, r2, #8
 8000bde:	9500      	str	r5, [sp, #0]
 8000be0:	0c1d      	lsrs	r5, r3, #16
 8000be2:	4691      	mov	r9, r2
 8000be4:	9102      	str	r1, [sp, #8]
 8000be6:	9503      	str	r5, [sp, #12]
 8000be8:	f7ff fb1e 	bl	8000228 <__aeabi_uidivmod>
 8000bec:	0002      	movs	r2, r0
 8000bee:	436a      	muls	r2, r5
 8000bf0:	040b      	lsls	r3, r1, #16
 8000bf2:	0c21      	lsrs	r1, r4, #16
 8000bf4:	4680      	mov	r8, r0
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	d909      	bls.n	8000c10 <__aeabi_ddiv+0x140>
 8000bfc:	9d00      	ldr	r5, [sp, #0]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	46ac      	mov	ip, r5
 8000c02:	425b      	negs	r3, r3
 8000c04:	4461      	add	r1, ip
 8000c06:	469c      	mov	ip, r3
 8000c08:	44e0      	add	r8, ip
 8000c0a:	428d      	cmp	r5, r1
 8000c0c:	d800      	bhi.n	8000c10 <__aeabi_ddiv+0x140>
 8000c0e:	e1fb      	b.n	8001008 <__aeabi_ddiv+0x538>
 8000c10:	1a88      	subs	r0, r1, r2
 8000c12:	9902      	ldr	r1, [sp, #8]
 8000c14:	f7ff fb08 	bl	8000228 <__aeabi_uidivmod>
 8000c18:	9a03      	ldr	r2, [sp, #12]
 8000c1a:	0424      	lsls	r4, r4, #16
 8000c1c:	4342      	muls	r2, r0
 8000c1e:	0409      	lsls	r1, r1, #16
 8000c20:	0c24      	lsrs	r4, r4, #16
 8000c22:	0003      	movs	r3, r0
 8000c24:	430c      	orrs	r4, r1
 8000c26:	42a2      	cmp	r2, r4
 8000c28:	d906      	bls.n	8000c38 <__aeabi_ddiv+0x168>
 8000c2a:	9900      	ldr	r1, [sp, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	468c      	mov	ip, r1
 8000c30:	4464      	add	r4, ip
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	d800      	bhi.n	8000c38 <__aeabi_ddiv+0x168>
 8000c36:	e1e1      	b.n	8000ffc <__aeabi_ddiv+0x52c>
 8000c38:	1aa0      	subs	r0, r4, r2
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	0412      	lsls	r2, r2, #16
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4693      	mov	fp, r2
 8000c42:	464b      	mov	r3, r9
 8000c44:	4659      	mov	r1, fp
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	001d      	movs	r5, r3
 8000c4a:	9304      	str	r3, [sp, #16]
 8000c4c:	040b      	lsls	r3, r1, #16
 8000c4e:	4649      	mov	r1, r9
 8000c50:	0409      	lsls	r1, r1, #16
 8000c52:	0c09      	lsrs	r1, r1, #16
 8000c54:	000c      	movs	r4, r1
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	435c      	muls	r4, r3
 8000c5a:	0c12      	lsrs	r2, r2, #16
 8000c5c:	436b      	muls	r3, r5
 8000c5e:	4688      	mov	r8, r1
 8000c60:	4351      	muls	r1, r2
 8000c62:	436a      	muls	r2, r5
 8000c64:	0c25      	lsrs	r5, r4, #16
 8000c66:	46ac      	mov	ip, r5
 8000c68:	185b      	adds	r3, r3, r1
 8000c6a:	4463      	add	r3, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d903      	bls.n	8000c78 <__aeabi_ddiv+0x1a8>
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	0249      	lsls	r1, r1, #9
 8000c74:	468c      	mov	ip, r1
 8000c76:	4462      	add	r2, ip
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	0424      	lsls	r4, r4, #16
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	0c24      	lsrs	r4, r4, #16
 8000c80:	188a      	adds	r2, r1, r2
 8000c82:	191c      	adds	r4, r3, r4
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d302      	bcc.n	8000c8e <__aeabi_ddiv+0x1be>
 8000c88:	d116      	bne.n	8000cb8 <__aeabi_ddiv+0x1e8>
 8000c8a:	42a7      	cmp	r7, r4
 8000c8c:	d214      	bcs.n	8000cb8 <__aeabi_ddiv+0x1e8>
 8000c8e:	465b      	mov	r3, fp
 8000c90:	9d00      	ldr	r5, [sp, #0]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	444f      	add	r7, r9
 8000c96:	9305      	str	r3, [sp, #20]
 8000c98:	454f      	cmp	r7, r9
 8000c9a:	419b      	sbcs	r3, r3
 8000c9c:	46ac      	mov	ip, r5
 8000c9e:	425b      	negs	r3, r3
 8000ca0:	4463      	add	r3, ip
 8000ca2:	18c0      	adds	r0, r0, r3
 8000ca4:	4285      	cmp	r5, r0
 8000ca6:	d300      	bcc.n	8000caa <__aeabi_ddiv+0x1da>
 8000ca8:	e1a1      	b.n	8000fee <__aeabi_ddiv+0x51e>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	d900      	bls.n	8000cb0 <__aeabi_ddiv+0x1e0>
 8000cae:	e1f6      	b.n	800109e <__aeabi_ddiv+0x5ce>
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x1e4>
 8000cb2:	e1f1      	b.n	8001098 <__aeabi_ddiv+0x5c8>
 8000cb4:	9b05      	ldr	r3, [sp, #20]
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	1b3c      	subs	r4, r7, r4
 8000cba:	42a7      	cmp	r7, r4
 8000cbc:	41bf      	sbcs	r7, r7
 8000cbe:	9d00      	ldr	r5, [sp, #0]
 8000cc0:	1a80      	subs	r0, r0, r2
 8000cc2:	427f      	negs	r7, r7
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4285      	cmp	r5, r0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_ddiv+0x1fc>
 8000cca:	e1d0      	b.n	800106e <__aeabi_ddiv+0x59e>
 8000ccc:	9902      	ldr	r1, [sp, #8]
 8000cce:	f7ff faab 	bl	8000228 <__aeabi_uidivmod>
 8000cd2:	9a03      	ldr	r2, [sp, #12]
 8000cd4:	040b      	lsls	r3, r1, #16
 8000cd6:	4342      	muls	r2, r0
 8000cd8:	0c21      	lsrs	r1, r4, #16
 8000cda:	0007      	movs	r7, r0
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x214>
 8000ce2:	e178      	b.n	8000fd6 <__aeabi_ddiv+0x506>
 8000ce4:	1a88      	subs	r0, r1, r2
 8000ce6:	9902      	ldr	r1, [sp, #8]
 8000ce8:	f7ff fa9e 	bl	8000228 <__aeabi_uidivmod>
 8000cec:	9a03      	ldr	r2, [sp, #12]
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	4342      	muls	r2, r0
 8000cf2:	0409      	lsls	r1, r1, #16
 8000cf4:	0c24      	lsrs	r4, r4, #16
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	430c      	orrs	r4, r1
 8000cfa:	42a2      	cmp	r2, r4
 8000cfc:	d900      	bls.n	8000d00 <__aeabi_ddiv+0x230>
 8000cfe:	e15d      	b.n	8000fbc <__aeabi_ddiv+0x4ec>
 8000d00:	4641      	mov	r1, r8
 8000d02:	1aa4      	subs	r4, r4, r2
 8000d04:	043a      	lsls	r2, r7, #16
 8000d06:	431a      	orrs	r2, r3
 8000d08:	9d04      	ldr	r5, [sp, #16]
 8000d0a:	0413      	lsls	r3, r2, #16
 8000d0c:	0c1b      	lsrs	r3, r3, #16
 8000d0e:	4359      	muls	r1, r3
 8000d10:	4647      	mov	r7, r8
 8000d12:	436b      	muls	r3, r5
 8000d14:	469c      	mov	ip, r3
 8000d16:	0c10      	lsrs	r0, r2, #16
 8000d18:	4347      	muls	r7, r0
 8000d1a:	0c0b      	lsrs	r3, r1, #16
 8000d1c:	44bc      	add	ip, r7
 8000d1e:	4463      	add	r3, ip
 8000d20:	4368      	muls	r0, r5
 8000d22:	429f      	cmp	r7, r3
 8000d24:	d903      	bls.n	8000d2e <__aeabi_ddiv+0x25e>
 8000d26:	2580      	movs	r5, #128	@ 0x80
 8000d28:	026d      	lsls	r5, r5, #9
 8000d2a:	46ac      	mov	ip, r5
 8000d2c:	4460      	add	r0, ip
 8000d2e:	0c1f      	lsrs	r7, r3, #16
 8000d30:	0409      	lsls	r1, r1, #16
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c09      	lsrs	r1, r1, #16
 8000d36:	183f      	adds	r7, r7, r0
 8000d38:	185b      	adds	r3, r3, r1
 8000d3a:	42bc      	cmp	r4, r7
 8000d3c:	d200      	bcs.n	8000d40 <__aeabi_ddiv+0x270>
 8000d3e:	e102      	b.n	8000f46 <__aeabi_ddiv+0x476>
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x274>
 8000d42:	e0fd      	b.n	8000f40 <__aeabi_ddiv+0x470>
 8000d44:	2301      	movs	r3, #1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <__aeabi_ddiv+0x388>)
 8000d4a:	4453      	add	r3, sl
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc00      	bgt.n	8000d52 <__aeabi_ddiv+0x282>
 8000d50:	e0ae      	b.n	8000eb0 <__aeabi_ddiv+0x3e0>
 8000d52:	0751      	lsls	r1, r2, #29
 8000d54:	d000      	beq.n	8000d58 <__aeabi_ddiv+0x288>
 8000d56:	e198      	b.n	800108a <__aeabi_ddiv+0x5ba>
 8000d58:	4659      	mov	r1, fp
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	d506      	bpl.n	8000d6c <__aeabi_ddiv+0x29c>
 8000d5e:	4659      	mov	r1, fp
 8000d60:	4b3e      	ldr	r3, [pc, #248]	@ (8000e5c <__aeabi_ddiv+0x38c>)
 8000d62:	4019      	ands	r1, r3
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	468b      	mov	fp, r1
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4453      	add	r3, sl
 8000d6c:	493c      	ldr	r1, [pc, #240]	@ (8000e60 <__aeabi_ddiv+0x390>)
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	dd00      	ble.n	8000d74 <__aeabi_ddiv+0x2a4>
 8000d72:	e71a      	b.n	8000baa <__aeabi_ddiv+0xda>
 8000d74:	4659      	mov	r1, fp
 8000d76:	08d2      	lsrs	r2, r2, #3
 8000d78:	0749      	lsls	r1, r1, #29
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	465a      	mov	r2, fp
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	0254      	lsls	r4, r2, #9
 8000d82:	4688      	mov	r8, r1
 8000d84:	0b24      	lsrs	r4, r4, #12
 8000d86:	0d5b      	lsrs	r3, r3, #21
 8000d88:	e702      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000d8a:	465a      	mov	r2, fp
 8000d8c:	9b00      	ldr	r3, [sp, #0]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x2c4>
 8000d92:	e07e      	b.n	8000e92 <__aeabi_ddiv+0x3c2>
 8000d94:	465b      	mov	r3, fp
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x2cc>
 8000d9a:	e100      	b.n	8000f9e <__aeabi_ddiv+0x4ce>
 8000d9c:	4658      	mov	r0, fp
 8000d9e:	f001 f87f 	bl	8001ea0 <__clzsi2>
 8000da2:	0002      	movs	r2, r0
 8000da4:	0003      	movs	r3, r0
 8000da6:	3a0b      	subs	r2, #11
 8000da8:	271d      	movs	r7, #29
 8000daa:	9e00      	ldr	r6, [sp, #0]
 8000dac:	1aba      	subs	r2, r7, r2
 8000dae:	0019      	movs	r1, r3
 8000db0:	4658      	mov	r0, fp
 8000db2:	40d6      	lsrs	r6, r2
 8000db4:	3908      	subs	r1, #8
 8000db6:	4088      	lsls	r0, r1
 8000db8:	0032      	movs	r2, r6
 8000dba:	4302      	orrs	r2, r0
 8000dbc:	4693      	mov	fp, r2
 8000dbe:	9a00      	ldr	r2, [sp, #0]
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	4928      	ldr	r1, [pc, #160]	@ (8000e64 <__aeabi_ddiv+0x394>)
 8000dc4:	4453      	add	r3, sl
 8000dc6:	468a      	mov	sl, r1
 8000dc8:	449a      	add	sl, r3
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e6c8      	b.n	8000b60 <__aeabi_ddiv+0x90>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	d056      	beq.n	8000e84 <__aeabi_ddiv+0x3b4>
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x30e>
 8000ddc:	e0cd      	b.n	8000f7a <__aeabi_ddiv+0x4aa>
 8000dde:	4658      	mov	r0, fp
 8000de0:	f001 f85e 	bl	8001ea0 <__clzsi2>
 8000de4:	230b      	movs	r3, #11
 8000de6:	425b      	negs	r3, r3
 8000de8:	469c      	mov	ip, r3
 8000dea:	0002      	movs	r2, r0
 8000dec:	4484      	add	ip, r0
 8000dee:	4666      	mov	r6, ip
 8000df0:	231d      	movs	r3, #29
 8000df2:	1b9b      	subs	r3, r3, r6
 8000df4:	0026      	movs	r6, r4
 8000df6:	0011      	movs	r1, r2
 8000df8:	4658      	mov	r0, fp
 8000dfa:	40de      	lsrs	r6, r3
 8000dfc:	3908      	subs	r1, #8
 8000dfe:	4088      	lsls	r0, r1
 8000e00:	0033      	movs	r3, r6
 8000e02:	4303      	orrs	r3, r0
 8000e04:	4699      	mov	r9, r3
 8000e06:	0023      	movs	r3, r4
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <__aeabi_ddiv+0x398>)
 8000e0e:	2400      	movs	r4, #0
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	469a      	mov	sl, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	9303      	str	r3, [sp, #12]
 8000e18:	e682      	b.n	8000b20 <__aeabi_ddiv+0x50>
 8000e1a:	465a      	mov	r2, fp
 8000e1c:	4302      	orrs	r2, r0
 8000e1e:	4691      	mov	r9, r2
 8000e20:	d12a      	bne.n	8000e78 <__aeabi_ddiv+0x3a8>
 8000e22:	2200      	movs	r2, #0
 8000e24:	469a      	mov	sl, r3
 8000e26:	2302      	movs	r3, #2
 8000e28:	4690      	mov	r8, r2
 8000e2a:	2408      	movs	r4, #8
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	e677      	b.n	8000b20 <__aeabi_ddiv+0x50>
 8000e30:	465a      	mov	r2, fp
 8000e32:	9b00      	ldr	r3, [sp, #0]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <__aeabi_ddiv+0x39c>)
 8000e38:	469c      	mov	ip, r3
 8000e3a:	44e2      	add	sl, ip
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	d117      	bne.n	8000e70 <__aeabi_ddiv+0x3a0>
 8000e40:	2302      	movs	r3, #2
 8000e42:	431c      	orrs	r4, r3
 8000e44:	2300      	movs	r3, #0
 8000e46:	469b      	mov	fp, r3
 8000e48:	3302      	adds	r3, #2
 8000e4a:	e689      	b.n	8000b60 <__aeabi_ddiv+0x90>
 8000e4c:	000007ff 	.word	0x000007ff
 8000e50:	fffffc01 	.word	0xfffffc01
 8000e54:	08005df8 	.word	0x08005df8
 8000e58:	000003ff 	.word	0x000003ff
 8000e5c:	feffffff 	.word	0xfeffffff
 8000e60:	000007fe 	.word	0x000007fe
 8000e64:	000003f3 	.word	0x000003f3
 8000e68:	fffffc0d 	.word	0xfffffc0d
 8000e6c:	fffff801 	.word	0xfffff801
 8000e70:	2303      	movs	r3, #3
 8000e72:	0032      	movs	r2, r6
 8000e74:	431c      	orrs	r4, r3
 8000e76:	e673      	b.n	8000b60 <__aeabi_ddiv+0x90>
 8000e78:	469a      	mov	sl, r3
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	46d9      	mov	r9, fp
 8000e7e:	240c      	movs	r4, #12
 8000e80:	9303      	str	r3, [sp, #12]
 8000e82:	e64d      	b.n	8000b20 <__aeabi_ddiv+0x50>
 8000e84:	2300      	movs	r3, #0
 8000e86:	4698      	mov	r8, r3
 8000e88:	469a      	mov	sl, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2404      	movs	r4, #4
 8000e8e:	9303      	str	r3, [sp, #12]
 8000e90:	e646      	b.n	8000b20 <__aeabi_ddiv+0x50>
 8000e92:	2301      	movs	r3, #1
 8000e94:	431c      	orrs	r4, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	469b      	mov	fp, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	e660      	b.n	8000b60 <__aeabi_ddiv+0x90>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2480      	movs	r4, #128	@ 0x80
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	4b92      	ldr	r3, [pc, #584]	@ (80010f0 <__aeabi_ddiv+0x620>)
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	e671      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000eac:	2201      	movs	r2, #1
 8000eae:	4252      	negs	r2, r2
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	2938      	cmp	r1, #56	@ 0x38
 8000eb6:	dd00      	ble.n	8000eba <__aeabi_ddiv+0x3ea>
 8000eb8:	e666      	b.n	8000b88 <__aeabi_ddiv+0xb8>
 8000eba:	291f      	cmp	r1, #31
 8000ebc:	dc00      	bgt.n	8000ec0 <__aeabi_ddiv+0x3f0>
 8000ebe:	e0ab      	b.n	8001018 <__aeabi_ddiv+0x548>
 8000ec0:	201f      	movs	r0, #31
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	1ac3      	subs	r3, r0, r3
 8000ec6:	4658      	mov	r0, fp
 8000ec8:	40d8      	lsrs	r0, r3
 8000eca:	0003      	movs	r3, r0
 8000ecc:	2920      	cmp	r1, #32
 8000ece:	d004      	beq.n	8000eda <__aeabi_ddiv+0x40a>
 8000ed0:	4658      	mov	r0, fp
 8000ed2:	4988      	ldr	r1, [pc, #544]	@ (80010f4 <__aeabi_ddiv+0x624>)
 8000ed4:	4451      	add	r1, sl
 8000ed6:	4088      	lsls	r0, r1
 8000ed8:	4302      	orrs	r2, r0
 8000eda:	1e51      	subs	r1, r2, #1
 8000edc:	418a      	sbcs	r2, r1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	4011      	ands	r1, r2
 8000ee8:	4213      	tst	r3, r2
 8000eea:	d00c      	beq.n	8000f06 <__aeabi_ddiv+0x436>
 8000eec:	230f      	movs	r3, #15
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x426>
 8000ef4:	e0f9      	b.n	80010ea <__aeabi_ddiv+0x61a>
 8000ef6:	1d11      	adds	r1, r2, #4
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	419b      	sbcs	r3, r3
 8000efc:	000a      	movs	r2, r1
 8000efe:	425b      	negs	r3, r3
 8000f00:	0759      	lsls	r1, r3, #29
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	0b1c      	lsrs	r4, r3, #12
 8000f06:	08d2      	lsrs	r2, r2, #3
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	4690      	mov	r8, r2
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e63f      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000f10:	2480      	movs	r4, #128	@ 0x80
 8000f12:	464b      	mov	r3, r9
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	4223      	tst	r3, r4
 8000f18:	d009      	beq.n	8000f2e <__aeabi_ddiv+0x45e>
 8000f1a:	465b      	mov	r3, fp
 8000f1c:	4223      	tst	r3, r4
 8000f1e:	d106      	bne.n	8000f2e <__aeabi_ddiv+0x45e>
 8000f20:	431c      	orrs	r4, r3
 8000f22:	0324      	lsls	r4, r4, #12
 8000f24:	002e      	movs	r6, r5
 8000f26:	4690      	mov	r8, r2
 8000f28:	4b71      	ldr	r3, [pc, #452]	@ (80010f0 <__aeabi_ddiv+0x620>)
 8000f2a:	0b24      	lsrs	r4, r4, #12
 8000f2c:	e630      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000f2e:	2480      	movs	r4, #128	@ 0x80
 8000f30:	464b      	mov	r3, r9
 8000f32:	0324      	lsls	r4, r4, #12
 8000f34:	431c      	orrs	r4, r3
 8000f36:	0324      	lsls	r4, r4, #12
 8000f38:	9e02      	ldr	r6, [sp, #8]
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <__aeabi_ddiv+0x620>)
 8000f3c:	0b24      	lsrs	r4, r4, #12
 8000f3e:	e627      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x476>
 8000f44:	e700      	b.n	8000d48 <__aeabi_ddiv+0x278>
 8000f46:	9800      	ldr	r0, [sp, #0]
 8000f48:	1e51      	subs	r1, r2, #1
 8000f4a:	4684      	mov	ip, r0
 8000f4c:	4464      	add	r4, ip
 8000f4e:	4284      	cmp	r4, r0
 8000f50:	d200      	bcs.n	8000f54 <__aeabi_ddiv+0x484>
 8000f52:	e084      	b.n	800105e <__aeabi_ddiv+0x58e>
 8000f54:	42bc      	cmp	r4, r7
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0x48a>
 8000f58:	e0ae      	b.n	80010b8 <__aeabi_ddiv+0x5e8>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0x48e>
 8000f5c:	e0c1      	b.n	80010e2 <__aeabi_ddiv+0x612>
 8000f5e:	000a      	movs	r2, r1
 8000f60:	e6f0      	b.n	8000d44 <__aeabi_ddiv+0x274>
 8000f62:	4542      	cmp	r2, r8
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x498>
 8000f66:	e62c      	b.n	8000bc2 <__aeabi_ddiv+0xf2>
 8000f68:	464b      	mov	r3, r9
 8000f6a:	07dc      	lsls	r4, r3, #31
 8000f6c:	0858      	lsrs	r0, r3, #1
 8000f6e:	4643      	mov	r3, r8
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	431c      	orrs	r4, r3
 8000f74:	4643      	mov	r3, r8
 8000f76:	07df      	lsls	r7, r3, #31
 8000f78:	e62a      	b.n	8000bd0 <__aeabi_ddiv+0x100>
 8000f7a:	f000 ff91 	bl	8001ea0 <__clzsi2>
 8000f7e:	2315      	movs	r3, #21
 8000f80:	469c      	mov	ip, r3
 8000f82:	4484      	add	ip, r0
 8000f84:	0002      	movs	r2, r0
 8000f86:	4663      	mov	r3, ip
 8000f88:	3220      	adds	r2, #32
 8000f8a:	2b1c      	cmp	r3, #28
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_ddiv+0x4c0>
 8000f8e:	e72e      	b.n	8000dee <__aeabi_ddiv+0x31e>
 8000f90:	0023      	movs	r3, r4
 8000f92:	3808      	subs	r0, #8
 8000f94:	4083      	lsls	r3, r0
 8000f96:	4699      	mov	r9, r3
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	e736      	b.n	8000e0c <__aeabi_ddiv+0x33c>
 8000f9e:	f000 ff7f 	bl	8001ea0 <__clzsi2>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	3215      	adds	r2, #21
 8000fa8:	3320      	adds	r3, #32
 8000faa:	2a1c      	cmp	r2, #28
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_ddiv+0x4e0>
 8000fae:	e6fb      	b.n	8000da8 <__aeabi_ddiv+0x2d8>
 8000fb0:	9900      	ldr	r1, [sp, #0]
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4081      	lsls	r1, r0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	468b      	mov	fp, r1
 8000fba:	e702      	b.n	8000dc2 <__aeabi_ddiv+0x2f2>
 8000fbc:	9900      	ldr	r1, [sp, #0]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	4464      	add	r4, ip
 8000fc4:	42a1      	cmp	r1, r4
 8000fc6:	d900      	bls.n	8000fca <__aeabi_ddiv+0x4fa>
 8000fc8:	e69a      	b.n	8000d00 <__aeabi_ddiv+0x230>
 8000fca:	42a2      	cmp	r2, r4
 8000fcc:	d800      	bhi.n	8000fd0 <__aeabi_ddiv+0x500>
 8000fce:	e697      	b.n	8000d00 <__aeabi_ddiv+0x230>
 8000fd0:	1e83      	subs	r3, r0, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	e694      	b.n	8000d00 <__aeabi_ddiv+0x230>
 8000fd6:	46ac      	mov	ip, r5
 8000fd8:	4461      	add	r1, ip
 8000fda:	3f01      	subs	r7, #1
 8000fdc:	428d      	cmp	r5, r1
 8000fde:	d900      	bls.n	8000fe2 <__aeabi_ddiv+0x512>
 8000fe0:	e680      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000fe2:	428a      	cmp	r2, r1
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x518>
 8000fe6:	e67d      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000fe8:	1e87      	subs	r7, r0, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e67a      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000fee:	4285      	cmp	r5, r0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_ddiv+0x524>
 8000ff2:	e65f      	b.n	8000cb4 <__aeabi_ddiv+0x1e4>
 8000ff4:	45b9      	cmp	r9, r7
 8000ff6:	d900      	bls.n	8000ffa <__aeabi_ddiv+0x52a>
 8000ff8:	e65c      	b.n	8000cb4 <__aeabi_ddiv+0x1e4>
 8000ffa:	e656      	b.n	8000caa <__aeabi_ddiv+0x1da>
 8000ffc:	42a2      	cmp	r2, r4
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x532>
 8001000:	e61a      	b.n	8000c38 <__aeabi_ddiv+0x168>
 8001002:	1e83      	subs	r3, r0, #2
 8001004:	4464      	add	r4, ip
 8001006:	e617      	b.n	8000c38 <__aeabi_ddiv+0x168>
 8001008:	428a      	cmp	r2, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x53e>
 800100c:	e600      	b.n	8000c10 <__aeabi_ddiv+0x140>
 800100e:	46ac      	mov	ip, r5
 8001010:	1e83      	subs	r3, r0, #2
 8001012:	4698      	mov	r8, r3
 8001014:	4461      	add	r1, ip
 8001016:	e5fb      	b.n	8000c10 <__aeabi_ddiv+0x140>
 8001018:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <__aeabi_ddiv+0x628>)
 800101a:	0014      	movs	r4, r2
 800101c:	4450      	add	r0, sl
 800101e:	4082      	lsls	r2, r0
 8001020:	465b      	mov	r3, fp
 8001022:	0017      	movs	r7, r2
 8001024:	4083      	lsls	r3, r0
 8001026:	40cc      	lsrs	r4, r1
 8001028:	1e7a      	subs	r2, r7, #1
 800102a:	4197      	sbcs	r7, r2
 800102c:	4323      	orrs	r3, r4
 800102e:	433b      	orrs	r3, r7
 8001030:	001a      	movs	r2, r3
 8001032:	465b      	mov	r3, fp
 8001034:	40cb      	lsrs	r3, r1
 8001036:	0751      	lsls	r1, r2, #29
 8001038:	d009      	beq.n	800104e <__aeabi_ddiv+0x57e>
 800103a:	210f      	movs	r1, #15
 800103c:	4011      	ands	r1, r2
 800103e:	2904      	cmp	r1, #4
 8001040:	d005      	beq.n	800104e <__aeabi_ddiv+0x57e>
 8001042:	1d11      	adds	r1, r2, #4
 8001044:	4291      	cmp	r1, r2
 8001046:	4192      	sbcs	r2, r2
 8001048:	4252      	negs	r2, r2
 800104a:	189b      	adds	r3, r3, r2
 800104c:	000a      	movs	r2, r1
 800104e:	0219      	lsls	r1, r3, #8
 8001050:	d400      	bmi.n	8001054 <__aeabi_ddiv+0x584>
 8001052:	e755      	b.n	8000f00 <__aeabi_ddiv+0x430>
 8001054:	2200      	movs	r2, #0
 8001056:	2301      	movs	r3, #1
 8001058:	2400      	movs	r4, #0
 800105a:	4690      	mov	r8, r2
 800105c:	e598      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 800105e:	000a      	movs	r2, r1
 8001060:	42bc      	cmp	r4, r7
 8001062:	d000      	beq.n	8001066 <__aeabi_ddiv+0x596>
 8001064:	e66e      	b.n	8000d44 <__aeabi_ddiv+0x274>
 8001066:	454b      	cmp	r3, r9
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0x59c>
 800106a:	e66b      	b.n	8000d44 <__aeabi_ddiv+0x274>
 800106c:	e66c      	b.n	8000d48 <__aeabi_ddiv+0x278>
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <__aeabi_ddiv+0x62c>)
 8001070:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <__aeabi_ddiv+0x630>)
 8001072:	4453      	add	r3, sl
 8001074:	4592      	cmp	sl, r2
 8001076:	da00      	bge.n	800107a <__aeabi_ddiv+0x5aa>
 8001078:	e718      	b.n	8000eac <__aeabi_ddiv+0x3dc>
 800107a:	2101      	movs	r1, #1
 800107c:	4249      	negs	r1, r1
 800107e:	1d0a      	adds	r2, r1, #4
 8001080:	428a      	cmp	r2, r1
 8001082:	4189      	sbcs	r1, r1
 8001084:	4249      	negs	r1, r1
 8001086:	448b      	add	fp, r1
 8001088:	e666      	b.n	8000d58 <__aeabi_ddiv+0x288>
 800108a:	210f      	movs	r1, #15
 800108c:	4011      	ands	r1, r2
 800108e:	2904      	cmp	r1, #4
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x5c4>
 8001092:	e661      	b.n	8000d58 <__aeabi_ddiv+0x288>
 8001094:	0011      	movs	r1, r2
 8001096:	e7f2      	b.n	800107e <__aeabi_ddiv+0x5ae>
 8001098:	42bc      	cmp	r4, r7
 800109a:	d800      	bhi.n	800109e <__aeabi_ddiv+0x5ce>
 800109c:	e60a      	b.n	8000cb4 <__aeabi_ddiv+0x1e4>
 800109e:	2302      	movs	r3, #2
 80010a0:	425b      	negs	r3, r3
 80010a2:	469c      	mov	ip, r3
 80010a4:	9900      	ldr	r1, [sp, #0]
 80010a6:	444f      	add	r7, r9
 80010a8:	454f      	cmp	r7, r9
 80010aa:	419b      	sbcs	r3, r3
 80010ac:	44e3      	add	fp, ip
 80010ae:	468c      	mov	ip, r1
 80010b0:	425b      	negs	r3, r3
 80010b2:	4463      	add	r3, ip
 80010b4:	18c0      	adds	r0, r0, r3
 80010b6:	e5ff      	b.n	8000cb8 <__aeabi_ddiv+0x1e8>
 80010b8:	4649      	mov	r1, r9
 80010ba:	9d00      	ldr	r5, [sp, #0]
 80010bc:	0048      	lsls	r0, r1, #1
 80010be:	4548      	cmp	r0, r9
 80010c0:	4189      	sbcs	r1, r1
 80010c2:	46ac      	mov	ip, r5
 80010c4:	4249      	negs	r1, r1
 80010c6:	4461      	add	r1, ip
 80010c8:	4681      	mov	r9, r0
 80010ca:	3a02      	subs	r2, #2
 80010cc:	1864      	adds	r4, r4, r1
 80010ce:	e7c7      	b.n	8001060 <__aeabi_ddiv+0x590>
 80010d0:	2480      	movs	r4, #128	@ 0x80
 80010d2:	465b      	mov	r3, fp
 80010d4:	0324      	lsls	r4, r4, #12
 80010d6:	431c      	orrs	r4, r3
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	4690      	mov	r8, r2
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <__aeabi_ddiv+0x620>)
 80010de:	0b24      	lsrs	r4, r4, #12
 80010e0:	e556      	b.n	8000b90 <__aeabi_ddiv+0xc0>
 80010e2:	4599      	cmp	r9, r3
 80010e4:	d3e8      	bcc.n	80010b8 <__aeabi_ddiv+0x5e8>
 80010e6:	000a      	movs	r2, r1
 80010e8:	e7bd      	b.n	8001066 <__aeabi_ddiv+0x596>
 80010ea:	2300      	movs	r3, #0
 80010ec:	e708      	b.n	8000f00 <__aeabi_ddiv+0x430>
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	0000043e 	.word	0x0000043e
 80010f8:	0000041e 	.word	0x0000041e
 80010fc:	000003ff 	.word	0x000003ff
 8001100:	fffffc02 	.word	0xfffffc02

08001104 <__aeabi_dmul>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	4657      	mov	r7, sl
 8001108:	46de      	mov	lr, fp
 800110a:	464e      	mov	r6, r9
 800110c:	4645      	mov	r5, r8
 800110e:	b5e0      	push	{r5, r6, r7, lr}
 8001110:	001f      	movs	r7, r3
 8001112:	030b      	lsls	r3, r1, #12
 8001114:	0b1b      	lsrs	r3, r3, #12
 8001116:	0016      	movs	r6, r2
 8001118:	469a      	mov	sl, r3
 800111a:	0fca      	lsrs	r2, r1, #31
 800111c:	004b      	lsls	r3, r1, #1
 800111e:	0004      	movs	r4, r0
 8001120:	4693      	mov	fp, r2
 8001122:	b087      	sub	sp, #28
 8001124:	0d5b      	lsrs	r3, r3, #21
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0x26>
 8001128:	e0d5      	b.n	80012d6 <__aeabi_dmul+0x1d2>
 800112a:	4abb      	ldr	r2, [pc, #748]	@ (8001418 <__aeabi_dmul+0x314>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d100      	bne.n	8001132 <__aeabi_dmul+0x2e>
 8001130:	e0f8      	b.n	8001324 <__aeabi_dmul+0x220>
 8001132:	4651      	mov	r1, sl
 8001134:	0f42      	lsrs	r2, r0, #29
 8001136:	00c9      	lsls	r1, r1, #3
 8001138:	430a      	orrs	r2, r1
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0409      	lsls	r1, r1, #16
 800113e:	4311      	orrs	r1, r2
 8001140:	00c2      	lsls	r2, r0, #3
 8001142:	4691      	mov	r9, r2
 8001144:	4ab5      	ldr	r2, [pc, #724]	@ (800141c <__aeabi_dmul+0x318>)
 8001146:	468a      	mov	sl, r1
 8001148:	189d      	adds	r5, r3, r2
 800114a:	2300      	movs	r3, #0
 800114c:	4698      	mov	r8, r3
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	033c      	lsls	r4, r7, #12
 8001152:	007b      	lsls	r3, r7, #1
 8001154:	0ffa      	lsrs	r2, r7, #31
 8001156:	0030      	movs	r0, r6
 8001158:	0b24      	lsrs	r4, r4, #12
 800115a:	0d5b      	lsrs	r3, r3, #21
 800115c:	9200      	str	r2, [sp, #0]
 800115e:	d100      	bne.n	8001162 <__aeabi_dmul+0x5e>
 8001160:	e096      	b.n	8001290 <__aeabi_dmul+0x18c>
 8001162:	4aad      	ldr	r2, [pc, #692]	@ (8001418 <__aeabi_dmul+0x314>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d031      	beq.n	80011cc <__aeabi_dmul+0xc8>
 8001168:	0f72      	lsrs	r2, r6, #29
 800116a:	00e4      	lsls	r4, r4, #3
 800116c:	4322      	orrs	r2, r4
 800116e:	2480      	movs	r4, #128	@ 0x80
 8001170:	0424      	lsls	r4, r4, #16
 8001172:	4314      	orrs	r4, r2
 8001174:	4aa9      	ldr	r2, [pc, #676]	@ (800141c <__aeabi_dmul+0x318>)
 8001176:	00f0      	lsls	r0, r6, #3
 8001178:	4694      	mov	ip, r2
 800117a:	4463      	add	r3, ip
 800117c:	195b      	adds	r3, r3, r5
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	4642      	mov	r2, r8
 8001184:	2600      	movs	r6, #0
 8001186:	2a0a      	cmp	r2, #10
 8001188:	dc42      	bgt.n	8001210 <__aeabi_dmul+0x10c>
 800118a:	465a      	mov	r2, fp
 800118c:	9900      	ldr	r1, [sp, #0]
 800118e:	404a      	eors	r2, r1
 8001190:	4693      	mov	fp, r2
 8001192:	4642      	mov	r2, r8
 8001194:	2a02      	cmp	r2, #2
 8001196:	dc32      	bgt.n	80011fe <__aeabi_dmul+0xfa>
 8001198:	3a01      	subs	r2, #1
 800119a:	2a01      	cmp	r2, #1
 800119c:	d900      	bls.n	80011a0 <__aeabi_dmul+0x9c>
 800119e:	e149      	b.n	8001434 <__aeabi_dmul+0x330>
 80011a0:	2e02      	cmp	r6, #2
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dmul+0xa2>
 80011a4:	e0ca      	b.n	800133c <__aeabi_dmul+0x238>
 80011a6:	2e01      	cmp	r6, #1
 80011a8:	d13d      	bne.n	8001226 <__aeabi_dmul+0x122>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2400      	movs	r4, #0
 80011ae:	2200      	movs	r2, #0
 80011b0:	0010      	movs	r0, r2
 80011b2:	465a      	mov	r2, fp
 80011b4:	051b      	lsls	r3, r3, #20
 80011b6:	4323      	orrs	r3, r4
 80011b8:	07d2      	lsls	r2, r2, #31
 80011ba:	4313      	orrs	r3, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	b007      	add	sp, #28
 80011c0:	bcf0      	pop	{r4, r5, r6, r7}
 80011c2:	46bb      	mov	fp, r7
 80011c4:	46b2      	mov	sl, r6
 80011c6:	46a9      	mov	r9, r5
 80011c8:	46a0      	mov	r8, r4
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	4b92      	ldr	r3, [pc, #584]	@ (8001418 <__aeabi_dmul+0x314>)
 80011ce:	4326      	orrs	r6, r4
 80011d0:	18eb      	adds	r3, r5, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dmul+0xd4>
 80011d6:	e0bb      	b.n	8001350 <__aeabi_dmul+0x24c>
 80011d8:	2203      	movs	r2, #3
 80011da:	4641      	mov	r1, r8
 80011dc:	4311      	orrs	r1, r2
 80011de:	465a      	mov	r2, fp
 80011e0:	4688      	mov	r8, r1
 80011e2:	9900      	ldr	r1, [sp, #0]
 80011e4:	404a      	eors	r2, r1
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	0109      	lsls	r1, r1, #4
 80011ea:	468c      	mov	ip, r1
 80011ec:	0029      	movs	r1, r5
 80011ee:	4461      	add	r1, ip
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	4641      	mov	r1, r8
 80011f4:	290a      	cmp	r1, #10
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dmul+0xf6>
 80011f8:	e233      	b.n	8001662 <__aeabi_dmul+0x55e>
 80011fa:	4693      	mov	fp, r2
 80011fc:	2603      	movs	r6, #3
 80011fe:	4642      	mov	r2, r8
 8001200:	2701      	movs	r7, #1
 8001202:	4097      	lsls	r7, r2
 8001204:	21a6      	movs	r1, #166	@ 0xa6
 8001206:	003a      	movs	r2, r7
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	400a      	ands	r2, r1
 800120c:	420f      	tst	r7, r1
 800120e:	d031      	beq.n	8001274 <__aeabi_dmul+0x170>
 8001210:	9e02      	ldr	r6, [sp, #8]
 8001212:	2e02      	cmp	r6, #2
 8001214:	d100      	bne.n	8001218 <__aeabi_dmul+0x114>
 8001216:	e235      	b.n	8001684 <__aeabi_dmul+0x580>
 8001218:	2e03      	cmp	r6, #3
 800121a:	d100      	bne.n	800121e <__aeabi_dmul+0x11a>
 800121c:	e1d2      	b.n	80015c4 <__aeabi_dmul+0x4c0>
 800121e:	4654      	mov	r4, sl
 8001220:	4648      	mov	r0, r9
 8001222:	2e01      	cmp	r6, #1
 8001224:	d0c1      	beq.n	80011aa <__aeabi_dmul+0xa6>
 8001226:	9a01      	ldr	r2, [sp, #4]
 8001228:	4b7d      	ldr	r3, [pc, #500]	@ (8001420 <__aeabi_dmul+0x31c>)
 800122a:	4694      	mov	ip, r2
 800122c:	4463      	add	r3, ip
 800122e:	2b00      	cmp	r3, #0
 8001230:	dc00      	bgt.n	8001234 <__aeabi_dmul+0x130>
 8001232:	e0c0      	b.n	80013b6 <__aeabi_dmul+0x2b2>
 8001234:	0742      	lsls	r2, r0, #29
 8001236:	d009      	beq.n	800124c <__aeabi_dmul+0x148>
 8001238:	220f      	movs	r2, #15
 800123a:	4002      	ands	r2, r0
 800123c:	2a04      	cmp	r2, #4
 800123e:	d005      	beq.n	800124c <__aeabi_dmul+0x148>
 8001240:	1d02      	adds	r2, r0, #4
 8001242:	4282      	cmp	r2, r0
 8001244:	4180      	sbcs	r0, r0
 8001246:	4240      	negs	r0, r0
 8001248:	1824      	adds	r4, r4, r0
 800124a:	0010      	movs	r0, r2
 800124c:	01e2      	lsls	r2, r4, #7
 800124e:	d506      	bpl.n	800125e <__aeabi_dmul+0x15a>
 8001250:	4b74      	ldr	r3, [pc, #464]	@ (8001424 <__aeabi_dmul+0x320>)
 8001252:	9a01      	ldr	r2, [sp, #4]
 8001254:	401c      	ands	r4, r3
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	4694      	mov	ip, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4463      	add	r3, ip
 800125e:	4a72      	ldr	r2, [pc, #456]	@ (8001428 <__aeabi_dmul+0x324>)
 8001260:	4293      	cmp	r3, r2
 8001262:	dc6b      	bgt.n	800133c <__aeabi_dmul+0x238>
 8001264:	0762      	lsls	r2, r4, #29
 8001266:	08c0      	lsrs	r0, r0, #3
 8001268:	0264      	lsls	r4, r4, #9
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	4302      	orrs	r2, r0
 800126e:	0b24      	lsrs	r4, r4, #12
 8001270:	0d5b      	lsrs	r3, r3, #21
 8001272:	e79d      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001274:	2190      	movs	r1, #144	@ 0x90
 8001276:	0089      	lsls	r1, r1, #2
 8001278:	420f      	tst	r7, r1
 800127a:	d163      	bne.n	8001344 <__aeabi_dmul+0x240>
 800127c:	2288      	movs	r2, #136	@ 0x88
 800127e:	423a      	tst	r2, r7
 8001280:	d100      	bne.n	8001284 <__aeabi_dmul+0x180>
 8001282:	e0d7      	b.n	8001434 <__aeabi_dmul+0x330>
 8001284:	9b00      	ldr	r3, [sp, #0]
 8001286:	46a2      	mov	sl, r4
 8001288:	469b      	mov	fp, r3
 800128a:	4681      	mov	r9, r0
 800128c:	9602      	str	r6, [sp, #8]
 800128e:	e7bf      	b.n	8001210 <__aeabi_dmul+0x10c>
 8001290:	0023      	movs	r3, r4
 8001292:	4333      	orrs	r3, r6
 8001294:	d100      	bne.n	8001298 <__aeabi_dmul+0x194>
 8001296:	e07f      	b.n	8001398 <__aeabi_dmul+0x294>
 8001298:	2c00      	cmp	r4, #0
 800129a:	d100      	bne.n	800129e <__aeabi_dmul+0x19a>
 800129c:	e1ad      	b.n	80015fa <__aeabi_dmul+0x4f6>
 800129e:	0020      	movs	r0, r4
 80012a0:	f000 fdfe 	bl	8001ea0 <__clzsi2>
 80012a4:	0002      	movs	r2, r0
 80012a6:	0003      	movs	r3, r0
 80012a8:	3a0b      	subs	r2, #11
 80012aa:	201d      	movs	r0, #29
 80012ac:	0019      	movs	r1, r3
 80012ae:	1a82      	subs	r2, r0, r2
 80012b0:	0030      	movs	r0, r6
 80012b2:	3908      	subs	r1, #8
 80012b4:	40d0      	lsrs	r0, r2
 80012b6:	408c      	lsls	r4, r1
 80012b8:	4304      	orrs	r4, r0
 80012ba:	0030      	movs	r0, r6
 80012bc:	4088      	lsls	r0, r1
 80012be:	4a5b      	ldr	r2, [pc, #364]	@ (800142c <__aeabi_dmul+0x328>)
 80012c0:	1aeb      	subs	r3, r5, r3
 80012c2:	4694      	mov	ip, r2
 80012c4:	4463      	add	r3, ip
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	9201      	str	r2, [sp, #4]
 80012ca:	4642      	mov	r2, r8
 80012cc:	2600      	movs	r6, #0
 80012ce:	2a0a      	cmp	r2, #10
 80012d0:	dc00      	bgt.n	80012d4 <__aeabi_dmul+0x1d0>
 80012d2:	e75a      	b.n	800118a <__aeabi_dmul+0x86>
 80012d4:	e79c      	b.n	8001210 <__aeabi_dmul+0x10c>
 80012d6:	4653      	mov	r3, sl
 80012d8:	4303      	orrs	r3, r0
 80012da:	4699      	mov	r9, r3
 80012dc:	d054      	beq.n	8001388 <__aeabi_dmul+0x284>
 80012de:	4653      	mov	r3, sl
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dmul+0x1e2>
 80012e4:	e177      	b.n	80015d6 <__aeabi_dmul+0x4d2>
 80012e6:	4650      	mov	r0, sl
 80012e8:	f000 fdda 	bl	8001ea0 <__clzsi2>
 80012ec:	230b      	movs	r3, #11
 80012ee:	425b      	negs	r3, r3
 80012f0:	469c      	mov	ip, r3
 80012f2:	0002      	movs	r2, r0
 80012f4:	4484      	add	ip, r0
 80012f6:	0011      	movs	r1, r2
 80012f8:	4650      	mov	r0, sl
 80012fa:	3908      	subs	r1, #8
 80012fc:	4088      	lsls	r0, r1
 80012fe:	231d      	movs	r3, #29
 8001300:	4680      	mov	r8, r0
 8001302:	4660      	mov	r0, ip
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	0020      	movs	r0, r4
 8001308:	40d8      	lsrs	r0, r3
 800130a:	0003      	movs	r3, r0
 800130c:	4640      	mov	r0, r8
 800130e:	4303      	orrs	r3, r0
 8001310:	469a      	mov	sl, r3
 8001312:	0023      	movs	r3, r4
 8001314:	408b      	lsls	r3, r1
 8001316:	4699      	mov	r9, r3
 8001318:	2300      	movs	r3, #0
 800131a:	4d44      	ldr	r5, [pc, #272]	@ (800142c <__aeabi_dmul+0x328>)
 800131c:	4698      	mov	r8, r3
 800131e:	1aad      	subs	r5, r5, r2
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	e715      	b.n	8001150 <__aeabi_dmul+0x4c>
 8001324:	4652      	mov	r2, sl
 8001326:	4302      	orrs	r2, r0
 8001328:	4691      	mov	r9, r2
 800132a:	d126      	bne.n	800137a <__aeabi_dmul+0x276>
 800132c:	2200      	movs	r2, #0
 800132e:	001d      	movs	r5, r3
 8001330:	2302      	movs	r3, #2
 8001332:	4692      	mov	sl, r2
 8001334:	3208      	adds	r2, #8
 8001336:	4690      	mov	r8, r2
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	e709      	b.n	8001150 <__aeabi_dmul+0x4c>
 800133c:	2400      	movs	r4, #0
 800133e:	2200      	movs	r2, #0
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <__aeabi_dmul+0x314>)
 8001342:	e735      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001344:	2300      	movs	r3, #0
 8001346:	2480      	movs	r4, #128	@ 0x80
 8001348:	469b      	mov	fp, r3
 800134a:	0324      	lsls	r4, r4, #12
 800134c:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <__aeabi_dmul+0x314>)
 800134e:	e72f      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001350:	2202      	movs	r2, #2
 8001352:	4641      	mov	r1, r8
 8001354:	4311      	orrs	r1, r2
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	4694      	mov	ip, r2
 800135c:	002a      	movs	r2, r5
 800135e:	4462      	add	r2, ip
 8001360:	4688      	mov	r8, r1
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	290a      	cmp	r1, #10
 8001366:	dd00      	ble.n	800136a <__aeabi_dmul+0x266>
 8001368:	e752      	b.n	8001210 <__aeabi_dmul+0x10c>
 800136a:	465a      	mov	r2, fp
 800136c:	2000      	movs	r0, #0
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	0004      	movs	r4, r0
 8001372:	404a      	eors	r2, r1
 8001374:	4693      	mov	fp, r2
 8001376:	2602      	movs	r6, #2
 8001378:	e70b      	b.n	8001192 <__aeabi_dmul+0x8e>
 800137a:	220c      	movs	r2, #12
 800137c:	001d      	movs	r5, r3
 800137e:	2303      	movs	r3, #3
 8001380:	4681      	mov	r9, r0
 8001382:	4690      	mov	r8, r2
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	e6e3      	b.n	8001150 <__aeabi_dmul+0x4c>
 8001388:	2300      	movs	r3, #0
 800138a:	469a      	mov	sl, r3
 800138c:	3304      	adds	r3, #4
 800138e:	4698      	mov	r8, r3
 8001390:	3b03      	subs	r3, #3
 8001392:	2500      	movs	r5, #0
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	e6db      	b.n	8001150 <__aeabi_dmul+0x4c>
 8001398:	4642      	mov	r2, r8
 800139a:	3301      	adds	r3, #1
 800139c:	431a      	orrs	r2, r3
 800139e:	002b      	movs	r3, r5
 80013a0:	4690      	mov	r8, r2
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	4642      	mov	r2, r8
 80013a8:	2400      	movs	r4, #0
 80013aa:	2000      	movs	r0, #0
 80013ac:	2601      	movs	r6, #1
 80013ae:	2a0a      	cmp	r2, #10
 80013b0:	dc00      	bgt.n	80013b4 <__aeabi_dmul+0x2b0>
 80013b2:	e6ea      	b.n	800118a <__aeabi_dmul+0x86>
 80013b4:	e72c      	b.n	8001210 <__aeabi_dmul+0x10c>
 80013b6:	2201      	movs	r2, #1
 80013b8:	1ad2      	subs	r2, r2, r3
 80013ba:	2a38      	cmp	r2, #56	@ 0x38
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dmul+0x2bc>
 80013be:	e6f4      	b.n	80011aa <__aeabi_dmul+0xa6>
 80013c0:	2a1f      	cmp	r2, #31
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_dmul+0x2c2>
 80013c4:	e12a      	b.n	800161c <__aeabi_dmul+0x518>
 80013c6:	211f      	movs	r1, #31
 80013c8:	4249      	negs	r1, r1
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	0021      	movs	r1, r4
 80013ce:	40d9      	lsrs	r1, r3
 80013d0:	000b      	movs	r3, r1
 80013d2:	2a20      	cmp	r2, #32
 80013d4:	d005      	beq.n	80013e2 <__aeabi_dmul+0x2de>
 80013d6:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <__aeabi_dmul+0x32c>)
 80013d8:	9d01      	ldr	r5, [sp, #4]
 80013da:	4694      	mov	ip, r2
 80013dc:	4465      	add	r5, ip
 80013de:	40ac      	lsls	r4, r5
 80013e0:	4320      	orrs	r0, r4
 80013e2:	1e42      	subs	r2, r0, #1
 80013e4:	4190      	sbcs	r0, r2
 80013e6:	4318      	orrs	r0, r3
 80013e8:	2307      	movs	r3, #7
 80013ea:	0019      	movs	r1, r3
 80013ec:	2400      	movs	r4, #0
 80013ee:	4001      	ands	r1, r0
 80013f0:	4203      	tst	r3, r0
 80013f2:	d00c      	beq.n	800140e <__aeabi_dmul+0x30a>
 80013f4:	230f      	movs	r3, #15
 80013f6:	4003      	ands	r3, r0
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d100      	bne.n	80013fe <__aeabi_dmul+0x2fa>
 80013fc:	e140      	b.n	8001680 <__aeabi_dmul+0x57c>
 80013fe:	1d03      	adds	r3, r0, #4
 8001400:	4283      	cmp	r3, r0
 8001402:	41a4      	sbcs	r4, r4
 8001404:	0018      	movs	r0, r3
 8001406:	4264      	negs	r4, r4
 8001408:	0761      	lsls	r1, r4, #29
 800140a:	0264      	lsls	r4, r4, #9
 800140c:	0b24      	lsrs	r4, r4, #12
 800140e:	08c2      	lsrs	r2, r0, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430a      	orrs	r2, r1
 8001414:	e6cc      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	000007ff 	.word	0x000007ff
 800141c:	fffffc01 	.word	0xfffffc01
 8001420:	000003ff 	.word	0x000003ff
 8001424:	feffffff 	.word	0xfeffffff
 8001428:	000007fe 	.word	0x000007fe
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	0000043e 	.word	0x0000043e
 8001434:	4649      	mov	r1, r9
 8001436:	464a      	mov	r2, r9
 8001438:	0409      	lsls	r1, r1, #16
 800143a:	0c09      	lsrs	r1, r1, #16
 800143c:	000d      	movs	r5, r1
 800143e:	0c16      	lsrs	r6, r2, #16
 8001440:	0c02      	lsrs	r2, r0, #16
 8001442:	0400      	lsls	r0, r0, #16
 8001444:	0c00      	lsrs	r0, r0, #16
 8001446:	4345      	muls	r5, r0
 8001448:	46ac      	mov	ip, r5
 800144a:	0005      	movs	r5, r0
 800144c:	4375      	muls	r5, r6
 800144e:	46a8      	mov	r8, r5
 8001450:	0015      	movs	r5, r2
 8001452:	000f      	movs	r7, r1
 8001454:	4375      	muls	r5, r6
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	9502      	str	r5, [sp, #8]
 800145a:	002a      	movs	r2, r5
 800145c:	9d00      	ldr	r5, [sp, #0]
 800145e:	436f      	muls	r7, r5
 8001460:	4665      	mov	r5, ip
 8001462:	0c2d      	lsrs	r5, r5, #16
 8001464:	46a9      	mov	r9, r5
 8001466:	4447      	add	r7, r8
 8001468:	444f      	add	r7, r9
 800146a:	45b8      	cmp	r8, r7
 800146c:	d905      	bls.n	800147a <__aeabi_dmul+0x376>
 800146e:	0015      	movs	r5, r2
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	4690      	mov	r8, r2
 8001476:	4445      	add	r5, r8
 8001478:	9502      	str	r5, [sp, #8]
 800147a:	0c3d      	lsrs	r5, r7, #16
 800147c:	9503      	str	r5, [sp, #12]
 800147e:	4665      	mov	r5, ip
 8001480:	042d      	lsls	r5, r5, #16
 8001482:	043f      	lsls	r7, r7, #16
 8001484:	0c2d      	lsrs	r5, r5, #16
 8001486:	46ac      	mov	ip, r5
 8001488:	003d      	movs	r5, r7
 800148a:	4465      	add	r5, ip
 800148c:	9504      	str	r5, [sp, #16]
 800148e:	0c25      	lsrs	r5, r4, #16
 8001490:	0424      	lsls	r4, r4, #16
 8001492:	0c24      	lsrs	r4, r4, #16
 8001494:	46ac      	mov	ip, r5
 8001496:	0025      	movs	r5, r4
 8001498:	4375      	muls	r5, r6
 800149a:	46a8      	mov	r8, r5
 800149c:	4665      	mov	r5, ip
 800149e:	000f      	movs	r7, r1
 80014a0:	4369      	muls	r1, r5
 80014a2:	4441      	add	r1, r8
 80014a4:	4689      	mov	r9, r1
 80014a6:	4367      	muls	r7, r4
 80014a8:	0c39      	lsrs	r1, r7, #16
 80014aa:	4449      	add	r1, r9
 80014ac:	436e      	muls	r6, r5
 80014ae:	4588      	cmp	r8, r1
 80014b0:	d903      	bls.n	80014ba <__aeabi_dmul+0x3b6>
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	0252      	lsls	r2, r2, #9
 80014b6:	4690      	mov	r8, r2
 80014b8:	4446      	add	r6, r8
 80014ba:	0c0d      	lsrs	r5, r1, #16
 80014bc:	46a8      	mov	r8, r5
 80014be:	0035      	movs	r5, r6
 80014c0:	4445      	add	r5, r8
 80014c2:	9505      	str	r5, [sp, #20]
 80014c4:	9d03      	ldr	r5, [sp, #12]
 80014c6:	043f      	lsls	r7, r7, #16
 80014c8:	46a8      	mov	r8, r5
 80014ca:	0c3f      	lsrs	r7, r7, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	19c9      	adds	r1, r1, r7
 80014d0:	4488      	add	r8, r1
 80014d2:	4645      	mov	r5, r8
 80014d4:	9503      	str	r5, [sp, #12]
 80014d6:	4655      	mov	r5, sl
 80014d8:	042e      	lsls	r6, r5, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0c2f      	lsrs	r7, r5, #16
 80014de:	0035      	movs	r5, r6
 80014e0:	4345      	muls	r5, r0
 80014e2:	4378      	muls	r0, r7
 80014e4:	4681      	mov	r9, r0
 80014e6:	0038      	movs	r0, r7
 80014e8:	46a8      	mov	r8, r5
 80014ea:	0c2d      	lsrs	r5, r5, #16
 80014ec:	46aa      	mov	sl, r5
 80014ee:	9a00      	ldr	r2, [sp, #0]
 80014f0:	4350      	muls	r0, r2
 80014f2:	4372      	muls	r2, r6
 80014f4:	444a      	add	r2, r9
 80014f6:	4452      	add	r2, sl
 80014f8:	4591      	cmp	r9, r2
 80014fa:	d903      	bls.n	8001504 <__aeabi_dmul+0x400>
 80014fc:	2580      	movs	r5, #128	@ 0x80
 80014fe:	026d      	lsls	r5, r5, #9
 8001500:	46a9      	mov	r9, r5
 8001502:	4448      	add	r0, r9
 8001504:	0c15      	lsrs	r5, r2, #16
 8001506:	46a9      	mov	r9, r5
 8001508:	4645      	mov	r5, r8
 800150a:	042d      	lsls	r5, r5, #16
 800150c:	0c2d      	lsrs	r5, r5, #16
 800150e:	46a8      	mov	r8, r5
 8001510:	4665      	mov	r5, ip
 8001512:	437d      	muls	r5, r7
 8001514:	0412      	lsls	r2, r2, #16
 8001516:	4448      	add	r0, r9
 8001518:	4490      	add	r8, r2
 800151a:	46a9      	mov	r9, r5
 800151c:	0032      	movs	r2, r6
 800151e:	4665      	mov	r5, ip
 8001520:	4362      	muls	r2, r4
 8001522:	436e      	muls	r6, r5
 8001524:	437c      	muls	r4, r7
 8001526:	0c17      	lsrs	r7, r2, #16
 8001528:	1936      	adds	r6, r6, r4
 800152a:	19bf      	adds	r7, r7, r6
 800152c:	42bc      	cmp	r4, r7
 800152e:	d903      	bls.n	8001538 <__aeabi_dmul+0x434>
 8001530:	2480      	movs	r4, #128	@ 0x80
 8001532:	0264      	lsls	r4, r4, #9
 8001534:	46a4      	mov	ip, r4
 8001536:	44e1      	add	r9, ip
 8001538:	9c02      	ldr	r4, [sp, #8]
 800153a:	9e03      	ldr	r6, [sp, #12]
 800153c:	46a4      	mov	ip, r4
 800153e:	9d05      	ldr	r5, [sp, #20]
 8001540:	4466      	add	r6, ip
 8001542:	428e      	cmp	r6, r1
 8001544:	4189      	sbcs	r1, r1
 8001546:	46ac      	mov	ip, r5
 8001548:	0412      	lsls	r2, r2, #16
 800154a:	043c      	lsls	r4, r7, #16
 800154c:	0c12      	lsrs	r2, r2, #16
 800154e:	18a2      	adds	r2, r4, r2
 8001550:	4462      	add	r2, ip
 8001552:	4249      	negs	r1, r1
 8001554:	1854      	adds	r4, r2, r1
 8001556:	4446      	add	r6, r8
 8001558:	46a4      	mov	ip, r4
 800155a:	4546      	cmp	r6, r8
 800155c:	41a4      	sbcs	r4, r4
 800155e:	4682      	mov	sl, r0
 8001560:	4264      	negs	r4, r4
 8001562:	46a0      	mov	r8, r4
 8001564:	42aa      	cmp	r2, r5
 8001566:	4192      	sbcs	r2, r2
 8001568:	458c      	cmp	ip, r1
 800156a:	4189      	sbcs	r1, r1
 800156c:	44e2      	add	sl, ip
 800156e:	44d0      	add	r8, sl
 8001570:	4249      	negs	r1, r1
 8001572:	4252      	negs	r2, r2
 8001574:	430a      	orrs	r2, r1
 8001576:	45a0      	cmp	r8, r4
 8001578:	41a4      	sbcs	r4, r4
 800157a:	4582      	cmp	sl, r0
 800157c:	4189      	sbcs	r1, r1
 800157e:	4264      	negs	r4, r4
 8001580:	4249      	negs	r1, r1
 8001582:	430c      	orrs	r4, r1
 8001584:	4641      	mov	r1, r8
 8001586:	0c3f      	lsrs	r7, r7, #16
 8001588:	19d2      	adds	r2, r2, r7
 800158a:	1912      	adds	r2, r2, r4
 800158c:	0dcc      	lsrs	r4, r1, #23
 800158e:	9904      	ldr	r1, [sp, #16]
 8001590:	0270      	lsls	r0, r6, #9
 8001592:	4308      	orrs	r0, r1
 8001594:	1e41      	subs	r1, r0, #1
 8001596:	4188      	sbcs	r0, r1
 8001598:	4641      	mov	r1, r8
 800159a:	444a      	add	r2, r9
 800159c:	0df6      	lsrs	r6, r6, #23
 800159e:	0252      	lsls	r2, r2, #9
 80015a0:	4330      	orrs	r0, r6
 80015a2:	0249      	lsls	r1, r1, #9
 80015a4:	4314      	orrs	r4, r2
 80015a6:	4308      	orrs	r0, r1
 80015a8:	01d2      	lsls	r2, r2, #7
 80015aa:	d535      	bpl.n	8001618 <__aeabi_dmul+0x514>
 80015ac:	2201      	movs	r2, #1
 80015ae:	0843      	lsrs	r3, r0, #1
 80015b0:	4002      	ands	r2, r0
 80015b2:	4313      	orrs	r3, r2
 80015b4:	07e0      	lsls	r0, r4, #31
 80015b6:	4318      	orrs	r0, r3
 80015b8:	0864      	lsrs	r4, r4, #1
 80015ba:	e634      	b.n	8001226 <__aeabi_dmul+0x122>
 80015bc:	9b00      	ldr	r3, [sp, #0]
 80015be:	46a2      	mov	sl, r4
 80015c0:	469b      	mov	fp, r3
 80015c2:	4681      	mov	r9, r0
 80015c4:	2480      	movs	r4, #128	@ 0x80
 80015c6:	4653      	mov	r3, sl
 80015c8:	0324      	lsls	r4, r4, #12
 80015ca:	431c      	orrs	r4, r3
 80015cc:	0324      	lsls	r4, r4, #12
 80015ce:	464a      	mov	r2, r9
 80015d0:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <__aeabi_dmul+0x588>)
 80015d2:	0b24      	lsrs	r4, r4, #12
 80015d4:	e5ec      	b.n	80011b0 <__aeabi_dmul+0xac>
 80015d6:	f000 fc63 	bl	8001ea0 <__clzsi2>
 80015da:	2315      	movs	r3, #21
 80015dc:	469c      	mov	ip, r3
 80015de:	4484      	add	ip, r0
 80015e0:	0002      	movs	r2, r0
 80015e2:	4663      	mov	r3, ip
 80015e4:	3220      	adds	r2, #32
 80015e6:	2b1c      	cmp	r3, #28
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dmul+0x4e8>
 80015ea:	e684      	b.n	80012f6 <__aeabi_dmul+0x1f2>
 80015ec:	2300      	movs	r3, #0
 80015ee:	4699      	mov	r9, r3
 80015f0:	0023      	movs	r3, r4
 80015f2:	3808      	subs	r0, #8
 80015f4:	4083      	lsls	r3, r0
 80015f6:	469a      	mov	sl, r3
 80015f8:	e68e      	b.n	8001318 <__aeabi_dmul+0x214>
 80015fa:	f000 fc51 	bl	8001ea0 <__clzsi2>
 80015fe:	0002      	movs	r2, r0
 8001600:	0003      	movs	r3, r0
 8001602:	3215      	adds	r2, #21
 8001604:	3320      	adds	r3, #32
 8001606:	2a1c      	cmp	r2, #28
 8001608:	dc00      	bgt.n	800160c <__aeabi_dmul+0x508>
 800160a:	e64e      	b.n	80012aa <__aeabi_dmul+0x1a6>
 800160c:	0002      	movs	r2, r0
 800160e:	0034      	movs	r4, r6
 8001610:	3a08      	subs	r2, #8
 8001612:	2000      	movs	r0, #0
 8001614:	4094      	lsls	r4, r2
 8001616:	e652      	b.n	80012be <__aeabi_dmul+0x1ba>
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	e604      	b.n	8001226 <__aeabi_dmul+0x122>
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <__aeabi_dmul+0x58c>)
 800161e:	0021      	movs	r1, r4
 8001620:	469c      	mov	ip, r3
 8001622:	0003      	movs	r3, r0
 8001624:	9d01      	ldr	r5, [sp, #4]
 8001626:	40d3      	lsrs	r3, r2
 8001628:	4465      	add	r5, ip
 800162a:	40a9      	lsls	r1, r5
 800162c:	4319      	orrs	r1, r3
 800162e:	0003      	movs	r3, r0
 8001630:	40ab      	lsls	r3, r5
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	4183      	sbcs	r3, r0
 8001636:	4319      	orrs	r1, r3
 8001638:	0008      	movs	r0, r1
 800163a:	40d4      	lsrs	r4, r2
 800163c:	074b      	lsls	r3, r1, #29
 800163e:	d009      	beq.n	8001654 <__aeabi_dmul+0x550>
 8001640:	230f      	movs	r3, #15
 8001642:	400b      	ands	r3, r1
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <__aeabi_dmul+0x550>
 8001648:	1d0b      	adds	r3, r1, #4
 800164a:	428b      	cmp	r3, r1
 800164c:	4180      	sbcs	r0, r0
 800164e:	4240      	negs	r0, r0
 8001650:	1824      	adds	r4, r4, r0
 8001652:	0018      	movs	r0, r3
 8001654:	0223      	lsls	r3, r4, #8
 8001656:	d400      	bmi.n	800165a <__aeabi_dmul+0x556>
 8001658:	e6d6      	b.n	8001408 <__aeabi_dmul+0x304>
 800165a:	2301      	movs	r3, #1
 800165c:	2400      	movs	r4, #0
 800165e:	2200      	movs	r2, #0
 8001660:	e5a6      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001662:	290f      	cmp	r1, #15
 8001664:	d1aa      	bne.n	80015bc <__aeabi_dmul+0x4b8>
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	4652      	mov	r2, sl
 800166a:	031b      	lsls	r3, r3, #12
 800166c:	421a      	tst	r2, r3
 800166e:	d0a9      	beq.n	80015c4 <__aeabi_dmul+0x4c0>
 8001670:	421c      	tst	r4, r3
 8001672:	d1a7      	bne.n	80015c4 <__aeabi_dmul+0x4c0>
 8001674:	431c      	orrs	r4, r3
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	0002      	movs	r2, r0
 800167a:	469b      	mov	fp, r3
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <__aeabi_dmul+0x588>)
 800167e:	e597      	b.n	80011b0 <__aeabi_dmul+0xac>
 8001680:	2400      	movs	r4, #0
 8001682:	e6c1      	b.n	8001408 <__aeabi_dmul+0x304>
 8001684:	2400      	movs	r4, #0
 8001686:	4b01      	ldr	r3, [pc, #4]	@ (800168c <__aeabi_dmul+0x588>)
 8001688:	0022      	movs	r2, r4
 800168a:	e591      	b.n	80011b0 <__aeabi_dmul+0xac>
 800168c:	000007ff 	.word	0x000007ff
 8001690:	0000041e 	.word	0x0000041e

08001694 <__aeabi_dsub>:
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	464e      	mov	r6, r9
 8001698:	4645      	mov	r5, r8
 800169a:	46de      	mov	lr, fp
 800169c:	4657      	mov	r7, sl
 800169e:	b5e0      	push	{r5, r6, r7, lr}
 80016a0:	b085      	sub	sp, #20
 80016a2:	9000      	str	r0, [sp, #0]
 80016a4:	9101      	str	r1, [sp, #4]
 80016a6:	030c      	lsls	r4, r1, #12
 80016a8:	004f      	lsls	r7, r1, #1
 80016aa:	0fce      	lsrs	r6, r1, #31
 80016ac:	0a61      	lsrs	r1, r4, #9
 80016ae:	9c00      	ldr	r4, [sp, #0]
 80016b0:	46b0      	mov	r8, r6
 80016b2:	0f64      	lsrs	r4, r4, #29
 80016b4:	430c      	orrs	r4, r1
 80016b6:	9900      	ldr	r1, [sp, #0]
 80016b8:	0d7f      	lsrs	r7, r7, #21
 80016ba:	00c8      	lsls	r0, r1, #3
 80016bc:	0011      	movs	r1, r2
 80016be:	001a      	movs	r2, r3
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	469c      	mov	ip, r3
 80016c4:	9100      	str	r1, [sp, #0]
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	0051      	lsls	r1, r2, #1
 80016ca:	0d4b      	lsrs	r3, r1, #21
 80016cc:	4699      	mov	r9, r3
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	9d00      	ldr	r5, [sp, #0]
 80016d2:	0fd9      	lsrs	r1, r3, #31
 80016d4:	4663      	mov	r3, ip
 80016d6:	0f6a      	lsrs	r2, r5, #29
 80016d8:	0a5b      	lsrs	r3, r3, #9
 80016da:	4313      	orrs	r3, r2
 80016dc:	00ea      	lsls	r2, r5, #3
 80016de:	4694      	mov	ip, r2
 80016e0:	4693      	mov	fp, r2
 80016e2:	4ac1      	ldr	r2, [pc, #772]	@ (80019e8 <__aeabi_dsub+0x354>)
 80016e4:	9003      	str	r0, [sp, #12]
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	4591      	cmp	r9, r2
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x5a>
 80016ec:	e0cd      	b.n	800188a <__aeabi_dsub+0x1f6>
 80016ee:	2501      	movs	r5, #1
 80016f0:	4069      	eors	r1, r5
 80016f2:	464d      	mov	r5, r9
 80016f4:	1b7d      	subs	r5, r7, r5
 80016f6:	46aa      	mov	sl, r5
 80016f8:	428e      	cmp	r6, r1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x6a>
 80016fc:	e080      	b.n	8001800 <__aeabi_dsub+0x16c>
 80016fe:	2d00      	cmp	r5, #0
 8001700:	dc00      	bgt.n	8001704 <__aeabi_dsub+0x70>
 8001702:	e335      	b.n	8001d70 <__aeabi_dsub+0x6dc>
 8001704:	4649      	mov	r1, r9
 8001706:	2900      	cmp	r1, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x78>
 800170a:	e0df      	b.n	80018cc <__aeabi_dsub+0x238>
 800170c:	4297      	cmp	r7, r2
 800170e:	d100      	bne.n	8001712 <__aeabi_dsub+0x7e>
 8001710:	e194      	b.n	8001a3c <__aeabi_dsub+0x3a8>
 8001712:	4652      	mov	r2, sl
 8001714:	2501      	movs	r5, #1
 8001716:	2a38      	cmp	r2, #56	@ 0x38
 8001718:	dc19      	bgt.n	800174e <__aeabi_dsub+0xba>
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	9b02      	ldr	r3, [sp, #8]
 800171e:	0412      	lsls	r2, r2, #16
 8001720:	4313      	orrs	r3, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	4652      	mov	r2, sl
 8001726:	2a1f      	cmp	r2, #31
 8001728:	dd00      	ble.n	800172c <__aeabi_dsub+0x98>
 800172a:	e1e3      	b.n	8001af4 <__aeabi_dsub+0x460>
 800172c:	4653      	mov	r3, sl
 800172e:	2220      	movs	r2, #32
 8001730:	4661      	mov	r1, ip
 8001732:	9d02      	ldr	r5, [sp, #8]
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	4095      	lsls	r5, r2
 8001738:	40d9      	lsrs	r1, r3
 800173a:	430d      	orrs	r5, r1
 800173c:	4661      	mov	r1, ip
 800173e:	4091      	lsls	r1, r2
 8001740:	000a      	movs	r2, r1
 8001742:	1e51      	subs	r1, r2, #1
 8001744:	418a      	sbcs	r2, r1
 8001746:	4315      	orrs	r5, r2
 8001748:	9a02      	ldr	r2, [sp, #8]
 800174a:	40da      	lsrs	r2, r3
 800174c:	1aa4      	subs	r4, r4, r2
 800174e:	1b45      	subs	r5, r0, r5
 8001750:	42a8      	cmp	r0, r5
 8001752:	4180      	sbcs	r0, r0
 8001754:	4240      	negs	r0, r0
 8001756:	1a24      	subs	r4, r4, r0
 8001758:	0223      	lsls	r3, r4, #8
 800175a:	d400      	bmi.n	800175e <__aeabi_dsub+0xca>
 800175c:	e13d      	b.n	80019da <__aeabi_dsub+0x346>
 800175e:	0264      	lsls	r4, r4, #9
 8001760:	0a64      	lsrs	r4, r4, #9
 8001762:	2c00      	cmp	r4, #0
 8001764:	d100      	bne.n	8001768 <__aeabi_dsub+0xd4>
 8001766:	e147      	b.n	80019f8 <__aeabi_dsub+0x364>
 8001768:	0020      	movs	r0, r4
 800176a:	f000 fb99 	bl	8001ea0 <__clzsi2>
 800176e:	0003      	movs	r3, r0
 8001770:	3b08      	subs	r3, #8
 8001772:	2120      	movs	r1, #32
 8001774:	0028      	movs	r0, r5
 8001776:	1aca      	subs	r2, r1, r3
 8001778:	40d0      	lsrs	r0, r2
 800177a:	409c      	lsls	r4, r3
 800177c:	0002      	movs	r2, r0
 800177e:	409d      	lsls	r5, r3
 8001780:	4322      	orrs	r2, r4
 8001782:	429f      	cmp	r7, r3
 8001784:	dd00      	ble.n	8001788 <__aeabi_dsub+0xf4>
 8001786:	e177      	b.n	8001a78 <__aeabi_dsub+0x3e4>
 8001788:	1bd8      	subs	r0, r3, r7
 800178a:	3001      	adds	r0, #1
 800178c:	1a09      	subs	r1, r1, r0
 800178e:	002c      	movs	r4, r5
 8001790:	408d      	lsls	r5, r1
 8001792:	40c4      	lsrs	r4, r0
 8001794:	1e6b      	subs	r3, r5, #1
 8001796:	419d      	sbcs	r5, r3
 8001798:	0013      	movs	r3, r2
 800179a:	40c2      	lsrs	r2, r0
 800179c:	408b      	lsls	r3, r1
 800179e:	4325      	orrs	r5, r4
 80017a0:	2700      	movs	r7, #0
 80017a2:	0014      	movs	r4, r2
 80017a4:	431d      	orrs	r5, r3
 80017a6:	076b      	lsls	r3, r5, #29
 80017a8:	d009      	beq.n	80017be <__aeabi_dsub+0x12a>
 80017aa:	230f      	movs	r3, #15
 80017ac:	402b      	ands	r3, r5
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d005      	beq.n	80017be <__aeabi_dsub+0x12a>
 80017b2:	1d2b      	adds	r3, r5, #4
 80017b4:	42ab      	cmp	r3, r5
 80017b6:	41ad      	sbcs	r5, r5
 80017b8:	426d      	negs	r5, r5
 80017ba:	1964      	adds	r4, r4, r5
 80017bc:	001d      	movs	r5, r3
 80017be:	0223      	lsls	r3, r4, #8
 80017c0:	d400      	bmi.n	80017c4 <__aeabi_dsub+0x130>
 80017c2:	e140      	b.n	8001a46 <__aeabi_dsub+0x3b2>
 80017c4:	4a88      	ldr	r2, [pc, #544]	@ (80019e8 <__aeabi_dsub+0x354>)
 80017c6:	3701      	adds	r7, #1
 80017c8:	4297      	cmp	r7, r2
 80017ca:	d100      	bne.n	80017ce <__aeabi_dsub+0x13a>
 80017cc:	e101      	b.n	80019d2 <__aeabi_dsub+0x33e>
 80017ce:	2601      	movs	r6, #1
 80017d0:	4643      	mov	r3, r8
 80017d2:	4986      	ldr	r1, [pc, #536]	@ (80019ec <__aeabi_dsub+0x358>)
 80017d4:	08ed      	lsrs	r5, r5, #3
 80017d6:	4021      	ands	r1, r4
 80017d8:	074a      	lsls	r2, r1, #29
 80017da:	432a      	orrs	r2, r5
 80017dc:	057c      	lsls	r4, r7, #21
 80017de:	024d      	lsls	r5, r1, #9
 80017e0:	0b2d      	lsrs	r5, r5, #12
 80017e2:	0d64      	lsrs	r4, r4, #21
 80017e4:	401e      	ands	r6, r3
 80017e6:	0524      	lsls	r4, r4, #20
 80017e8:	432c      	orrs	r4, r5
 80017ea:	07f6      	lsls	r6, r6, #31
 80017ec:	4334      	orrs	r4, r6
 80017ee:	0010      	movs	r0, r2
 80017f0:	0021      	movs	r1, r4
 80017f2:	b005      	add	sp, #20
 80017f4:	bcf0      	pop	{r4, r5, r6, r7}
 80017f6:	46bb      	mov	fp, r7
 80017f8:	46b2      	mov	sl, r6
 80017fa:	46a9      	mov	r9, r5
 80017fc:	46a0      	mov	r8, r4
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001800:	2d00      	cmp	r5, #0
 8001802:	dc00      	bgt.n	8001806 <__aeabi_dsub+0x172>
 8001804:	e2d0      	b.n	8001da8 <__aeabi_dsub+0x714>
 8001806:	4649      	mov	r1, r9
 8001808:	2900      	cmp	r1, #0
 800180a:	d000      	beq.n	800180e <__aeabi_dsub+0x17a>
 800180c:	e0d4      	b.n	80019b8 <__aeabi_dsub+0x324>
 800180e:	4661      	mov	r1, ip
 8001810:	9b02      	ldr	r3, [sp, #8]
 8001812:	4319      	orrs	r1, r3
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x184>
 8001816:	e12b      	b.n	8001a70 <__aeabi_dsub+0x3dc>
 8001818:	1e69      	subs	r1, r5, #1
 800181a:	2d01      	cmp	r5, #1
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x18c>
 800181e:	e1d9      	b.n	8001bd4 <__aeabi_dsub+0x540>
 8001820:	4295      	cmp	r5, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x192>
 8001824:	e10a      	b.n	8001a3c <__aeabi_dsub+0x3a8>
 8001826:	2501      	movs	r5, #1
 8001828:	2938      	cmp	r1, #56	@ 0x38
 800182a:	dc17      	bgt.n	800185c <__aeabi_dsub+0x1c8>
 800182c:	468a      	mov	sl, r1
 800182e:	4653      	mov	r3, sl
 8001830:	2b1f      	cmp	r3, #31
 8001832:	dd00      	ble.n	8001836 <__aeabi_dsub+0x1a2>
 8001834:	e1e7      	b.n	8001c06 <__aeabi_dsub+0x572>
 8001836:	2220      	movs	r2, #32
 8001838:	1ad2      	subs	r2, r2, r3
 800183a:	9b02      	ldr	r3, [sp, #8]
 800183c:	4661      	mov	r1, ip
 800183e:	4093      	lsls	r3, r2
 8001840:	001d      	movs	r5, r3
 8001842:	4653      	mov	r3, sl
 8001844:	40d9      	lsrs	r1, r3
 8001846:	4663      	mov	r3, ip
 8001848:	4093      	lsls	r3, r2
 800184a:	001a      	movs	r2, r3
 800184c:	430d      	orrs	r5, r1
 800184e:	1e51      	subs	r1, r2, #1
 8001850:	418a      	sbcs	r2, r1
 8001852:	4653      	mov	r3, sl
 8001854:	4315      	orrs	r5, r2
 8001856:	9a02      	ldr	r2, [sp, #8]
 8001858:	40da      	lsrs	r2, r3
 800185a:	18a4      	adds	r4, r4, r2
 800185c:	182d      	adds	r5, r5, r0
 800185e:	4285      	cmp	r5, r0
 8001860:	4180      	sbcs	r0, r0
 8001862:	4240      	negs	r0, r0
 8001864:	1824      	adds	r4, r4, r0
 8001866:	0223      	lsls	r3, r4, #8
 8001868:	d400      	bmi.n	800186c <__aeabi_dsub+0x1d8>
 800186a:	e0b6      	b.n	80019da <__aeabi_dsub+0x346>
 800186c:	4b5e      	ldr	r3, [pc, #376]	@ (80019e8 <__aeabi_dsub+0x354>)
 800186e:	3701      	adds	r7, #1
 8001870:	429f      	cmp	r7, r3
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x1e2>
 8001874:	e0ad      	b.n	80019d2 <__aeabi_dsub+0x33e>
 8001876:	2101      	movs	r1, #1
 8001878:	4b5c      	ldr	r3, [pc, #368]	@ (80019ec <__aeabi_dsub+0x358>)
 800187a:	086a      	lsrs	r2, r5, #1
 800187c:	401c      	ands	r4, r3
 800187e:	4029      	ands	r1, r5
 8001880:	430a      	orrs	r2, r1
 8001882:	07e5      	lsls	r5, r4, #31
 8001884:	4315      	orrs	r5, r2
 8001886:	0864      	lsrs	r4, r4, #1
 8001888:	e78d      	b.n	80017a6 <__aeabi_dsub+0x112>
 800188a:	4a59      	ldr	r2, [pc, #356]	@ (80019f0 <__aeabi_dsub+0x35c>)
 800188c:	9b02      	ldr	r3, [sp, #8]
 800188e:	4692      	mov	sl, r2
 8001890:	4662      	mov	r2, ip
 8001892:	44ba      	add	sl, r7
 8001894:	431a      	orrs	r2, r3
 8001896:	d02c      	beq.n	80018f2 <__aeabi_dsub+0x25e>
 8001898:	428e      	cmp	r6, r1
 800189a:	d02e      	beq.n	80018fa <__aeabi_dsub+0x266>
 800189c:	4652      	mov	r2, sl
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d060      	beq.n	8001964 <__aeabi_dsub+0x2d0>
 80018a2:	2f00      	cmp	r7, #0
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x214>
 80018a6:	e0db      	b.n	8001a60 <__aeabi_dsub+0x3cc>
 80018a8:	4663      	mov	r3, ip
 80018aa:	000e      	movs	r6, r1
 80018ac:	9c02      	ldr	r4, [sp, #8]
 80018ae:	08d8      	lsrs	r0, r3, #3
 80018b0:	0762      	lsls	r2, r4, #29
 80018b2:	4302      	orrs	r2, r0
 80018b4:	08e4      	lsrs	r4, r4, #3
 80018b6:	0013      	movs	r3, r2
 80018b8:	4323      	orrs	r3, r4
 80018ba:	d100      	bne.n	80018be <__aeabi_dsub+0x22a>
 80018bc:	e254      	b.n	8001d68 <__aeabi_dsub+0x6d4>
 80018be:	2580      	movs	r5, #128	@ 0x80
 80018c0:	032d      	lsls	r5, r5, #12
 80018c2:	4325      	orrs	r5, r4
 80018c4:	032d      	lsls	r5, r5, #12
 80018c6:	4c48      	ldr	r4, [pc, #288]	@ (80019e8 <__aeabi_dsub+0x354>)
 80018c8:	0b2d      	lsrs	r5, r5, #12
 80018ca:	e78c      	b.n	80017e6 <__aeabi_dsub+0x152>
 80018cc:	4661      	mov	r1, ip
 80018ce:	9b02      	ldr	r3, [sp, #8]
 80018d0:	4319      	orrs	r1, r3
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dsub+0x242>
 80018d4:	e0cc      	b.n	8001a70 <__aeabi_dsub+0x3dc>
 80018d6:	0029      	movs	r1, r5
 80018d8:	3901      	subs	r1, #1
 80018da:	2d01      	cmp	r5, #1
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0x24c>
 80018de:	e188      	b.n	8001bf2 <__aeabi_dsub+0x55e>
 80018e0:	4295      	cmp	r5, r2
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dsub+0x252>
 80018e4:	e0aa      	b.n	8001a3c <__aeabi_dsub+0x3a8>
 80018e6:	2501      	movs	r5, #1
 80018e8:	2938      	cmp	r1, #56	@ 0x38
 80018ea:	dd00      	ble.n	80018ee <__aeabi_dsub+0x25a>
 80018ec:	e72f      	b.n	800174e <__aeabi_dsub+0xba>
 80018ee:	468a      	mov	sl, r1
 80018f0:	e718      	b.n	8001724 <__aeabi_dsub+0x90>
 80018f2:	2201      	movs	r2, #1
 80018f4:	4051      	eors	r1, r2
 80018f6:	428e      	cmp	r6, r1
 80018f8:	d1d0      	bne.n	800189c <__aeabi_dsub+0x208>
 80018fa:	4653      	mov	r3, sl
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x26e>
 8001900:	e0be      	b.n	8001a80 <__aeabi_dsub+0x3ec>
 8001902:	2f00      	cmp	r7, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dsub+0x274>
 8001906:	e138      	b.n	8001b7a <__aeabi_dsub+0x4e6>
 8001908:	46ca      	mov	sl, r9
 800190a:	0022      	movs	r2, r4
 800190c:	4302      	orrs	r2, r0
 800190e:	d100      	bne.n	8001912 <__aeabi_dsub+0x27e>
 8001910:	e1e2      	b.n	8001cd8 <__aeabi_dsub+0x644>
 8001912:	4653      	mov	r3, sl
 8001914:	1e59      	subs	r1, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x288>
 800191a:	e20d      	b.n	8001d38 <__aeabi_dsub+0x6a4>
 800191c:	4a32      	ldr	r2, [pc, #200]	@ (80019e8 <__aeabi_dsub+0x354>)
 800191e:	4592      	cmp	sl, r2
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x290>
 8001922:	e1d2      	b.n	8001cca <__aeabi_dsub+0x636>
 8001924:	2701      	movs	r7, #1
 8001926:	2938      	cmp	r1, #56	@ 0x38
 8001928:	dc13      	bgt.n	8001952 <__aeabi_dsub+0x2be>
 800192a:	291f      	cmp	r1, #31
 800192c:	dd00      	ble.n	8001930 <__aeabi_dsub+0x29c>
 800192e:	e1ee      	b.n	8001d0e <__aeabi_dsub+0x67a>
 8001930:	2220      	movs	r2, #32
 8001932:	9b02      	ldr	r3, [sp, #8]
 8001934:	1a52      	subs	r2, r2, r1
 8001936:	0025      	movs	r5, r4
 8001938:	0007      	movs	r7, r0
 800193a:	469a      	mov	sl, r3
 800193c:	40cc      	lsrs	r4, r1
 800193e:	4090      	lsls	r0, r2
 8001940:	4095      	lsls	r5, r2
 8001942:	40cf      	lsrs	r7, r1
 8001944:	44a2      	add	sl, r4
 8001946:	1e42      	subs	r2, r0, #1
 8001948:	4190      	sbcs	r0, r2
 800194a:	4653      	mov	r3, sl
 800194c:	432f      	orrs	r7, r5
 800194e:	4307      	orrs	r7, r0
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	003d      	movs	r5, r7
 8001954:	4465      	add	r5, ip
 8001956:	4565      	cmp	r5, ip
 8001958:	4192      	sbcs	r2, r2
 800195a:	9b02      	ldr	r3, [sp, #8]
 800195c:	4252      	negs	r2, r2
 800195e:	464f      	mov	r7, r9
 8001960:	18d4      	adds	r4, r2, r3
 8001962:	e780      	b.n	8001866 <__aeabi_dsub+0x1d2>
 8001964:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <__aeabi_dsub+0x360>)
 8001966:	1c7d      	adds	r5, r7, #1
 8001968:	4215      	tst	r5, r2
 800196a:	d000      	beq.n	800196e <__aeabi_dsub+0x2da>
 800196c:	e0aa      	b.n	8001ac4 <__aeabi_dsub+0x430>
 800196e:	4662      	mov	r2, ip
 8001970:	0025      	movs	r5, r4
 8001972:	9b02      	ldr	r3, [sp, #8]
 8001974:	4305      	orrs	r5, r0
 8001976:	431a      	orrs	r2, r3
 8001978:	2f00      	cmp	r7, #0
 800197a:	d000      	beq.n	800197e <__aeabi_dsub+0x2ea>
 800197c:	e0f5      	b.n	8001b6a <__aeabi_dsub+0x4d6>
 800197e:	2d00      	cmp	r5, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_dsub+0x2f0>
 8001982:	e16b      	b.n	8001c5c <__aeabi_dsub+0x5c8>
 8001984:	2a00      	cmp	r2, #0
 8001986:	d100      	bne.n	800198a <__aeabi_dsub+0x2f6>
 8001988:	e152      	b.n	8001c30 <__aeabi_dsub+0x59c>
 800198a:	4663      	mov	r3, ip
 800198c:	1ac5      	subs	r5, r0, r3
 800198e:	9b02      	ldr	r3, [sp, #8]
 8001990:	1ae2      	subs	r2, r4, r3
 8001992:	42a8      	cmp	r0, r5
 8001994:	419b      	sbcs	r3, r3
 8001996:	425b      	negs	r3, r3
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	021a      	lsls	r2, r3, #8
 800199c:	d400      	bmi.n	80019a0 <__aeabi_dsub+0x30c>
 800199e:	e1d5      	b.n	8001d4c <__aeabi_dsub+0x6b8>
 80019a0:	4663      	mov	r3, ip
 80019a2:	1a1d      	subs	r5, r3, r0
 80019a4:	45ac      	cmp	ip, r5
 80019a6:	4192      	sbcs	r2, r2
 80019a8:	2601      	movs	r6, #1
 80019aa:	9b02      	ldr	r3, [sp, #8]
 80019ac:	4252      	negs	r2, r2
 80019ae:	1b1c      	subs	r4, r3, r4
 80019b0:	4688      	mov	r8, r1
 80019b2:	1aa4      	subs	r4, r4, r2
 80019b4:	400e      	ands	r6, r1
 80019b6:	e6f6      	b.n	80017a6 <__aeabi_dsub+0x112>
 80019b8:	4297      	cmp	r7, r2
 80019ba:	d03f      	beq.n	8001a3c <__aeabi_dsub+0x3a8>
 80019bc:	4652      	mov	r2, sl
 80019be:	2501      	movs	r5, #1
 80019c0:	2a38      	cmp	r2, #56	@ 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0x332>
 80019c4:	e74a      	b.n	800185c <__aeabi_dsub+0x1c8>
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	9b02      	ldr	r3, [sp, #8]
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	4313      	orrs	r3, r2
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e72d      	b.n	800182e <__aeabi_dsub+0x19a>
 80019d2:	003c      	movs	r4, r7
 80019d4:	2500      	movs	r5, #0
 80019d6:	2200      	movs	r2, #0
 80019d8:	e705      	b.n	80017e6 <__aeabi_dsub+0x152>
 80019da:	2307      	movs	r3, #7
 80019dc:	402b      	ands	r3, r5
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dsub+0x350>
 80019e2:	e6e2      	b.n	80017aa <__aeabi_dsub+0x116>
 80019e4:	e06b      	b.n	8001abe <__aeabi_dsub+0x42a>
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	000007ff 	.word	0x000007ff
 80019ec:	ff7fffff 	.word	0xff7fffff
 80019f0:	fffff801 	.word	0xfffff801
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	0028      	movs	r0, r5
 80019fa:	f000 fa51 	bl	8001ea0 <__clzsi2>
 80019fe:	0003      	movs	r3, r0
 8001a00:	3318      	adds	r3, #24
 8001a02:	2b1f      	cmp	r3, #31
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x374>
 8001a06:	e6b4      	b.n	8001772 <__aeabi_dsub+0xde>
 8001a08:	002a      	movs	r2, r5
 8001a0a:	3808      	subs	r0, #8
 8001a0c:	4082      	lsls	r2, r0
 8001a0e:	429f      	cmp	r7, r3
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dsub+0x380>
 8001a12:	e0b9      	b.n	8001b88 <__aeabi_dsub+0x4f4>
 8001a14:	1bdb      	subs	r3, r3, r7
 8001a16:	1c58      	adds	r0, r3, #1
 8001a18:	281f      	cmp	r0, #31
 8001a1a:	dc00      	bgt.n	8001a1e <__aeabi_dsub+0x38a>
 8001a1c:	e1a0      	b.n	8001d60 <__aeabi_dsub+0x6cc>
 8001a1e:	0015      	movs	r5, r2
 8001a20:	3b1f      	subs	r3, #31
 8001a22:	40dd      	lsrs	r5, r3
 8001a24:	2820      	cmp	r0, #32
 8001a26:	d005      	beq.n	8001a34 <__aeabi_dsub+0x3a0>
 8001a28:	2340      	movs	r3, #64	@ 0x40
 8001a2a:	1a1b      	subs	r3, r3, r0
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	1e53      	subs	r3, r2, #1
 8001a30:	419a      	sbcs	r2, r3
 8001a32:	4315      	orrs	r5, r2
 8001a34:	2307      	movs	r3, #7
 8001a36:	2700      	movs	r7, #0
 8001a38:	402b      	ands	r3, r5
 8001a3a:	e7d0      	b.n	80019de <__aeabi_dsub+0x34a>
 8001a3c:	08c0      	lsrs	r0, r0, #3
 8001a3e:	0762      	lsls	r2, r4, #29
 8001a40:	4302      	orrs	r2, r0
 8001a42:	08e4      	lsrs	r4, r4, #3
 8001a44:	e737      	b.n	80018b6 <__aeabi_dsub+0x222>
 8001a46:	08ea      	lsrs	r2, r5, #3
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	4bd3      	ldr	r3, [pc, #844]	@ (8001d9c <__aeabi_dsub+0x708>)
 8001a4e:	08e4      	lsrs	r4, r4, #3
 8001a50:	429f      	cmp	r7, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x3c2>
 8001a54:	e72f      	b.n	80018b6 <__aeabi_dsub+0x222>
 8001a56:	0324      	lsls	r4, r4, #12
 8001a58:	0b25      	lsrs	r5, r4, #12
 8001a5a:	057c      	lsls	r4, r7, #21
 8001a5c:	0d64      	lsrs	r4, r4, #21
 8001a5e:	e6c2      	b.n	80017e6 <__aeabi_dsub+0x152>
 8001a60:	46ca      	mov	sl, r9
 8001a62:	0022      	movs	r2, r4
 8001a64:	4302      	orrs	r2, r0
 8001a66:	d158      	bne.n	8001b1a <__aeabi_dsub+0x486>
 8001a68:	4663      	mov	r3, ip
 8001a6a:	000e      	movs	r6, r1
 8001a6c:	9c02      	ldr	r4, [sp, #8]
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	9b03      	ldr	r3, [sp, #12]
 8001a72:	4657      	mov	r7, sl
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	e7e7      	b.n	8001a48 <__aeabi_dsub+0x3b4>
 8001a78:	4cc9      	ldr	r4, [pc, #804]	@ (8001da0 <__aeabi_dsub+0x70c>)
 8001a7a:	1aff      	subs	r7, r7, r3
 8001a7c:	4014      	ands	r4, r2
 8001a7e:	e692      	b.n	80017a6 <__aeabi_dsub+0x112>
 8001a80:	4dc8      	ldr	r5, [pc, #800]	@ (8001da4 <__aeabi_dsub+0x710>)
 8001a82:	1c7a      	adds	r2, r7, #1
 8001a84:	422a      	tst	r2, r5
 8001a86:	d000      	beq.n	8001a8a <__aeabi_dsub+0x3f6>
 8001a88:	e084      	b.n	8001b94 <__aeabi_dsub+0x500>
 8001a8a:	0022      	movs	r2, r4
 8001a8c:	4302      	orrs	r2, r0
 8001a8e:	2f00      	cmp	r7, #0
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x400>
 8001a92:	e0ef      	b.n	8001c74 <__aeabi_dsub+0x5e0>
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dsub+0x406>
 8001a98:	e0e5      	b.n	8001c66 <__aeabi_dsub+0x5d2>
 8001a9a:	4662      	mov	r2, ip
 8001a9c:	9902      	ldr	r1, [sp, #8]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x410>
 8001aa2:	e0c5      	b.n	8001c30 <__aeabi_dsub+0x59c>
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	18c5      	adds	r5, r0, r3
 8001aa8:	468c      	mov	ip, r1
 8001aaa:	4285      	cmp	r5, r0
 8001aac:	4180      	sbcs	r0, r0
 8001aae:	4464      	add	r4, ip
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	1824      	adds	r4, r4, r0
 8001ab4:	0223      	lsls	r3, r4, #8
 8001ab6:	d502      	bpl.n	8001abe <__aeabi_dsub+0x42a>
 8001ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8001da0 <__aeabi_dsub+0x70c>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	401c      	ands	r4, r3
 8001abe:	46ba      	mov	sl, r7
 8001ac0:	9503      	str	r5, [sp, #12]
 8001ac2:	e7d5      	b.n	8001a70 <__aeabi_dsub+0x3dc>
 8001ac4:	4662      	mov	r2, ip
 8001ac6:	1a85      	subs	r5, r0, r2
 8001ac8:	42a8      	cmp	r0, r5
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	4252      	negs	r2, r2
 8001ace:	4691      	mov	r9, r2
 8001ad0:	9b02      	ldr	r3, [sp, #8]
 8001ad2:	1ae3      	subs	r3, r4, r3
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	1ad2      	subs	r2, r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	4691      	mov	r9, r2
 8001ade:	021a      	lsls	r2, r3, #8
 8001ae0:	d46c      	bmi.n	8001bbc <__aeabi_dsub+0x528>
 8001ae2:	464a      	mov	r2, r9
 8001ae4:	464c      	mov	r4, r9
 8001ae6:	432a      	orrs	r2, r5
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dsub+0x458>
 8001aea:	e63a      	b.n	8001762 <__aeabi_dsub+0xce>
 8001aec:	2600      	movs	r6, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2500      	movs	r5, #0
 8001af2:	e678      	b.n	80017e6 <__aeabi_dsub+0x152>
 8001af4:	9902      	ldr	r1, [sp, #8]
 8001af6:	4653      	mov	r3, sl
 8001af8:	000d      	movs	r5, r1
 8001afa:	3a20      	subs	r2, #32
 8001afc:	40d5      	lsrs	r5, r2
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d006      	beq.n	8001b10 <__aeabi_dsub+0x47c>
 8001b02:	2240      	movs	r2, #64	@ 0x40
 8001b04:	1ad2      	subs	r2, r2, r3
 8001b06:	000b      	movs	r3, r1
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	4662      	mov	r2, ip
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	4693      	mov	fp, r2
 8001b10:	465b      	mov	r3, fp
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	4193      	sbcs	r3, r2
 8001b16:	431d      	orrs	r5, r3
 8001b18:	e619      	b.n	800174e <__aeabi_dsub+0xba>
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x490>
 8001b22:	e0c6      	b.n	8001cb2 <__aeabi_dsub+0x61e>
 8001b24:	4e9d      	ldr	r6, [pc, #628]	@ (8001d9c <__aeabi_dsub+0x708>)
 8001b26:	45b2      	cmp	sl, r6
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x498>
 8001b2a:	e6bd      	b.n	80018a8 <__aeabi_dsub+0x214>
 8001b2c:	4688      	mov	r8, r1
 8001b2e:	000e      	movs	r6, r1
 8001b30:	2501      	movs	r5, #1
 8001b32:	2a38      	cmp	r2, #56	@ 0x38
 8001b34:	dc10      	bgt.n	8001b58 <__aeabi_dsub+0x4c4>
 8001b36:	2a1f      	cmp	r2, #31
 8001b38:	dc7f      	bgt.n	8001c3a <__aeabi_dsub+0x5a6>
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	0025      	movs	r5, r4
 8001b3e:	1a89      	subs	r1, r1, r2
 8001b40:	0007      	movs	r7, r0
 8001b42:	4088      	lsls	r0, r1
 8001b44:	408d      	lsls	r5, r1
 8001b46:	40d7      	lsrs	r7, r2
 8001b48:	40d4      	lsrs	r4, r2
 8001b4a:	1e41      	subs	r1, r0, #1
 8001b4c:	4188      	sbcs	r0, r1
 8001b4e:	9b02      	ldr	r3, [sp, #8]
 8001b50:	433d      	orrs	r5, r7
 8001b52:	1b1b      	subs	r3, r3, r4
 8001b54:	4305      	orrs	r5, r0
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	4662      	mov	r2, ip
 8001b5a:	1b55      	subs	r5, r2, r5
 8001b5c:	45ac      	cmp	ip, r5
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	9b02      	ldr	r3, [sp, #8]
 8001b62:	4252      	negs	r2, r2
 8001b64:	464f      	mov	r7, r9
 8001b66:	1a9c      	subs	r4, r3, r2
 8001b68:	e5f6      	b.n	8001758 <__aeabi_dsub+0xc4>
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x4dc>
 8001b6e:	e0b7      	b.n	8001ce0 <__aeabi_dsub+0x64c>
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x4e2>
 8001b74:	e0f0      	b.n	8001d58 <__aeabi_dsub+0x6c4>
 8001b76:	2601      	movs	r6, #1
 8001b78:	400e      	ands	r6, r1
 8001b7a:	4663      	mov	r3, ip
 8001b7c:	9802      	ldr	r0, [sp, #8]
 8001b7e:	08d9      	lsrs	r1, r3, #3
 8001b80:	0742      	lsls	r2, r0, #29
 8001b82:	430a      	orrs	r2, r1
 8001b84:	08c4      	lsrs	r4, r0, #3
 8001b86:	e696      	b.n	80018b6 <__aeabi_dsub+0x222>
 8001b88:	4c85      	ldr	r4, [pc, #532]	@ (8001da0 <__aeabi_dsub+0x70c>)
 8001b8a:	1aff      	subs	r7, r7, r3
 8001b8c:	4014      	ands	r4, r2
 8001b8e:	0762      	lsls	r2, r4, #29
 8001b90:	08e4      	lsrs	r4, r4, #3
 8001b92:	e760      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001b94:	4981      	ldr	r1, [pc, #516]	@ (8001d9c <__aeabi_dsub+0x708>)
 8001b96:	428a      	cmp	r2, r1
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x508>
 8001b9a:	e0c9      	b.n	8001d30 <__aeabi_dsub+0x69c>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	18c1      	adds	r1, r0, r3
 8001ba0:	4281      	cmp	r1, r0
 8001ba2:	4180      	sbcs	r0, r0
 8001ba4:	9b02      	ldr	r3, [sp, #8]
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	18e3      	adds	r3, r4, r3
 8001baa:	181b      	adds	r3, r3, r0
 8001bac:	07dd      	lsls	r5, r3, #31
 8001bae:	085c      	lsrs	r4, r3, #1
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	0849      	lsrs	r1, r1, #1
 8001bb4:	430d      	orrs	r5, r1
 8001bb6:	0017      	movs	r7, r2
 8001bb8:	402b      	ands	r3, r5
 8001bba:	e710      	b.n	80019de <__aeabi_dsub+0x34a>
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	1a1d      	subs	r5, r3, r0
 8001bc0:	45ac      	cmp	ip, r5
 8001bc2:	4192      	sbcs	r2, r2
 8001bc4:	2601      	movs	r6, #1
 8001bc6:	9b02      	ldr	r3, [sp, #8]
 8001bc8:	4252      	negs	r2, r2
 8001bca:	1b1c      	subs	r4, r3, r4
 8001bcc:	4688      	mov	r8, r1
 8001bce:	1aa4      	subs	r4, r4, r2
 8001bd0:	400e      	ands	r6, r1
 8001bd2:	e5c6      	b.n	8001762 <__aeabi_dsub+0xce>
 8001bd4:	4663      	mov	r3, ip
 8001bd6:	18c5      	adds	r5, r0, r3
 8001bd8:	9b02      	ldr	r3, [sp, #8]
 8001bda:	4285      	cmp	r5, r0
 8001bdc:	4180      	sbcs	r0, r0
 8001bde:	469c      	mov	ip, r3
 8001be0:	4240      	negs	r0, r0
 8001be2:	4464      	add	r4, ip
 8001be4:	1824      	adds	r4, r4, r0
 8001be6:	2701      	movs	r7, #1
 8001be8:	0223      	lsls	r3, r4, #8
 8001bea:	d400      	bmi.n	8001bee <__aeabi_dsub+0x55a>
 8001bec:	e6f5      	b.n	80019da <__aeabi_dsub+0x346>
 8001bee:	2702      	movs	r7, #2
 8001bf0:	e641      	b.n	8001876 <__aeabi_dsub+0x1e2>
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	1ac5      	subs	r5, r0, r3
 8001bf6:	42a8      	cmp	r0, r5
 8001bf8:	4180      	sbcs	r0, r0
 8001bfa:	9b02      	ldr	r3, [sp, #8]
 8001bfc:	4240      	negs	r0, r0
 8001bfe:	1ae4      	subs	r4, r4, r3
 8001c00:	2701      	movs	r7, #1
 8001c02:	1a24      	subs	r4, r4, r0
 8001c04:	e5a8      	b.n	8001758 <__aeabi_dsub+0xc4>
 8001c06:	9d02      	ldr	r5, [sp, #8]
 8001c08:	4652      	mov	r2, sl
 8001c0a:	002b      	movs	r3, r5
 8001c0c:	3a20      	subs	r2, #32
 8001c0e:	40d3      	lsrs	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	4653      	mov	r3, sl
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d006      	beq.n	8001c26 <__aeabi_dsub+0x592>
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	1ad2      	subs	r2, r2, r3
 8001c1c:	002b      	movs	r3, r5
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	4662      	mov	r2, ip
 8001c22:	431a      	orrs	r2, r3
 8001c24:	4693      	mov	fp, r2
 8001c26:	465d      	mov	r5, fp
 8001c28:	1e6b      	subs	r3, r5, #1
 8001c2a:	419d      	sbcs	r5, r3
 8001c2c:	430d      	orrs	r5, r1
 8001c2e:	e615      	b.n	800185c <__aeabi_dsub+0x1c8>
 8001c30:	0762      	lsls	r2, r4, #29
 8001c32:	08c0      	lsrs	r0, r0, #3
 8001c34:	4302      	orrs	r2, r0
 8001c36:	08e4      	lsrs	r4, r4, #3
 8001c38:	e70d      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0027      	movs	r7, r4
 8001c3e:	3920      	subs	r1, #32
 8001c40:	40cf      	lsrs	r7, r1
 8001c42:	2a20      	cmp	r2, #32
 8001c44:	d005      	beq.n	8001c52 <__aeabi_dsub+0x5be>
 8001c46:	2140      	movs	r1, #64	@ 0x40
 8001c48:	1a8a      	subs	r2, r1, r2
 8001c4a:	4094      	lsls	r4, r2
 8001c4c:	0025      	movs	r5, r4
 8001c4e:	4305      	orrs	r5, r0
 8001c50:	9503      	str	r5, [sp, #12]
 8001c52:	9d03      	ldr	r5, [sp, #12]
 8001c54:	1e6a      	subs	r2, r5, #1
 8001c56:	4195      	sbcs	r5, r2
 8001c58:	433d      	orrs	r5, r7
 8001c5a:	e77d      	b.n	8001b58 <__aeabi_dsub+0x4c4>
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x5ce>
 8001c60:	e744      	b.n	8001aec <__aeabi_dsub+0x458>
 8001c62:	2601      	movs	r6, #1
 8001c64:	400e      	ands	r6, r1
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	9b02      	ldr	r3, [sp, #8]
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e6f0      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d028      	beq.n	8001cca <__aeabi_dsub+0x636>
 8001c78:	4662      	mov	r2, ip
 8001c7a:	9f02      	ldr	r7, [sp, #8]
 8001c7c:	08c0      	lsrs	r0, r0, #3
 8001c7e:	433a      	orrs	r2, r7
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x5f0>
 8001c82:	e6dc      	b.n	8001a3e <__aeabi_dsub+0x3aa>
 8001c84:	0762      	lsls	r2, r4, #29
 8001c86:	4310      	orrs	r0, r2
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	08e4      	lsrs	r4, r4, #3
 8001c8c:	0312      	lsls	r2, r2, #12
 8001c8e:	4214      	tst	r4, r2
 8001c90:	d009      	beq.n	8001ca6 <__aeabi_dsub+0x612>
 8001c92:	08fd      	lsrs	r5, r7, #3
 8001c94:	4215      	tst	r5, r2
 8001c96:	d106      	bne.n	8001ca6 <__aeabi_dsub+0x612>
 8001c98:	4663      	mov	r3, ip
 8001c9a:	2601      	movs	r6, #1
 8001c9c:	002c      	movs	r4, r5
 8001c9e:	08d8      	lsrs	r0, r3, #3
 8001ca0:	077b      	lsls	r3, r7, #29
 8001ca2:	4318      	orrs	r0, r3
 8001ca4:	400e      	ands	r6, r1
 8001ca6:	0f42      	lsrs	r2, r0, #29
 8001ca8:	00c0      	lsls	r0, r0, #3
 8001caa:	08c0      	lsrs	r0, r0, #3
 8001cac:	0752      	lsls	r2, r2, #29
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	e601      	b.n	80018b6 <__aeabi_dsub+0x222>
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	1a1d      	subs	r5, r3, r0
 8001cb6:	45ac      	cmp	ip, r5
 8001cb8:	4192      	sbcs	r2, r2
 8001cba:	9b02      	ldr	r3, [sp, #8]
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	1b1c      	subs	r4, r3, r4
 8001cc0:	000e      	movs	r6, r1
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	2701      	movs	r7, #1
 8001cc6:	1aa4      	subs	r4, r4, r2
 8001cc8:	e546      	b.n	8001758 <__aeabi_dsub+0xc4>
 8001cca:	4663      	mov	r3, ip
 8001ccc:	08d9      	lsrs	r1, r3, #3
 8001cce:	9b02      	ldr	r3, [sp, #8]
 8001cd0:	075a      	lsls	r2, r3, #29
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	08dc      	lsrs	r4, r3, #3
 8001cd6:	e5ee      	b.n	80018b6 <__aeabi_dsub+0x222>
 8001cd8:	4663      	mov	r3, ip
 8001cda:	9c02      	ldr	r4, [sp, #8]
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	e6c7      	b.n	8001a70 <__aeabi_dsub+0x3dc>
 8001ce0:	08c0      	lsrs	r0, r0, #3
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x654>
 8001ce6:	e6aa      	b.n	8001a3e <__aeabi_dsub+0x3aa>
 8001ce8:	0762      	lsls	r2, r4, #29
 8001cea:	4310      	orrs	r0, r2
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	08e4      	lsrs	r4, r4, #3
 8001cf0:	0312      	lsls	r2, r2, #12
 8001cf2:	4214      	tst	r4, r2
 8001cf4:	d0d7      	beq.n	8001ca6 <__aeabi_dsub+0x612>
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	08fd      	lsrs	r5, r7, #3
 8001cfa:	4215      	tst	r5, r2
 8001cfc:	d1d3      	bne.n	8001ca6 <__aeabi_dsub+0x612>
 8001cfe:	4663      	mov	r3, ip
 8001d00:	2601      	movs	r6, #1
 8001d02:	08d8      	lsrs	r0, r3, #3
 8001d04:	077b      	lsls	r3, r7, #29
 8001d06:	002c      	movs	r4, r5
 8001d08:	4318      	orrs	r0, r3
 8001d0a:	400e      	ands	r6, r1
 8001d0c:	e7cb      	b.n	8001ca6 <__aeabi_dsub+0x612>
 8001d0e:	000a      	movs	r2, r1
 8001d10:	0027      	movs	r7, r4
 8001d12:	3a20      	subs	r2, #32
 8001d14:	40d7      	lsrs	r7, r2
 8001d16:	2920      	cmp	r1, #32
 8001d18:	d005      	beq.n	8001d26 <__aeabi_dsub+0x692>
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	1a52      	subs	r2, r2, r1
 8001d1e:	4094      	lsls	r4, r2
 8001d20:	0025      	movs	r5, r4
 8001d22:	4305      	orrs	r5, r0
 8001d24:	9503      	str	r5, [sp, #12]
 8001d26:	9d03      	ldr	r5, [sp, #12]
 8001d28:	1e6a      	subs	r2, r5, #1
 8001d2a:	4195      	sbcs	r5, r2
 8001d2c:	432f      	orrs	r7, r5
 8001d2e:	e610      	b.n	8001952 <__aeabi_dsub+0x2be>
 8001d30:	0014      	movs	r4, r2
 8001d32:	2500      	movs	r5, #0
 8001d34:	2200      	movs	r2, #0
 8001d36:	e556      	b.n	80017e6 <__aeabi_dsub+0x152>
 8001d38:	9b02      	ldr	r3, [sp, #8]
 8001d3a:	4460      	add	r0, ip
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	4560      	cmp	r0, ip
 8001d40:	4192      	sbcs	r2, r2
 8001d42:	444c      	add	r4, r9
 8001d44:	4252      	negs	r2, r2
 8001d46:	0005      	movs	r5, r0
 8001d48:	18a4      	adds	r4, r4, r2
 8001d4a:	e74c      	b.n	8001be6 <__aeabi_dsub+0x552>
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	001c      	movs	r4, r3
 8001d50:	432a      	orrs	r2, r5
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x6c2>
 8001d54:	e6b3      	b.n	8001abe <__aeabi_dsub+0x42a>
 8001d56:	e6c9      	b.n	8001aec <__aeabi_dsub+0x458>
 8001d58:	2480      	movs	r4, #128	@ 0x80
 8001d5a:	2600      	movs	r6, #0
 8001d5c:	0324      	lsls	r4, r4, #12
 8001d5e:	e5ae      	b.n	80018be <__aeabi_dsub+0x22a>
 8001d60:	2120      	movs	r1, #32
 8001d62:	2500      	movs	r5, #0
 8001d64:	1a09      	subs	r1, r1, r0
 8001d66:	e517      	b.n	8001798 <__aeabi_dsub+0x104>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8001d9c <__aeabi_dsub+0x708>)
 8001d6e:	e53a      	b.n	80017e6 <__aeabi_dsub+0x152>
 8001d70:	2d00      	cmp	r5, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x6e2>
 8001d74:	e5f6      	b.n	8001964 <__aeabi_dsub+0x2d0>
 8001d76:	464b      	mov	r3, r9
 8001d78:	1bda      	subs	r2, r3, r7
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	2f00      	cmp	r7, #0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x6ee>
 8001d80:	e66f      	b.n	8001a62 <__aeabi_dsub+0x3ce>
 8001d82:	2a38      	cmp	r2, #56	@ 0x38
 8001d84:	dc05      	bgt.n	8001d92 <__aeabi_dsub+0x6fe>
 8001d86:	2680      	movs	r6, #128	@ 0x80
 8001d88:	0436      	lsls	r6, r6, #16
 8001d8a:	4334      	orrs	r4, r6
 8001d8c:	4688      	mov	r8, r1
 8001d8e:	000e      	movs	r6, r1
 8001d90:	e6d1      	b.n	8001b36 <__aeabi_dsub+0x4a2>
 8001d92:	4688      	mov	r8, r1
 8001d94:	000e      	movs	r6, r1
 8001d96:	2501      	movs	r5, #1
 8001d98:	e6de      	b.n	8001b58 <__aeabi_dsub+0x4c4>
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	000007ff 	.word	0x000007ff
 8001da0:	ff7fffff 	.word	0xff7fffff
 8001da4:	000007fe 	.word	0x000007fe
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x71a>
 8001dac:	e668      	b.n	8001a80 <__aeabi_dsub+0x3ec>
 8001dae:	464b      	mov	r3, r9
 8001db0:	1bd9      	subs	r1, r3, r7
 8001db2:	2f00      	cmp	r7, #0
 8001db4:	d101      	bne.n	8001dba <__aeabi_dsub+0x726>
 8001db6:	468a      	mov	sl, r1
 8001db8:	e5a7      	b.n	800190a <__aeabi_dsub+0x276>
 8001dba:	2701      	movs	r7, #1
 8001dbc:	2938      	cmp	r1, #56	@ 0x38
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x72e>
 8001dc0:	e5c7      	b.n	8001952 <__aeabi_dsub+0x2be>
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	0412      	lsls	r2, r2, #16
 8001dc6:	4314      	orrs	r4, r2
 8001dc8:	e5af      	b.n	800192a <__aeabi_dsub+0x296>
 8001dca:	46c0      	nop			@ (mov r8, r8)

08001dcc <__aeabi_d2iz>:
 8001dcc:	000b      	movs	r3, r1
 8001dce:	0002      	movs	r2, r0
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	4d16      	ldr	r5, [pc, #88]	@ (8001e2c <__aeabi_d2iz+0x60>)
 8001dd4:	030c      	lsls	r4, r1, #12
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	0049      	lsls	r1, r1, #1
 8001dda:	2000      	movs	r0, #0
 8001ddc:	9200      	str	r2, [sp, #0]
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	0b24      	lsrs	r4, r4, #12
 8001de2:	0d49      	lsrs	r1, r1, #21
 8001de4:	0fde      	lsrs	r6, r3, #31
 8001de6:	42a9      	cmp	r1, r5
 8001de8:	dd04      	ble.n	8001df4 <__aeabi_d2iz+0x28>
 8001dea:	4811      	ldr	r0, [pc, #68]	@ (8001e30 <__aeabi_d2iz+0x64>)
 8001dec:	4281      	cmp	r1, r0
 8001dee:	dd03      	ble.n	8001df8 <__aeabi_d2iz+0x2c>
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <__aeabi_d2iz+0x68>)
 8001df2:	18f0      	adds	r0, r6, r3
 8001df4:	b002      	add	sp, #8
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	2080      	movs	r0, #128	@ 0x80
 8001dfa:	0340      	lsls	r0, r0, #13
 8001dfc:	4320      	orrs	r0, r4
 8001dfe:	4c0e      	ldr	r4, [pc, #56]	@ (8001e38 <__aeabi_d2iz+0x6c>)
 8001e00:	1a64      	subs	r4, r4, r1
 8001e02:	2c1f      	cmp	r4, #31
 8001e04:	dd08      	ble.n	8001e18 <__aeabi_d2iz+0x4c>
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <__aeabi_d2iz+0x70>)
 8001e08:	1a5b      	subs	r3, r3, r1
 8001e0a:	40d8      	lsrs	r0, r3
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	4258      	negs	r0, r3
 8001e10:	2e00      	cmp	r6, #0
 8001e12:	d1ef      	bne.n	8001df4 <__aeabi_d2iz+0x28>
 8001e14:	0018      	movs	r0, r3
 8001e16:	e7ed      	b.n	8001df4 <__aeabi_d2iz+0x28>
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <__aeabi_d2iz+0x74>)
 8001e1a:	9a00      	ldr	r2, [sp, #0]
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	0003      	movs	r3, r0
 8001e20:	4461      	add	r1, ip
 8001e22:	408b      	lsls	r3, r1
 8001e24:	40e2      	lsrs	r2, r4
 8001e26:	4313      	orrs	r3, r2
 8001e28:	e7f1      	b.n	8001e0e <__aeabi_d2iz+0x42>
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	000003fe 	.word	0x000003fe
 8001e30:	0000041d 	.word	0x0000041d
 8001e34:	7fffffff 	.word	0x7fffffff
 8001e38:	00000433 	.word	0x00000433
 8001e3c:	00000413 	.word	0x00000413
 8001e40:	fffffbed 	.word	0xfffffbed

08001e44 <__aeabi_i2d>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d016      	beq.n	8001e78 <__aeabi_i2d+0x34>
 8001e4a:	17c3      	asrs	r3, r0, #31
 8001e4c:	18c5      	adds	r5, r0, r3
 8001e4e:	405d      	eors	r5, r3
 8001e50:	0fc4      	lsrs	r4, r0, #31
 8001e52:	0028      	movs	r0, r5
 8001e54:	f000 f824 	bl	8001ea0 <__clzsi2>
 8001e58:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <__aeabi_i2d+0x58>)
 8001e5a:	1a1b      	subs	r3, r3, r0
 8001e5c:	055b      	lsls	r3, r3, #21
 8001e5e:	0d5b      	lsrs	r3, r3, #21
 8001e60:	280a      	cmp	r0, #10
 8001e62:	dc14      	bgt.n	8001e8e <__aeabi_i2d+0x4a>
 8001e64:	0002      	movs	r2, r0
 8001e66:	002e      	movs	r6, r5
 8001e68:	3215      	adds	r2, #21
 8001e6a:	4096      	lsls	r6, r2
 8001e6c:	220b      	movs	r2, #11
 8001e6e:	1a12      	subs	r2, r2, r0
 8001e70:	40d5      	lsrs	r5, r2
 8001e72:	032d      	lsls	r5, r5, #12
 8001e74:	0b2d      	lsrs	r5, r5, #12
 8001e76:	e003      	b.n	8001e80 <__aeabi_i2d+0x3c>
 8001e78:	2400      	movs	r4, #0
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	2600      	movs	r6, #0
 8001e80:	051b      	lsls	r3, r3, #20
 8001e82:	432b      	orrs	r3, r5
 8001e84:	07e4      	lsls	r4, r4, #31
 8001e86:	4323      	orrs	r3, r4
 8001e88:	0030      	movs	r0, r6
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
 8001e8e:	380b      	subs	r0, #11
 8001e90:	4085      	lsls	r5, r0
 8001e92:	032d      	lsls	r5, r5, #12
 8001e94:	2600      	movs	r6, #0
 8001e96:	0b2d      	lsrs	r5, r5, #12
 8001e98:	e7f2      	b.n	8001e80 <__aeabi_i2d+0x3c>
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	0000041e 	.word	0x0000041e

08001ea0 <__clzsi2>:
 8001ea0:	211c      	movs	r1, #28
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	4298      	cmp	r0, r3
 8001ea8:	d301      	bcc.n	8001eae <__clzsi2+0xe>
 8001eaa:	0c00      	lsrs	r0, r0, #16
 8001eac:	3910      	subs	r1, #16
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	4298      	cmp	r0, r3
 8001eb2:	d301      	bcc.n	8001eb8 <__clzsi2+0x18>
 8001eb4:	0a00      	lsrs	r0, r0, #8
 8001eb6:	3908      	subs	r1, #8
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	4298      	cmp	r0, r3
 8001ebc:	d301      	bcc.n	8001ec2 <__clzsi2+0x22>
 8001ebe:	0900      	lsrs	r0, r0, #4
 8001ec0:	3904      	subs	r1, #4
 8001ec2:	a202      	add	r2, pc, #8	@ (adr r2, 8001ecc <__clzsi2+0x2c>)
 8001ec4:	5c10      	ldrb	r0, [r2, r0]
 8001ec6:	1840      	adds	r0, r0, r1
 8001ec8:	4770      	bx	lr
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	02020304 	.word	0x02020304
 8001ed0:	01010101 	.word	0x01010101
	...

08001edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee2:	f000 fc07 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee6:	f000 f8e9 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eea:	f000 fa29 	bl	8002340 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001eee:	f000 f99f 	bl	8002230 <MX_TIM1_Init>
  MX_ADC_Init();
 8001ef2:	f000 f941 	bl	8002178 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001ef6:	f000 f9f3 	bl	80022e0 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc);
 8001efa:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <main+0x198>)
 8001efc:	0018      	movs	r0, r3
 8001efe:	f000 fdc1 	bl	8002a84 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1);
 8001f02:	4b5c      	ldr	r3, [pc, #368]	@ (8002074 <main+0x198>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fe10 	bl	8002b2c <HAL_ADC_PollForConversion>
	  int adcValue = HAL_ADC_GetValue(&hadc);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	@ (8002074 <main+0x198>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fea4 	bl	8002c5c <HAL_ADC_GetValue>
 8001f14:	0003      	movs	r3, r0
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24

	  if (bufferIndex >= 50) bufferIndex = 0;
 8001f18:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <main+0x19c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b31      	cmp	r3, #49	@ 0x31
 8001f1e:	dd02      	ble.n	8001f26 <main+0x4a>
 8001f20:	4b55      	ldr	r3, [pc, #340]	@ (8002078 <main+0x19c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
	  buffer[bufferIndex] = adcValue;
 8001f26:	4b54      	ldr	r3, [pc, #336]	@ (8002078 <main+0x19c>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b54      	ldr	r3, [pc, #336]	@ (800207c <main+0x1a0>)
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f30:	50d1      	str	r1, [r2, r3]
	  bufferIndex++;
 8001f32:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <main+0x19c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4b4f      	ldr	r3, [pc, #316]	@ (8002078 <main+0x19c>)
 8001f3a:	601a      	str	r2, [r3, #0]

	  int averageAdcValue = getAverage(buffer, bufferLength);
 8001f3c:	2232      	movs	r2, #50	@ 0x32
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800207c <main+0x1a0>)
 8001f40:	0011      	movs	r1, r2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fa44 	bl	80023d0 <getAverage>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	623b      	str	r3, [r7, #32]

	  double v = (double)averageAdcValue/4095.0 * 3.28;
 8001f4c:	6a38      	ldr	r0, [r7, #32]
 8001f4e:	f7ff ff79 	bl	8001e44 <__aeabi_i2d>
 8001f52:	2200      	movs	r2, #0
 8001f54:	4b4a      	ldr	r3, [pc, #296]	@ (8002080 <main+0x1a4>)
 8001f56:	f7fe fdbb 	bl	8000ad0 <__aeabi_ddiv>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	0010      	movs	r0, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	4a48      	ldr	r2, [pc, #288]	@ (8002084 <main+0x1a8>)
 8001f64:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <main+0x1ac>)
 8001f66:	f7ff f8cd 	bl	8001104 <__aeabi_dmul>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	000b      	movs	r3, r1
 8001f6e:	61ba      	str	r2, [r7, #24]
 8001f70:	61fb      	str	r3, [r7, #28]
	  // -0.0242 + 0.0557x + -0.0609x^2 + 0.01x^3
	  double voltageError = -0.0242 + 0.0557*v + -0.0609*v*v + 0.01*v*v*v;
 8001f72:	4a46      	ldr	r2, [pc, #280]	@ (800208c <main+0x1b0>)
 8001f74:	4b46      	ldr	r3, [pc, #280]	@ (8002090 <main+0x1b4>)
 8001f76:	69b8      	ldr	r0, [r7, #24]
 8001f78:	69f9      	ldr	r1, [r7, #28]
 8001f7a:	f7ff f8c3 	bl	8001104 <__aeabi_dmul>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	000b      	movs	r3, r1
 8001f82:	0010      	movs	r0, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	4a43      	ldr	r2, [pc, #268]	@ (8002094 <main+0x1b8>)
 8001f88:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <main+0x1bc>)
 8001f8a:	f7ff fb83 	bl	8001694 <__aeabi_dsub>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	000b      	movs	r3, r1
 8001f92:	0014      	movs	r4, r2
 8001f94:	001d      	movs	r5, r3
 8001f96:	4a41      	ldr	r2, [pc, #260]	@ (800209c <main+0x1c0>)
 8001f98:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <main+0x1c4>)
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	69f9      	ldr	r1, [r7, #28]
 8001f9e:	f7ff f8b1 	bl	8001104 <__aeabi_dmul>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	000b      	movs	r3, r1
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f7ff f8a9 	bl	8001104 <__aeabi_dmul>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	000b      	movs	r3, r1
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	0029      	movs	r1, r5
 8001fba:	f7fe fa25 	bl	8000408 <__aeabi_dadd>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	000b      	movs	r3, r1
 8001fc2:	0014      	movs	r4, r2
 8001fc4:	001d      	movs	r5, r3
 8001fc6:	4a37      	ldr	r2, [pc, #220]	@ (80020a4 <main+0x1c8>)
 8001fc8:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <main+0x1cc>)
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	69f9      	ldr	r1, [r7, #28]
 8001fce:	f7ff f899 	bl	8001104 <__aeabi_dmul>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	000b      	movs	r3, r1
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f7ff f891 	bl	8001104 <__aeabi_dmul>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	000b      	movs	r3, r1
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f7ff f889 	bl	8001104 <__aeabi_dmul>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	000b      	movs	r3, r1
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	0029      	movs	r1, r5
 8001ffa:	f7fe fa05 	bl	8000408 <__aeabi_dadd>
 8001ffe:	0002      	movs	r2, r0
 8002000:	000b      	movs	r3, r1
 8002002:	613a      	str	r2, [r7, #16]
 8002004:	617b      	str	r3, [r7, #20]

	  double adjustedVoltage = v - voltageError;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	69f9      	ldr	r1, [r7, #28]
 800200e:	f7ff fb41 	bl	8001694 <__aeabi_dsub>
 8002012:	0002      	movs	r2, r0
 8002014:	000b      	movs	r3, r1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	60fb      	str	r3, [r7, #12]

	  int intAdjustedVoltage = (int)round(adjustedVoltage*1000);
 800201a:	2200      	movs	r2, #0
 800201c:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <main+0x1d0>)
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	68f9      	ldr	r1, [r7, #12]
 8002022:	f7ff f86f 	bl	8001104 <__aeabi_dmul>
 8002026:	0002      	movs	r2, r0
 8002028:	000b      	movs	r3, r1
 800202a:	0010      	movs	r0, r2
 800202c:	0019      	movs	r1, r3
 800202e:	f003 fe8b 	bl	8005d48 <round>
 8002032:	0002      	movs	r2, r0
 8002034:	000b      	movs	r3, r1
 8002036:	0010      	movs	r0, r2
 8002038:	0019      	movs	r1, r3
 800203a:	f7ff fec7 	bl	8001dcc <__aeabi_d2iz>
 800203e:	0003      	movs	r3, r0
 8002040:	607b      	str	r3, [r7, #4]

	  sprintf(tx_buff, "%d\n\r", intAdjustedVoltage);
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	491a      	ldr	r1, [pc, #104]	@ (80020b0 <main+0x1d4>)
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <main+0x1d8>)
 8002048:	0018      	movs	r0, r3
 800204a:	f003 f9df 	bl	800540c <siprintf>

	  if (bufferIndex % 5 == 0) HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, sizeof(tx_buff), 1000);
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <main+0x19c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2105      	movs	r1, #5
 8002054:	0018      	movs	r0, r3
 8002056:	f7fe f9d1 	bl	80003fc <__aeabi_idivmod>
 800205a:	1e0b      	subs	r3, r1, #0
 800205c:	d106      	bne.n	800206c <main+0x190>
 800205e:	23fa      	movs	r3, #250	@ 0xfa
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <main+0x1d8>)
 8002064:	4814      	ldr	r0, [pc, #80]	@ (80020b8 <main+0x1dc>)
 8002066:	220a      	movs	r2, #10
 8002068:	f002 fa92 	bl	8004590 <HAL_UART_Transmit>

	  HAL_Delay(10);
 800206c:	200a      	movs	r0, #10
 800206e:	f000 fba5 	bl	80027bc <HAL_Delay>
  {
 8002072:	e742      	b.n	8001efa <main+0x1e>
 8002074:	20000078 	.word	0x20000078
 8002078:	20000250 	.word	0x20000250
 800207c:	20000188 	.word	0x20000188
 8002080:	40affe00 	.word	0x40affe00
 8002084:	a3d70a3d 	.word	0xa3d70a3d
 8002088:	400a3d70 	.word	0x400a3d70
 800208c:	dcc63f14 	.word	0xdcc63f14
 8002090:	3fac84b5 	.word	0x3fac84b5
 8002094:	8240b780 	.word	0x8240b780
 8002098:	3f98c7e2 	.word	0x3f98c7e2
 800209c:	e8a71de7 	.word	0xe8a71de7
 80020a0:	bfaf2e48 	.word	0xbfaf2e48
 80020a4:	47ae147b 	.word	0x47ae147b
 80020a8:	3f847ae1 	.word	0x3f847ae1
 80020ac:	408f4000 	.word	0x408f4000
 80020b0:	08005df0 	.word	0x08005df0
 80020b4:	20000254 	.word	0x20000254
 80020b8:	20000100 	.word	0x20000100

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b095      	sub	sp, #84	@ 0x54
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	2420      	movs	r4, #32
 80020c4:	193b      	adds	r3, r7, r4
 80020c6:	0018      	movs	r0, r3
 80020c8:	2330      	movs	r3, #48	@ 0x30
 80020ca:	001a      	movs	r2, r3
 80020cc:	2100      	movs	r1, #0
 80020ce:	f003 f9bd 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d2:	2310      	movs	r3, #16
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	0018      	movs	r0, r3
 80020d8:	2310      	movs	r3, #16
 80020da:	001a      	movs	r2, r3
 80020dc:	2100      	movs	r1, #0
 80020de:	f003 f9b5 	bl	800544c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e2:	003b      	movs	r3, r7
 80020e4:	0018      	movs	r0, r3
 80020e6:	2310      	movs	r3, #16
 80020e8:	001a      	movs	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f003 f9ae 	bl	800544c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80020f0:	0021      	movs	r1, r4
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2212      	movs	r2, #18
 80020f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2201      	movs	r2, #1
 80020fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2201      	movs	r2, #1
 8002102:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2210      	movs	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2210      	movs	r2, #16
 800210e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002116:	187b      	adds	r3, r7, r1
 8002118:	0018      	movs	r0, r3
 800211a:	f001 fa1f 	bl	800355c <HAL_RCC_OscConfig>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002122:	f000 f977 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002126:	2110      	movs	r1, #16
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2207      	movs	r2, #7
 800212c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002140:	187b      	adds	r3, r7, r1
 8002142:	2100      	movs	r1, #0
 8002144:	0018      	movs	r0, r3
 8002146:	f001 fd23 	bl	8003b90 <HAL_RCC_ClockConfig>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d001      	beq.n	8002152 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800214e:	f000 f961 	bl	8002414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002152:	003b      	movs	r3, r7
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002158:	003b      	movs	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215e:	003b      	movs	r3, r7
 8002160:	0018      	movs	r0, r3
 8002162:	f001 fe59 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800216a:	f000 f953 	bl	8002414 <Error_Handler>
  }
}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b015      	add	sp, #84	@ 0x54
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	0018      	movs	r0, r3
 8002182:	230c      	movs	r3, #12
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f003 f960 	bl	800544c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <MX_ADC_Init+0xb0>)
 800218e:	4a27      	ldr	r2, [pc, #156]	@ (800222c <MX_ADC_Init+0xb4>)
 8002190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002192:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <MX_ADC_Init+0xb0>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002198:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <MX_ADC_Init+0xb0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219e:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021a4:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021ac:	2204      	movs	r2, #4
 80021ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021be:	2201      	movs	r2, #1
 80021c0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c8:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021ca:	22c2      	movs	r2, #194	@ 0xc2
 80021cc:	32ff      	adds	r2, #255	@ 0xff
 80021ce:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021d8:	2224      	movs	r2, #36	@ 0x24
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021e4:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_ADC_Init+0xb0>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fb0c 	bl	8002804 <HAL_ADC_Init>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d001      	beq.n	80021f4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80021f0:	f000 f910 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	0152      	lsls	r2, r2, #5
 8002200:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2280      	movs	r2, #128	@ 0x80
 8002206:	0552      	lsls	r2, r2, #21
 8002208:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800220a:	1d3a      	adds	r2, r7, #4
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_ADC_Init+0xb0>)
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fd2f 	bl	8002c74 <HAL_ADC_ConfigChannel>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800221a:	f000 f8fb 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	20000078 	.word	0x20000078
 800222c:	40012400 	.word	0x40012400

08002230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	2308      	movs	r3, #8
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	0018      	movs	r0, r3
 800223c:	2310      	movs	r3, #16
 800223e:	001a      	movs	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	f003 f903 	bl	800544c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002246:	003b      	movs	r3, r7
 8002248:	0018      	movs	r0, r3
 800224a:	2308      	movs	r3, #8
 800224c:	001a      	movs	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	f003 f8fc 	bl	800544c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 8002256:	4a20      	ldr	r2, [pc, #128]	@ (80022d8 <MX_TIM1_Init+0xa8>)
 8002258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <MX_TIM1_Init+0xac>)
 800226a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 8002280:	0018      	movs	r0, r3
 8002282:	f001 fe97 	bl	8003fb4 <HAL_TIM_Base_Init>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800228a:	f000 f8c3 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228e:	2108      	movs	r1, #8
 8002290:	187b      	adds	r3, r7, r1
 8002292:	2280      	movs	r2, #128	@ 0x80
 8002294:	0152      	lsls	r2, r2, #5
 8002296:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002298:	187a      	adds	r2, r7, r1
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 800229c:	0011      	movs	r1, r2
 800229e:	0018      	movs	r0, r3
 80022a0:	f001 fed8 	bl	8004054 <HAL_TIM_ConfigClockSource>
 80022a4:	1e03      	subs	r3, r0, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022a8:	f000 f8b4 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	003b      	movs	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b2:	003b      	movs	r3, r7
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022b8:	003a      	movs	r2, r7
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <MX_TIM1_Init+0xa4>)
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f002 f8ba 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	1e03      	subs	r3, r0, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80022c8:	f000 f8a4 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200000b8 	.word	0x200000b8
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	0000ffff 	.word	0x0000ffff

080022e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 80022e6:	4a15      	ldr	r2, [pc, #84]	@ (800233c <MX_USART1_UART_Init+0x5c>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 80022ec:	22e1      	movs	r2, #225	@ 0xe1
 80022ee:	0252      	lsls	r2, r2, #9
 80022f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 8002306:	220c      	movs	r2, #12
 8002308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002316:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <MX_USART1_UART_Init+0x58>)
 8002324:	0018      	movs	r0, r3
 8002326:	f002 f8df 	bl	80044e8 <HAL_UART_Init>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800232e:	f000 f871 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000100 	.word	0x20000100
 800233c:	40013800 	.word	0x40013800

08002340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	240c      	movs	r4, #12
 8002348:	193b      	adds	r3, r7, r4
 800234a:	0018      	movs	r0, r3
 800234c:	2314      	movs	r3, #20
 800234e:	001a      	movs	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f003 f87b 	bl	800544c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <MX_GPIO_Init+0x88>)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <MX_GPIO_Init+0x88>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0289      	lsls	r1, r1, #10
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <MX_GPIO_Init+0x88>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <MX_GPIO_Init+0x88>)
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <MX_GPIO_Init+0x88>)
 8002378:	2180      	movs	r1, #128	@ 0x80
 800237a:	02c9      	lsls	r1, r1, #11
 800237c:	430a      	orrs	r2, r1
 800237e:	615a      	str	r2, [r3, #20]
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <MX_GPIO_Init+0x88>)
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	02db      	lsls	r3, r3, #11
 8002388:	4013      	ands	r3, r2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_GPIO_Init+0x8c>)
 8002390:	2200      	movs	r2, #0
 8002392:	2108      	movs	r1, #8
 8002394:	0018      	movs	r0, r3
 8002396:	f001 f8c3 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800239a:	0021      	movs	r1, r4
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2208      	movs	r2, #8
 80023a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2201      	movs	r2, #1
 80023a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <MX_GPIO_Init+0x8c>)
 80023b8:	0019      	movs	r1, r3
 80023ba:	0010      	movs	r0, r2
 80023bc:	f000 ff48 	bl	8003250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b009      	add	sp, #36	@ 0x24
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400

080023d0 <getAverage>:

/* USER CODE BEGIN 4 */

int getAverage(int *buffer, int length){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	int sum = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < length; i++){
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	e00a      	b.n	80023fa <getAverage+0x2a>
		sum += buffer[i];
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	18d3      	adds	r3, r2, r3
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	18d3      	adds	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < length; i++){
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf0      	blt.n	80023e4 <getAverage+0x14>
	}
	return sum / length;
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7fd ff13 	bl	8000230 <__divsi3>
 800240a:	0003      	movs	r3, r0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	e7fd      	b.n	800241c <Error_Handler+0x8>

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <HAL_MspInit+0x44>)
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_MspInit+0x44>)
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <HAL_MspInit+0x44>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_MspInit+0x44>)
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_MspInit+0x44>)
 8002444:	2180      	movs	r1, #128	@ 0x80
 8002446:	0549      	lsls	r1, r1, #21
 8002448:	430a      	orrs	r2, r1
 800244a:	61da      	str	r2, [r3, #28]
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_MspInit+0x44>)
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	055b      	lsls	r3, r3, #21
 8002454:	4013      	ands	r3, r2
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08b      	sub	sp, #44	@ 0x2c
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	2414      	movs	r4, #20
 8002472:	193b      	adds	r3, r7, r4
 8002474:	0018      	movs	r0, r3
 8002476:	2314      	movs	r3, #20
 8002478:	001a      	movs	r2, r3
 800247a:	2100      	movs	r1, #0
 800247c:	f002 ffe6 	bl	800544c <memset>
  if(hadc->Instance==ADC1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_ADC_MspInit+0x84>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d12b      	bne.n	80024e2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	0089      	lsls	r1, r1, #2
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 80024ac:	2180      	movs	r1, #128	@ 0x80
 80024ae:	0289      	lsls	r1, r1, #10
 80024b0:	430a      	orrs	r2, r1
 80024b2:	615a      	str	r2, [r3, #20]
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_ADC_MspInit+0x88>)
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	029b      	lsls	r3, r3, #10
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2203      	movs	r2, #3
 80024cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	193a      	adds	r2, r7, r4
 80024d6:	2390      	movs	r3, #144	@ 0x90
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 feb7 	bl	8003250 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b00b      	add	sp, #44	@ 0x2c
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	40012400 	.word	0x40012400
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <HAL_TIM_Base_MspInit+0x38>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10d      	bne.n	8002522 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_TIM_Base_MspInit+0x3c>)
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_TIM_Base_MspInit+0x3c>)
 800250c:	2180      	movs	r1, #128	@ 0x80
 800250e:	0109      	lsls	r1, r1, #4
 8002510:	430a      	orrs	r2, r1
 8002512:	619a      	str	r2, [r3, #24]
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_TIM_Base_MspInit+0x3c>)
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b08b      	sub	sp, #44	@ 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	2414      	movs	r4, #20
 800253e:	193b      	adds	r3, r7, r4
 8002540:	0018      	movs	r0, r3
 8002542:	2314      	movs	r3, #20
 8002544:	001a      	movs	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	f002 ff80 	bl	800544c <memset>
  if(huart->Instance==USART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	@ (80025d4 <HAL_UART_MspInit+0xa0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d13a      	bne.n	80025cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 800255c:	2180      	movs	r1, #128	@ 0x80
 800255e:	01c9      	lsls	r1, r1, #7
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	0289      	lsls	r1, r1, #10
 800257c:	430a      	orrs	r2, r1
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_UART_MspInit+0xa4>)
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	029b      	lsls	r3, r3, #10
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800258e:	0021      	movs	r1, r4
 8002590:	187b      	adds	r3, r7, r1
 8002592:	220c      	movs	r2, #12
 8002594:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2202      	movs	r2, #2
 800259a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2203      	movs	r2, #3
 80025a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	2201      	movs	r2, #1
 80025ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	187a      	adds	r2, r7, r1
 80025b0:	2390      	movs	r3, #144	@ 0x90
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fe4a 	bl	8003250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	201b      	movs	r0, #27
 80025c2:	f000 fd95 	bl	80030f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025c6:	201b      	movs	r0, #27
 80025c8:	f000 fda7 	bl	800311a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b00b      	add	sp, #44	@ 0x2c
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	e7fd      	b.n	80025e0 <NMI_Handler+0x4>

080025e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e8:	46c0      	nop			@ (mov r8, r8)
 80025ea:	e7fd      	b.n	80025e8 <HardFault_Handler+0x4>

080025ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002604:	f000 f8be 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <USART1_IRQHandler+0x14>)
 8002616:	0018      	movs	r0, r3
 8002618:	f002 f85a 	bl	80046d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	20000100 	.word	0x20000100

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f002 ff00 	bl	800545c <__errno>
 800265c:	0003      	movs	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	2301      	movs	r3, #1
 8002664:	425b      	negs	r3, r3
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	18d2      	adds	r2, r2, r3
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001000 	.word	0x20001000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000260 	.word	0x20000260
 8002690:	200003b0 	.word	0x200003b0

08002694 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a4:	f7ff fff6 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	@ (80026dc <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ce:	f002 fecb 	bl	8005468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7ff fc03 	bl	8001edc <main>

080026d6 <LoopForever>:

LoopForever:
    b LoopForever
 80026d6:	e7fe      	b.n	80026d6 <LoopForever>
  ldr   r0, =_estack
 80026d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026e4:	08005eac 	.word	0x08005eac
  ldr r2, =_sbss
 80026e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026ec:	200003b0 	.word	0x200003b0

080026f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_IRQHandler>
	...

080026f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_Init+0x24>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_Init+0x24>)
 80026fe:	2110      	movs	r1, #16
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f809 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270a:	f7ff fe89 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_InitTick+0x5c>)
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_InitTick+0x60>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	0019      	movs	r1, r3
 800272e:	23fa      	movs	r3, #250	@ 0xfa
 8002730:	0098      	lsls	r0, r3, #2
 8002732:	f7fd fcf3 	bl	800011c <__udivsi3>
 8002736:	0003      	movs	r3, r0
 8002738:	0019      	movs	r1, r3
 800273a:	0020      	movs	r0, r4
 800273c:	f7fd fcee 	bl	800011c <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fcf9 	bl	800313a <HAL_SYSTICK_Config>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00f      	b.n	8002770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d80b      	bhi.n	800276e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2301      	movs	r3, #1
 800275a:	425b      	negs	r3, r3
 800275c:	2200      	movs	r2, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fcc6 	bl	80030f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_InitTick+0x64>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b003      	add	sp, #12
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	20000000 	.word	0x20000000
 800277c:	20000008 	.word	0x20000008
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_IncTick+0x1c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_IncTick+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	18d2      	adds	r2, r2, r3
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_IncTick+0x20>)
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	46c0      	nop			@ (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000264 	.word	0x20000264

080027a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b02      	ldr	r3, [pc, #8]	@ (80027b8 <HAL_GetTick+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	20000264 	.word	0x20000264

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	001a      	movs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	f7ff ffe0 	bl	80027a8 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	46c0      	nop			@ (mov r8, r8)
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	20000008 	.word	0x20000008

08002804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	230f      	movs	r3, #15
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e125      	b.n	8002a6e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2234      	movs	r2, #52	@ 0x34
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0018      	movs	r0, r3
 800283c:	f7ff fe14 	bl	8002468 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	2210      	movs	r2, #16
 8002846:	4013      	ands	r3, r2
 8002848:	d000      	beq.n	800284c <HAL_ADC_Init+0x48>
 800284a:	e103      	b.n	8002a54 <HAL_ADC_Init+0x250>
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d000      	beq.n	8002858 <HAL_ADC_Init+0x54>
 8002856:	e0fd      	b.n	8002a54 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002862:	d000      	beq.n	8002866 <HAL_ADC_Init+0x62>
 8002864:	e0f6      	b.n	8002a54 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	4a83      	ldr	r2, [pc, #524]	@ (8002a78 <HAL_ADC_Init+0x274>)
 800286c:	4013      	ands	r3, r2
 800286e:	2202      	movs	r2, #2
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2203      	movs	r2, #3
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d112      	bne.n	80028aa <HAL_ADC_Init+0xa6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	2b01      	cmp	r3, #1
 8002890:	d009      	beq.n	80028a6 <HAL_ADC_Init+0xa2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	401a      	ands	r2, r3
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0xa6>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_ADC_Init+0xa8>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2218      	movs	r2, #24
 80028b8:	4393      	bics	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	0899      	lsrs	r1, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4964      	ldr	r1, [pc, #400]	@ (8002a7c <HAL_ADC_Init+0x278>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
 80028f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e5b      	ldrb	r3, [r3, #25]
 80028f8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e9b      	ldrb	r3, [r3, #26]
 8002900:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002902:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	2b01      	cmp	r3, #1
 800290a:	d002      	beq.n	8002912 <HAL_ADC_Init+0x10e>
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	015b      	lsls	r3, r3, #5
 8002910:	e000      	b.n	8002914 <HAL_ADC_Init+0x110>
 8002912:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002914:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800291a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d101      	bne.n	8002928 <HAL_ADC_Init+0x124>
 8002924:	2304      	movs	r3, #4
 8002926:	e000      	b.n	800292a <HAL_ADC_Init+0x126>
 8002928:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800292a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2124      	movs	r1, #36	@ 0x24
 8002930:	5c5b      	ldrb	r3, [r3, r1]
 8002932:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002934:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7edb      	ldrb	r3, [r3, #27]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d115      	bne.n	8002970 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7e9b      	ldrb	r3, [r3, #26]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	0252      	lsls	r2, r2, #9
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	e00b      	b.n	8002970 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295c:	2220      	movs	r2, #32
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2201      	movs	r2, #1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	23c2      	movs	r3, #194	@ 0xc2
 8002976:	33ff      	adds	r3, #255	@ 0xff
 8002978:	429a      	cmp	r2, r3
 800297a:	d007      	beq.n	800298c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002984:	4313      	orrs	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4313      	orrs	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68d9      	ldr	r1, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	055b      	lsls	r3, r3, #21
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d01b      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d017      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d013      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d00f      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d00b      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d007      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d003      	beq.n	80029e0 <HAL_ADC_Init+0x1dc>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d112      	bne.n	8002a06 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2107      	movs	r1, #7
 80029ec:	438a      	bics	r2, r1
 80029ee:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6959      	ldr	r1, [r3, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	2207      	movs	r2, #7
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <HAL_ADC_Init+0x27c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d10b      	bne.n	8002a2e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	2203      	movs	r2, #3
 8002a22:	4393      	bics	r3, r2
 8002a24:	2201      	movs	r2, #1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a2c:	e01c      	b.n	8002a68 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	2212      	movs	r2, #18
 8002a34:	4393      	bics	r3, r2
 8002a36:	2210      	movs	r2, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	2201      	movs	r2, #1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a52:	e009      	b.n	8002a68 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	2210      	movs	r2, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	fffffefd 	.word	0xfffffefd
 8002a7c:	fffe0219 	.word	0xfffe0219
 8002a80:	833fffe7 	.word	0x833fffe7

08002a84 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d138      	bne.n	8002b12 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2234      	movs	r2, #52	@ 0x34
 8002aa4:	5c9b      	ldrb	r3, [r3, r2]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_Start+0x2a>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e038      	b.n	8002b20 <HAL_ADC_Start+0x9c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2234      	movs	r2, #52	@ 0x34
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7e5b      	ldrb	r3, [r3, #25]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d007      	beq.n	8002ace <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002abe:	230f      	movs	r3, #15
 8002ac0:	18fc      	adds	r4, r7, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f9e3 	bl	8002e90 <ADC_Enable>
 8002aca:	0003      	movs	r3, r0
 8002acc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ace:	230f      	movs	r3, #15
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d120      	bne.n	8002b1a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_ADC_Start+0xa4>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	0052      	lsls	r2, r2, #1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2234      	movs	r2, #52	@ 0x34
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	221c      	movs	r2, #28
 8002afe:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b12:	230f      	movs	r3, #15
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b005      	add	sp, #20
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	fffff0fe 	.word	0xfffff0fe

08002b2c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e014      	b.n	8002b6e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10b      	bne.n	8002b6a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	2220      	movs	r2, #32
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2234      	movs	r2, #52	@ 0x34
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e071      	b.n	8002c4e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b6e:	f7ff fe1b 	bl	80027a8 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b76:	e01f      	b.n	8002bb8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_ADC_PollForConversion+0x68>
 8002b84:	f7ff fe10 	bl	80027a8 <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d211      	bcs.n	8002bb8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2234      	movs	r2, #52	@ 0x34
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e04a      	b.n	8002c4e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0d9      	beq.n	8002b78 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	23c0      	movs	r3, #192	@ 0xc0
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d12d      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d129      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d122      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d110      	bne.n	8002c24 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	210c      	movs	r1, #12
 8002c0e:	438a      	bics	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <HAL_ADC_PollForConversion+0x12c>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c22:	e00b      	b.n	8002c3c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	2220      	movs	r2, #32
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	2201      	movs	r2, #1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e1b      	ldrb	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	220c      	movs	r2, #12
 8002c4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	fffffefe 	.word	0xfffffefe

08002c5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	055b      	lsls	r3, r3, #21
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d011      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x46>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00d      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x46>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d009      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x46>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d005      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x46>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d001      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x46>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2234      	movs	r2, #52	@ 0x34
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x54>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0d0      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1f6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2234      	movs	r2, #52	@ 0x34
 8002ccc:	2101      	movs	r1, #1
 8002cce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d000      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x6a>
 8002cdc:	e0b4      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_ADC_ConfigChannel+0x200>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d100      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x76>
 8002ce8:	e082      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d037      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d033      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d02f      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d02b      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d027      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d023      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d01f      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	2b07      	cmp	r3, #7
 8002d42:	d01b      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2107      	movs	r1, #7
 8002d50:	400b      	ands	r3, r1
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d012      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2107      	movs	r1, #7
 8002d62:	438a      	bics	r2, r1
 8002d64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6959      	ldr	r1, [r3, #20]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2207      	movs	r2, #7
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d007      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x120>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d003      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x120>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d163      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d94:	4b38      	ldr	r3, [pc, #224]	@ (8002e78 <HAL_ADC_ConfigChannel+0x204>)
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d009      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x140>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b11      	cmp	r3, #17
 8002da6:	d102      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x13a>
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	03db      	lsls	r3, r3, #15
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x144>
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	045b      	lsls	r3, r3, #17
 8002db2:	e001      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x144>
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	4a2f      	ldr	r2, [pc, #188]	@ (8002e78 <HAL_ADC_ConfigChannel+0x204>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d14a      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_ADC_ConfigChannel+0x208>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	492d      	ldr	r1, [pc, #180]	@ (8002e80 <HAL_ADC_ConfigChannel+0x20c>)
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fd f9a5 	bl	800011c <__udivsi3>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x16e>
 8002dee:	e035      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4099      	lsls	r1, r3
 8002dfe:	000b      	movs	r3, r1
 8002e00:	43d9      	mvns	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d007      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x1ae>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b11      	cmp	r3, #17
 8002e18:	d003      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x1ae>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b12      	cmp	r3, #18
 8002e20:	d11c      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <HAL_ADC_ConfigChannel+0x204>)
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d007      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0x1ca>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x1c6>
 8002e36:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <HAL_ADC_ConfigChannel+0x210>)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1cc>
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_ADC_ConfigChannel+0x214>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1cc>
 8002e3e:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <HAL_ADC_ConfigChannel+0x218>)
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <HAL_ADC_ConfigChannel+0x204>)
 8002e42:	400b      	ands	r3, r1
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e009      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e54:	230f      	movs	r3, #15
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2234      	movs	r2, #52	@ 0x34
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e64:	230f      	movs	r3, #15
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b004      	add	sp, #16
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	00001001 	.word	0x00001001
 8002e78:	40012708 	.word	0x40012708
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	000f4240 	.word	0x000f4240
 8002e84:	ffbfffff 	.word	0xffbfffff
 8002e88:	feffffff 	.word	0xfeffffff
 8002e8c:	ff7fffff 	.word	0xff7fffff

08002e90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d112      	bne.n	8002ed4 <ADC_Enable+0x44>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d009      	beq.n	8002ed0 <ADC_Enable+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d101      	bne.n	8002ed4 <ADC_Enable+0x44>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <ADC_Enable+0x46>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d152      	bne.n	8002f80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <ADC_Enable+0xfc>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00d      	beq.n	8002f02 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	2210      	movs	r2, #16
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e03f      	b.n	8002f82 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f12:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <ADC_Enable+0x100>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	491f      	ldr	r1, [pc, #124]	@ (8002f94 <ADC_Enable+0x104>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fd f8ff 	bl	800011c <__udivsi3>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f22:	e002      	b.n	8002f2a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f9      	bne.n	8002f24 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f30:	f7ff fc3a 	bl	80027a8 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f38:	e01b      	b.n	8002f72 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f3a:	f7ff fc35 	bl	80027a8 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d914      	bls.n	8002f72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d00d      	beq.n	8002f72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f66:	2201      	movs	r2, #1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e007      	b.n	8002f82 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d1dc      	bne.n	8002f3a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	80000017 	.word	0x80000017
 8002f90:	20000000 	.word	0x20000000
 8002f94:	000f4240 	.word	0x000f4240

08002f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002faa:	d809      	bhi.n	8002fc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fac:	1dfb      	adds	r3, r7, #7
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	231f      	movs	r3, #31
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__NVIC_EnableIRQ+0x30>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4091      	lsls	r1, r2
 8002fbc:	000a      	movs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
  }
}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fe0:	d828      	bhi.n	8003034 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <__NVIC_SetPriority+0xd4>)
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	33c0      	adds	r3, #192	@ 0xc0
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	589b      	ldr	r3, [r3, r2]
 8002ff2:	1dfa      	adds	r2, r7, #7
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	00d2      	lsls	r2, r2, #3
 8002ffe:	21ff      	movs	r1, #255	@ 0xff
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	43d2      	mvns	r2, r2
 8003006:	401a      	ands	r2, r3
 8003008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	22ff      	movs	r2, #255	@ 0xff
 8003010:	401a      	ands	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	2303      	movs	r3, #3
 800301a:	4003      	ands	r3, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003020:	481f      	ldr	r0, [pc, #124]	@ (80030a0 <__NVIC_SetPriority+0xd4>)
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b25b      	sxtb	r3, r3
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	430a      	orrs	r2, r1
 800302c:	33c0      	adds	r3, #192	@ 0xc0
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003032:	e031      	b.n	8003098 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003034:	4a1b      	ldr	r2, [pc, #108]	@ (80030a4 <__NVIC_SetPriority+0xd8>)
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	0019      	movs	r1, r3
 800303c:	230f      	movs	r3, #15
 800303e:	400b      	ands	r3, r1
 8003040:	3b08      	subs	r3, #8
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3306      	adds	r3, #6
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	3304      	adds	r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1dfa      	adds	r2, r7, #7
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	0011      	movs	r1, r2
 8003054:	2203      	movs	r2, #3
 8003056:	400a      	ands	r2, r1
 8003058:	00d2      	lsls	r2, r2, #3
 800305a:	21ff      	movs	r1, #255	@ 0xff
 800305c:	4091      	lsls	r1, r2
 800305e:	000a      	movs	r2, r1
 8003060:	43d2      	mvns	r2, r2
 8003062:	401a      	ands	r2, r3
 8003064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	401a      	ands	r2, r3
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	0018      	movs	r0, r3
 8003074:	2303      	movs	r3, #3
 8003076:	4003      	ands	r3, r0
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800307c:	4809      	ldr	r0, [pc, #36]	@ (80030a4 <__NVIC_SetPriority+0xd8>)
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	001c      	movs	r4, r3
 8003084:	230f      	movs	r3, #15
 8003086:	4023      	ands	r3, r4
 8003088:	3b08      	subs	r3, #8
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	430a      	orrs	r2, r1
 800308e:	3306      	adds	r3, #6
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	18c3      	adds	r3, r0, r3
 8003094:	3304      	adds	r3, #4
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b003      	add	sp, #12
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1e5a      	subs	r2, r3, #1
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	045b      	lsls	r3, r3, #17
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d301      	bcc.n	80030c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030bc:	2301      	movs	r3, #1
 80030be:	e010      	b.n	80030e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <SysTick_Config+0x44>)
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	3a01      	subs	r2, #1
 80030c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c8:	2301      	movs	r3, #1
 80030ca:	425b      	negs	r3, r3
 80030cc:	2103      	movs	r1, #3
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ff7c 	bl	8002fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <SysTick_Config+0x44>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <SysTick_Config+0x44>)
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b002      	add	sp, #8
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	e000e010 	.word	0xe000e010

080030f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	210f      	movs	r1, #15
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	1c02      	adds	r2, r0, #0
 8003100:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	187b      	adds	r3, r7, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b25b      	sxtb	r3, r3
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff ff5d 	bl	8002fcc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	0002      	movs	r2, r0
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003126:	1dfb      	adds	r3, r7, #7
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b25b      	sxtb	r3, r3
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ff33 	bl	8002f98 <__NVIC_EnableIRQ>
}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff ffaf 	bl	80030a8 <SysTick_Config>
 800314a:	0003      	movs	r3, r0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2221      	movs	r2, #33	@ 0x21
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d008      	beq.n	800317a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	2100      	movs	r1, #0
 8003174:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e020      	b.n	80031bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	210e      	movs	r1, #14
 8003186:	438a      	bics	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	438a      	bics	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	2101      	movs	r1, #1
 80031a4:	4091      	lsls	r1, r2
 80031a6:	000a      	movs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2221      	movs	r2, #33	@ 0x21
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	210f      	movs	r1, #15
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2221      	movs	r2, #33	@ 0x21
 80031d8:	5c9b      	ldrb	r3, [r3, r2]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d006      	beq.n	80031ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e028      	b.n	8003240 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	210e      	movs	r1, #14
 80031fa:	438a      	bics	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	438a      	bics	r2, r1
 800320c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003216:	2101      	movs	r1, #1
 8003218:	4091      	lsls	r1, r2
 800321a:	000a      	movs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2221      	movs	r2, #33	@ 0x21
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	0010      	movs	r0, r2
 800323e:	4798      	blx	r3
    }
  }
  return status;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	781b      	ldrb	r3, [r3, #0]
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325e:	e149      	b.n	80034f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4091      	lsls	r1, r2
 800326a:	000a      	movs	r2, r1
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d100      	bne.n	8003278 <HAL_GPIO_Init+0x28>
 8003276:	e13a      	b.n	80034ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	4013      	ands	r3, r2
 8003280:	2b01      	cmp	r3, #1
 8003282:	d005      	beq.n	8003290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2203      	movs	r2, #3
 800328a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800328c:	2b02      	cmp	r3, #2
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	409a      	lsls	r2, r3
 80032b2:	0013      	movs	r3, r2
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	43da      	mvns	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	2201      	movs	r2, #1
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d017      	beq.n	800332e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	2203      	movs	r2, #3
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	43da      	mvns	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	0013      	movs	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2203      	movs	r2, #3
 8003334:	4013      	ands	r3, r2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d123      	bne.n	8003382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	58d3      	ldr	r3, [r2, r3]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2207      	movs	r2, #7
 800334c:	4013      	ands	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	43da      	mvns	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2107      	movs	r1, #7
 8003366:	400b      	ands	r3, r1
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	6939      	ldr	r1, [r7, #16]
 8003380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	43da      	mvns	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2203      	movs	r2, #3
 80033a0:	401a      	ands	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	23c0      	movs	r3, #192	@ 0xc0
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	4013      	ands	r3, r2
 80033c0:	d100      	bne.n	80033c4 <HAL_GPIO_Init+0x174>
 80033c2:	e094      	b.n	80034ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	4b51      	ldr	r3, [pc, #324]	@ (800350c <HAL_GPIO_Init+0x2bc>)
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	4b50      	ldr	r3, [pc, #320]	@ (800350c <HAL_GPIO_Init+0x2bc>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	430a      	orrs	r2, r1
 80033ce:	619a      	str	r2, [r3, #24]
 80033d0:	4b4e      	ldr	r3, [pc, #312]	@ (800350c <HAL_GPIO_Init+0x2bc>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003510 <HAL_GPIO_Init+0x2c0>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2203      	movs	r2, #3
 80033ee:	4013      	ands	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	409a      	lsls	r2, r3
 80033f6:	0013      	movs	r3, r2
 80033f8:	43da      	mvns	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	2390      	movs	r3, #144	@ 0x90
 8003404:	05db      	lsls	r3, r3, #23
 8003406:	429a      	cmp	r2, r3
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x1d6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a41      	ldr	r2, [pc, #260]	@ (8003514 <HAL_GPIO_Init+0x2c4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x1d2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a40      	ldr	r2, [pc, #256]	@ (8003518 <HAL_GPIO_Init+0x2c8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x1ce>
 800341a:	2302      	movs	r3, #2
 800341c:	e004      	b.n	8003428 <HAL_GPIO_Init+0x1d8>
 800341e:	2305      	movs	r3, #5
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x1d8>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_GPIO_Init+0x1d8>
 8003426:	2300      	movs	r3, #0
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	2103      	movs	r1, #3
 800342c:	400a      	ands	r2, r1
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	4093      	lsls	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003438:	4935      	ldr	r1, [pc, #212]	@ (8003510 <HAL_GPIO_Init+0x2c0>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003446:	4b35      	ldr	r3, [pc, #212]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43da      	mvns	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	035b      	lsls	r3, r3, #13
 800345e:	4013      	ands	r3, r2
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800346a:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003470:	4b2a      	ldr	r3, [pc, #168]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43da      	mvns	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	039b      	lsls	r3, r3, #14
 8003488:	4013      	ands	r3, r2
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003494:	4b21      	ldr	r3, [pc, #132]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800349a:	4b20      	ldr	r3, [pc, #128]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43da      	mvns	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	4013      	ands	r3, r2
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034be:	4b17      	ldr	r3, [pc, #92]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80034c4:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	4013      	ands	r3, r2
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3301      	adds	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	40da      	lsrs	r2, r3
 80034fc:	1e13      	subs	r3, r2, #0
 80034fe:	d000      	beq.n	8003502 <HAL_GPIO_Init+0x2b2>
 8003500:	e6ae      	b.n	8003260 <HAL_GPIO_Init+0x10>
  } 
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	40010000 	.word	0x40010000
 8003514:	48000400 	.word	0x48000400
 8003518:	48000800 	.word	0x48000800
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	0008      	movs	r0, r1
 800352a:	0011      	movs	r1, r2
 800352c:	1cbb      	adds	r3, r7, #2
 800352e:	1c02      	adds	r2, r0, #0
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	1c7b      	adds	r3, r7, #1
 8003534:	1c0a      	adds	r2, r1, #0
 8003536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003538:	1c7b      	adds	r3, r7, #1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003540:	1cbb      	adds	r3, r7, #2
 8003542:	881a      	ldrh	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003548:	e003      	b.n	8003552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800354a:	1cbb      	adds	r3, r7, #2
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e301      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_RCC_OscConfig+0x1e>
 8003578:	e08d      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800357a:	4bc3      	ldr	r3, [pc, #780]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	220c      	movs	r2, #12
 8003580:	4013      	ands	r3, r2
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00e      	beq.n	80035a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003586:	4bc0      	ldr	r3, [pc, #768]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	220c      	movs	r2, #12
 800358c:	4013      	ands	r3, r2
 800358e:	2b08      	cmp	r3, #8
 8003590:	d116      	bne.n	80035c0 <HAL_RCC_OscConfig+0x64>
 8003592:	4bbd      	ldr	r3, [pc, #756]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	025b      	lsls	r3, r3, #9
 800359a:	401a      	ands	r2, r3
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	025b      	lsls	r3, r3, #9
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4bb8      	ldr	r3, [pc, #736]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x56>
 80035b0:	e070      	b.n	8003694 <HAL_RCC_OscConfig+0x138>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d000      	beq.n	80035bc <HAL_RCC_OscConfig+0x60>
 80035ba:	e06b      	b.n	8003694 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e2d8      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x7c>
 80035c8:	4baf      	ldr	r3, [pc, #700]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4bae      	ldr	r3, [pc, #696]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	0249      	lsls	r1, r1, #9
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e02f      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x9e>
 80035e0:	4ba9      	ldr	r3, [pc, #676]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035e6:	49a9      	ldr	r1, [pc, #676]	@ (800388c <HAL_RCC_OscConfig+0x330>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	4ba6      	ldr	r3, [pc, #664]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4ba5      	ldr	r3, [pc, #660]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	49a7      	ldr	r1, [pc, #668]	@ (8003890 <HAL_RCC_OscConfig+0x334>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e01e      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d10e      	bne.n	8003620 <HAL_RCC_OscConfig+0xc4>
 8003602:	4ba1      	ldr	r3, [pc, #644]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4ba0      	ldr	r3, [pc, #640]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003608:	2180      	movs	r1, #128	@ 0x80
 800360a:	02c9      	lsls	r1, r1, #11
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b9d      	ldr	r3, [pc, #628]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b9c      	ldr	r3, [pc, #624]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	0249      	lsls	r1, r1, #9
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xdc>
 8003620:	4b99      	ldr	r3, [pc, #612]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b98      	ldr	r3, [pc, #608]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003626:	4999      	ldr	r1, [pc, #612]	@ (800388c <HAL_RCC_OscConfig+0x330>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	4b96      	ldr	r3, [pc, #600]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b95      	ldr	r3, [pc, #596]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003632:	4997      	ldr	r1, [pc, #604]	@ (8003890 <HAL_RCC_OscConfig+0x334>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7ff f8b2 	bl	80027a8 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364a:	f7ff f8ad 	bl	80027a8 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	@ 0x64
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e28a      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365c:	4b8a      	ldr	r3, [pc, #552]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	029b      	lsls	r3, r3, #10
 8003664:	4013      	ands	r3, r2
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0xee>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7ff f89d 	bl	80027a8 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7ff f898 	bl	80027a8 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e275      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b80      	ldr	r3, [pc, #512]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	4013      	ands	r3, r2
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x118>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d100      	bne.n	80036a2 <HAL_RCC_OscConfig+0x146>
 80036a0:	e069      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a2:	4b79      	ldr	r3, [pc, #484]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	220c      	movs	r2, #12
 80036a8:	4013      	ands	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ac:	4b76      	ldr	r3, [pc, #472]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	220c      	movs	r2, #12
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d11c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x196>
 80036b8:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	2380      	movs	r3, #128	@ 0x80
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	4013      	ands	r3, r2
 80036c2:	d116      	bne.n	80036f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c4:	4b70      	ldr	r3, [pc, #448]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2202      	movs	r2, #2
 80036ca:	4013      	ands	r3, r2
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e24b      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b6b      	ldr	r3, [pc, #428]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22f8      	movs	r2, #248	@ 0xf8
 80036e0:	4393      	bics	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00da      	lsls	r2, r3, #3
 80036ea:	4b67      	ldr	r3, [pc, #412]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f0:	e041      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d024      	beq.n	8003744 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fa:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003700:	2101      	movs	r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7ff f84f 	bl	80027a8 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003710:	f7ff f84a 	bl	80027a8 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e227      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	d0f1      	beq.n	8003710 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b56      	ldr	r3, [pc, #344]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22f8      	movs	r2, #248	@ 0xf8
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00da      	lsls	r2, r3, #3
 800373c:	4b52      	ldr	r3, [pc, #328]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e018      	b.n	8003776 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003744:	4b50      	ldr	r3, [pc, #320]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b4f      	ldr	r3, [pc, #316]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7ff f82a 	bl	80027a8 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375a:	f7ff f825 	bl	80027a8 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e202      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376c:	4b46      	ldr	r3, [pc, #280]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d1f1      	bne.n	800375a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2208      	movs	r2, #8
 800377c:	4013      	ands	r3, r2
 800377e:	d036      	beq.n	80037ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d019      	beq.n	80037bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003788:	4b3f      	ldr	r3, [pc, #252]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800378a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800378c:	4b3e      	ldr	r3, [pc, #248]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7ff f808 	bl	80027a8 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7ff f803 	bl	80027a8 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1e0      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b0:	4b35      	ldr	r3, [pc, #212]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	d0f1      	beq.n	800379e <HAL_RCC_OscConfig+0x242>
 80037ba:	e018      	b.n	80037ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c0:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	438a      	bics	r2, r1
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fe ffee 	bl	80027a8 <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d2:	f7fe ffe9 	bl	80027a8 <HAL_GetTick>
 80037d6:	0002      	movs	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1c6      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	2202      	movs	r2, #2
 80037ea:	4013      	ands	r3, r2
 80037ec:	d1f1      	bne.n	80037d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	d100      	bne.n	80037fa <HAL_RCC_OscConfig+0x29e>
 80037f8:	e0b4      	b.n	8003964 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	201f      	movs	r0, #31
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	4013      	ands	r3, r2
 800380c:	d110      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	4b1e      	ldr	r3, [pc, #120]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003814:	2180      	movs	r1, #128	@ 0x80
 8003816:	0549      	lsls	r1, r1, #21
 8003818:	430a      	orrs	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	055b      	lsls	r3, r3, #21
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800382a:	183b      	adds	r3, r7, r0
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <HAL_RCC_OscConfig+0x338>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d11a      	bne.n	8003872 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383c:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <HAL_RCC_OscConfig+0x338>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <HAL_RCC_OscConfig+0x338>)
 8003842:	2180      	movs	r1, #128	@ 0x80
 8003844:	0049      	lsls	r1, r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fe ffad 	bl	80027a8 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe ffa8 	bl	80027a8 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	@ 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e185      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <HAL_RCC_OscConfig+0x338>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4013      	ands	r3, r2
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10e      	bne.n	8003898 <HAL_RCC_OscConfig+0x33c>
 800387a:	4b03      	ldr	r3, [pc, #12]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	4b02      	ldr	r3, [pc, #8]	@ (8003888 <HAL_RCC_OscConfig+0x32c>)
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	621a      	str	r2, [r3, #32]
 8003886:	e035      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 8003888:	40021000 	.word	0x40021000
 800388c:	fffeffff 	.word	0xfffeffff
 8003890:	fffbffff 	.word	0xfffbffff
 8003894:	40007000 	.word	0x40007000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x35e>
 80038a0:	4bb6      	ldr	r3, [pc, #728]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	4bb5      	ldr	r3, [pc, #724]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	438a      	bics	r2, r1
 80038aa:	621a      	str	r2, [r3, #32]
 80038ac:	4bb3      	ldr	r3, [pc, #716]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	4bb2      	ldr	r3, [pc, #712]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038b2:	2104      	movs	r1, #4
 80038b4:	438a      	bics	r2, r1
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x380>
 80038c2:	4bae      	ldr	r3, [pc, #696]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	4bad      	ldr	r3, [pc, #692]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038c8:	2104      	movs	r1, #4
 80038ca:	430a      	orrs	r2, r1
 80038cc:	621a      	str	r2, [r3, #32]
 80038ce:	4bab      	ldr	r3, [pc, #684]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	4baa      	ldr	r3, [pc, #680]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x398>
 80038dc:	4ba7      	ldr	r3, [pc, #668]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	4ba6      	ldr	r3, [pc, #664]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	621a      	str	r2, [r3, #32]
 80038e8:	4ba4      	ldr	r3, [pc, #656]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4ba3      	ldr	r3, [pc, #652]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80038ee:	2104      	movs	r1, #4
 80038f0:	438a      	bics	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fe ff54 	bl	80027a8 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e009      	b.n	800391a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fe ff4f 	bl	80027a8 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	4a9b      	ldr	r2, [pc, #620]	@ (8003b80 <HAL_RCC_OscConfig+0x624>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e12b      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b98      	ldr	r3, [pc, #608]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x3aa>
 8003924:	e013      	b.n	800394e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe ff3f 	bl	80027a8 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e009      	b.n	8003944 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fe ff3a 	bl	80027a8 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	4a91      	ldr	r2, [pc, #580]	@ (8003b80 <HAL_RCC_OscConfig+0x624>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e116      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	4b8d      	ldr	r3, [pc, #564]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800394e:	231f      	movs	r3, #31
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	4b87      	ldr	r3, [pc, #540]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 800395e:	4989      	ldr	r1, [pc, #548]	@ (8003b84 <HAL_RCC_OscConfig+0x628>)
 8003960:	400a      	ands	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d12a      	bne.n	80039cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003976:	4b81      	ldr	r3, [pc, #516]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800397a:	4b80      	ldr	r3, [pc, #512]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 800397c:	2104      	movs	r1, #4
 800397e:	430a      	orrs	r2, r1
 8003980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003982:	4b7e      	ldr	r3, [pc, #504]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003986:	4b7d      	ldr	r3, [pc, #500]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fe ff0b 	bl	80027a8 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003998:	f7fe ff06 	bl	80027a8 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0e3      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039aa:	4b74      	ldr	r3, [pc, #464]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	2202      	movs	r2, #2
 80039b0:	4013      	ands	r3, r2
 80039b2:	d0f1      	beq.n	8003998 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039b4:	4b71      	ldr	r3, [pc, #452]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	22f8      	movs	r2, #248	@ 0xf8
 80039ba:	4393      	bics	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	4b6d      	ldr	r3, [pc, #436]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ca:	e034      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	3305      	adds	r3, #5
 80039d2:	d111      	bne.n	80039f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039d4:	4b69      	ldr	r3, [pc, #420]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d8:	4b68      	ldr	r3, [pc, #416]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039da:	2104      	movs	r1, #4
 80039dc:	438a      	bics	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039e0:	4b66      	ldr	r3, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	22f8      	movs	r2, #248	@ 0xf8
 80039e6:	4393      	bics	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	4b62      	ldr	r3, [pc, #392]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80039f6:	e01e      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80039f8:	4b60      	ldr	r3, [pc, #384]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039fc:	4b5f      	ldr	r3, [pc, #380]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 80039fe:	2104      	movs	r1, #4
 8003a00:	430a      	orrs	r2, r1
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a04:	4b5d      	ldr	r3, [pc, #372]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a08:	4b5c      	ldr	r3, [pc, #368]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7fe feca 	bl	80027a8 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a1a:	f7fe fec5 	bl	80027a8 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0a2      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a2c:	4b53      	ldr	r3, [pc, #332]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d1f1      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d100      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4e4>
 8003a3e:	e097      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a40:	4b4e      	ldr	r3, [pc, #312]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	220c      	movs	r2, #12
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d100      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4f2>
 8003a4c:	e06b      	b.n	8003b26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d14c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b49      	ldr	r3, [pc, #292]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b48      	ldr	r3, [pc, #288]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a5c:	494a      	ldr	r1, [pc, #296]	@ (8003b88 <HAL_RCC_OscConfig+0x62c>)
 8003a5e:	400a      	ands	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe fea1 	bl	80027a8 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe fe9c 	bl	80027a8 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e079      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	049b      	lsls	r3, r3, #18
 8003a86:	4013      	ands	r3, r2
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	220f      	movs	r2, #15
 8003a90:	4393      	bics	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a98:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a9e:	4b37      	ldr	r3, [pc, #220]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8003b8c <HAL_RCC_OscConfig+0x630>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	4b32      	ldr	r3, [pc, #200]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b30      	ldr	r3, [pc, #192]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003abe:	2180      	movs	r1, #128	@ 0x80
 8003ac0:	0449      	lsls	r1, r1, #17
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fe6f 	bl	80027a8 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fe fe6a 	bl	80027a8 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e047      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae2:	4b26      	ldr	r3, [pc, #152]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	049b      	lsls	r3, r3, #18
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x574>
 8003aee:	e03f      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003af6:	4924      	ldr	r1, [pc, #144]	@ (8003b88 <HAL_RCC_OscConfig+0x62c>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe fe54 	bl	80027a8 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fe4f 	bl	80027a8 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e02c      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b18:	4b18      	ldr	r3, [pc, #96]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	049b      	lsls	r3, r3, #18
 8003b20:	4013      	ands	r3, r2
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5aa>
 8003b24:	e024      	b.n	8003b70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e01f      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b38:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_RCC_OscConfig+0x620>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	025b      	lsls	r3, r3, #9
 8003b44:	401a      	ands	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10e      	bne.n	8003b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	220f      	movs	r2, #15
 8003b52:	401a      	ands	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	23f0      	movs	r3, #240	@ 0xf0
 8003b60:	039b      	lsls	r3, r3, #14
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	00001388 	.word	0x00001388
 8003b84:	efffffff 	.word	0xefffffff
 8003b88:	feffffff 	.word	0xfeffffff
 8003b8c:	ffc2ffff 	.word	0xffc2ffff

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b3      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4013      	ands	r3, r2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d911      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b58      	ldr	r3, [pc, #352]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4393      	bics	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	4b55      	ldr	r3, [pc, #340]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc4:	4b53      	ldr	r3, [pc, #332]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4013      	ands	r3, r2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e09a      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2204      	movs	r2, #4
 8003be6:	4013      	ands	r3, r2
 8003be8:	d006      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bf0:	21e0      	movs	r1, #224	@ 0xe0
 8003bf2:	00c9      	lsls	r1, r1, #3
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b47      	ldr	r3, [pc, #284]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	22f0      	movs	r2, #240	@ 0xf0
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	4b44      	ldr	r3, [pc, #272]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	d040      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	029b      	lsls	r3, r3, #10
 8003c26:	4013      	ands	r3, r2
 8003c28:	d114      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06e      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b38      	ldr	r3, [pc, #224]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	049b      	lsls	r3, r3, #18
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e062      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e05b      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c54:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fe fd9e 	bl	80027a8 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7fe fd99 	bl	80027a8 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <HAL_RCC_ClockConfig+0x18c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e042      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ec      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d211      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	4393      	bics	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb8:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <HAL_RCC_ClockConfig+0x184>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e020      	b.n	8003d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	@ (8003d20 <HAL_RCC_ClockConfig+0x190>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ce8:	f000 f820 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cec:	0001      	movs	r1, r0
 8003cee:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <HAL_RCC_ClockConfig+0x188>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <HAL_RCC_ClockConfig+0x194>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	000a      	movs	r2, r1
 8003cfe:	40da      	lsrs	r2, r3
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_RCC_ClockConfig+0x198>)
 8003d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f7fe fd09 	bl	800271c <HAL_InitTick>
  
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	00001388 	.word	0x00001388
 8003d20:	fffff8ff 	.word	0xfffff8ff
 8003d24:	08005e38 	.word	0x08005e38
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	220c      	movs	r2, #12
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x30>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x36>
 8003d5a:	e02c      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d5e:	613b      	str	r3, [r7, #16]
      break;
 8003d60:	e02c      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	220f      	movs	r2, #15
 8003d68:	4013      	ands	r3, r2
 8003d6a:	4a19      	ldr	r2, [pc, #100]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	220f      	movs	r2, #15
 8003d76:	4013      	ands	r3, r2
 8003d78:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d7a:	5cd3      	ldrb	r3, [r2, r3]
 8003d7c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	025b      	lsls	r3, r3, #9
 8003d84:	4013      	ands	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d8c:	f7fc f9c6 	bl	800011c <__udivsi3>
 8003d90:	0003      	movs	r3, r0
 8003d92:	001a      	movs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4353      	muls	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e009      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	000a      	movs	r2, r1
 8003da0:	0152      	lsls	r2, r2, #5
 8003da2:	1a52      	subs	r2, r2, r1
 8003da4:	0193      	lsls	r3, r2, #6
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	185b      	adds	r3, r3, r1
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003db8:	613b      	str	r3, [r7, #16]
      break;
 8003dba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dbc:	693b      	ldr	r3, [r7, #16]
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b006      	add	sp, #24
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	007a1200 	.word	0x007a1200
 8003dd0:	08005e50 	.word	0x08005e50
 8003dd4:	08005e60 	.word	0x08005e60

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003df0:	f7ff fff2 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df4:	0001      	movs	r1, r0
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	4013      	ands	r3, r2
 8003e00:	4a04      	ldr	r2, [pc, #16]	@ (8003e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	40d9      	lsrs	r1, r3
 8003e06:	000b      	movs	r3, r1
}    
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08005e48 	.word	0x08005e48

08003e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	025b      	lsls	r3, r3, #9
 8003e30:	4013      	ands	r3, r2
 8003e32:	d100      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e34:	e08e      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2017      	movs	r0, #23
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b57      	ldr	r3, [pc, #348]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	2380      	movs	r3, #128	@ 0x80
 8003e44:	055b      	lsls	r3, r3, #21
 8003e46:	4013      	ands	r3, r2
 8003e48:	d110      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4b54      	ldr	r3, [pc, #336]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	0549      	lsls	r1, r1, #21
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
 8003e58:	4b50      	ldr	r3, [pc, #320]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	055b      	lsls	r3, r3, #21
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d11a      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e78:	4b49      	ldr	r3, [pc, #292]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b48      	ldr	r3, [pc, #288]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	0049      	lsls	r1, r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fe fc8f 	bl	80027a8 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fe fc8a 	bl	80027a8 <HAL_GetTick>
 8003e94:	0002      	movs	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e077      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eae:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	23c0      	movs	r3, #192	@ 0xc0
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d034      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	23c0      	movs	r3, #192	@ 0xc0
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d02c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed0:	4b32      	ldr	r3, [pc, #200]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	4b2f      	ldr	r3, [pc, #188]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	0249      	lsls	r1, r1, #9
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	4b2b      	ldr	r3, [pc, #172]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003eee:	492e      	ldr	r1, [pc, #184]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ef4:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	4013      	ands	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fe fc51 	bl	80027a8 <HAL_GetTick>
 8003f06:	0003      	movs	r3, r0
 8003f08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fc4c 	bl	80027a8 <HAL_GetTick>
 8003f10:	0002      	movs	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	4a25      	ldr	r2, [pc, #148]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e038      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2202      	movs	r2, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3e:	2317      	movs	r3, #23
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f4e:	4918      	ldr	r1, [pc, #96]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	2203      	movs	r2, #3
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2220      	movs	r2, #32
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f7c:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	2210      	movs	r2, #16
 8003f82:	4393      	bics	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b006      	add	sp, #24
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	fffffcff 	.word	0xfffffcff
 8003fa8:	fffeffff 	.word	0xfffeffff
 8003fac:	00001388 	.word	0x00001388
 8003fb0:	efffffff 	.word	0xefffffff

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e042      	b.n	800404c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	223d      	movs	r2, #61	@ 0x3d
 8003fca:	5c9b      	ldrb	r3, [r3, r2]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	223c      	movs	r2, #60	@ 0x3c
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fe fa89 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	223d      	movs	r2, #61	@ 0x3d
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	0010      	movs	r0, r2
 8003ff6:	f000 f901 	bl	80041fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2246      	movs	r2, #70	@ 0x46
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	223e      	movs	r2, #62	@ 0x3e
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223f      	movs	r2, #63	@ 0x3f
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2240      	movs	r2, #64	@ 0x40
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2241      	movs	r2, #65	@ 0x41
 800401e:	2101      	movs	r1, #1
 8004020:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2242      	movs	r2, #66	@ 0x42
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2243      	movs	r2, #67	@ 0x43
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2244      	movs	r2, #68	@ 0x44
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2245      	movs	r2, #69	@ 0x45
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	223d      	movs	r2, #61	@ 0x3d
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	230f      	movs	r3, #15
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	223c      	movs	r2, #60	@ 0x3c
 800406a:	5c9b      	ldrb	r3, [r3, r2]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_TIM_ConfigClockSource+0x20>
 8004070:	2302      	movs	r3, #2
 8004072:	e0bc      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x19a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	223c      	movs	r2, #60	@ 0x3c
 8004078:	2101      	movs	r1, #1
 800407a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223d      	movs	r2, #61	@ 0x3d
 8004080:	2102      	movs	r1, #2
 8004082:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2277      	movs	r2, #119	@ 0x77
 8004090:	4393      	bics	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a58      	ldr	r2, [pc, #352]	@ (80041f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004098:	4013      	ands	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2280      	movs	r2, #128	@ 0x80
 80040aa:	0192      	lsls	r2, r2, #6
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xde>
 80040b0:	2280      	movs	r2, #128	@ 0x80
 80040b2:	0192      	lsls	r2, r2, #6
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d900      	bls.n	80040ba <HAL_TIM_ConfigClockSource+0x66>
 80040b8:	e088      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040ba:	2280      	movs	r2, #128	@ 0x80
 80040bc:	0152      	lsls	r2, r2, #5
 80040be:	4293      	cmp	r3, r2
 80040c0:	d100      	bne.n	80040c4 <HAL_TIM_ConfigClockSource+0x70>
 80040c2:	e088      	b.n	80041d6 <HAL_TIM_ConfigClockSource+0x182>
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	0152      	lsls	r2, r2, #5
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d900      	bls.n	80040ce <HAL_TIM_ConfigClockSource+0x7a>
 80040cc:	e07e      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040ce:	2b70      	cmp	r3, #112	@ 0x70
 80040d0:	d018      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0xb0>
 80040d2:	d900      	bls.n	80040d6 <HAL_TIM_ConfigClockSource+0x82>
 80040d4:	e07a      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040d6:	2b60      	cmp	r3, #96	@ 0x60
 80040d8:	d04f      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x126>
 80040da:	d900      	bls.n	80040de <HAL_TIM_ConfigClockSource+0x8a>
 80040dc:	e076      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040de:	2b50      	cmp	r3, #80	@ 0x50
 80040e0:	d03b      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x106>
 80040e2:	d900      	bls.n	80040e6 <HAL_TIM_ConfigClockSource+0x92>
 80040e4:	e072      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d057      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x146>
 80040ea:	d900      	bls.n	80040ee <HAL_TIM_ConfigClockSource+0x9a>
 80040ec:	e06e      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040ee:	2b30      	cmp	r3, #48	@ 0x30
 80040f0:	d063      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x166>
 80040f2:	d86b      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d060      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x166>
 80040f8:	d868      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d05d      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x166>
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d05b      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x166>
 8004102:	e063      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	f000 f970 	bl	80043f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2277      	movs	r2, #119	@ 0x77
 8004124:	4313      	orrs	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
      break;
 8004130:	e052      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	f000 f959 	bl	80043f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2180      	movs	r1, #128	@ 0x80
 8004152:	01c9      	lsls	r1, r1, #7
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
      break;
 8004158:	e03e      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	001a      	movs	r2, r3
 8004168:	f000 f8cc 	bl	8004304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2150      	movs	r1, #80	@ 0x50
 8004172:	0018      	movs	r0, r3
 8004174:	f000 f926 	bl	80043c4 <TIM_ITRx_SetConfig>
      break;
 8004178:	e02e      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004186:	001a      	movs	r2, r3
 8004188:	f000 f8ea 	bl	8004360 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2160      	movs	r1, #96	@ 0x60
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f916 	bl	80043c4 <TIM_ITRx_SetConfig>
      break;
 8004198:	e01e      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a6:	001a      	movs	r2, r3
 80041a8:	f000 f8ac 	bl	8004304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2140      	movs	r1, #64	@ 0x40
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 f906 	bl	80043c4 <TIM_ITRx_SetConfig>
      break;
 80041b8:	e00e      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	0019      	movs	r1, r3
 80041c4:	0010      	movs	r0, r2
 80041c6:	f000 f8fd 	bl	80043c4 <TIM_ITRx_SetConfig>
      break;
 80041ca:	e005      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80041cc:	230f      	movs	r3, #15
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
      break;
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80041d6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	223d      	movs	r2, #61	@ 0x3d
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	223c      	movs	r2, #60	@ 0x3c
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

  return status;
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b004      	add	sp, #16
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	ffff00ff 	.word	0xffff00ff

080041fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a37      	ldr	r2, [pc, #220]	@ (80042ec <TIM_Base_SetConfig+0xf0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d008      	beq.n	8004226 <TIM_Base_SetConfig+0x2a>
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	05db      	lsls	r3, r3, #23
 800421a:	429a      	cmp	r2, r3
 800421c:	d003      	beq.n	8004226 <TIM_Base_SetConfig+0x2a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a33      	ldr	r2, [pc, #204]	@ (80042f0 <TIM_Base_SetConfig+0xf4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2270      	movs	r2, #112	@ 0x70
 800422a:	4393      	bics	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a2c      	ldr	r2, [pc, #176]	@ (80042ec <TIM_Base_SetConfig+0xf0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d014      	beq.n	800426a <TIM_Base_SetConfig+0x6e>
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	429a      	cmp	r2, r3
 8004248:	d00f      	beq.n	800426a <TIM_Base_SetConfig+0x6e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a28      	ldr	r2, [pc, #160]	@ (80042f0 <TIM_Base_SetConfig+0xf4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00b      	beq.n	800426a <TIM_Base_SetConfig+0x6e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <TIM_Base_SetConfig+0xf8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <TIM_Base_SetConfig+0x6e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a26      	ldr	r2, [pc, #152]	@ (80042f8 <TIM_Base_SetConfig+0xfc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_Base_SetConfig+0x6e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a25      	ldr	r2, [pc, #148]	@ (80042fc <TIM_Base_SetConfig+0x100>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d108      	bne.n	800427c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a24      	ldr	r2, [pc, #144]	@ (8004300 <TIM_Base_SetConfig+0x104>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2280      	movs	r2, #128	@ 0x80
 8004280:	4393      	bics	r3, r2
 8004282:	001a      	movs	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a11      	ldr	r2, [pc, #68]	@ (80042ec <TIM_Base_SetConfig+0xf0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0xbe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <TIM_Base_SetConfig+0xfc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0xbe>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <TIM_Base_SetConfig+0x100>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d103      	bne.n	80042c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2201      	movs	r2, #1
 80042da:	4393      	bics	r3, r2
 80042dc:	001a      	movs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]
  }
}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40002000 	.word	0x40002000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800
 8004300:	fffffcff 	.word	0xfffffcff

08004304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2201      	movs	r2, #1
 800431c:	4393      	bics	r3, r2
 800431e:	001a      	movs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	22f0      	movs	r2, #240	@ 0xf0
 800432e:	4393      	bics	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	220a      	movs	r2, #10
 8004340:	4393      	bics	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	621a      	str	r2, [r3, #32]
}
 8004358:	46c0      	nop			@ (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	b006      	add	sp, #24
 800435e:	bd80      	pop	{r7, pc}

08004360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	2210      	movs	r2, #16
 8004378:	4393      	bics	r3, r2
 800437a:	001a      	movs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4a0d      	ldr	r2, [pc, #52]	@ (80043c0 <TIM_TI2_ConfigInputStage+0x60>)
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	031b      	lsls	r3, r3, #12
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	22a0      	movs	r2, #160	@ 0xa0
 800439c:	4393      	bics	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b006      	add	sp, #24
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	ffff0fff 	.word	0xffff0fff

080043c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2270      	movs	r2, #112	@ 0x70
 80043d8:	4393      	bics	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	2207      	movs	r2, #7
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b004      	add	sp, #16
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4a09      	ldr	r2, [pc, #36]	@ (8004434 <TIM_ETR_SetConfig+0x3c>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	431a      	orrs	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b006      	add	sp, #24
 8004432:	bd80      	pop	{r7, pc}
 8004434:	ffff00ff 	.word	0xffff00ff

08004438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223c      	movs	r2, #60	@ 0x3c
 8004446:	5c9b      	ldrb	r3, [r3, r2]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e042      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	223c      	movs	r2, #60	@ 0x3c
 8004454:	2101      	movs	r1, #1
 8004456:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	223d      	movs	r2, #61	@ 0x3d
 800445c:	2102      	movs	r1, #2
 800445e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2270      	movs	r2, #112	@ 0x70
 8004474:	4393      	bics	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00a      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	05db      	lsls	r3, r3, #23
 800449c:	429a      	cmp	r2, r3
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2280      	movs	r2, #128	@ 0x80
 80044ae:	4393      	bics	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	223d      	movs	r2, #61	@ 0x3d
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	223c      	movs	r2, #60	@ 0x3c
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400

080044e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e044      	b.n	8004584 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2278      	movs	r2, #120	@ 0x78
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f7fe f811 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	@ 0x24
 8004516:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fcf0 	bl	8004f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fbc4 	bl	8004cc8 <UART_SetConfig>
 8004540:	0003      	movs	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e01c      	b.n	8004584 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490d      	ldr	r1, [pc, #52]	@ (800458c <HAL_UART_Init+0xa4>)
 8004556:	400a      	ands	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	212a      	movs	r1, #42	@ 0x2a
 8004566:	438a      	bics	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fd7f 	bl	8005080 <UART_CheckIdleState>
 8004582:	0003      	movs	r3, r0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffffb7ff 	.word	0xffffb7ff

08004590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d000      	beq.n	80045aa <HAL_UART_Transmit+0x1a>
 80045a8:	e08c      	b.n	80046c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_UART_Transmit+0x28>
 80045b0:	1dbb      	adds	r3, r7, #6
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e084      	b.n	80046c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	015b      	lsls	r3, r3, #5
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d109      	bne.n	80045dc <HAL_UART_Transmit+0x4c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	d001      	beq.n	80045dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e074      	b.n	80046c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2284      	movs	r2, #132	@ 0x84
 80045e0:	2100      	movs	r1, #0
 80045e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2221      	movs	r2, #33	@ 0x21
 80045e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ea:	f7fe f8dd 	bl	80027a8 <HAL_GetTick>
 80045ee:	0003      	movs	r3, r0
 80045f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1dba      	adds	r2, r7, #6
 80045f6:	2150      	movs	r1, #80	@ 0x50
 80045f8:	8812      	ldrh	r2, [r2, #0]
 80045fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1dba      	adds	r2, r7, #6
 8004600:	2152      	movs	r1, #82	@ 0x52
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	015b      	lsls	r3, r3, #5
 800460e:	429a      	cmp	r2, r3
 8004610:	d108      	bne.n	8004624 <HAL_UART_Transmit+0x94>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e003      	b.n	800462c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800462c:	e02f      	b.n	800468e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	0013      	movs	r3, r2
 8004638:	2200      	movs	r2, #0
 800463a:	2180      	movs	r1, #128	@ 0x80
 800463c:	f000 fdc8 	bl	80051d0 <UART_WaitOnFlagUntilTimeout>
 8004640:	1e03      	subs	r3, r0, #0
 8004642:	d004      	beq.n	800464e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e03b      	b.n	80046c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	05d2      	lsls	r2, r2, #23
 800465e:	0dd2      	lsrs	r2, r2, #23
 8004660:	b292      	uxth	r2, r2
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	3302      	adds	r3, #2
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e007      	b.n	800467c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2252      	movs	r2, #82	@ 0x52
 8004680:	5a9b      	ldrh	r3, [r3, r2]
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b299      	uxth	r1, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2252      	movs	r2, #82	@ 0x52
 800468c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2252      	movs	r2, #82	@ 0x52
 8004692:	5a9b      	ldrh	r3, [r3, r2]
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1c9      	bne.n	800462e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0013      	movs	r3, r2
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	f000 fd92 	bl	80051d0 <UART_WaitOnFlagUntilTimeout>
 80046ac:	1e03      	subs	r3, r0, #0
 80046ae:	d004      	beq.n	80046ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e005      	b.n	80046c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b008      	add	sp, #32
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b0ab      	sub	sp, #172	@ 0xac
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	22a4      	movs	r2, #164	@ 0xa4
 80046e0:	18b9      	adds	r1, r7, r2
 80046e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	20a0      	movs	r0, #160	@ 0xa0
 80046ec:	1839      	adds	r1, r7, r0
 80046ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	219c      	movs	r1, #156	@ 0x9c
 80046f8:	1879      	adds	r1, r7, r1
 80046fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046fc:	0011      	movs	r1, r2
 80046fe:	18bb      	adds	r3, r7, r2
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a99      	ldr	r2, [pc, #612]	@ (8004968 <HAL_UART_IRQHandler+0x298>)
 8004704:	4013      	ands	r3, r2
 8004706:	2298      	movs	r2, #152	@ 0x98
 8004708:	18bc      	adds	r4, r7, r2
 800470a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800470c:	18bb      	adds	r3, r7, r2
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d114      	bne.n	800473e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004714:	187b      	adds	r3, r7, r1
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	d00f      	beq.n	800473e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471e:	183b      	adds	r3, r7, r0
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2220      	movs	r2, #32
 8004724:	4013      	ands	r3, r2
 8004726:	d00a      	beq.n	800473e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472c:	2b00      	cmp	r3, #0
 800472e:	d100      	bne.n	8004732 <HAL_UART_IRQHandler+0x62>
 8004730:	e29e      	b.n	8004c70 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	0010      	movs	r0, r2
 800473a:	4798      	blx	r3
      }
      return;
 800473c:	e298      	b.n	8004c70 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800473e:	2398      	movs	r3, #152	@ 0x98
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d100      	bne.n	800474a <HAL_UART_IRQHandler+0x7a>
 8004748:	e114      	b.n	8004974 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800474a:	239c      	movs	r3, #156	@ 0x9c
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	4013      	ands	r3, r2
 8004754:	d106      	bne.n	8004764 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004756:	23a0      	movs	r3, #160	@ 0xa0
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a83      	ldr	r2, [pc, #524]	@ (800496c <HAL_UART_IRQHandler+0x29c>)
 800475e:	4013      	ands	r3, r2
 8004760:	d100      	bne.n	8004764 <HAL_UART_IRQHandler+0x94>
 8004762:	e107      	b.n	8004974 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004764:	23a4      	movs	r3, #164	@ 0xa4
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	4013      	ands	r3, r2
 800476e:	d012      	beq.n	8004796 <HAL_UART_IRQHandler+0xc6>
 8004770:	23a0      	movs	r3, #160	@ 0xa0
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4013      	ands	r3, r2
 800477c:	d00b      	beq.n	8004796 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2284      	movs	r2, #132	@ 0x84
 800478a:	589b      	ldr	r3, [r3, r2]
 800478c:	2201      	movs	r2, #1
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2184      	movs	r1, #132	@ 0x84
 8004794:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004796:	23a4      	movs	r3, #164	@ 0xa4
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2202      	movs	r2, #2
 800479e:	4013      	ands	r3, r2
 80047a0:	d011      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
 80047a2:	239c      	movs	r3, #156	@ 0x9c
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2202      	movs	r2, #2
 80047b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2284      	movs	r2, #132	@ 0x84
 80047ba:	589b      	ldr	r3, [r3, r2]
 80047bc:	2204      	movs	r2, #4
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2184      	movs	r1, #132	@ 0x84
 80047c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c6:	23a4      	movs	r3, #164	@ 0xa4
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2204      	movs	r2, #4
 80047ce:	4013      	ands	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
 80047d2:	239c      	movs	r3, #156	@ 0x9c
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2201      	movs	r2, #1
 80047da:	4013      	ands	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2204      	movs	r2, #4
 80047e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2284      	movs	r2, #132	@ 0x84
 80047ea:	589b      	ldr	r3, [r3, r2]
 80047ec:	2202      	movs	r2, #2
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2184      	movs	r1, #132	@ 0x84
 80047f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047f6:	23a4      	movs	r3, #164	@ 0xa4
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	4013      	ands	r3, r2
 8004800:	d017      	beq.n	8004832 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004802:	23a0      	movs	r3, #160	@ 0xa0
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2220      	movs	r2, #32
 800480a:	4013      	ands	r3, r2
 800480c:	d105      	bne.n	800481a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800480e:	239c      	movs	r3, #156	@ 0x9c
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004818:	d00b      	beq.n	8004832 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2208      	movs	r2, #8
 8004820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2284      	movs	r2, #132	@ 0x84
 8004826:	589b      	ldr	r3, [r3, r2]
 8004828:	2208      	movs	r2, #8
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2184      	movs	r1, #132	@ 0x84
 8004830:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004832:	23a4      	movs	r3, #164	@ 0xa4
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	4013      	ands	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_UART_IRQHandler+0x198>
 8004840:	23a0      	movs	r3, #160	@ 0xa0
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	04db      	lsls	r3, r3, #19
 800484a:	4013      	ands	r3, r2
 800484c:	d00c      	beq.n	8004868 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2280      	movs	r2, #128	@ 0x80
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2284      	movs	r2, #132	@ 0x84
 800485c:	589b      	ldr	r3, [r3, r2]
 800485e:	2220      	movs	r2, #32
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2184      	movs	r1, #132	@ 0x84
 8004866:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2284      	movs	r2, #132	@ 0x84
 800486c:	589b      	ldr	r3, [r3, r2]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d100      	bne.n	8004874 <HAL_UART_IRQHandler+0x1a4>
 8004872:	e1ff      	b.n	8004c74 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004874:	23a4      	movs	r3, #164	@ 0xa4
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2220      	movs	r2, #32
 800487c:	4013      	ands	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004880:	23a0      	movs	r3, #160	@ 0xa0
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2220      	movs	r2, #32
 8004888:	4013      	ands	r3, r2
 800488a:	d008      	beq.n	800489e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	0010      	movs	r0, r2
 800489c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2284      	movs	r2, #132	@ 0x84
 80048a2:	589b      	ldr	r3, [r3, r2]
 80048a4:	2194      	movs	r1, #148	@ 0x94
 80048a6:	187a      	adds	r2, r7, r1
 80048a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2240      	movs	r2, #64	@ 0x40
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d004      	beq.n	80048c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2228      	movs	r2, #40	@ 0x28
 80048be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c0:	d047      	beq.n	8004952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fcf3 	bl	80052b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2240      	movs	r2, #64	@ 0x40
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d137      	bne.n	8004948 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d8:	f3ef 8310 	mrs	r3, PRIMASK
 80048dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80048de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e0:	2090      	movs	r0, #144	@ 0x90
 80048e2:	183a      	adds	r2, r7, r0
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	2301      	movs	r3, #1
 80048e8:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ec:	f383 8810 	msr	PRIMASK, r3
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2140      	movs	r1, #64	@ 0x40
 80048fe:	438a      	bics	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	183b      	adds	r3, r7, r0
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491c:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <HAL_UART_IRQHandler+0x2a0>)
 800491e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	0018      	movs	r0, r3
 8004926:	f7fe fc4d 	bl	80031c4 <HAL_DMA_Abort_IT>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d01a      	beq.n	8004964 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	0018      	movs	r0, r3
 800493a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	e012      	b.n	8004964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f9ad 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	e00d      	b.n	8004964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 f9a8 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e008      	b.n	8004964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f9a3 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2284      	movs	r2, #132	@ 0x84
 800495e:	2100      	movs	r1, #0
 8004960:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004962:	e187      	b.n	8004c74 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	46c0      	nop			@ (mov r8, r8)
    return;
 8004966:	e185      	b.n	8004c74 <HAL_UART_IRQHandler+0x5a4>
 8004968:	0000080f 	.word	0x0000080f
 800496c:	04000120 	.word	0x04000120
 8004970:	08005379 	.word	0x08005379

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004978:	2b01      	cmp	r3, #1
 800497a:	d000      	beq.n	800497e <HAL_UART_IRQHandler+0x2ae>
 800497c:	e139      	b.n	8004bf2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800497e:	23a4      	movs	r3, #164	@ 0xa4
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2210      	movs	r2, #16
 8004986:	4013      	ands	r3, r2
 8004988:	d100      	bne.n	800498c <HAL_UART_IRQHandler+0x2bc>
 800498a:	e132      	b.n	8004bf2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800498c:	23a0      	movs	r3, #160	@ 0xa0
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2210      	movs	r2, #16
 8004994:	4013      	ands	r3, r2
 8004996:	d100      	bne.n	800499a <HAL_UART_IRQHandler+0x2ca>
 8004998:	e12b      	b.n	8004bf2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2210      	movs	r2, #16
 80049a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2240      	movs	r2, #64	@ 0x40
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d000      	beq.n	80049b2 <HAL_UART_IRQHandler+0x2e2>
 80049b0:	e09f      	b.n	8004af2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	217e      	movs	r1, #126	@ 0x7e
 80049bc:	187b      	adds	r3, r7, r1
 80049be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049c0:	187b      	adds	r3, r7, r1
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d100      	bne.n	80049ca <HAL_UART_IRQHandler+0x2fa>
 80049c8:	e156      	b.n	8004c78 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2258      	movs	r2, #88	@ 0x58
 80049ce:	5a9b      	ldrh	r3, [r3, r2]
 80049d0:	187a      	adds	r2, r7, r1
 80049d2:	8812      	ldrh	r2, [r2, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d300      	bcc.n	80049da <HAL_UART_IRQHandler+0x30a>
 80049d8:	e14e      	b.n	8004c78 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	187a      	adds	r2, r7, r1
 80049de:	215a      	movs	r1, #90	@ 0x5a
 80049e0:	8812      	ldrh	r2, [r2, #0]
 80049e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d06f      	beq.n	8004ace <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049f8:	2301      	movs	r3, #1
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	499e      	ldr	r1, [pc, #632]	@ (8004c88 <HAL_UART_IRQHandler+0x5b8>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a20:	f3ef 8310 	mrs	r3, PRIMASK
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a28:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	438a      	bics	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a48:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8310 	mrs	r3, PRIMASK
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2140      	movs	r1, #64	@ 0x40
 8004a74:	438a      	bics	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a7a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	2120      	movs	r1, #32
 8004a8a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fe fb43 	bl	8003154 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2258      	movs	r2, #88	@ 0x58
 8004ad8:	5a9a      	ldrh	r2, [r3, r2]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	215a      	movs	r1, #90	@ 0x5a
 8004ade:	5a5b      	ldrh	r3, [r3, r1]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0011      	movs	r1, r2
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 f8e0 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004af0:	e0c2      	b.n	8004c78 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2258      	movs	r2, #88	@ 0x58
 8004af6:	5a99      	ldrh	r1, [r3, r2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	225a      	movs	r2, #90	@ 0x5a
 8004afc:	5a9b      	ldrh	r3, [r3, r2]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	208e      	movs	r0, #142	@ 0x8e
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	1a8a      	subs	r2, r1, r2
 8004b06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	225a      	movs	r2, #90	@ 0x5a
 8004b0c:	5a9b      	ldrh	r3, [r3, r2]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d100      	bne.n	8004b16 <HAL_UART_IRQHandler+0x446>
 8004b14:	e0b2      	b.n	8004c7c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d100      	bne.n	8004b20 <HAL_UART_IRQHandler+0x450>
 8004b1e:	e0ad      	b.n	8004c7c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b20:	f3ef 8310 	mrs	r3, PRIMASK
 8004b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b28:	2488      	movs	r4, #136	@ 0x88
 8004b2a:	193a      	adds	r2, r7, r4
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4951      	ldr	r1, [pc, #324]	@ (8004c8c <HAL_UART_IRQHandler+0x5bc>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	193b      	adds	r3, r7, r4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	2484      	movs	r4, #132	@ 0x84
 8004b62:	193a      	adds	r2, r7, r4
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	2301      	movs	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f383 8810 	msr	PRIMASK, r3
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	438a      	bics	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f383 8810 	msr	PRIMASK, r3
}
 8004b8e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2280      	movs	r2, #128	@ 0x80
 8004b94:	2120      	movs	r1, #32
 8004b96:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	2480      	movs	r4, #128	@ 0x80
 8004bae:	193a      	adds	r2, r7, r4
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2110      	movs	r1, #16
 8004bca:	438a      	bics	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	193b      	adds	r3, r7, r4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be2:	183b      	adds	r3, r7, r0
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0011      	movs	r1, r2
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f860 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bf0:	e044      	b.n	8004c7c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bf2:	23a4      	movs	r3, #164	@ 0xa4
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	035b      	lsls	r3, r3, #13
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d010      	beq.n	8004c22 <HAL_UART_IRQHandler+0x552>
 8004c00:	239c      	movs	r3, #156	@ 0x9c
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	03db      	lsls	r3, r3, #15
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2280      	movs	r2, #128	@ 0x80
 8004c14:	0352      	lsls	r2, r2, #13
 8004c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 fbee 	bl	80053fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c20:	e02f      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c22:	23a4      	movs	r3, #164	@ 0xa4
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2280      	movs	r2, #128	@ 0x80
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c2e:	23a0      	movs	r3, #160	@ 0xa0
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	4013      	ands	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01e      	beq.n	8004c80 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	0010      	movs	r0, r2
 8004c4a:	4798      	blx	r3
    }
    return;
 8004c4c:	e018      	b.n	8004c80 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c4e:	23a4      	movs	r3, #164	@ 0xa4
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2240      	movs	r2, #64	@ 0x40
 8004c56:	4013      	ands	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
 8004c5a:	23a0      	movs	r3, #160	@ 0xa0
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2240      	movs	r2, #64	@ 0x40
 8004c62:	4013      	ands	r3, r2
 8004c64:	d00d      	beq.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fb9c 	bl	80053a6 <UART_EndTransmit_IT>
    return;
 8004c6e:	e008      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c70:	46c0      	nop			@ (mov r8, r8)
 8004c72:	e006      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	e004      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	e002      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	e000      	b.n	8004c82 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c80:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b02b      	add	sp, #172	@ 0xac
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	fffffeff 	.word	0xfffffeff
 8004c8c:	fffffedf 	.word	0xfffffedf

08004c90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c98:	46c0      	nop			@ (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ca8:	46c0      	nop			@ (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	000a      	movs	r2, r1
 8004cba:	1cbb      	adds	r3, r7, #2
 8004cbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd0:	231e      	movs	r3, #30
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a83      	ldr	r2, [pc, #524]	@ (8004f04 <UART_SetConfig+0x23c>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a7e      	ldr	r2, [pc, #504]	@ (8004f08 <UART_SetConfig+0x240>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4a75      	ldr	r2, [pc, #468]	@ (8004f0c <UART_SetConfig+0x244>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	0019      	movs	r1, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d44:	4b72      	ldr	r3, [pc, #456]	@ (8004f10 <UART_SetConfig+0x248>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	2203      	movs	r2, #3
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d00d      	beq.n	8004d6c <UART_SetConfig+0xa4>
 8004d50:	d81b      	bhi.n	8004d8a <UART_SetConfig+0xc2>
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d014      	beq.n	8004d80 <UART_SetConfig+0xb8>
 8004d56:	d818      	bhi.n	8004d8a <UART_SetConfig+0xc2>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <UART_SetConfig+0x9a>
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d00a      	beq.n	8004d76 <UART_SetConfig+0xae>
 8004d60:	e013      	b.n	8004d8a <UART_SetConfig+0xc2>
 8004d62:	231f      	movs	r3, #31
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e012      	b.n	8004d92 <UART_SetConfig+0xca>
 8004d6c:	231f      	movs	r3, #31
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e00d      	b.n	8004d92 <UART_SetConfig+0xca>
 8004d76:	231f      	movs	r3, #31
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e008      	b.n	8004d92 <UART_SetConfig+0xca>
 8004d80:	231f      	movs	r3, #31
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2208      	movs	r2, #8
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e003      	b.n	8004d92 <UART_SetConfig+0xca>
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2210      	movs	r2, #16
 8004d90:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d15c      	bne.n	8004e58 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8004d9e:	231f      	movs	r3, #31
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d015      	beq.n	8004dd4 <UART_SetConfig+0x10c>
 8004da8:	dc18      	bgt.n	8004ddc <UART_SetConfig+0x114>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d00d      	beq.n	8004dca <UART_SetConfig+0x102>
 8004dae:	dc15      	bgt.n	8004ddc <UART_SetConfig+0x114>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <UART_SetConfig+0xf2>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d005      	beq.n	8004dc4 <UART_SetConfig+0xfc>
 8004db8:	e010      	b.n	8004ddc <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7ff f817 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	61bb      	str	r3, [r7, #24]
        break;
 8004dc2:	e012      	b.n	8004dea <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <UART_SetConfig+0x24c>)
 8004dc6:	61bb      	str	r3, [r7, #24]
        break;
 8004dc8:	e00f      	b.n	8004dea <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fe ffaf 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	61bb      	str	r3, [r7, #24]
        break;
 8004dd2:	e00a      	b.n	8004dea <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	61bb      	str	r3, [r7, #24]
        break;
 8004dda:	e006      	b.n	8004dea <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004de0:	231e      	movs	r3, #30
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
        break;
 8004de8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d100      	bne.n	8004df2 <UART_SetConfig+0x12a>
 8004df0:	e07a      	b.n	8004ee8 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	005a      	lsls	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	18d2      	adds	r2, r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	0019      	movs	r1, r3
 8004e04:	0010      	movs	r0, r2
 8004e06:	f7fb f989 	bl	800011c <__udivsi3>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b0f      	cmp	r3, #15
 8004e12:	d91c      	bls.n	8004e4e <UART_SetConfig+0x186>
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	025b      	lsls	r3, r3, #9
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d217      	bcs.n	8004e4e <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	200e      	movs	r0, #14
 8004e24:	183b      	adds	r3, r7, r0
 8004e26:	210f      	movs	r1, #15
 8004e28:	438a      	bics	r2, r1
 8004e2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2207      	movs	r2, #7
 8004e34:	4013      	ands	r3, r2
 8004e36:	b299      	uxth	r1, r3
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	183a      	adds	r2, r7, r0
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	183a      	adds	r2, r7, r0
 8004e48:	8812      	ldrh	r2, [r2, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e04c      	b.n	8004ee8 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4e:	231e      	movs	r3, #30
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e047      	b.n	8004ee8 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e58:	231f      	movs	r3, #31
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d015      	beq.n	8004e8e <UART_SetConfig+0x1c6>
 8004e62:	dc18      	bgt.n	8004e96 <UART_SetConfig+0x1ce>
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d00d      	beq.n	8004e84 <UART_SetConfig+0x1bc>
 8004e68:	dc15      	bgt.n	8004e96 <UART_SetConfig+0x1ce>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <UART_SetConfig+0x1ac>
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d005      	beq.n	8004e7e <UART_SetConfig+0x1b6>
 8004e72:	e010      	b.n	8004e96 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7fe ffba 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e012      	b.n	8004ea4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <UART_SetConfig+0x24c>)
 8004e80:	61bb      	str	r3, [r7, #24]
        break;
 8004e82:	e00f      	b.n	8004ea4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e84:	f7fe ff52 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e00a      	b.n	8004ea4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	61bb      	str	r3, [r7, #24]
        break;
 8004e94:	e006      	b.n	8004ea4 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e9a:	231e      	movs	r3, #30
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
        break;
 8004ea2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01e      	beq.n	8004ee8 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085a      	lsrs	r2, r3, #1
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	18d2      	adds	r2, r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0019      	movs	r1, r3
 8004eba:	0010      	movs	r0, r2
 8004ebc:	f7fb f92e 	bl	800011c <__udivsi3>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d90a      	bls.n	8004ee0 <UART_SetConfig+0x218>
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	025b      	lsls	r3, r3, #9
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d205      	bcs.n	8004ee0 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60da      	str	r2, [r3, #12]
 8004ede:	e003      	b.n	8004ee8 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee0:	231e      	movs	r3, #30
 8004ee2:	18fb      	adds	r3, r7, r3
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ef4:	231e      	movs	r3, #30
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	781b      	ldrb	r3, [r3, #0]
}
 8004efa:	0018      	movs	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b008      	add	sp, #32
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	46c0      	nop			@ (mov r8, r8)
 8004f04:	ffff69f3 	.word	0xffff69f3
 8004f08:	ffffcfff 	.word	0xffffcfff
 8004f0c:	fffff4ff 	.word	0xfffff4ff
 8004f10:	40021000 	.word	0x40021000
 8004f14:	007a1200 	.word	0x007a1200

08004f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	2208      	movs	r2, #8
 8004f26:	4013      	ands	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a4a      	ldr	r2, [pc, #296]	@ (800505c <UART_AdvFeatureConfig+0x144>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	2201      	movs	r2, #1
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a43      	ldr	r2, [pc, #268]	@ (8005060 <UART_AdvFeatureConfig+0x148>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	0019      	movs	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2202      	movs	r2, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <UART_AdvFeatureConfig+0x14c>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4a34      	ldr	r2, [pc, #208]	@ (8005068 <UART_AdvFeatureConfig+0x150>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2210      	movs	r2, #16
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800506c <UART_AdvFeatureConfig+0x154>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	2220      	movs	r2, #32
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d00b      	beq.n	8004fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4a25      	ldr	r2, [pc, #148]	@ (8005070 <UART_AdvFeatureConfig+0x158>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d01d      	beq.n	8005032 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8005074 <UART_AdvFeatureConfig+0x15c>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	0019      	movs	r1, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	035b      	lsls	r3, r3, #13
 8005016:	429a      	cmp	r2, r3
 8005018:	d10b      	bne.n	8005032 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <UART_AdvFeatureConfig+0x160>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2280      	movs	r2, #128	@ 0x80
 8005038:	4013      	ands	r3, r2
 800503a:	d00b      	beq.n	8005054 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <UART_AdvFeatureConfig+0x164>)
 8005044:	4013      	ands	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }
}
 8005054:	46c0      	nop			@ (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b002      	add	sp, #8
 800505a:	bd80      	pop	{r7, pc}
 800505c:	ffff7fff 	.word	0xffff7fff
 8005060:	fffdffff 	.word	0xfffdffff
 8005064:	fffeffff 	.word	0xfffeffff
 8005068:	fffbffff 	.word	0xfffbffff
 800506c:	ffffefff 	.word	0xffffefff
 8005070:	ffffdfff 	.word	0xffffdfff
 8005074:	ffefffff 	.word	0xffefffff
 8005078:	ff9fffff 	.word	0xff9fffff
 800507c:	fff7ffff 	.word	0xfff7ffff

08005080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b092      	sub	sp, #72	@ 0x48
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2284      	movs	r2, #132	@ 0x84
 800508c:	2100      	movs	r1, #0
 800508e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005090:	f7fd fb8a 	bl	80027a8 <HAL_GetTick>
 8005094:	0003      	movs	r3, r0
 8005096:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2208      	movs	r2, #8
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d12c      	bne.n	8005100 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	0391      	lsls	r1, r2, #14
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4a46      	ldr	r2, [pc, #280]	@ (80051c8 <UART_CheckIdleState+0x148>)
 80050b0:	9200      	str	r2, [sp, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f000 f88c 	bl	80051d0 <UART_WaitOnFlagUntilTimeout>
 80050b8:	1e03      	subs	r3, r0, #0
 80050ba:	d021      	beq.n	8005100 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c6:	2301      	movs	r3, #1
 80050c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2180      	movs	r1, #128	@ 0x80
 80050de:	438a      	bics	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2278      	movs	r2, #120	@ 0x78
 80050f8:	2100      	movs	r1, #0
 80050fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e05f      	b.n	80051c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2204      	movs	r2, #4
 8005108:	4013      	ands	r3, r2
 800510a:	2b04      	cmp	r3, #4
 800510c:	d146      	bne.n	800519c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	2280      	movs	r2, #128	@ 0x80
 8005112:	03d1      	lsls	r1, r2, #15
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <UART_CheckIdleState+0x148>)
 8005118:	9200      	str	r2, [sp, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	f000 f858 	bl	80051d0 <UART_WaitOnFlagUntilTimeout>
 8005120:	1e03      	subs	r3, r0, #0
 8005122:	d03b      	beq.n	800519c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	60fb      	str	r3, [r7, #12]
  return(result);
 800512a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	2301      	movs	r3, #1
 8005130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4921      	ldr	r1, [pc, #132]	@ (80051cc <UART_CheckIdleState+0x14c>)
 8005146:	400a      	ands	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005156:	f3ef 8310 	mrs	r3, PRIMASK
 800515a:	61bb      	str	r3, [r7, #24]
  return(result);
 800515c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005160:	2301      	movs	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2101      	movs	r1, #1
 8005178:	438a      	bics	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	f383 8810 	msr	PRIMASK, r3
}
 8005186:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	2120      	movs	r1, #32
 800518e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2278      	movs	r2, #120	@ 0x78
 8005194:	2100      	movs	r1, #0
 8005196:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e011      	b.n	80051c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2280      	movs	r2, #128	@ 0x80
 80051a6:	2120      	movs	r1, #32
 80051a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2278      	movs	r2, #120	@ 0x78
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b010      	add	sp, #64	@ 0x40
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	01ffffff 	.word	0x01ffffff
 80051cc:	fffffedf 	.word	0xfffffedf

080051d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	1dfb      	adds	r3, r7, #7
 80051de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e0:	e051      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	3301      	adds	r3, #1
 80051e6:	d04e      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7fd fade 	bl	80027a8 <HAL_GetTick>
 80051ec:	0002      	movs	r2, r0
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e051      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2204      	movs	r2, #4
 800520a:	4013      	ands	r3, r2
 800520c:	d03b      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b80      	cmp	r3, #128	@ 0x80
 8005212:	d038      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b40      	cmp	r3, #64	@ 0x40
 8005218:	d035      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	2208      	movs	r2, #8
 8005222:	4013      	ands	r3, r2
 8005224:	2b08      	cmp	r3, #8
 8005226:	d111      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2208      	movs	r2, #8
 800522e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	0018      	movs	r0, r3
 8005234:	f000 f83c 	bl	80052b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2284      	movs	r2, #132	@ 0x84
 800523c:	2108      	movs	r1, #8
 800523e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2278      	movs	r2, #120	@ 0x78
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e02c      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	401a      	ands	r2, r3
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	429a      	cmp	r2, r3
 800525e:	d112      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2280      	movs	r2, #128	@ 0x80
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f81f 	bl	80052b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2284      	movs	r2, #132	@ 0x84
 8005276:	2120      	movs	r1, #32
 8005278:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2278      	movs	r2, #120	@ 0x78
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e00f      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	425a      	negs	r2, r3
 8005296:	4153      	adcs	r3, r2
 8005298:	b2db      	uxtb	r3, r3
 800529a:	001a      	movs	r2, r3
 800529c:	1dfb      	adds	r3, r7, #7
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d09e      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b004      	add	sp, #16
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08e      	sub	sp, #56	@ 0x38
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	617b      	str	r3, [r7, #20]
  return(result);
 80052be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	2301      	movs	r3, #1
 80052c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			@ (mov r8, r8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4926      	ldr	r1, [pc, #152]	@ (8005374 <UART_EndRxTransfer+0xc4>)
 80052da:	400a      	ands	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	623b      	str	r3, [r7, #32]
  return(result);
 80052f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f4:	2301      	movs	r3, #1
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005320:	2b01      	cmp	r3, #1
 8005322:	d118      	bne.n	8005356 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005324:	f3ef 8310 	mrs	r3, PRIMASK
 8005328:	60bb      	str	r3, [r7, #8]
  return(result);
 800532a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532e:	2301      	movs	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			@ (mov r8, r8)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2110      	movs	r1, #16
 8005346:	438a      	bics	r2, r1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2280      	movs	r2, #128	@ 0x80
 800535a:	2120      	movs	r1, #32
 800535c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b00e      	add	sp, #56	@ 0x38
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	fffffedf 	.word	0xfffffedf

08005378 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	225a      	movs	r2, #90	@ 0x5a
 800538a:	2100      	movs	r1, #0
 800538c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2252      	movs	r2, #82	@ 0x52
 8005392:	2100      	movs	r1, #0
 8005394:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0018      	movs	r0, r3
 800539a:	f7ff fc81 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ae:	f3ef 8310 	mrs	r3, PRIMASK
 80053b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	2301      	movs	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f383 8810 	msr	PRIMASK, r3
}
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2140      	movs	r1, #64	@ 0x40
 80053d0:	438a      	bics	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f383 8810 	msr	PRIMASK, r3
}
 80053de:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7ff fc4e 	bl	8004c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f4:	46c0      	nop			@ (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b006      	add	sp, #24
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005404:	46c0      	nop			@ (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	b002      	add	sp, #8
 800540a:	bd80      	pop	{r7, pc}

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b500      	push	{lr}
 8005410:	490b      	ldr	r1, [pc, #44]	@ (8005440 <siprintf+0x34>)
 8005412:	b09c      	sub	sp, #112	@ 0x70
 8005414:	ab1d      	add	r3, sp, #116	@ 0x74
 8005416:	9002      	str	r0, [sp, #8]
 8005418:	9006      	str	r0, [sp, #24]
 800541a:	9107      	str	r1, [sp, #28]
 800541c:	9104      	str	r1, [sp, #16]
 800541e:	4809      	ldr	r0, [pc, #36]	@ (8005444 <siprintf+0x38>)
 8005420:	4909      	ldr	r1, [pc, #36]	@ (8005448 <siprintf+0x3c>)
 8005422:	cb04      	ldmia	r3!, {r2}
 8005424:	9105      	str	r1, [sp, #20]
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	a902      	add	r1, sp, #8
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f000 f99e 	bl	800576c <_svfiprintf_r>
 8005430:	2200      	movs	r2, #0
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	b01c      	add	sp, #112	@ 0x70
 8005438:	bc08      	pop	{r3}
 800543a:	b003      	add	sp, #12
 800543c:	4718      	bx	r3
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	7fffffff 	.word	0x7fffffff
 8005444:	2000000c 	.word	0x2000000c
 8005448:	ffff0208 	.word	0xffff0208

0800544c <memset>:
 800544c:	0003      	movs	r3, r0
 800544e:	1882      	adds	r2, r0, r2
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	7019      	strb	r1, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <__errno>:
 800545c:	4b01      	ldr	r3, [pc, #4]	@ (8005464 <__errno+0x8>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	2000000c 	.word	0x2000000c

08005468 <__libc_init_array>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	2600      	movs	r6, #0
 800546c:	4c0c      	ldr	r4, [pc, #48]	@ (80054a0 <__libc_init_array+0x38>)
 800546e:	4d0d      	ldr	r5, [pc, #52]	@ (80054a4 <__libc_init_array+0x3c>)
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	42a6      	cmp	r6, r4
 8005476:	d109      	bne.n	800548c <__libc_init_array+0x24>
 8005478:	2600      	movs	r6, #0
 800547a:	f000 fcad 	bl	8005dd8 <_init>
 800547e:	4c0a      	ldr	r4, [pc, #40]	@ (80054a8 <__libc_init_array+0x40>)
 8005480:	4d0a      	ldr	r5, [pc, #40]	@ (80054ac <__libc_init_array+0x44>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	42a6      	cmp	r6, r4
 8005488:	d105      	bne.n	8005496 <__libc_init_array+0x2e>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	00b3      	lsls	r3, r6, #2
 800548e:	58eb      	ldr	r3, [r5, r3]
 8005490:	4798      	blx	r3
 8005492:	3601      	adds	r6, #1
 8005494:	e7ee      	b.n	8005474 <__libc_init_array+0xc>
 8005496:	00b3      	lsls	r3, r6, #2
 8005498:	58eb      	ldr	r3, [r5, r3]
 800549a:	4798      	blx	r3
 800549c:	3601      	adds	r6, #1
 800549e:	e7f2      	b.n	8005486 <__libc_init_array+0x1e>
 80054a0:	08005ea4 	.word	0x08005ea4
 80054a4:	08005ea4 	.word	0x08005ea4
 80054a8:	08005ea8 	.word	0x08005ea8
 80054ac:	08005ea4 	.word	0x08005ea4

080054b0 <__retarget_lock_acquire_recursive>:
 80054b0:	4770      	bx	lr

080054b2 <__retarget_lock_release_recursive>:
 80054b2:	4770      	bx	lr

080054b4 <_free_r>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	0005      	movs	r5, r0
 80054b8:	1e0c      	subs	r4, r1, #0
 80054ba:	d010      	beq.n	80054de <_free_r+0x2a>
 80054bc:	3c04      	subs	r4, #4
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da00      	bge.n	80054c6 <_free_r+0x12>
 80054c4:	18e4      	adds	r4, r4, r3
 80054c6:	0028      	movs	r0, r5
 80054c8:	f000 f8e0 	bl	800568c <__malloc_lock>
 80054cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <_free_r+0x90>)
 80054ce:	6813      	ldr	r3, [r2, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <_free_r+0x2c>
 80054d4:	6063      	str	r3, [r4, #4]
 80054d6:	6014      	str	r4, [r2, #0]
 80054d8:	0028      	movs	r0, r5
 80054da:	f000 f8df 	bl	800569c <__malloc_unlock>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d908      	bls.n	80054f6 <_free_r+0x42>
 80054e4:	6820      	ldr	r0, [r4, #0]
 80054e6:	1821      	adds	r1, r4, r0
 80054e8:	428b      	cmp	r3, r1
 80054ea:	d1f3      	bne.n	80054d4 <_free_r+0x20>
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	1809      	adds	r1, r1, r0
 80054f2:	6021      	str	r1, [r4, #0]
 80054f4:	e7ee      	b.n	80054d4 <_free_r+0x20>
 80054f6:	001a      	movs	r2, r3
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <_free_r+0x4e>
 80054fe:	42a3      	cmp	r3, r4
 8005500:	d9f9      	bls.n	80054f6 <_free_r+0x42>
 8005502:	6811      	ldr	r1, [r2, #0]
 8005504:	1850      	adds	r0, r2, r1
 8005506:	42a0      	cmp	r0, r4
 8005508:	d10b      	bne.n	8005522 <_free_r+0x6e>
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	1809      	adds	r1, r1, r0
 800550e:	1850      	adds	r0, r2, r1
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	4283      	cmp	r3, r0
 8005514:	d1e0      	bne.n	80054d8 <_free_r+0x24>
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	1841      	adds	r1, r0, r1
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	6053      	str	r3, [r2, #4]
 8005520:	e7da      	b.n	80054d8 <_free_r+0x24>
 8005522:	42a0      	cmp	r0, r4
 8005524:	d902      	bls.n	800552c <_free_r+0x78>
 8005526:	230c      	movs	r3, #12
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	e7d5      	b.n	80054d8 <_free_r+0x24>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	1821      	adds	r1, r4, r0
 8005530:	428b      	cmp	r3, r1
 8005532:	d103      	bne.n	800553c <_free_r+0x88>
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	1809      	adds	r1, r1, r0
 800553a:	6021      	str	r1, [r4, #0]
 800553c:	6063      	str	r3, [r4, #4]
 800553e:	6054      	str	r4, [r2, #4]
 8005540:	e7ca      	b.n	80054d8 <_free_r+0x24>
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	200003ac 	.word	0x200003ac

08005548 <sbrk_aligned>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4e0f      	ldr	r6, [pc, #60]	@ (8005588 <sbrk_aligned+0x40>)
 800554c:	000d      	movs	r5, r1
 800554e:	6831      	ldr	r1, [r6, #0]
 8005550:	0004      	movs	r4, r0
 8005552:	2900      	cmp	r1, #0
 8005554:	d102      	bne.n	800555c <sbrk_aligned+0x14>
 8005556:	f000 fb99 	bl	8005c8c <_sbrk_r>
 800555a:	6030      	str	r0, [r6, #0]
 800555c:	0029      	movs	r1, r5
 800555e:	0020      	movs	r0, r4
 8005560:	f000 fb94 	bl	8005c8c <_sbrk_r>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d103      	bne.n	8005570 <sbrk_aligned+0x28>
 8005568:	2501      	movs	r5, #1
 800556a:	426d      	negs	r5, r5
 800556c:	0028      	movs	r0, r5
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	2303      	movs	r3, #3
 8005572:	1cc5      	adds	r5, r0, #3
 8005574:	439d      	bics	r5, r3
 8005576:	42a8      	cmp	r0, r5
 8005578:	d0f8      	beq.n	800556c <sbrk_aligned+0x24>
 800557a:	1a29      	subs	r1, r5, r0
 800557c:	0020      	movs	r0, r4
 800557e:	f000 fb85 	bl	8005c8c <_sbrk_r>
 8005582:	3001      	adds	r0, #1
 8005584:	d1f2      	bne.n	800556c <sbrk_aligned+0x24>
 8005586:	e7ef      	b.n	8005568 <sbrk_aligned+0x20>
 8005588:	200003a8 	.word	0x200003a8

0800558c <_malloc_r>:
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	2203      	movs	r2, #3
 8005590:	1ccb      	adds	r3, r1, #3
 8005592:	4393      	bics	r3, r2
 8005594:	3308      	adds	r3, #8
 8005596:	0005      	movs	r5, r0
 8005598:	001f      	movs	r7, r3
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d234      	bcs.n	8005608 <_malloc_r+0x7c>
 800559e:	270c      	movs	r7, #12
 80055a0:	42b9      	cmp	r1, r7
 80055a2:	d833      	bhi.n	800560c <_malloc_r+0x80>
 80055a4:	0028      	movs	r0, r5
 80055a6:	f000 f871 	bl	800568c <__malloc_lock>
 80055aa:	4e37      	ldr	r6, [pc, #220]	@ (8005688 <_malloc_r+0xfc>)
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	001c      	movs	r4, r3
 80055b0:	2c00      	cmp	r4, #0
 80055b2:	d12f      	bne.n	8005614 <_malloc_r+0x88>
 80055b4:	0039      	movs	r1, r7
 80055b6:	0028      	movs	r0, r5
 80055b8:	f7ff ffc6 	bl	8005548 <sbrk_aligned>
 80055bc:	0004      	movs	r4, r0
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d15f      	bne.n	8005682 <_malloc_r+0xf6>
 80055c2:	6834      	ldr	r4, [r6, #0]
 80055c4:	9400      	str	r4, [sp, #0]
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d14a      	bne.n	8005662 <_malloc_r+0xd6>
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	d052      	beq.n	8005676 <_malloc_r+0xea>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	0028      	movs	r0, r5
 80055d4:	18e3      	adds	r3, r4, r3
 80055d6:	9900      	ldr	r1, [sp, #0]
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	f000 fb57 	bl	8005c8c <_sbrk_r>
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	4283      	cmp	r3, r0
 80055e2:	d148      	bne.n	8005676 <_malloc_r+0xea>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	0028      	movs	r0, r5
 80055e8:	1aff      	subs	r7, r7, r3
 80055ea:	0039      	movs	r1, r7
 80055ec:	f7ff ffac 	bl	8005548 <sbrk_aligned>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d040      	beq.n	8005676 <_malloc_r+0xea>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	19db      	adds	r3, r3, r7
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	6833      	ldr	r3, [r6, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d133      	bne.n	800566a <_malloc_r+0xde>
 8005602:	9b00      	ldr	r3, [sp, #0]
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	e019      	b.n	800563c <_malloc_r+0xb0>
 8005608:	2b00      	cmp	r3, #0
 800560a:	dac9      	bge.n	80055a0 <_malloc_r+0x14>
 800560c:	230c      	movs	r3, #12
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	2000      	movs	r0, #0
 8005612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005614:	6821      	ldr	r1, [r4, #0]
 8005616:	1bc9      	subs	r1, r1, r7
 8005618:	d420      	bmi.n	800565c <_malloc_r+0xd0>
 800561a:	290b      	cmp	r1, #11
 800561c:	d90a      	bls.n	8005634 <_malloc_r+0xa8>
 800561e:	19e2      	adds	r2, r4, r7
 8005620:	6027      	str	r7, [r4, #0]
 8005622:	42a3      	cmp	r3, r4
 8005624:	d104      	bne.n	8005630 <_malloc_r+0xa4>
 8005626:	6032      	str	r2, [r6, #0]
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	6011      	str	r1, [r2, #0]
 800562c:	6053      	str	r3, [r2, #4]
 800562e:	e005      	b.n	800563c <_malloc_r+0xb0>
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	e7f9      	b.n	8005628 <_malloc_r+0x9c>
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	42a3      	cmp	r3, r4
 8005638:	d10e      	bne.n	8005658 <_malloc_r+0xcc>
 800563a:	6032      	str	r2, [r6, #0]
 800563c:	0028      	movs	r0, r5
 800563e:	f000 f82d 	bl	800569c <__malloc_unlock>
 8005642:	0020      	movs	r0, r4
 8005644:	2207      	movs	r2, #7
 8005646:	300b      	adds	r0, #11
 8005648:	1d23      	adds	r3, r4, #4
 800564a:	4390      	bics	r0, r2
 800564c:	1ac2      	subs	r2, r0, r3
 800564e:	4298      	cmp	r0, r3
 8005650:	d0df      	beq.n	8005612 <_malloc_r+0x86>
 8005652:	1a1b      	subs	r3, r3, r0
 8005654:	50a3      	str	r3, [r4, r2]
 8005656:	e7dc      	b.n	8005612 <_malloc_r+0x86>
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	e7ef      	b.n	800563c <_malloc_r+0xb0>
 800565c:	0023      	movs	r3, r4
 800565e:	6864      	ldr	r4, [r4, #4]
 8005660:	e7a6      	b.n	80055b0 <_malloc_r+0x24>
 8005662:	9c00      	ldr	r4, [sp, #0]
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	e7ad      	b.n	80055c6 <_malloc_r+0x3a>
 800566a:	001a      	movs	r2, r3
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	42a3      	cmp	r3, r4
 8005670:	d1fb      	bne.n	800566a <_malloc_r+0xde>
 8005672:	2300      	movs	r3, #0
 8005674:	e7da      	b.n	800562c <_malloc_r+0xa0>
 8005676:	230c      	movs	r3, #12
 8005678:	0028      	movs	r0, r5
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f000 f80e 	bl	800569c <__malloc_unlock>
 8005680:	e7c6      	b.n	8005610 <_malloc_r+0x84>
 8005682:	6007      	str	r7, [r0, #0]
 8005684:	e7da      	b.n	800563c <_malloc_r+0xb0>
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	200003ac 	.word	0x200003ac

0800568c <__malloc_lock>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4802      	ldr	r0, [pc, #8]	@ (8005698 <__malloc_lock+0xc>)
 8005690:	f7ff ff0e 	bl	80054b0 <__retarget_lock_acquire_recursive>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	200003a4 	.word	0x200003a4

0800569c <__malloc_unlock>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4802      	ldr	r0, [pc, #8]	@ (80056a8 <__malloc_unlock+0xc>)
 80056a0:	f7ff ff07 	bl	80054b2 <__retarget_lock_release_recursive>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	200003a4 	.word	0x200003a4

080056ac <__ssputs_r>:
 80056ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ae:	688e      	ldr	r6, [r1, #8]
 80056b0:	b085      	sub	sp, #20
 80056b2:	001f      	movs	r7, r3
 80056b4:	000c      	movs	r4, r1
 80056b6:	680b      	ldr	r3, [r1, #0]
 80056b8:	9002      	str	r0, [sp, #8]
 80056ba:	9203      	str	r2, [sp, #12]
 80056bc:	42be      	cmp	r6, r7
 80056be:	d830      	bhi.n	8005722 <__ssputs_r+0x76>
 80056c0:	210c      	movs	r1, #12
 80056c2:	5e62      	ldrsh	r2, [r4, r1]
 80056c4:	2190      	movs	r1, #144	@ 0x90
 80056c6:	00c9      	lsls	r1, r1, #3
 80056c8:	420a      	tst	r2, r1
 80056ca:	d028      	beq.n	800571e <__ssputs_r+0x72>
 80056cc:	2003      	movs	r0, #3
 80056ce:	6921      	ldr	r1, [r4, #16]
 80056d0:	1a5b      	subs	r3, r3, r1
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6963      	ldr	r3, [r4, #20]
 80056d6:	4343      	muls	r3, r0
 80056d8:	9801      	ldr	r0, [sp, #4]
 80056da:	0fdd      	lsrs	r5, r3, #31
 80056dc:	18ed      	adds	r5, r5, r3
 80056de:	1c7b      	adds	r3, r7, #1
 80056e0:	181b      	adds	r3, r3, r0
 80056e2:	106d      	asrs	r5, r5, #1
 80056e4:	42ab      	cmp	r3, r5
 80056e6:	d900      	bls.n	80056ea <__ssputs_r+0x3e>
 80056e8:	001d      	movs	r5, r3
 80056ea:	0552      	lsls	r2, r2, #21
 80056ec:	d528      	bpl.n	8005740 <__ssputs_r+0x94>
 80056ee:	0029      	movs	r1, r5
 80056f0:	9802      	ldr	r0, [sp, #8]
 80056f2:	f7ff ff4b 	bl	800558c <_malloc_r>
 80056f6:	1e06      	subs	r6, r0, #0
 80056f8:	d02c      	beq.n	8005754 <__ssputs_r+0xa8>
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	6921      	ldr	r1, [r4, #16]
 80056fe:	f000 fae2 	bl	8005cc6 <memcpy>
 8005702:	89a2      	ldrh	r2, [r4, #12]
 8005704:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <__ssputs_r+0xbc>)
 8005706:	401a      	ands	r2, r3
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	4313      	orrs	r3, r2
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	9b01      	ldr	r3, [sp, #4]
 8005710:	6126      	str	r6, [r4, #16]
 8005712:	18f6      	adds	r6, r6, r3
 8005714:	6026      	str	r6, [r4, #0]
 8005716:	003e      	movs	r6, r7
 8005718:	6165      	str	r5, [r4, #20]
 800571a:	1aed      	subs	r5, r5, r3
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	42be      	cmp	r6, r7
 8005720:	d900      	bls.n	8005724 <__ssputs_r+0x78>
 8005722:	003e      	movs	r6, r7
 8005724:	0032      	movs	r2, r6
 8005726:	9903      	ldr	r1, [sp, #12]
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	f000 fa9b 	bl	8005c64 <memmove>
 800572e:	2000      	movs	r0, #0
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	1b9b      	subs	r3, r3, r6
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	199b      	adds	r3, r3, r6
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	b005      	add	sp, #20
 800573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005740:	002a      	movs	r2, r5
 8005742:	9802      	ldr	r0, [sp, #8]
 8005744:	f000 fac8 	bl	8005cd8 <_realloc_r>
 8005748:	1e06      	subs	r6, r0, #0
 800574a:	d1e0      	bne.n	800570e <__ssputs_r+0x62>
 800574c:	6921      	ldr	r1, [r4, #16]
 800574e:	9802      	ldr	r0, [sp, #8]
 8005750:	f7ff feb0 	bl	80054b4 <_free_r>
 8005754:	230c      	movs	r3, #12
 8005756:	2001      	movs	r0, #1
 8005758:	9a02      	ldr	r2, [sp, #8]
 800575a:	4240      	negs	r0, r0
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	89a2      	ldrh	r2, [r4, #12]
 8005760:	3334      	adds	r3, #52	@ 0x34
 8005762:	4313      	orrs	r3, r2
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	e7e9      	b.n	800573c <__ssputs_r+0x90>
 8005768:	fffffb7f 	.word	0xfffffb7f

0800576c <_svfiprintf_r>:
 800576c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576e:	b0a1      	sub	sp, #132	@ 0x84
 8005770:	9003      	str	r0, [sp, #12]
 8005772:	001d      	movs	r5, r3
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	000f      	movs	r7, r1
 8005778:	0016      	movs	r6, r2
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	d511      	bpl.n	80057a2 <_svfiprintf_r+0x36>
 800577e:	690b      	ldr	r3, [r1, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10e      	bne.n	80057a2 <_svfiprintf_r+0x36>
 8005784:	2140      	movs	r1, #64	@ 0x40
 8005786:	f7ff ff01 	bl	800558c <_malloc_r>
 800578a:	6038      	str	r0, [r7, #0]
 800578c:	6138      	str	r0, [r7, #16]
 800578e:	2800      	cmp	r0, #0
 8005790:	d105      	bne.n	800579e <_svfiprintf_r+0x32>
 8005792:	230c      	movs	r3, #12
 8005794:	9a03      	ldr	r2, [sp, #12]
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	2001      	movs	r0, #1
 800579a:	4240      	negs	r0, r0
 800579c:	e0cf      	b.n	800593e <_svfiprintf_r+0x1d2>
 800579e:	2340      	movs	r3, #64	@ 0x40
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	2300      	movs	r3, #0
 80057a4:	ac08      	add	r4, sp, #32
 80057a6:	6163      	str	r3, [r4, #20]
 80057a8:	3320      	adds	r3, #32
 80057aa:	7663      	strb	r3, [r4, #25]
 80057ac:	3310      	adds	r3, #16
 80057ae:	76a3      	strb	r3, [r4, #26]
 80057b0:	9507      	str	r5, [sp, #28]
 80057b2:	0035      	movs	r5, r6
 80057b4:	782b      	ldrb	r3, [r5, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <_svfiprintf_r+0x52>
 80057ba:	2b25      	cmp	r3, #37	@ 0x25
 80057bc:	d148      	bne.n	8005850 <_svfiprintf_r+0xe4>
 80057be:	1bab      	subs	r3, r5, r6
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	42b5      	cmp	r5, r6
 80057c4:	d00b      	beq.n	80057de <_svfiprintf_r+0x72>
 80057c6:	0032      	movs	r2, r6
 80057c8:	0039      	movs	r1, r7
 80057ca:	9803      	ldr	r0, [sp, #12]
 80057cc:	f7ff ff6e 	bl	80056ac <__ssputs_r>
 80057d0:	3001      	adds	r0, #1
 80057d2:	d100      	bne.n	80057d6 <_svfiprintf_r+0x6a>
 80057d4:	e0ae      	b.n	8005934 <_svfiprintf_r+0x1c8>
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	9a05      	ldr	r2, [sp, #20]
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	6163      	str	r3, [r4, #20]
 80057de:	782b      	ldrb	r3, [r5, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d100      	bne.n	80057e6 <_svfiprintf_r+0x7a>
 80057e4:	e0a6      	b.n	8005934 <_svfiprintf_r+0x1c8>
 80057e6:	2201      	movs	r2, #1
 80057e8:	2300      	movs	r3, #0
 80057ea:	4252      	negs	r2, r2
 80057ec:	6062      	str	r2, [r4, #4]
 80057ee:	a904      	add	r1, sp, #16
 80057f0:	3254      	adds	r2, #84	@ 0x54
 80057f2:	1852      	adds	r2, r2, r1
 80057f4:	1c6e      	adds	r6, r5, #1
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	60e3      	str	r3, [r4, #12]
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	7013      	strb	r3, [r2, #0]
 80057fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005800:	4b54      	ldr	r3, [pc, #336]	@ (8005954 <_svfiprintf_r+0x1e8>)
 8005802:	2205      	movs	r2, #5
 8005804:	0018      	movs	r0, r3
 8005806:	7831      	ldrb	r1, [r6, #0]
 8005808:	9305      	str	r3, [sp, #20]
 800580a:	f000 fa51 	bl	8005cb0 <memchr>
 800580e:	1c75      	adds	r5, r6, #1
 8005810:	2800      	cmp	r0, #0
 8005812:	d11f      	bne.n	8005854 <_svfiprintf_r+0xe8>
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	06d3      	lsls	r3, r2, #27
 8005818:	d504      	bpl.n	8005824 <_svfiprintf_r+0xb8>
 800581a:	2353      	movs	r3, #83	@ 0x53
 800581c:	a904      	add	r1, sp, #16
 800581e:	185b      	adds	r3, r3, r1
 8005820:	2120      	movs	r1, #32
 8005822:	7019      	strb	r1, [r3, #0]
 8005824:	0713      	lsls	r3, r2, #28
 8005826:	d504      	bpl.n	8005832 <_svfiprintf_r+0xc6>
 8005828:	2353      	movs	r3, #83	@ 0x53
 800582a:	a904      	add	r1, sp, #16
 800582c:	185b      	adds	r3, r3, r1
 800582e:	212b      	movs	r1, #43	@ 0x2b
 8005830:	7019      	strb	r1, [r3, #0]
 8005832:	7833      	ldrb	r3, [r6, #0]
 8005834:	2b2a      	cmp	r3, #42	@ 0x2a
 8005836:	d016      	beq.n	8005866 <_svfiprintf_r+0xfa>
 8005838:	0035      	movs	r5, r6
 800583a:	2100      	movs	r1, #0
 800583c:	200a      	movs	r0, #10
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	782a      	ldrb	r2, [r5, #0]
 8005842:	1c6e      	adds	r6, r5, #1
 8005844:	3a30      	subs	r2, #48	@ 0x30
 8005846:	2a09      	cmp	r2, #9
 8005848:	d950      	bls.n	80058ec <_svfiprintf_r+0x180>
 800584a:	2900      	cmp	r1, #0
 800584c:	d111      	bne.n	8005872 <_svfiprintf_r+0x106>
 800584e:	e017      	b.n	8005880 <_svfiprintf_r+0x114>
 8005850:	3501      	adds	r5, #1
 8005852:	e7af      	b.n	80057b4 <_svfiprintf_r+0x48>
 8005854:	9b05      	ldr	r3, [sp, #20]
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	1ac0      	subs	r0, r0, r3
 800585a:	2301      	movs	r3, #1
 800585c:	4083      	lsls	r3, r0
 800585e:	4313      	orrs	r3, r2
 8005860:	002e      	movs	r6, r5
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	e7cc      	b.n	8005800 <_svfiprintf_r+0x94>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	1d19      	adds	r1, r3, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	9107      	str	r1, [sp, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	db01      	blt.n	8005876 <_svfiprintf_r+0x10a>
 8005872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005874:	e004      	b.n	8005880 <_svfiprintf_r+0x114>
 8005876:	425b      	negs	r3, r3
 8005878:	60e3      	str	r3, [r4, #12]
 800587a:	2302      	movs	r3, #2
 800587c:	4313      	orrs	r3, r2
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	782b      	ldrb	r3, [r5, #0]
 8005882:	2b2e      	cmp	r3, #46	@ 0x2e
 8005884:	d10c      	bne.n	80058a0 <_svfiprintf_r+0x134>
 8005886:	786b      	ldrb	r3, [r5, #1]
 8005888:	2b2a      	cmp	r3, #42	@ 0x2a
 800588a:	d134      	bne.n	80058f6 <_svfiprintf_r+0x18a>
 800588c:	9b07      	ldr	r3, [sp, #28]
 800588e:	3502      	adds	r5, #2
 8005890:	1d1a      	adds	r2, r3, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	9207      	str	r2, [sp, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	da01      	bge.n	800589e <_svfiprintf_r+0x132>
 800589a:	2301      	movs	r3, #1
 800589c:	425b      	negs	r3, r3
 800589e:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a0:	4e2d      	ldr	r6, [pc, #180]	@ (8005958 <_svfiprintf_r+0x1ec>)
 80058a2:	2203      	movs	r2, #3
 80058a4:	0030      	movs	r0, r6
 80058a6:	7829      	ldrb	r1, [r5, #0]
 80058a8:	f000 fa02 	bl	8005cb0 <memchr>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d006      	beq.n	80058be <_svfiprintf_r+0x152>
 80058b0:	2340      	movs	r3, #64	@ 0x40
 80058b2:	1b80      	subs	r0, r0, r6
 80058b4:	4083      	lsls	r3, r0
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	3501      	adds	r5, #1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	7829      	ldrb	r1, [r5, #0]
 80058c0:	2206      	movs	r2, #6
 80058c2:	4826      	ldr	r0, [pc, #152]	@ (800595c <_svfiprintf_r+0x1f0>)
 80058c4:	1c6e      	adds	r6, r5, #1
 80058c6:	7621      	strb	r1, [r4, #24]
 80058c8:	f000 f9f2 	bl	8005cb0 <memchr>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d038      	beq.n	8005942 <_svfiprintf_r+0x1d6>
 80058d0:	4b23      	ldr	r3, [pc, #140]	@ (8005960 <_svfiprintf_r+0x1f4>)
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d122      	bne.n	800591c <_svfiprintf_r+0x1b0>
 80058d6:	2207      	movs	r2, #7
 80058d8:	9b07      	ldr	r3, [sp, #28]
 80058da:	3307      	adds	r3, #7
 80058dc:	4393      	bics	r3, r2
 80058de:	3308      	adds	r3, #8
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	6963      	ldr	r3, [r4, #20]
 80058e4:	9a04      	ldr	r2, [sp, #16]
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	6163      	str	r3, [r4, #20]
 80058ea:	e762      	b.n	80057b2 <_svfiprintf_r+0x46>
 80058ec:	4343      	muls	r3, r0
 80058ee:	0035      	movs	r5, r6
 80058f0:	2101      	movs	r1, #1
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	e7a4      	b.n	8005840 <_svfiprintf_r+0xd4>
 80058f6:	2300      	movs	r3, #0
 80058f8:	200a      	movs	r0, #10
 80058fa:	0019      	movs	r1, r3
 80058fc:	3501      	adds	r5, #1
 80058fe:	6063      	str	r3, [r4, #4]
 8005900:	782a      	ldrb	r2, [r5, #0]
 8005902:	1c6e      	adds	r6, r5, #1
 8005904:	3a30      	subs	r2, #48	@ 0x30
 8005906:	2a09      	cmp	r2, #9
 8005908:	d903      	bls.n	8005912 <_svfiprintf_r+0x1a6>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c8      	beq.n	80058a0 <_svfiprintf_r+0x134>
 800590e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005910:	e7c6      	b.n	80058a0 <_svfiprintf_r+0x134>
 8005912:	4341      	muls	r1, r0
 8005914:	0035      	movs	r5, r6
 8005916:	2301      	movs	r3, #1
 8005918:	1889      	adds	r1, r1, r2
 800591a:	e7f1      	b.n	8005900 <_svfiprintf_r+0x194>
 800591c:	aa07      	add	r2, sp, #28
 800591e:	9200      	str	r2, [sp, #0]
 8005920:	0021      	movs	r1, r4
 8005922:	003a      	movs	r2, r7
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <_svfiprintf_r+0x1f8>)
 8005926:	9803      	ldr	r0, [sp, #12]
 8005928:	e000      	b.n	800592c <_svfiprintf_r+0x1c0>
 800592a:	bf00      	nop
 800592c:	9004      	str	r0, [sp, #16]
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	3301      	adds	r3, #1
 8005932:	d1d6      	bne.n	80058e2 <_svfiprintf_r+0x176>
 8005934:	89bb      	ldrh	r3, [r7, #12]
 8005936:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005938:	065b      	lsls	r3, r3, #25
 800593a:	d500      	bpl.n	800593e <_svfiprintf_r+0x1d2>
 800593c:	e72c      	b.n	8005798 <_svfiprintf_r+0x2c>
 800593e:	b021      	add	sp, #132	@ 0x84
 8005940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005942:	aa07      	add	r2, sp, #28
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	0021      	movs	r1, r4
 8005948:	003a      	movs	r2, r7
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <_svfiprintf_r+0x1f8>)
 800594c:	9803      	ldr	r0, [sp, #12]
 800594e:	f000 f87b 	bl	8005a48 <_printf_i>
 8005952:	e7eb      	b.n	800592c <_svfiprintf_r+0x1c0>
 8005954:	08005e70 	.word	0x08005e70
 8005958:	08005e76 	.word	0x08005e76
 800595c:	08005e7a 	.word	0x08005e7a
 8005960:	00000000 	.word	0x00000000
 8005964:	080056ad 	.word	0x080056ad

08005968 <_printf_common>:
 8005968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596a:	0016      	movs	r6, r2
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	688a      	ldr	r2, [r1, #8]
 8005970:	690b      	ldr	r3, [r1, #16]
 8005972:	000c      	movs	r4, r1
 8005974:	9000      	str	r0, [sp, #0]
 8005976:	4293      	cmp	r3, r2
 8005978:	da00      	bge.n	800597c <_printf_common+0x14>
 800597a:	0013      	movs	r3, r2
 800597c:	0022      	movs	r2, r4
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	3243      	adds	r2, #67	@ 0x43
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	2a00      	cmp	r2, #0
 8005986:	d001      	beq.n	800598c <_printf_common+0x24>
 8005988:	3301      	adds	r3, #1
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	069b      	lsls	r3, r3, #26
 8005990:	d502      	bpl.n	8005998 <_printf_common+0x30>
 8005992:	6833      	ldr	r3, [r6, #0]
 8005994:	3302      	adds	r3, #2
 8005996:	6033      	str	r3, [r6, #0]
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	2306      	movs	r3, #6
 800599c:	0015      	movs	r5, r2
 800599e:	401d      	ands	r5, r3
 80059a0:	421a      	tst	r2, r3
 80059a2:	d027      	beq.n	80059f4 <_printf_common+0x8c>
 80059a4:	0023      	movs	r3, r4
 80059a6:	3343      	adds	r3, #67	@ 0x43
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	4193      	sbcs	r3, r2
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	0692      	lsls	r2, r2, #26
 80059b2:	d430      	bmi.n	8005a16 <_printf_common+0xae>
 80059b4:	0022      	movs	r2, r4
 80059b6:	9901      	ldr	r1, [sp, #4]
 80059b8:	9800      	ldr	r0, [sp, #0]
 80059ba:	9d08      	ldr	r5, [sp, #32]
 80059bc:	3243      	adds	r2, #67	@ 0x43
 80059be:	47a8      	blx	r5
 80059c0:	3001      	adds	r0, #1
 80059c2:	d025      	beq.n	8005a10 <_printf_common+0xa8>
 80059c4:	2206      	movs	r2, #6
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	2500      	movs	r5, #0
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d105      	bne.n	80059dc <_printf_common+0x74>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	68e5      	ldr	r5, [r4, #12]
 80059d4:	1aed      	subs	r5, r5, r3
 80059d6:	43eb      	mvns	r3, r5
 80059d8:	17db      	asrs	r3, r3, #31
 80059da:	401d      	ands	r5, r3
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	6922      	ldr	r2, [r4, #16]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	dd01      	ble.n	80059e8 <_printf_common+0x80>
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	18ed      	adds	r5, r5, r3
 80059e8:	2600      	movs	r6, #0
 80059ea:	42b5      	cmp	r5, r6
 80059ec:	d120      	bne.n	8005a30 <_printf_common+0xc8>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e010      	b.n	8005a14 <_printf_common+0xac>
 80059f2:	3501      	adds	r5, #1
 80059f4:	68e3      	ldr	r3, [r4, #12]
 80059f6:	6832      	ldr	r2, [r6, #0]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	42ab      	cmp	r3, r5
 80059fc:	ddd2      	ble.n	80059a4 <_printf_common+0x3c>
 80059fe:	0022      	movs	r2, r4
 8005a00:	2301      	movs	r3, #1
 8005a02:	9901      	ldr	r1, [sp, #4]
 8005a04:	9800      	ldr	r0, [sp, #0]
 8005a06:	9f08      	ldr	r7, [sp, #32]
 8005a08:	3219      	adds	r2, #25
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d1f0      	bne.n	80059f2 <_printf_common+0x8a>
 8005a10:	2001      	movs	r0, #1
 8005a12:	4240      	negs	r0, r0
 8005a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a16:	2030      	movs	r0, #48	@ 0x30
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	3143      	adds	r1, #67	@ 0x43
 8005a1c:	7008      	strb	r0, [r1, #0]
 8005a1e:	0021      	movs	r1, r4
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	3145      	adds	r1, #69	@ 0x45
 8005a24:	7809      	ldrb	r1, [r1, #0]
 8005a26:	18a2      	adds	r2, r4, r2
 8005a28:	3243      	adds	r2, #67	@ 0x43
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	7011      	strb	r1, [r2, #0]
 8005a2e:	e7c1      	b.n	80059b4 <_printf_common+0x4c>
 8005a30:	0022      	movs	r2, r4
 8005a32:	2301      	movs	r3, #1
 8005a34:	9901      	ldr	r1, [sp, #4]
 8005a36:	9800      	ldr	r0, [sp, #0]
 8005a38:	9f08      	ldr	r7, [sp, #32]
 8005a3a:	321a      	adds	r2, #26
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d0e6      	beq.n	8005a10 <_printf_common+0xa8>
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7d1      	b.n	80059ea <_printf_common+0x82>
	...

08005a48 <_printf_i>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	@ 0x2c
 8005a4c:	9206      	str	r2, [sp, #24]
 8005a4e:	000a      	movs	r2, r1
 8005a50:	3243      	adds	r2, #67	@ 0x43
 8005a52:	9307      	str	r3, [sp, #28]
 8005a54:	9005      	str	r0, [sp, #20]
 8005a56:	9203      	str	r2, [sp, #12]
 8005a58:	7e0a      	ldrb	r2, [r1, #24]
 8005a5a:	000c      	movs	r4, r1
 8005a5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a5e:	2a78      	cmp	r2, #120	@ 0x78
 8005a60:	d809      	bhi.n	8005a76 <_printf_i+0x2e>
 8005a62:	2a62      	cmp	r2, #98	@ 0x62
 8005a64:	d80b      	bhi.n	8005a7e <_printf_i+0x36>
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d100      	bne.n	8005a6c <_printf_i+0x24>
 8005a6a:	e0bc      	b.n	8005be6 <_printf_i+0x19e>
 8005a6c:	497b      	ldr	r1, [pc, #492]	@ (8005c5c <_printf_i+0x214>)
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	2a58      	cmp	r2, #88	@ 0x58
 8005a72:	d100      	bne.n	8005a76 <_printf_i+0x2e>
 8005a74:	e090      	b.n	8005b98 <_printf_i+0x150>
 8005a76:	0025      	movs	r5, r4
 8005a78:	3542      	adds	r5, #66	@ 0x42
 8005a7a:	702a      	strb	r2, [r5, #0]
 8005a7c:	e022      	b.n	8005ac4 <_printf_i+0x7c>
 8005a7e:	0010      	movs	r0, r2
 8005a80:	3863      	subs	r0, #99	@ 0x63
 8005a82:	2815      	cmp	r0, #21
 8005a84:	d8f7      	bhi.n	8005a76 <_printf_i+0x2e>
 8005a86:	f7fa fb3f 	bl	8000108 <__gnu_thumb1_case_shi>
 8005a8a:	0016      	.short	0x0016
 8005a8c:	fff6001f 	.word	0xfff6001f
 8005a90:	fff6fff6 	.word	0xfff6fff6
 8005a94:	001ffff6 	.word	0x001ffff6
 8005a98:	fff6fff6 	.word	0xfff6fff6
 8005a9c:	fff6fff6 	.word	0xfff6fff6
 8005aa0:	003600a1 	.word	0x003600a1
 8005aa4:	fff60080 	.word	0xfff60080
 8005aa8:	00b2fff6 	.word	0x00b2fff6
 8005aac:	0036fff6 	.word	0x0036fff6
 8005ab0:	fff6fff6 	.word	0xfff6fff6
 8005ab4:	0084      	.short	0x0084
 8005ab6:	0025      	movs	r5, r4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	3542      	adds	r5, #66	@ 0x42
 8005abc:	1d11      	adds	r1, r2, #4
 8005abe:	6019      	str	r1, [r3, #0]
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	702b      	strb	r3, [r5, #0]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0a0      	b.n	8005c0a <_printf_i+0x1c2>
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	6809      	ldr	r1, [r1, #0]
 8005acc:	1d02      	adds	r2, r0, #4
 8005ace:	060d      	lsls	r5, r1, #24
 8005ad0:	d50b      	bpl.n	8005aea <_printf_i+0xa2>
 8005ad2:	6806      	ldr	r6, [r0, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	da03      	bge.n	8005ae2 <_printf_i+0x9a>
 8005ada:	232d      	movs	r3, #45	@ 0x2d
 8005adc:	9a03      	ldr	r2, [sp, #12]
 8005ade:	4276      	negs	r6, r6
 8005ae0:	7013      	strb	r3, [r2, #0]
 8005ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8005c5c <_printf_i+0x214>)
 8005ae4:	270a      	movs	r7, #10
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	e018      	b.n	8005b1c <_printf_i+0xd4>
 8005aea:	6806      	ldr	r6, [r0, #0]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	0649      	lsls	r1, r1, #25
 8005af0:	d5f1      	bpl.n	8005ad6 <_printf_i+0x8e>
 8005af2:	b236      	sxth	r6, r6
 8005af4:	e7ef      	b.n	8005ad6 <_printf_i+0x8e>
 8005af6:	6808      	ldr	r0, [r1, #0]
 8005af8:	6819      	ldr	r1, [r3, #0]
 8005afa:	c940      	ldmia	r1!, {r6}
 8005afc:	0605      	lsls	r5, r0, #24
 8005afe:	d402      	bmi.n	8005b06 <_printf_i+0xbe>
 8005b00:	0640      	lsls	r0, r0, #25
 8005b02:	d500      	bpl.n	8005b06 <_printf_i+0xbe>
 8005b04:	b2b6      	uxth	r6, r6
 8005b06:	6019      	str	r1, [r3, #0]
 8005b08:	4b54      	ldr	r3, [pc, #336]	@ (8005c5c <_printf_i+0x214>)
 8005b0a:	270a      	movs	r7, #10
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005b10:	d100      	bne.n	8005b14 <_printf_i+0xcc>
 8005b12:	3f02      	subs	r7, #2
 8005b14:	0023      	movs	r3, r4
 8005b16:	2200      	movs	r2, #0
 8005b18:	3343      	adds	r3, #67	@ 0x43
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db03      	blt.n	8005b2c <_printf_i+0xe4>
 8005b24:	2104      	movs	r1, #4
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	438a      	bics	r2, r1
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	d102      	bne.n	8005b36 <_printf_i+0xee>
 8005b30:	9d03      	ldr	r5, [sp, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <_printf_i+0x108>
 8005b36:	9d03      	ldr	r5, [sp, #12]
 8005b38:	0030      	movs	r0, r6
 8005b3a:	0039      	movs	r1, r7
 8005b3c:	f7fa fb74 	bl	8000228 <__aeabi_uidivmod>
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	3d01      	subs	r5, #1
 8005b44:	5c5b      	ldrb	r3, [r3, r1]
 8005b46:	702b      	strb	r3, [r5, #0]
 8005b48:	0033      	movs	r3, r6
 8005b4a:	0006      	movs	r6, r0
 8005b4c:	429f      	cmp	r7, r3
 8005b4e:	d9f3      	bls.n	8005b38 <_printf_i+0xf0>
 8005b50:	2f08      	cmp	r7, #8
 8005b52:	d109      	bne.n	8005b68 <_printf_i+0x120>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07db      	lsls	r3, r3, #31
 8005b58:	d506      	bpl.n	8005b68 <_printf_i+0x120>
 8005b5a:	6862      	ldr	r2, [r4, #4]
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	dc02      	bgt.n	8005b68 <_printf_i+0x120>
 8005b62:	2330      	movs	r3, #48	@ 0x30
 8005b64:	3d01      	subs	r5, #1
 8005b66:	702b      	strb	r3, [r5, #0]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1b5b      	subs	r3, r3, r5
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	9b07      	ldr	r3, [sp, #28]
 8005b70:	0021      	movs	r1, r4
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	9805      	ldr	r0, [sp, #20]
 8005b76:	9b06      	ldr	r3, [sp, #24]
 8005b78:	aa09      	add	r2, sp, #36	@ 0x24
 8005b7a:	f7ff fef5 	bl	8005968 <_printf_common>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d148      	bne.n	8005c14 <_printf_i+0x1cc>
 8005b82:	2001      	movs	r0, #1
 8005b84:	4240      	negs	r0, r0
 8005b86:	b00b      	add	sp, #44	@ 0x2c
 8005b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	6809      	ldr	r1, [r1, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	2278      	movs	r2, #120	@ 0x78
 8005b94:	4932      	ldr	r1, [pc, #200]	@ (8005c60 <_printf_i+0x218>)
 8005b96:	9104      	str	r1, [sp, #16]
 8005b98:	0021      	movs	r1, r4
 8005b9a:	3145      	adds	r1, #69	@ 0x45
 8005b9c:	700a      	strb	r2, [r1, #0]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	c940      	ldmia	r1!, {r6}
 8005ba4:	0610      	lsls	r0, r2, #24
 8005ba6:	d402      	bmi.n	8005bae <_printf_i+0x166>
 8005ba8:	0650      	lsls	r0, r2, #25
 8005baa:	d500      	bpl.n	8005bae <_printf_i+0x166>
 8005bac:	b2b6      	uxth	r6, r6
 8005bae:	6019      	str	r1, [r3, #0]
 8005bb0:	07d3      	lsls	r3, r2, #31
 8005bb2:	d502      	bpl.n	8005bba <_printf_i+0x172>
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d001      	beq.n	8005bc2 <_printf_i+0x17a>
 8005bbe:	2710      	movs	r7, #16
 8005bc0:	e7a8      	b.n	8005b14 <_printf_i+0xcc>
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	4393      	bics	r3, r2
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e7f8      	b.n	8005bbe <_printf_i+0x176>
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	680d      	ldr	r5, [r1, #0]
 8005bd0:	1d10      	adds	r0, r2, #4
 8005bd2:	6949      	ldr	r1, [r1, #20]
 8005bd4:	6018      	str	r0, [r3, #0]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	062e      	lsls	r6, r5, #24
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0x198>
 8005bdc:	6019      	str	r1, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <_printf_i+0x19e>
 8005be0:	066d      	lsls	r5, r5, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0x194>
 8005be4:	8019      	strh	r1, [r3, #0]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9d03      	ldr	r5, [sp, #12]
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	e7bf      	b.n	8005b6e <_printf_i+0x126>
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	1d11      	adds	r1, r2, #4
 8005bf2:	6019      	str	r1, [r3, #0]
 8005bf4:	6815      	ldr	r5, [r2, #0]
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	0028      	movs	r0, r5
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	f000 f858 	bl	8005cb0 <memchr>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d001      	beq.n	8005c08 <_printf_i+0x1c0>
 8005c04:	1b40      	subs	r0, r0, r5
 8005c06:	6060      	str	r0, [r4, #4]
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9a03      	ldr	r2, [sp, #12]
 8005c10:	7013      	strb	r3, [r2, #0]
 8005c12:	e7ac      	b.n	8005b6e <_printf_i+0x126>
 8005c14:	002a      	movs	r2, r5
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	9906      	ldr	r1, [sp, #24]
 8005c1a:	9805      	ldr	r0, [sp, #20]
 8005c1c:	9d07      	ldr	r5, [sp, #28]
 8005c1e:	47a8      	blx	r5
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0ae      	beq.n	8005b82 <_printf_i+0x13a>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d415      	bmi.n	8005c56 <_printf_i+0x20e>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2c:	68e0      	ldr	r0, [r4, #12]
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	daa9      	bge.n	8005b86 <_printf_i+0x13e>
 8005c32:	0018      	movs	r0, r3
 8005c34:	e7a7      	b.n	8005b86 <_printf_i+0x13e>
 8005c36:	0022      	movs	r2, r4
 8005c38:	2301      	movs	r3, #1
 8005c3a:	9906      	ldr	r1, [sp, #24]
 8005c3c:	9805      	ldr	r0, [sp, #20]
 8005c3e:	9e07      	ldr	r6, [sp, #28]
 8005c40:	3219      	adds	r2, #25
 8005c42:	47b0      	blx	r6
 8005c44:	3001      	adds	r0, #1
 8005c46:	d09c      	beq.n	8005b82 <_printf_i+0x13a>
 8005c48:	3501      	adds	r5, #1
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dcf0      	bgt.n	8005c36 <_printf_i+0x1ee>
 8005c54:	e7e9      	b.n	8005c2a <_printf_i+0x1e2>
 8005c56:	2500      	movs	r5, #0
 8005c58:	e7f7      	b.n	8005c4a <_printf_i+0x202>
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	08005e81 	.word	0x08005e81
 8005c60:	08005e92 	.word	0x08005e92

08005c64 <memmove>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	4288      	cmp	r0, r1
 8005c68:	d806      	bhi.n	8005c78 <memmove+0x14>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d008      	beq.n	8005c82 <memmove+0x1e>
 8005c70:	5ccc      	ldrb	r4, [r1, r3]
 8005c72:	54c4      	strb	r4, [r0, r3]
 8005c74:	3301      	adds	r3, #1
 8005c76:	e7f9      	b.n	8005c6c <memmove+0x8>
 8005c78:	188b      	adds	r3, r1, r2
 8005c7a:	4298      	cmp	r0, r3
 8005c7c:	d2f5      	bcs.n	8005c6a <memmove+0x6>
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	d200      	bcs.n	8005c84 <memmove+0x20>
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	5c8b      	ldrb	r3, [r1, r2]
 8005c86:	5483      	strb	r3, [r0, r2]
 8005c88:	e7f9      	b.n	8005c7e <memmove+0x1a>
	...

08005c8c <_sbrk_r>:
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	4d06      	ldr	r5, [pc, #24]	@ (8005cac <_sbrk_r+0x20>)
 8005c92:	0004      	movs	r4, r0
 8005c94:	0008      	movs	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fc fcc6 	bl	8002628 <_sbrk>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_sbrk_r+0x1c>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d000      	beq.n	8005ca8 <_sbrk_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	200003a0 	.word	0x200003a0

08005cb0 <memchr>:
 8005cb0:	b2c9      	uxtb	r1, r1
 8005cb2:	1882      	adds	r2, r0, r2
 8005cb4:	4290      	cmp	r0, r2
 8005cb6:	d101      	bne.n	8005cbc <memchr+0xc>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	4770      	bx	lr
 8005cbc:	7803      	ldrb	r3, [r0, #0]
 8005cbe:	428b      	cmp	r3, r1
 8005cc0:	d0fb      	beq.n	8005cba <memchr+0xa>
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	e7f6      	b.n	8005cb4 <memchr+0x4>

08005cc6 <memcpy>:
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d100      	bne.n	8005cd0 <memcpy+0xa>
 8005cce:	bd10      	pop	{r4, pc}
 8005cd0:	5ccc      	ldrb	r4, [r1, r3]
 8005cd2:	54c4      	strb	r4, [r0, r3]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	e7f8      	b.n	8005cca <memcpy+0x4>

08005cd8 <_realloc_r>:
 8005cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cda:	0006      	movs	r6, r0
 8005cdc:	000c      	movs	r4, r1
 8005cde:	0015      	movs	r5, r2
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d105      	bne.n	8005cf0 <_realloc_r+0x18>
 8005ce4:	0011      	movs	r1, r2
 8005ce6:	f7ff fc51 	bl	800558c <_malloc_r>
 8005cea:	0004      	movs	r4, r0
 8005cec:	0020      	movs	r0, r4
 8005cee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d103      	bne.n	8005cfc <_realloc_r+0x24>
 8005cf4:	f7ff fbde 	bl	80054b4 <_free_r>
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	e7f7      	b.n	8005cec <_realloc_r+0x14>
 8005cfc:	f000 f81b 	bl	8005d36 <_malloc_usable_size_r>
 8005d00:	0007      	movs	r7, r0
 8005d02:	4285      	cmp	r5, r0
 8005d04:	d802      	bhi.n	8005d0c <_realloc_r+0x34>
 8005d06:	0843      	lsrs	r3, r0, #1
 8005d08:	42ab      	cmp	r3, r5
 8005d0a:	d3ef      	bcc.n	8005cec <_realloc_r+0x14>
 8005d0c:	0029      	movs	r1, r5
 8005d0e:	0030      	movs	r0, r6
 8005d10:	f7ff fc3c 	bl	800558c <_malloc_r>
 8005d14:	9001      	str	r0, [sp, #4]
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d0ee      	beq.n	8005cf8 <_realloc_r+0x20>
 8005d1a:	002a      	movs	r2, r5
 8005d1c:	42bd      	cmp	r5, r7
 8005d1e:	d900      	bls.n	8005d22 <_realloc_r+0x4a>
 8005d20:	003a      	movs	r2, r7
 8005d22:	0021      	movs	r1, r4
 8005d24:	9801      	ldr	r0, [sp, #4]
 8005d26:	f7ff ffce 	bl	8005cc6 <memcpy>
 8005d2a:	0021      	movs	r1, r4
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	f7ff fbc1 	bl	80054b4 <_free_r>
 8005d32:	9c01      	ldr	r4, [sp, #4]
 8005d34:	e7da      	b.n	8005cec <_realloc_r+0x14>

08005d36 <_malloc_usable_size_r>:
 8005d36:	1f0b      	subs	r3, r1, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	1f18      	subs	r0, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da01      	bge.n	8005d44 <_malloc_usable_size_r+0xe>
 8005d40:	580b      	ldr	r3, [r1, r0]
 8005d42:	18c0      	adds	r0, r0, r3
 8005d44:	4770      	bx	lr
	...

08005d48 <round>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc8 <round+0x80>)
 8005d4c:	004d      	lsls	r5, r1, #1
 8005d4e:	0d6d      	lsrs	r5, r5, #21
 8005d50:	18eb      	adds	r3, r5, r3
 8005d52:	000a      	movs	r2, r1
 8005d54:	0004      	movs	r4, r0
 8005d56:	2b13      	cmp	r3, #19
 8005d58:	dc18      	bgt.n	8005d8c <round+0x44>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da0a      	bge.n	8005d74 <round+0x2c>
 8005d5e:	0fc9      	lsrs	r1, r1, #31
 8005d60:	07c9      	lsls	r1, r1, #31
 8005d62:	000a      	movs	r2, r1
 8005d64:	3301      	adds	r3, #1
 8005d66:	d101      	bne.n	8005d6c <round+0x24>
 8005d68:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <round+0x84>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	0011      	movs	r1, r2
 8005d70:	0018      	movs	r0, r3
 8005d72:	e015      	b.n	8005da0 <round+0x58>
 8005d74:	4d16      	ldr	r5, [pc, #88]	@ (8005dd0 <round+0x88>)
 8005d76:	000e      	movs	r6, r1
 8005d78:	411d      	asrs	r5, r3
 8005d7a:	402e      	ands	r6, r5
 8005d7c:	4334      	orrs	r4, r6
 8005d7e:	d00f      	beq.n	8005da0 <round+0x58>
 8005d80:	2180      	movs	r1, #128	@ 0x80
 8005d82:	0309      	lsls	r1, r1, #12
 8005d84:	4119      	asrs	r1, r3
 8005d86:	188a      	adds	r2, r1, r2
 8005d88:	43aa      	bics	r2, r5
 8005d8a:	e7ef      	b.n	8005d6c <round+0x24>
 8005d8c:	2b33      	cmp	r3, #51	@ 0x33
 8005d8e:	dd08      	ble.n	8005da2 <round+0x5a>
 8005d90:	2280      	movs	r2, #128	@ 0x80
 8005d92:	00d2      	lsls	r2, r2, #3
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d103      	bne.n	8005da0 <round+0x58>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	000b      	movs	r3, r1
 8005d9c:	f7fa fb34 	bl	8000408 <__aeabi_dadd>
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	4e0c      	ldr	r6, [pc, #48]	@ (8005dd4 <round+0x8c>)
 8005da4:	19ae      	adds	r6, r5, r6
 8005da6:	2501      	movs	r5, #1
 8005da8:	426d      	negs	r5, r5
 8005daa:	40f5      	lsrs	r5, r6
 8005dac:	4228      	tst	r0, r5
 8005dae:	d0f7      	beq.n	8005da0 <round+0x58>
 8005db0:	2133      	movs	r1, #51	@ 0x33
 8005db2:	1ac9      	subs	r1, r1, r3
 8005db4:	2301      	movs	r3, #1
 8005db6:	408b      	lsls	r3, r1
 8005db8:	181b      	adds	r3, r3, r0
 8005dba:	4283      	cmp	r3, r0
 8005dbc:	41a4      	sbcs	r4, r4
 8005dbe:	4264      	negs	r4, r4
 8005dc0:	1912      	adds	r2, r2, r4
 8005dc2:	43ab      	bics	r3, r5
 8005dc4:	e7d3      	b.n	8005d6e <round+0x26>
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	fffffc01 	.word	0xfffffc01
 8005dcc:	3ff00000 	.word	0x3ff00000
 8005dd0:	000fffff 	.word	0x000fffff
 8005dd4:	fffffbed 	.word	0xfffffbed

08005dd8 <_init>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	46c0      	nop			@ (mov r8, r8)
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr

08005de4 <_fini>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dea:	bc08      	pop	{r3}
 8005dec:	469e      	mov	lr, r3
 8005dee:	4770      	bx	lr
