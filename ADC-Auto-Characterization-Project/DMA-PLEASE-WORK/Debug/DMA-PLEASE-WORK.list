
DMA-PLEASE-WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800374c  0800374c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800374c  0800374c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003754  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000005c  080037b0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080037b0  000053d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084d0  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001932  00000000  00000000  0000d555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000603  00000000  00000000  0000f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019975  00000000  00000000  0000fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a92a  00000000  00000000  000295e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009666e  00000000  00000000  00033f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ec  00000000  00000000  000ca5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000ccaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000005c 	.word	0x2000005c
 8000204:	00000000 	.word	0x00000000
 8000208:	080036c4 	.word	0x080036c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000060 	.word	0x20000060
 8000224:	080036c4 	.word	0x080036c4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2iz>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d215      	bcs.n	800082a <__aeabi_d2iz+0x36>
 80007fe:	d511      	bpl.n	8000824 <__aeabi_d2iz+0x30>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d912      	bls.n	8000830 <__aeabi_d2iz+0x3c>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081a:	fa23 f002 	lsr.w	r0, r3, r2
 800081e:	bf18      	it	ne
 8000820:	4240      	negne	r0, r0
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d105      	bne.n	800083c <__aeabi_d2iz+0x48>
 8000830:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000834:	bf08      	it	eq
 8000836:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800083a:	4770      	bx	lr
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	b097      	sub	sp, #92	@ 0x5c
 8000848:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fb6f 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f855 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f90d 	bl	8000a70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000856:	f000 f8a3 	bl	80009a0 <MX_ADC1_Init>
  MX_UART5_Init();
 800085a:	f000 f8df 	bl	8000a1c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, sizeof(ADC_BUFFER_LENGTH));
 800085e:	2204      	movs	r2, #4
 8000860:	4922      	ldr	r1, [pc, #136]	@ (80008ec <main+0xa8>)
 8000862:	4823      	ldr	r0, [pc, #140]	@ (80008f0 <main+0xac>)
 8000864:	f000 fcd2 	bl	800120c <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */

    // This function waits until 's' is received on UART to continue
    // This way, from the Python script we can command the STM32 chip operate only when we tell it to
    Continue_On_UART_Receive(huart5);
 8000868:	4e22      	ldr	r6, [pc, #136]	@ (80008f4 <main+0xb0>)
 800086a:	466d      	mov	r5, sp
 800086c:	f106 0410 	add.w	r4, r6, #16
 8000870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800087a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800087c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000880:	e885 0003 	stmia.w	r5, {r0, r1}
 8000884:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000888:	f000 f93c 	bl	8000b04 <Continue_On_UART_Receive>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle the LED high when we're collecting or sending values
 800088c:	2104      	movs	r1, #4
 800088e:	481a      	ldr	r0, [pc, #104]	@ (80008f8 <main+0xb4>)
 8000890:	f001 facc 	bl	8001e2c <HAL_GPIO_TogglePin>

    int adcValuesAveraged = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
    int adcValuesADCAdjusted = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
    int adcValuesCurrentAdjusted = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
    Get_Averaged_ADC_Values(&adcValuesAveraged, &adcValuesADCAdjusted, &adcValuesCurrentAdjusted);
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	f107 0108 	add.w	r1, r7, #8
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f97c 	bl	8000ba8 <Get_Averaged_ADC_Values>

    Send_ADC_Values_Over_UART(huart5, adcValuesAveraged, adcValuesADCAdjusted, adcValuesCurrentAdjusted);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	4e0f      	ldr	r6, [pc, #60]	@ (80008f4 <main+0xb0>)
 80008b8:	9110      	str	r1, [sp, #64]	@ 0x40
 80008ba:	920f      	str	r2, [sp, #60]	@ 0x3c
 80008bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80008be:	466d      	mov	r5, sp
 80008c0:	f106 0410 	add.w	r4, r6, #16
 80008c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80008d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008dc:	f000 f93c 	bl	8000b58 <Send_ADC_Values_Over_UART>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008e0:	2104      	movs	r1, #4
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <main+0xb4>)
 80008e4:	f001 faa2 	bl	8001e2c <HAL_GPIO_TogglePin>
  {
 80008e8:	bf00      	nop
 80008ea:	e7bd      	b.n	8000868 <main+0x24>
 80008ec:	200000f0 	.word	0x200000f0
 80008f0:	20000078 	.word	0x20000078
 80008f4:	200000a8 	.word	0x200000a8
 80008f8:	40010800 	.word	0x40010800

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b096      	sub	sp, #88	@ 0x58
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000906:	2228      	movs	r2, #40	@ 0x28
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fa4a 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fa8b 	bl	8001e60 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000950:	f000 f990 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fcf8 	bl	8002364 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800097a:	f000 f97b 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097e:	2302      	movs	r3, #2
 8000980:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fe79 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000994:	f000 f96e 	bl	8000c74 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	@ 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009b2:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <MX_ADC1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80009ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009de:	f000 fb2b 	bl	8001038 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f944 	bl	8000c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009ec:	230e      	movs	r3, #14
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009fe:	f000 fcff 	bl	8001400 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a08:	f000 f934 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000078 	.word	0x20000078
 8000a18:	40012400 	.word	0x40012400

08000a1c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <MX_UART5_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_UART5_Init+0x4c>)
 8000a54:	f001 feca 	bl	80027ec <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f909 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	40005000 	.word	0x40005000

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <MX_GPIO_Init+0x90>)
 8000ad2:	f001 f993 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_GPIO_Init+0x90>)
 8000aee:	f000 fff1 	bl	8001ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800

08000b04 <Continue_On_UART_Receive>:
/**
  * @brief Wait for 's' character to be received over UART to continue the program
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Continue_On_UART_Receive(UART_HandleTypeDef uart){
 8000b04:	b084      	sub	sp, #16
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	f107 0c08 	add.w	ip, r7, #8
 8000b0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // The 's' character here is arbitrary
  // We just pause the program until we see 's\n' received over uart
  memset(rx_buff, 0, sizeof(rx_buff));
 8000b12:	2264      	movs	r2, #100	@ 0x64
 8000b14:	2100      	movs	r1, #0
 8000b16:	480f      	ldr	r0, [pc, #60]	@ (8000b54 <Continue_On_UART_Receive+0x50>)
 8000b18:	f002 f944 	bl	8002da4 <memset>
  while (rx_buff[0] != 's'){
 8000b1c:	e00f      	b.n	8000b3e <Continue_On_UART_Receive+0x3a>
    memset(rx_buff, 0, sizeof(rx_buff));
 8000b1e:	2264      	movs	r2, #100	@ 0x64
 8000b20:	2100      	movs	r1, #0
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <Continue_On_UART_Receive+0x50>)
 8000b24:	f002 f93e 	bl	8002da4 <memset>
    HAL_UART_Receive(&uart, (uint8_t*)rx_buff, sizeof(rx_buff), 1000); // HAL_UART_Receive waits until '\n' to continue the program
 8000b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2c:	2264      	movs	r2, #100	@ 0x64
 8000b2e:	4909      	ldr	r1, [pc, #36]	@ (8000b54 <Continue_On_UART_Receive+0x50>)
 8000b30:	f107 0008 	add.w	r0, r7, #8
 8000b34:	f001 ff35 	bl	80029a2 <HAL_UART_Receive>
    HAL_Delay(1); // Wait a ms because why not
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fa59 	bl	8000ff0 <HAL_Delay>
  while (rx_buff[0] != 's'){
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <Continue_On_UART_Receive+0x50>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b73      	cmp	r3, #115	@ 0x73
 8000b44:	d1eb      	bne.n	8000b1e <Continue_On_UART_Receive+0x1a>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr
 8000b54:	20000220 	.word	0x20000220

08000b58 <Send_ADC_Values_Over_UART>:
/**
  * @brief Send ADC values over UART to the Python script
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Send_ADC_Values_Over_UART(UART_HandleTypeDef uart, int adcValuesAveraged, int adcValuesADCAdjusted, int adcValuesCurrentAdjusted){
 8000b58:	b084      	sub	sp, #16
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af02      	add	r7, sp, #8
 8000b60:	f107 0c08 	add.w	ip, r7, #8
 8000b64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  memset(tx_buff, 0, sizeof(tx_buff));
 8000b68:	2264      	movs	r2, #100	@ 0x64
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <Send_ADC_Values_Over_UART+0x48>)
 8000b6e:	f002 f919 	bl	8002da4 <memset>
  sprintf(tx_buff, "%d, %d, %d\n\r", adcValuesAveraged, adcValuesADCAdjusted, adcValuesCurrentAdjusted);
 8000b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000b7a:	490a      	ldr	r1, [pc, #40]	@ (8000ba4 <Send_ADC_Values_Over_UART+0x4c>)
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <Send_ADC_Values_Over_UART+0x48>)
 8000b7e:	f002 f8f1 	bl	8002d64 <siprintf>
  HAL_UART_Transmit(&uart, (uint8_t*)tx_buff, sizeof(tx_buff), 1000);
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	2264      	movs	r2, #100	@ 0x64
 8000b88:	4905      	ldr	r1, [pc, #20]	@ (8000ba0 <Send_ADC_Values_Over_UART+0x48>)
 8000b8a:	f107 0008 	add.w	r0, r7, #8
 8000b8e:	f001 fe7d 	bl	800288c <HAL_UART_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b9a:	b004      	add	sp, #16
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200001bc 	.word	0x200001bc
 8000ba4:	080036dc 	.word	0x080036dc

08000ba8 <Get_Averaged_ADC_Values>:
  * @brief Take numSamples ADC values, average them, then return both raw and error adjusted values
  * @param adcValuesAveraged: Pointer to the averaged ADC value
  * @param adcValuesAdjusted: Pointer to the averaged ADC value, adjusted for error
  * @retval None
  */
void Get_Averaged_ADC_Values(int* adcValuesAveraged, int* adcValuesADCAdjusted, int* adcValuesCurrentAdjusted){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  *adcValuesAveraged = adcAveragedValue; // Set the pointer output
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <Get_Averaged_ADC_Values+0xc8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]

  // ADC Error Polynomial: -75.8 + 0.0222x
  // Current Sensor ADC Error Polynomial: 72 - 0.0325x + 19.6 - 8.82E-3x = 91.6 - 0.04132x

  int adcError = -75.8 + 0.0222 * (*adcValuesAveraged); // This is a predetermined error polynomial
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fdac 	bl	8000720 <__aeabi_i2d>
 8000bc8:	a321      	add	r3, pc, #132	@ (adr r3, 8000c50 <Get_Averaged_ADC_Values+0xa8>)
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	f7ff fb2b 	bl	8000228 <__aeabi_dmul>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	a31f      	add	r3, pc, #124	@ (adr r3, 8000c58 <Get_Averaged_ADC_Values+0xb0>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fc50 	bl	8000484 <__aeabi_dsub>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f7ff fe02 	bl	80007f4 <__aeabi_d2iz>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	617b      	str	r3, [r7, #20]
  int currentSensorADCError = 91.6 - 0.04132 * (*adcValuesAveraged); // This is the predetermined erroy polynomial for the current sensor
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fd91 	bl	8000720 <__aeabi_i2d>
 8000bfe:	a318      	add	r3, pc, #96	@ (adr r3, 8000c60 <Get_Averaged_ADC_Values+0xb8>)
 8000c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c04:	f7ff fb10 	bl	8000228 <__aeabi_dmul>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	a116      	add	r1, pc, #88	@ (adr r1, 8000c68 <Get_Averaged_ADC_Values+0xc0>)
 8000c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c12:	f7ff fc37 	bl	8000484 <__aeabi_dsub>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff fde9 	bl	80007f4 <__aeabi_d2iz>
 8000c22:	4603      	mov	r3, r0
 8000c24:	613b      	str	r3, [r7, #16]

  *adcValuesADCAdjusted = *adcValuesAveraged - adcError; // Set the other pointer output
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	1ad2      	subs	r2, r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	601a      	str	r2, [r3, #0]
  *adcValuesCurrentAdjusted = *adcValuesAveraged - adcError - currentSensorADCError; // Set the other pointer output
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	1ad2      	subs	r2, r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad2      	subs	r2, r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	c7e28241 	.word	0xc7e28241
 8000c54:	3f96bb98 	.word	0x3f96bb98
 8000c58:	33333333 	.word	0x33333333
 8000c5c:	4052f333 	.word	0x4052f333
 8000c60:	2157689d 	.word	0x2157689d
 8000c64:	3fa527e5 	.word	0x3fa527e5
 8000c68:	66666666 	.word	0x66666666
 8000c6c:	4056e666 	.word	0x4056e666
 8000c70:	200001b8 	.word	0x200001b8

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <HAL_ADC_MspInit+0x6c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d121      	bne.n	8000d48 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d34:	2310      	movs	r3, #16
 8000d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_ADC_MspInit+0x74>)
 8000d44:	f000 fec6 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40012400 	.word	0x40012400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011000 	.word	0x40011000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_UART_MspInit+0xa4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d13c      	bne.n	8000df6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a20      	ldr	r2, [pc, #128]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d86:	61d3      	str	r3, [r2, #28]
 8000d88:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a1a      	ldr	r2, [pc, #104]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000dda:	f000 fe7b 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <HAL_UART_MspInit+0xb0>)
 8000df2:	f000 fe6f 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005000 	.word	0x40005000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40011400 	.word	0x40011400

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8aa 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f001 ff8c 	bl	8002db4 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000c000 	.word	0x2000c000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000284 	.word	0x20000284
 8000ed0:	200003d8 	.word	0x200003d8

08000ed4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff fff8 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ee6:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a09      	ldr	r2, [pc, #36]	@ (8000f20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000efc:	4c09      	ldr	r4, [pc, #36]	@ (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f001 ff59 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fc99 	bl	8000844 <main>
  bx lr
 8000f12:	4770      	bx	lr
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f1c:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000f20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f24:	200003d4 	.word	0x200003d4

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fd09 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe9a 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd13 	bl	80019a2 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 fce9 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000288 	.word	0x20000288

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	@ (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000288 	.word	0x20000288

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0ce      	b.n	80011f8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fe34 	bl	8000ce4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fb11 	bl	80016a4 <ADC_ConversionStop_Disable>
 8001082:	4603      	mov	r3, r0
 8001084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80a9 	bne.w	80011e6 <HAL_ADC_Init+0x1ae>
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80a5 	bne.w	80011e6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	f043 0202 	orr.w	r2, r3, #2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4951      	ldr	r1, [pc, #324]	@ (8001200 <HAL_ADC_Init+0x1c8>)
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d10a      	bne.n	80010d4 <HAL_ADC_Init+0x9c>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80010c6:	d002      	beq.n	80010ce <HAL_ADC_Init+0x96>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	e004      	b.n	80010d8 <HAL_ADC_Init+0xa0>
 80010ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010d2:	e001      	b.n	80010d8 <HAL_ADC_Init+0xa0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7b1b      	ldrb	r3, [r3, #12]
 80010de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010f0:	d003      	beq.n	80010fa <HAL_ADC_Init+0xc2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_ADC_Init+0xc8>
 80010fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fe:	e000      	b.n	8001102 <HAL_ADC_Init+0xca>
 8001100:	2300      	movs	r3, #0
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7d1b      	ldrb	r3, [r3, #20]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d119      	bne.n	8001144 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b1b      	ldrb	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	3b01      	subs	r3, #1
 800111e:	035a      	lsls	r2, r3, #13
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	e00b      	b.n	8001144 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001130:	f043 0220 	orr.w	r2, r3, #32
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	430a      	orrs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <HAL_ADC_Init+0x1cc>)
 8001160:	4013      	ands	r3, r2
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	430b      	orrs	r3, r1
 800116a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001174:	d003      	beq.n	800117e <HAL_ADC_Init+0x146>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d104      	bne.n	8001188 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	3b01      	subs	r3, #1
 8001184:	051b      	lsls	r3, r3, #20
 8001186:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	430a      	orrs	r2, r1
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_ADC_Init+0x1d0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d10b      	bne.n	80011c4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c2:	e018      	b.n	80011f6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c8:	f023 0312 	bic.w	r3, r3, #18
 80011cc:	f043 0210 	orr.w	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e4:	e007      	b.n	80011f6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013c00 	.word	0x40013c00
 8001204:	ffe1f7fd 	.word	0xffe1f7fd
 8001208:	ff1f0efe 	.word	0xff1f0efe

0800120c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a64      	ldr	r2, [pc, #400]	@ (80013b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d004      	beq.n	8001230 <HAL_ADC_Start_DMA+0x24>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a63      	ldr	r2, [pc, #396]	@ (80013b8 <HAL_ADC_Start_DMA+0x1ac>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d106      	bne.n	800123e <HAL_ADC_Start_DMA+0x32>
 8001230:	4b60      	ldr	r3, [pc, #384]	@ (80013b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 80b3 	bne.w	80013a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_ADC_Start_DMA+0x40>
 8001248:	2302      	movs	r3, #2
 800124a:	e0ae      	b.n	80013aa <HAL_ADC_Start_DMA+0x19e>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f9cb 	bl	80015f0 <ADC_Enable>
 800125a:	4603      	mov	r3, r0
 800125c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 809a 	bne.w	800139a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a4e      	ldr	r2, [pc, #312]	@ (80013b8 <HAL_ADC_Start_DMA+0x1ac>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d105      	bne.n	8001290 <HAL_ADC_Start_DMA+0x84>
 8001284:	4b4b      	ldr	r3, [pc, #300]	@ (80013b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d115      	bne.n	80012bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d026      	beq.n	80012f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ba:	e01d      	b.n	80012f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a39      	ldr	r2, [pc, #228]	@ (80013b4 <HAL_ADC_Start_DMA+0x1a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d004      	beq.n	80012dc <HAL_ADC_Start_DMA+0xd0>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a38      	ldr	r2, [pc, #224]	@ (80013b8 <HAL_ADC_Start_DMA+0x1ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d10d      	bne.n	80012f8 <HAL_ADC_Start_DMA+0xec>
 80012dc:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <HAL_ADC_Start_DMA+0x1a8>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	f023 0206 	bic.w	r2, r3, #6
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001310:	e002      	b.n	8001318 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a25      	ldr	r2, [pc, #148]	@ (80013bc <HAL_ADC_Start_DMA+0x1b0>)
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <HAL_ADC_Start_DMA+0x1b4>)
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001336:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f06f 0202 	mvn.w	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001350:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a18      	ldr	r0, [r3, #32]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	334c      	adds	r3, #76	@ 0x4c
 800135c:	4619      	mov	r1, r3
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f000 fb2a 	bl	80019ba <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001370:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001374:	d108      	bne.n	8001388 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001384:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001386:	e00f      	b.n	80013a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001396:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001398:	e006      	b.n	80013a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80013a2:	e001      	b.n	80013a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012400 	.word	0x40012400
 80013b8:	40012800 	.word	0x40012800
 80013bc:	08001727 	.word	0x08001727
 80013c0:	080017a3 	.word	0x080017a3
 80013c4:	080017bf 	.word	0x080017bf

080013c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x20>
 800141c:	2302      	movs	r3, #2
 800141e:	e0dc      	b.n	80015da <HAL_ADC_ConfigChannel+0x1da>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b06      	cmp	r3, #6
 800142e:	d81c      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b05      	subs	r3, #5
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4019      	ands	r1, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b05      	subs	r3, #5
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	@ 0x34
 8001468:	e03c      	b.n	80014e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d81c      	bhi.n	80014ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b23      	subs	r3, #35	@ 0x23
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	4019      	ands	r1, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3b23      	subs	r3, #35	@ 0x23
 800149e:	fa00 f203 	lsl.w	r2, r0, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80014aa:	e01b      	b.n	80014e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b41      	subs	r3, #65	@ 0x41
 80014be:	221f      	movs	r2, #31
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4019      	ands	r1, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b41      	subs	r3, #65	@ 0x41
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d91c      	bls.n	8001526 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	3b1e      	subs	r3, #30
 80014fe:	2207      	movs	r2, #7
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	3b1e      	subs	r3, #30
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	e019      	b.n	800155a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6919      	ldr	r1, [r3, #16]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	4019      	ands	r1, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6898      	ldr	r0, [r3, #8]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d003      	beq.n	800156a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001566:	2b11      	cmp	r3, #17
 8001568:	d132      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d125      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d126      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001590:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d11a      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <HAL_ADC_ConfigChannel+0x1ec>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x1b2>
 80015be:	e007      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	f043 0220 	orr.w	r2, r3, #32
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40012400 	.word	0x40012400
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d040      	beq.n	8001690 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <ADC_Enable+0xac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <ADC_Enable+0xb0>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800162c:	e002      	b.n	8001634 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff fccf 	bl	8000fdc <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001640:	e01f      	b.n	8001682 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001642:	f7ff fccb 	bl	8000fdc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d918      	bls.n	8001682 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d011      	beq.n	8001682 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e007      	b.n	8001692 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d1d8      	bne.n	8001642 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d12e      	bne.n	800171c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ce:	f7ff fc85 	bl	8000fdc <HAL_GetTick>
 80016d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016d4:	e01b      	b.n	800170e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016d6:	f7ff fc81 	bl	8000fdc <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d914      	bls.n	800170e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10d      	bne.n	800170e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e007      	b.n	800171e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d0dc      	beq.n	80016d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800173c:	2b00      	cmp	r3, #0
 800173e:	d127      	bne.n	8001790 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001756:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800175a:	d115      	bne.n	8001788 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fe1d 	bl	80013c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800178e:	e004      	b.n	800179a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fe12 	bl	80013da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	f043 0204 	orr.w	r2, r3, #4
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff fe01 	bl	80013ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff49 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff5e 	bl	800183c <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffb0 	bl	8001910 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Start_IT+0x20>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e04b      	b.n	8001a72 <HAL_DMA_Start_IT+0xb8>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d13a      	bne.n	8001a64 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f831 	bl	8001a7a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 020e 	orr.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00f      	b.n	8001a52 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 020a 	orr.w	r2, r2, #10
 8001a50:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e005      	b.n	8001a70 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d108      	bne.n	8001aba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ab8:	e007      	b.n	8001aca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b08b      	sub	sp, #44	@ 0x2c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e179      	b.n	8001ddc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8168 	bne.w	8001dd6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a96      	ldr	r2, [pc, #600]	@ (8001d64 <HAL_GPIO_Init+0x290>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b10:	4a94      	ldr	r2, [pc, #592]	@ (8001d64 <HAL_GPIO_Init+0x290>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d875      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b16:	4a94      	ldr	r2, [pc, #592]	@ (8001d68 <HAL_GPIO_Init+0x294>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d058      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b1c:	4a92      	ldr	r2, [pc, #584]	@ (8001d68 <HAL_GPIO_Init+0x294>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d86f      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b22:	4a92      	ldr	r2, [pc, #584]	@ (8001d6c <HAL_GPIO_Init+0x298>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d052      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b28:	4a90      	ldr	r2, [pc, #576]	@ (8001d6c <HAL_GPIO_Init+0x298>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d869      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a90      	ldr	r2, [pc, #576]	@ (8001d70 <HAL_GPIO_Init+0x29c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04c      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b34:	4a8e      	ldr	r2, [pc, #568]	@ (8001d70 <HAL_GPIO_Init+0x29c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d863      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a8e      	ldr	r2, [pc, #568]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d046      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b40:	4a8c      	ldr	r2, [pc, #560]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d85d      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d82a      	bhi.n	8001ba0 <HAL_GPIO_Init+0xcc>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d859      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <HAL_GPIO_Init+0x80>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001ba9 	.word	0x08001ba9
 8001b5c:	08001bbb 	.word	0x08001bbb
 8001b60:	08001bfd 	.word	0x08001bfd
 8001b64:	08001c03 	.word	0x08001c03
 8001b68:	08001c03 	.word	0x08001c03
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c03 	.word	0x08001c03
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001c03 	.word	0x08001c03
 8001b7c:	08001c03 	.word	0x08001c03
 8001b80:	08001c03 	.word	0x08001c03
 8001b84:	08001c03 	.word	0x08001c03
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001c03 	.word	0x08001c03
 8001b90:	08001c03 	.word	0x08001c03
 8001b94:	08001c03 	.word	0x08001c03
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bc5 	.word	0x08001bc5
 8001ba0:	4a75      	ldr	r2, [pc, #468]	@ (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba6:	e02c      	b.n	8001c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e029      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e024      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e01f      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e01a      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e013      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	611a      	str	r2, [r3, #16]
          break;
 8001bee:	e009      	b.n	8001c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
          break;
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          break;
 8001c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	@ 0xff
 8001c08:	d801      	bhi.n	8001c0e <HAL_GPIO_Init+0x13a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_Init+0x13e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3304      	adds	r3, #4
 8001c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	@ 0xff
 8001c18:	d802      	bhi.n	8001c20 <HAL_GPIO_Init+0x14c>
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x152>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	3b08      	subs	r3, #8
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80c1 	beq.w	8001dd6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c54:	4b49      	ldr	r3, [pc, #292]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a48      	ldr	r2, [pc, #288]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c6c:	4a44      	ldr	r2, [pc, #272]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3c      	ldr	r2, [pc, #240]	@ (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01f      	beq.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_GPIO_Init+0x2b4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d019      	beq.n	8001cd4 <HAL_GPIO_Init+0x200>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_GPIO_Init+0x1fc>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a39      	ldr	r2, [pc, #228]	@ (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1f8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a38      	ldr	r2, [pc, #224]	@ (8001d94 <HAL_GPIO_Init+0x2c0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1f4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a37      	ldr	r2, [pc, #220]	@ (8001d98 <HAL_GPIO_Init+0x2c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1f0>
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	e00a      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	e008      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	4925      	ldr	r1, [pc, #148]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4924      	ldr	r1, [pc, #144]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4920      	ldr	r1, [pc, #128]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	491a      	ldr	r1, [pc, #104]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4916      	ldr	r1, [pc, #88]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d025      	beq.n	8001da0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4910      	ldr	r1, [pc, #64]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e025      	b.n	8001dae <HAL_GPIO_Init+0x2da>
 8001d62:	bf00      	nop
 8001d64:	10320000 	.word	0x10320000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10220000 	.word	0x10220000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10120000 	.word	0x10120000
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40011400 	.word	0x40011400
 8001d94:	40011800 	.word	0x40011800
 8001d98:	40011c00 	.word	0x40011c00
 8001d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4913      	ldr	r1, [pc, #76]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4909      	ldr	r1, [pc, #36]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	3301      	adds	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f47f ae7e 	bne.w	8001ae8 <HAL_GPIO_Init+0x14>
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	372c      	adds	r7, #44	@ 0x2c
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43d9      	mvns	r1, r3
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e272      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b92      	ldr	r3, [pc, #584]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d112      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
 8001e98:	4b8c      	ldr	r3, [pc, #560]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x12c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d168      	bne.n	8001f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e24c      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x76>
 8001ec8:	4b80      	ldr	r3, [pc, #512]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e02e      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x98>
 8001ede:	4b7b      	ldr	r3, [pc, #492]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b78      	ldr	r3, [pc, #480]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a77      	ldr	r2, [pc, #476]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xbc>
 8001f02:	4b72      	ldr	r3, [pc, #456]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a71      	ldr	r2, [pc, #452]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6a      	ldr	r2, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b68      	ldr	r3, [pc, #416]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a67      	ldr	r2, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f84e 	bl	8000fdc <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f84a 	bl	8000fdc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e200      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5d      	ldr	r3, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe4>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f83a 	bl	8000fdc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f836 	bl	8000fdc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ec      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x10c>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa6:	4b49      	ldr	r3, [pc, #292]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
 8001fb2:	4b46      	ldr	r3, [pc, #280]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c0      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4939      	ldr	r1, [pc, #228]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe ffef 	bl	8000fdc <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7fe ffeb 	bl	8000fdc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4927      	ldr	r1, [pc, #156]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <HAL_RCC_OscConfig+0x270>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ffce 	bl	8000fdc <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe ffca 	bl	8000fdc <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e180      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d03a      	beq.n	80020e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_RCC_OscConfig+0x274>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe ffae 	bl	8000fdc <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7fe ffaa 	bl	8000fdc <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e160      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f000 face 	bl	8002644 <RCC_Delay>
 80020a8:	e01c      	b.n	80020e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7fe ff94 	bl	8000fdc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b6:	e00f      	b.n	80020d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff90 	bl	8000fdc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e146      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	42420000 	.word	0x42420000
 80020d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b92      	ldr	r3, [pc, #584]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e9      	bne.n	80020b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a6 	beq.w	800223e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b88      	ldr	r3, [pc, #544]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a87      	ldr	r2, [pc, #540]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b85      	ldr	r3, [pc, #532]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b82      	ldr	r3, [pc, #520]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7e      	ldr	r2, [pc, #504]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe ff51 	bl	8000fdc <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe ff4d 	bl	8000fdc <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e103      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b75      	ldr	r3, [pc, #468]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x312>
 8002164:	4b6f      	ldr	r3, [pc, #444]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a6e      	ldr	r2, [pc, #440]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e02d      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x334>
 800217a:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a66      	ldr	r2, [pc, #408]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x356>
 800219c:	4b61      	ldr	r3, [pc, #388]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a60      	ldr	r2, [pc, #384]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 80021b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b58      	ldr	r3, [pc, #352]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a57      	ldr	r2, [pc, #348]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe ff01 	bl	8000fdc <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fefd 	bl	8000fdc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0b1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x37e>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe feeb 	bl	8000fdc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fee7 	bl	8000fdc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e09b      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a3b      	ldr	r2, [pc, #236]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d061      	beq.n	8002318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d146      	bne.n	80022ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b33      	ldr	r3, [pc, #204]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe febb 	bl	8000fdc <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe feb7 	bl	8000fdc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e06d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002290:	d108      	bne.n	80022a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4921      	ldr	r1, [pc, #132]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a19      	ldr	r1, [r3, #32]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	430b      	orrs	r3, r1
 80022b6:	491b      	ldr	r1, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fe8b 	bl	8000fdc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fe87 	bl	8000fdc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x46a>
 80022e8:	e035      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe74 	bl	8000fdc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fe70 	bl	8000fdc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e026      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x498>
 8002316:	e01e      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e019      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
 800232c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCC_OscConfig+0x500>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d0      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b67      	ldr	r3, [pc, #412]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4965      	ldr	r1, [pc, #404]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b63      	ldr	r3, [pc, #396]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d8:	4b53      	ldr	r3, [pc, #332]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b50      	ldr	r3, [pc, #320]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	494d      	ldr	r1, [pc, #308]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d040      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07f      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e073      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4936      	ldr	r1, [pc, #216]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fdc2 	bl	8000fdc <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fdbe 	bl	8000fdc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e053      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d210      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4922      	ldr	r1, [pc, #136]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e032      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4916      	ldr	r1, [pc, #88]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024de:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490e      	ldr	r1, [pc, #56]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f2:	f000 f821 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	490a      	ldr	r1, [pc, #40]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	5ccb      	ldrb	r3, [r1, r3]
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fd20 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	080036ec 	.word	0x080036ec
 8002530:	20000000 	.word	0x20000000
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x30>
 8002562:	2b08      	cmp	r3, #8
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x36>
 8002566:	e027      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800256a:	613b      	str	r3, [r7, #16]
      break;
 800256c:	e027      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0c5b      	lsrs	r3, r3, #17
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e004      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	613b      	str	r3, [r7, #16]
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	693b      	ldr	r3, [r7, #16]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	08003704 	.word	0x08003704
 80025d8:	08003714 	.word	0x08003714
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	080036fc 	.word	0x080036fc

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffde 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	@ (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080036fc 	.word	0x080036fc

08002644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <RCC_Delay+0x34>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <RCC_Delay+0x38>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002660:	bf00      	nop
  }
  while (Delay --);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <RCC_Delay+0x1c>
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000000 	.word	0x20000000
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d07d      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a0:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b4c      	ldr	r3, [pc, #304]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	61d3      	str	r3, [r2, #28]
 80026b8:	4b49      	ldr	r3, [pc, #292]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7fe fc7c 	bl	8000fdc <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe fc78 	bl	8000fdc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e06d      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02e      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d027      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002724:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800272c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272e:	4b2e      	ldr	r3, [pc, #184]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002734:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800273a:	4a29      	ldr	r2, [pc, #164]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc47 	bl	8000fdc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fc43 	bl	8000fdc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e036      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002774:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4917      	ldr	r1, [pc, #92]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	4313      	orrs	r3, r2
 8002784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	490b      	ldr	r1, [pc, #44]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42420440 	.word	0x42420440

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe faa2 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa09 	bl	8002c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d175      	bne.n	8002998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_UART_Transmit+0x2c>
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e06e      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	@ 0x21
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe fb87 	bl	8000fdc <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e4:	d108      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e003      	b.n	8002900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002900:	e02e      	b.n	8002960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f8df 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03a      	b.n	800299a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3302      	adds	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e007      	b.n	8002952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1cb      	bne.n	8002902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2140      	movs	r1, #64	@ 0x40
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8ab 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b08a      	sub	sp, #40	@ 0x28
 80029a6:	af02      	add	r7, sp, #8
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	f040 8081 	bne.w	8002ac6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Receive+0x2e>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e079      	b.n	8002ac8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2222      	movs	r2, #34	@ 0x22
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e8:	f7fe faf8 	bl	8000fdc <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a02:	d108      	bne.n	8002a16 <HAL_UART_Receive+0x74>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e003      	b.n	8002a1e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a1e:	e047      	b.n	8002ab0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f850 	bl	8002ad0 <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e042      	b.n	8002ac8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e01f      	b.n	8002aa2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6a:	d007      	beq.n	8002a7c <HAL_UART_Receive+0xda>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_UART_Receive+0xe8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e008      	b.n	8002a9c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1b2      	bne.n	8002a20 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae0:	e03b      	b.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d037      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7fe fa77 	bl	8000fdc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e03a      	b.n	8002b7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d023      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b80      	cmp	r3, #128	@ 0x80
 8002b16:	d020      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	d01d      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d116      	bne.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f81d 	bl	8002b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4013      	ands	r3, r2
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d0b4      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b095      	sub	sp, #84	@ 0x54
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002baa:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e5      	bne.n	8002b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e5      	bne.n	8002bbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d119      	bne.n	8002c2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f023 0310 	bic.w	r3, r3, #16
 8002c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c1a:	61ba      	str	r2, [r7, #24]
 8002c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	613b      	str	r3, [r7, #16]
   return(result);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e5      	bne.n	8002bfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c3c:	bf00      	nop
 8002c3e:	3754      	adds	r7, #84	@ 0x54
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c82:	f023 030c 	bic.w	r3, r3, #12
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2c      	ldr	r2, [pc, #176]	@ (8002d5c <UART_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cb0:	f7ff fcb4 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	e002      	b.n	8002cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7ff fc9c 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a22      	ldr	r2, [pc, #136]	@ (8002d60 <UART_SetConfig+0x118>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	0119      	lsls	r1, r3, #4
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <UART_SetConfig+0x118>)
 8002cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2064      	movs	r0, #100	@ 0x64
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	@ 0x32
 8002d08:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <UART_SetConfig+0x118>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	4419      	add	r1, r3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009a      	lsls	r2, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <UART_SetConfig+0x118>)
 8002d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2064      	movs	r0, #100	@ 0x64
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	3332      	adds	r3, #50	@ 0x32
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <UART_SetConfig+0x118>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	440a      	add	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <siprintf>:
 8002d64:	b40e      	push	{r1, r2, r3}
 8002d66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d6a:	b500      	push	{lr}
 8002d6c:	b09c      	sub	sp, #112	@ 0x70
 8002d6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d70:	9002      	str	r0, [sp, #8]
 8002d72:	9006      	str	r0, [sp, #24]
 8002d74:	9107      	str	r1, [sp, #28]
 8002d76:	9104      	str	r1, [sp, #16]
 8002d78:	4808      	ldr	r0, [pc, #32]	@ (8002d9c <siprintf+0x38>)
 8002d7a:	4909      	ldr	r1, [pc, #36]	@ (8002da0 <siprintf+0x3c>)
 8002d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d80:	9105      	str	r1, [sp, #20]
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	a902      	add	r1, sp, #8
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	f000 f992 	bl	80030b0 <_svfiprintf_r>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	b01c      	add	sp, #112	@ 0x70
 8002d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d98:	b003      	add	sp, #12
 8002d9a:	4770      	bx	lr
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	ffff0208 	.word	0xffff0208

08002da4 <memset>:
 8002da4:	4603      	mov	r3, r0
 8002da6:	4402      	add	r2, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__errno>:
 8002db4:	4b01      	ldr	r3, [pc, #4]	@ (8002dbc <__errno+0x8>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	f000 fc78 	bl	80036c4 <_init>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	@ (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	0800374c 	.word	0x0800374c
 8002dfc:	0800374c 	.word	0x0800374c
 8002e00:	0800374c 	.word	0x0800374c
 8002e04:	08003750 	.word	0x08003750

08002e08 <__retarget_lock_acquire_recursive>:
 8002e08:	4770      	bx	lr

08002e0a <__retarget_lock_release_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <_free_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d040      	beq.n	8002e96 <_free_r+0x8a>
 8002e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e18:	1f0c      	subs	r4, r1, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bfb8      	it	lt
 8002e1e:	18e4      	addlt	r4, r4, r3
 8002e20:	f000 f8de 	bl	8002fe0 <__malloc_lock>
 8002e24:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <_free_r+0x8c>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	b933      	cbnz	r3, 8002e38 <_free_r+0x2c>
 8002e2a:	6063      	str	r3, [r4, #4]
 8002e2c:	6014      	str	r4, [r2, #0]
 8002e2e:	4628      	mov	r0, r5
 8002e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e34:	f000 b8da 	b.w	8002fec <__malloc_unlock>
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d908      	bls.n	8002e4e <_free_r+0x42>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	1821      	adds	r1, r4, r0
 8002e40:	428b      	cmp	r3, r1
 8002e42:	bf01      	itttt	eq
 8002e44:	6819      	ldreq	r1, [r3, #0]
 8002e46:	685b      	ldreq	r3, [r3, #4]
 8002e48:	1809      	addeq	r1, r1, r0
 8002e4a:	6021      	streq	r1, [r4, #0]
 8002e4c:	e7ed      	b.n	8002e2a <_free_r+0x1e>
 8002e4e:	461a      	mov	r2, r3
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b10b      	cbz	r3, 8002e58 <_free_r+0x4c>
 8002e54:	42a3      	cmp	r3, r4
 8002e56:	d9fa      	bls.n	8002e4e <_free_r+0x42>
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	1850      	adds	r0, r2, r1
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d10b      	bne.n	8002e78 <_free_r+0x6c>
 8002e60:	6820      	ldr	r0, [r4, #0]
 8002e62:	4401      	add	r1, r0
 8002e64:	1850      	adds	r0, r2, r1
 8002e66:	4283      	cmp	r3, r0
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	d1e0      	bne.n	8002e2e <_free_r+0x22>
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4408      	add	r0, r1
 8002e72:	6010      	str	r0, [r2, #0]
 8002e74:	6053      	str	r3, [r2, #4]
 8002e76:	e7da      	b.n	8002e2e <_free_r+0x22>
 8002e78:	d902      	bls.n	8002e80 <_free_r+0x74>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	e7d6      	b.n	8002e2e <_free_r+0x22>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	1821      	adds	r1, r4, r0
 8002e84:	428b      	cmp	r3, r1
 8002e86:	bf01      	itttt	eq
 8002e88:	6819      	ldreq	r1, [r3, #0]
 8002e8a:	685b      	ldreq	r3, [r3, #4]
 8002e8c:	1809      	addeq	r1, r1, r0
 8002e8e:	6021      	streq	r1, [r4, #0]
 8002e90:	6063      	str	r3, [r4, #4]
 8002e92:	6054      	str	r4, [r2, #4]
 8002e94:	e7cb      	b.n	8002e2e <_free_r+0x22>
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	200003d0 	.word	0x200003d0

08002e9c <sbrk_aligned>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8002edc <sbrk_aligned+0x40>)
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	6831      	ldr	r1, [r6, #0]
 8002ea4:	4605      	mov	r5, r0
 8002ea6:	b911      	cbnz	r1, 8002eae <sbrk_aligned+0x12>
 8002ea8:	f000 fbaa 	bl	8003600 <_sbrk_r>
 8002eac:	6030      	str	r0, [r6, #0]
 8002eae:	4621      	mov	r1, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 fba5 	bl	8003600 <_sbrk_r>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	d103      	bne.n	8002ec2 <sbrk_aligned+0x26>
 8002eba:	f04f 34ff 	mov.w	r4, #4294967295
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	1cc4      	adds	r4, r0, #3
 8002ec4:	f024 0403 	bic.w	r4, r4, #3
 8002ec8:	42a0      	cmp	r0, r4
 8002eca:	d0f8      	beq.n	8002ebe <sbrk_aligned+0x22>
 8002ecc:	1a21      	subs	r1, r4, r0
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 fb96 	bl	8003600 <_sbrk_r>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d1f2      	bne.n	8002ebe <sbrk_aligned+0x22>
 8002ed8:	e7ef      	b.n	8002eba <sbrk_aligned+0x1e>
 8002eda:	bf00      	nop
 8002edc:	200003cc 	.word	0x200003cc

08002ee0 <_malloc_r>:
 8002ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ee4:	1ccd      	adds	r5, r1, #3
 8002ee6:	f025 0503 	bic.w	r5, r5, #3
 8002eea:	3508      	adds	r5, #8
 8002eec:	2d0c      	cmp	r5, #12
 8002eee:	bf38      	it	cc
 8002ef0:	250c      	movcc	r5, #12
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	db01      	blt.n	8002efc <_malloc_r+0x1c>
 8002ef8:	42a9      	cmp	r1, r5
 8002efa:	d904      	bls.n	8002f06 <_malloc_r+0x26>
 8002efc:	230c      	movs	r3, #12
 8002efe:	6033      	str	r3, [r6, #0]
 8002f00:	2000      	movs	r0, #0
 8002f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fdc <_malloc_r+0xfc>
 8002f0a:	f000 f869 	bl	8002fe0 <__malloc_lock>
 8002f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f12:	461c      	mov	r4, r3
 8002f14:	bb44      	cbnz	r4, 8002f68 <_malloc_r+0x88>
 8002f16:	4629      	mov	r1, r5
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f7ff ffbf 	bl	8002e9c <sbrk_aligned>
 8002f1e:	1c43      	adds	r3, r0, #1
 8002f20:	4604      	mov	r4, r0
 8002f22:	d158      	bne.n	8002fd6 <_malloc_r+0xf6>
 8002f24:	f8d8 4000 	ldr.w	r4, [r8]
 8002f28:	4627      	mov	r7, r4
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d143      	bne.n	8002fb6 <_malloc_r+0xd6>
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	d04b      	beq.n	8002fca <_malloc_r+0xea>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	4639      	mov	r1, r7
 8002f36:	4630      	mov	r0, r6
 8002f38:	eb04 0903 	add.w	r9, r4, r3
 8002f3c:	f000 fb60 	bl	8003600 <_sbrk_r>
 8002f40:	4581      	cmp	r9, r0
 8002f42:	d142      	bne.n	8002fca <_malloc_r+0xea>
 8002f44:	6821      	ldr	r1, [r4, #0]
 8002f46:	4630      	mov	r0, r6
 8002f48:	1a6d      	subs	r5, r5, r1
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7ff ffa6 	bl	8002e9c <sbrk_aligned>
 8002f50:	3001      	adds	r0, #1
 8002f52:	d03a      	beq.n	8002fca <_malloc_r+0xea>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	442b      	add	r3, r5
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	bb62      	cbnz	r2, 8002fbc <_malloc_r+0xdc>
 8002f62:	f8c8 7000 	str.w	r7, [r8]
 8002f66:	e00f      	b.n	8002f88 <_malloc_r+0xa8>
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	1b52      	subs	r2, r2, r5
 8002f6c:	d420      	bmi.n	8002fb0 <_malloc_r+0xd0>
 8002f6e:	2a0b      	cmp	r2, #11
 8002f70:	d917      	bls.n	8002fa2 <_malloc_r+0xc2>
 8002f72:	1961      	adds	r1, r4, r5
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	6025      	str	r5, [r4, #0]
 8002f78:	bf18      	it	ne
 8002f7a:	6059      	strne	r1, [r3, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	bf08      	it	eq
 8002f80:	f8c8 1000 	streq.w	r1, [r8]
 8002f84:	5162      	str	r2, [r4, r5]
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f000 f82f 	bl	8002fec <__malloc_unlock>
 8002f8e:	f104 000b 	add.w	r0, r4, #11
 8002f92:	1d23      	adds	r3, r4, #4
 8002f94:	f020 0007 	bic.w	r0, r0, #7
 8002f98:	1ac2      	subs	r2, r0, r3
 8002f9a:	bf1c      	itt	ne
 8002f9c:	1a1b      	subne	r3, r3, r0
 8002f9e:	50a3      	strne	r3, [r4, r2]
 8002fa0:	e7af      	b.n	8002f02 <_malloc_r+0x22>
 8002fa2:	6862      	ldr	r2, [r4, #4]
 8002fa4:	42a3      	cmp	r3, r4
 8002fa6:	bf0c      	ite	eq
 8002fa8:	f8c8 2000 	streq.w	r2, [r8]
 8002fac:	605a      	strne	r2, [r3, #4]
 8002fae:	e7eb      	b.n	8002f88 <_malloc_r+0xa8>
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	6864      	ldr	r4, [r4, #4]
 8002fb4:	e7ae      	b.n	8002f14 <_malloc_r+0x34>
 8002fb6:	463c      	mov	r4, r7
 8002fb8:	687f      	ldr	r7, [r7, #4]
 8002fba:	e7b6      	b.n	8002f2a <_malloc_r+0x4a>
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	d1fb      	bne.n	8002fbc <_malloc_r+0xdc>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6053      	str	r3, [r2, #4]
 8002fc8:	e7de      	b.n	8002f88 <_malloc_r+0xa8>
 8002fca:	230c      	movs	r3, #12
 8002fcc:	4630      	mov	r0, r6
 8002fce:	6033      	str	r3, [r6, #0]
 8002fd0:	f000 f80c 	bl	8002fec <__malloc_unlock>
 8002fd4:	e794      	b.n	8002f00 <_malloc_r+0x20>
 8002fd6:	6005      	str	r5, [r0, #0]
 8002fd8:	e7d6      	b.n	8002f88 <_malloc_r+0xa8>
 8002fda:	bf00      	nop
 8002fdc:	200003d0 	.word	0x200003d0

08002fe0 <__malloc_lock>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	@ (8002fe8 <__malloc_lock+0x8>)
 8002fe2:	f7ff bf11 	b.w	8002e08 <__retarget_lock_acquire_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	200003c8 	.word	0x200003c8

08002fec <__malloc_unlock>:
 8002fec:	4801      	ldr	r0, [pc, #4]	@ (8002ff4 <__malloc_unlock+0x8>)
 8002fee:	f7ff bf0c 	b.w	8002e0a <__retarget_lock_release_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	200003c8 	.word	0x200003c8

08002ff8 <__ssputs_r>:
 8002ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ffc:	461f      	mov	r7, r3
 8002ffe:	688e      	ldr	r6, [r1, #8]
 8003000:	4682      	mov	sl, r0
 8003002:	42be      	cmp	r6, r7
 8003004:	460c      	mov	r4, r1
 8003006:	4690      	mov	r8, r2
 8003008:	680b      	ldr	r3, [r1, #0]
 800300a:	d82d      	bhi.n	8003068 <__ssputs_r+0x70>
 800300c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003010:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003014:	d026      	beq.n	8003064 <__ssputs_r+0x6c>
 8003016:	6965      	ldr	r5, [r4, #20]
 8003018:	6909      	ldr	r1, [r1, #16]
 800301a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800301e:	eba3 0901 	sub.w	r9, r3, r1
 8003022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003026:	1c7b      	adds	r3, r7, #1
 8003028:	444b      	add	r3, r9
 800302a:	106d      	asrs	r5, r5, #1
 800302c:	429d      	cmp	r5, r3
 800302e:	bf38      	it	cc
 8003030:	461d      	movcc	r5, r3
 8003032:	0553      	lsls	r3, r2, #21
 8003034:	d527      	bpl.n	8003086 <__ssputs_r+0x8e>
 8003036:	4629      	mov	r1, r5
 8003038:	f7ff ff52 	bl	8002ee0 <_malloc_r>
 800303c:	4606      	mov	r6, r0
 800303e:	b360      	cbz	r0, 800309a <__ssputs_r+0xa2>
 8003040:	464a      	mov	r2, r9
 8003042:	6921      	ldr	r1, [r4, #16]
 8003044:	f000 fafa 	bl	800363c <memcpy>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800304e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003052:	81a3      	strh	r3, [r4, #12]
 8003054:	6126      	str	r6, [r4, #16]
 8003056:	444e      	add	r6, r9
 8003058:	6026      	str	r6, [r4, #0]
 800305a:	463e      	mov	r6, r7
 800305c:	6165      	str	r5, [r4, #20]
 800305e:	eba5 0509 	sub.w	r5, r5, r9
 8003062:	60a5      	str	r5, [r4, #8]
 8003064:	42be      	cmp	r6, r7
 8003066:	d900      	bls.n	800306a <__ssputs_r+0x72>
 8003068:	463e      	mov	r6, r7
 800306a:	4632      	mov	r2, r6
 800306c:	4641      	mov	r1, r8
 800306e:	6820      	ldr	r0, [r4, #0]
 8003070:	f000 faac 	bl	80035cc <memmove>
 8003074:	2000      	movs	r0, #0
 8003076:	68a3      	ldr	r3, [r4, #8]
 8003078:	1b9b      	subs	r3, r3, r6
 800307a:	60a3      	str	r3, [r4, #8]
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	4433      	add	r3, r6
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003086:	462a      	mov	r2, r5
 8003088:	f000 fae6 	bl	8003658 <_realloc_r>
 800308c:	4606      	mov	r6, r0
 800308e:	2800      	cmp	r0, #0
 8003090:	d1e0      	bne.n	8003054 <__ssputs_r+0x5c>
 8003092:	4650      	mov	r0, sl
 8003094:	6921      	ldr	r1, [r4, #16]
 8003096:	f7ff feb9 	bl	8002e0c <_free_r>
 800309a:	230c      	movs	r3, #12
 800309c:	f8ca 3000 	str.w	r3, [sl]
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295
 80030a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	e7e9      	b.n	8003082 <__ssputs_r+0x8a>
	...

080030b0 <_svfiprintf_r>:
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	4698      	mov	r8, r3
 80030b6:	898b      	ldrh	r3, [r1, #12]
 80030b8:	4607      	mov	r7, r0
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	460d      	mov	r5, r1
 80030be:	4614      	mov	r4, r2
 80030c0:	b09d      	sub	sp, #116	@ 0x74
 80030c2:	d510      	bpl.n	80030e6 <_svfiprintf_r+0x36>
 80030c4:	690b      	ldr	r3, [r1, #16]
 80030c6:	b973      	cbnz	r3, 80030e6 <_svfiprintf_r+0x36>
 80030c8:	2140      	movs	r1, #64	@ 0x40
 80030ca:	f7ff ff09 	bl	8002ee0 <_malloc_r>
 80030ce:	6028      	str	r0, [r5, #0]
 80030d0:	6128      	str	r0, [r5, #16]
 80030d2:	b930      	cbnz	r0, 80030e2 <_svfiprintf_r+0x32>
 80030d4:	230c      	movs	r3, #12
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	b01d      	add	sp, #116	@ 0x74
 80030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e2:	2340      	movs	r3, #64	@ 0x40
 80030e4:	616b      	str	r3, [r5, #20]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80030ea:	2320      	movs	r3, #32
 80030ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030f0:	2330      	movs	r3, #48	@ 0x30
 80030f2:	f04f 0901 	mov.w	r9, #1
 80030f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003294 <_svfiprintf_r+0x1e4>
 80030fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003102:	4623      	mov	r3, r4
 8003104:	469a      	mov	sl, r3
 8003106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800310a:	b10a      	cbz	r2, 8003110 <_svfiprintf_r+0x60>
 800310c:	2a25      	cmp	r2, #37	@ 0x25
 800310e:	d1f9      	bne.n	8003104 <_svfiprintf_r+0x54>
 8003110:	ebba 0b04 	subs.w	fp, sl, r4
 8003114:	d00b      	beq.n	800312e <_svfiprintf_r+0x7e>
 8003116:	465b      	mov	r3, fp
 8003118:	4622      	mov	r2, r4
 800311a:	4629      	mov	r1, r5
 800311c:	4638      	mov	r0, r7
 800311e:	f7ff ff6b 	bl	8002ff8 <__ssputs_r>
 8003122:	3001      	adds	r0, #1
 8003124:	f000 80a7 	beq.w	8003276 <_svfiprintf_r+0x1c6>
 8003128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800312a:	445a      	add	r2, fp
 800312c:	9209      	str	r2, [sp, #36]	@ 0x24
 800312e:	f89a 3000 	ldrb.w	r3, [sl]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 809f 	beq.w	8003276 <_svfiprintf_r+0x1c6>
 8003138:	2300      	movs	r3, #0
 800313a:	f04f 32ff 	mov.w	r2, #4294967295
 800313e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003142:	f10a 0a01 	add.w	sl, sl, #1
 8003146:	9304      	str	r3, [sp, #16]
 8003148:	9307      	str	r3, [sp, #28]
 800314a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800314e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003150:	4654      	mov	r4, sl
 8003152:	2205      	movs	r2, #5
 8003154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003158:	484e      	ldr	r0, [pc, #312]	@ (8003294 <_svfiprintf_r+0x1e4>)
 800315a:	f000 fa61 	bl	8003620 <memchr>
 800315e:	9a04      	ldr	r2, [sp, #16]
 8003160:	b9d8      	cbnz	r0, 800319a <_svfiprintf_r+0xea>
 8003162:	06d0      	lsls	r0, r2, #27
 8003164:	bf44      	itt	mi
 8003166:	2320      	movmi	r3, #32
 8003168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800316c:	0711      	lsls	r1, r2, #28
 800316e:	bf44      	itt	mi
 8003170:	232b      	movmi	r3, #43	@ 0x2b
 8003172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003176:	f89a 3000 	ldrb.w	r3, [sl]
 800317a:	2b2a      	cmp	r3, #42	@ 0x2a
 800317c:	d015      	beq.n	80031aa <_svfiprintf_r+0xfa>
 800317e:	4654      	mov	r4, sl
 8003180:	2000      	movs	r0, #0
 8003182:	f04f 0c0a 	mov.w	ip, #10
 8003186:	9a07      	ldr	r2, [sp, #28]
 8003188:	4621      	mov	r1, r4
 800318a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800318e:	3b30      	subs	r3, #48	@ 0x30
 8003190:	2b09      	cmp	r3, #9
 8003192:	d94b      	bls.n	800322c <_svfiprintf_r+0x17c>
 8003194:	b1b0      	cbz	r0, 80031c4 <_svfiprintf_r+0x114>
 8003196:	9207      	str	r2, [sp, #28]
 8003198:	e014      	b.n	80031c4 <_svfiprintf_r+0x114>
 800319a:	eba0 0308 	sub.w	r3, r0, r8
 800319e:	fa09 f303 	lsl.w	r3, r9, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	46a2      	mov	sl, r4
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	e7d2      	b.n	8003150 <_svfiprintf_r+0xa0>
 80031aa:	9b03      	ldr	r3, [sp, #12]
 80031ac:	1d19      	adds	r1, r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	9103      	str	r1, [sp, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfbb      	ittet	lt
 80031b6:	425b      	neglt	r3, r3
 80031b8:	f042 0202 	orrlt.w	r2, r2, #2
 80031bc:	9307      	strge	r3, [sp, #28]
 80031be:	9307      	strlt	r3, [sp, #28]
 80031c0:	bfb8      	it	lt
 80031c2:	9204      	strlt	r2, [sp, #16]
 80031c4:	7823      	ldrb	r3, [r4, #0]
 80031c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80031c8:	d10a      	bne.n	80031e0 <_svfiprintf_r+0x130>
 80031ca:	7863      	ldrb	r3, [r4, #1]
 80031cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80031ce:	d132      	bne.n	8003236 <_svfiprintf_r+0x186>
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	3402      	adds	r4, #2
 80031d4:	1d1a      	adds	r2, r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031de:	9305      	str	r3, [sp, #20]
 80031e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003298 <_svfiprintf_r+0x1e8>
 80031e4:	2203      	movs	r2, #3
 80031e6:	4650      	mov	r0, sl
 80031e8:	7821      	ldrb	r1, [r4, #0]
 80031ea:	f000 fa19 	bl	8003620 <memchr>
 80031ee:	b138      	cbz	r0, 8003200 <_svfiprintf_r+0x150>
 80031f0:	2240      	movs	r2, #64	@ 0x40
 80031f2:	9b04      	ldr	r3, [sp, #16]
 80031f4:	eba0 000a 	sub.w	r0, r0, sl
 80031f8:	4082      	lsls	r2, r0
 80031fa:	4313      	orrs	r3, r2
 80031fc:	3401      	adds	r4, #1
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003204:	2206      	movs	r2, #6
 8003206:	4825      	ldr	r0, [pc, #148]	@ (800329c <_svfiprintf_r+0x1ec>)
 8003208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800320c:	f000 fa08 	bl	8003620 <memchr>
 8003210:	2800      	cmp	r0, #0
 8003212:	d036      	beq.n	8003282 <_svfiprintf_r+0x1d2>
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <_svfiprintf_r+0x1f0>)
 8003216:	bb1b      	cbnz	r3, 8003260 <_svfiprintf_r+0x1b0>
 8003218:	9b03      	ldr	r3, [sp, #12]
 800321a:	3307      	adds	r3, #7
 800321c:	f023 0307 	bic.w	r3, r3, #7
 8003220:	3308      	adds	r3, #8
 8003222:	9303      	str	r3, [sp, #12]
 8003224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003226:	4433      	add	r3, r6
 8003228:	9309      	str	r3, [sp, #36]	@ 0x24
 800322a:	e76a      	b.n	8003102 <_svfiprintf_r+0x52>
 800322c:	460c      	mov	r4, r1
 800322e:	2001      	movs	r0, #1
 8003230:	fb0c 3202 	mla	r2, ip, r2, r3
 8003234:	e7a8      	b.n	8003188 <_svfiprintf_r+0xd8>
 8003236:	2300      	movs	r3, #0
 8003238:	f04f 0c0a 	mov.w	ip, #10
 800323c:	4619      	mov	r1, r3
 800323e:	3401      	adds	r4, #1
 8003240:	9305      	str	r3, [sp, #20]
 8003242:	4620      	mov	r0, r4
 8003244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003248:	3a30      	subs	r2, #48	@ 0x30
 800324a:	2a09      	cmp	r2, #9
 800324c:	d903      	bls.n	8003256 <_svfiprintf_r+0x1a6>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0c6      	beq.n	80031e0 <_svfiprintf_r+0x130>
 8003252:	9105      	str	r1, [sp, #20]
 8003254:	e7c4      	b.n	80031e0 <_svfiprintf_r+0x130>
 8003256:	4604      	mov	r4, r0
 8003258:	2301      	movs	r3, #1
 800325a:	fb0c 2101 	mla	r1, ip, r1, r2
 800325e:	e7f0      	b.n	8003242 <_svfiprintf_r+0x192>
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462a      	mov	r2, r5
 8003266:	4638      	mov	r0, r7
 8003268:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <_svfiprintf_r+0x1f4>)
 800326a:	a904      	add	r1, sp, #16
 800326c:	f3af 8000 	nop.w
 8003270:	1c42      	adds	r2, r0, #1
 8003272:	4606      	mov	r6, r0
 8003274:	d1d6      	bne.n	8003224 <_svfiprintf_r+0x174>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	065b      	lsls	r3, r3, #25
 800327a:	f53f af2d 	bmi.w	80030d8 <_svfiprintf_r+0x28>
 800327e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003280:	e72c      	b.n	80030dc <_svfiprintf_r+0x2c>
 8003282:	ab03      	add	r3, sp, #12
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	462a      	mov	r2, r5
 8003288:	4638      	mov	r0, r7
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <_svfiprintf_r+0x1f4>)
 800328c:	a904      	add	r1, sp, #16
 800328e:	f000 f87d 	bl	800338c <_printf_i>
 8003292:	e7ed      	b.n	8003270 <_svfiprintf_r+0x1c0>
 8003294:	08003716 	.word	0x08003716
 8003298:	0800371c 	.word	0x0800371c
 800329c:	08003720 	.word	0x08003720
 80032a0:	00000000 	.word	0x00000000
 80032a4:	08002ff9 	.word	0x08002ff9

080032a8 <_printf_common>:
 80032a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	4616      	mov	r6, r2
 80032ae:	4698      	mov	r8, r3
 80032b0:	688a      	ldr	r2, [r1, #8]
 80032b2:	690b      	ldr	r3, [r1, #16]
 80032b4:	4607      	mov	r7, r0
 80032b6:	4293      	cmp	r3, r2
 80032b8:	bfb8      	it	lt
 80032ba:	4613      	movlt	r3, r2
 80032bc:	6033      	str	r3, [r6, #0]
 80032be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032c2:	460c      	mov	r4, r1
 80032c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032c8:	b10a      	cbz	r2, 80032ce <_printf_common+0x26>
 80032ca:	3301      	adds	r3, #1
 80032cc:	6033      	str	r3, [r6, #0]
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	0699      	lsls	r1, r3, #26
 80032d2:	bf42      	ittt	mi
 80032d4:	6833      	ldrmi	r3, [r6, #0]
 80032d6:	3302      	addmi	r3, #2
 80032d8:	6033      	strmi	r3, [r6, #0]
 80032da:	6825      	ldr	r5, [r4, #0]
 80032dc:	f015 0506 	ands.w	r5, r5, #6
 80032e0:	d106      	bne.n	80032f0 <_printf_common+0x48>
 80032e2:	f104 0a19 	add.w	sl, r4, #25
 80032e6:	68e3      	ldr	r3, [r4, #12]
 80032e8:	6832      	ldr	r2, [r6, #0]
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	42ab      	cmp	r3, r5
 80032ee:	dc2b      	bgt.n	8003348 <_printf_common+0xa0>
 80032f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	3b00      	subs	r3, #0
 80032f8:	bf18      	it	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	0692      	lsls	r2, r2, #26
 80032fe:	d430      	bmi.n	8003362 <_printf_common+0xba>
 8003300:	4641      	mov	r1, r8
 8003302:	4638      	mov	r0, r7
 8003304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003308:	47c8      	blx	r9
 800330a:	3001      	adds	r0, #1
 800330c:	d023      	beq.n	8003356 <_printf_common+0xae>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	6922      	ldr	r2, [r4, #16]
 8003312:	f003 0306 	and.w	r3, r3, #6
 8003316:	2b04      	cmp	r3, #4
 8003318:	bf14      	ite	ne
 800331a:	2500      	movne	r5, #0
 800331c:	6833      	ldreq	r3, [r6, #0]
 800331e:	f04f 0600 	mov.w	r6, #0
 8003322:	bf08      	it	eq
 8003324:	68e5      	ldreq	r5, [r4, #12]
 8003326:	f104 041a 	add.w	r4, r4, #26
 800332a:	bf08      	it	eq
 800332c:	1aed      	subeq	r5, r5, r3
 800332e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003332:	bf08      	it	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	4293      	cmp	r3, r2
 800333a:	bfc4      	itt	gt
 800333c:	1a9b      	subgt	r3, r3, r2
 800333e:	18ed      	addgt	r5, r5, r3
 8003340:	42b5      	cmp	r5, r6
 8003342:	d11a      	bne.n	800337a <_printf_common+0xd2>
 8003344:	2000      	movs	r0, #0
 8003346:	e008      	b.n	800335a <_printf_common+0xb2>
 8003348:	2301      	movs	r3, #1
 800334a:	4652      	mov	r2, sl
 800334c:	4641      	mov	r1, r8
 800334e:	4638      	mov	r0, r7
 8003350:	47c8      	blx	r9
 8003352:	3001      	adds	r0, #1
 8003354:	d103      	bne.n	800335e <_printf_common+0xb6>
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335e:	3501      	adds	r5, #1
 8003360:	e7c1      	b.n	80032e6 <_printf_common+0x3e>
 8003362:	2030      	movs	r0, #48	@ 0x30
 8003364:	18e1      	adds	r1, r4, r3
 8003366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003370:	4422      	add	r2, r4
 8003372:	3302      	adds	r3, #2
 8003374:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003378:	e7c2      	b.n	8003300 <_printf_common+0x58>
 800337a:	2301      	movs	r3, #1
 800337c:	4622      	mov	r2, r4
 800337e:	4641      	mov	r1, r8
 8003380:	4638      	mov	r0, r7
 8003382:	47c8      	blx	r9
 8003384:	3001      	adds	r0, #1
 8003386:	d0e6      	beq.n	8003356 <_printf_common+0xae>
 8003388:	3601      	adds	r6, #1
 800338a:	e7d9      	b.n	8003340 <_printf_common+0x98>

0800338c <_printf_i>:
 800338c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003390:	7e0f      	ldrb	r7, [r1, #24]
 8003392:	4691      	mov	r9, r2
 8003394:	2f78      	cmp	r7, #120	@ 0x78
 8003396:	4680      	mov	r8, r0
 8003398:	460c      	mov	r4, r1
 800339a:	469a      	mov	sl, r3
 800339c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800339e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033a2:	d807      	bhi.n	80033b4 <_printf_i+0x28>
 80033a4:	2f62      	cmp	r7, #98	@ 0x62
 80033a6:	d80a      	bhi.n	80033be <_printf_i+0x32>
 80033a8:	2f00      	cmp	r7, #0
 80033aa:	f000 80d3 	beq.w	8003554 <_printf_i+0x1c8>
 80033ae:	2f58      	cmp	r7, #88	@ 0x58
 80033b0:	f000 80ba 	beq.w	8003528 <_printf_i+0x19c>
 80033b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033bc:	e03a      	b.n	8003434 <_printf_i+0xa8>
 80033be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033c2:	2b15      	cmp	r3, #21
 80033c4:	d8f6      	bhi.n	80033b4 <_printf_i+0x28>
 80033c6:	a101      	add	r1, pc, #4	@ (adr r1, 80033cc <_printf_i+0x40>)
 80033c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033cc:	08003425 	.word	0x08003425
 80033d0:	08003439 	.word	0x08003439
 80033d4:	080033b5 	.word	0x080033b5
 80033d8:	080033b5 	.word	0x080033b5
 80033dc:	080033b5 	.word	0x080033b5
 80033e0:	080033b5 	.word	0x080033b5
 80033e4:	08003439 	.word	0x08003439
 80033e8:	080033b5 	.word	0x080033b5
 80033ec:	080033b5 	.word	0x080033b5
 80033f0:	080033b5 	.word	0x080033b5
 80033f4:	080033b5 	.word	0x080033b5
 80033f8:	0800353b 	.word	0x0800353b
 80033fc:	08003463 	.word	0x08003463
 8003400:	080034f5 	.word	0x080034f5
 8003404:	080033b5 	.word	0x080033b5
 8003408:	080033b5 	.word	0x080033b5
 800340c:	0800355d 	.word	0x0800355d
 8003410:	080033b5 	.word	0x080033b5
 8003414:	08003463 	.word	0x08003463
 8003418:	080033b5 	.word	0x080033b5
 800341c:	080033b5 	.word	0x080033b5
 8003420:	080034fd 	.word	0x080034fd
 8003424:	6833      	ldr	r3, [r6, #0]
 8003426:	1d1a      	adds	r2, r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6032      	str	r2, [r6, #0]
 800342c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003434:	2301      	movs	r3, #1
 8003436:	e09e      	b.n	8003576 <_printf_i+0x1ea>
 8003438:	6833      	ldr	r3, [r6, #0]
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	1d19      	adds	r1, r3, #4
 800343e:	6031      	str	r1, [r6, #0]
 8003440:	0606      	lsls	r6, r0, #24
 8003442:	d501      	bpl.n	8003448 <_printf_i+0xbc>
 8003444:	681d      	ldr	r5, [r3, #0]
 8003446:	e003      	b.n	8003450 <_printf_i+0xc4>
 8003448:	0645      	lsls	r5, r0, #25
 800344a:	d5fb      	bpl.n	8003444 <_printf_i+0xb8>
 800344c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003450:	2d00      	cmp	r5, #0
 8003452:	da03      	bge.n	800345c <_printf_i+0xd0>
 8003454:	232d      	movs	r3, #45	@ 0x2d
 8003456:	426d      	negs	r5, r5
 8003458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800345c:	230a      	movs	r3, #10
 800345e:	4859      	ldr	r0, [pc, #356]	@ (80035c4 <_printf_i+0x238>)
 8003460:	e011      	b.n	8003486 <_printf_i+0xfa>
 8003462:	6821      	ldr	r1, [r4, #0]
 8003464:	6833      	ldr	r3, [r6, #0]
 8003466:	0608      	lsls	r0, r1, #24
 8003468:	f853 5b04 	ldr.w	r5, [r3], #4
 800346c:	d402      	bmi.n	8003474 <_printf_i+0xe8>
 800346e:	0649      	lsls	r1, r1, #25
 8003470:	bf48      	it	mi
 8003472:	b2ad      	uxthmi	r5, r5
 8003474:	2f6f      	cmp	r7, #111	@ 0x6f
 8003476:	6033      	str	r3, [r6, #0]
 8003478:	bf14      	ite	ne
 800347a:	230a      	movne	r3, #10
 800347c:	2308      	moveq	r3, #8
 800347e:	4851      	ldr	r0, [pc, #324]	@ (80035c4 <_printf_i+0x238>)
 8003480:	2100      	movs	r1, #0
 8003482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003486:	6866      	ldr	r6, [r4, #4]
 8003488:	2e00      	cmp	r6, #0
 800348a:	bfa8      	it	ge
 800348c:	6821      	ldrge	r1, [r4, #0]
 800348e:	60a6      	str	r6, [r4, #8]
 8003490:	bfa4      	itt	ge
 8003492:	f021 0104 	bicge.w	r1, r1, #4
 8003496:	6021      	strge	r1, [r4, #0]
 8003498:	b90d      	cbnz	r5, 800349e <_printf_i+0x112>
 800349a:	2e00      	cmp	r6, #0
 800349c:	d04b      	beq.n	8003536 <_printf_i+0x1aa>
 800349e:	4616      	mov	r6, r2
 80034a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80034a4:	fb03 5711 	mls	r7, r3, r1, r5
 80034a8:	5dc7      	ldrb	r7, [r0, r7]
 80034aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034ae:	462f      	mov	r7, r5
 80034b0:	42bb      	cmp	r3, r7
 80034b2:	460d      	mov	r5, r1
 80034b4:	d9f4      	bls.n	80034a0 <_printf_i+0x114>
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d10b      	bne.n	80034d2 <_printf_i+0x146>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	07df      	lsls	r7, r3, #31
 80034be:	d508      	bpl.n	80034d2 <_printf_i+0x146>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	6861      	ldr	r1, [r4, #4]
 80034c4:	4299      	cmp	r1, r3
 80034c6:	bfde      	ittt	le
 80034c8:	2330      	movle	r3, #48	@ 0x30
 80034ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034d2:	1b92      	subs	r2, r2, r6
 80034d4:	6122      	str	r2, [r4, #16]
 80034d6:	464b      	mov	r3, r9
 80034d8:	4621      	mov	r1, r4
 80034da:	4640      	mov	r0, r8
 80034dc:	f8cd a000 	str.w	sl, [sp]
 80034e0:	aa03      	add	r2, sp, #12
 80034e2:	f7ff fee1 	bl	80032a8 <_printf_common>
 80034e6:	3001      	adds	r0, #1
 80034e8:	d14a      	bne.n	8003580 <_printf_i+0x1f4>
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	b004      	add	sp, #16
 80034f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	2778      	movs	r7, #120	@ 0x78
 80034fe:	4832      	ldr	r0, [pc, #200]	@ (80035c8 <_printf_i+0x23c>)
 8003500:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	6831      	ldr	r1, [r6, #0]
 8003508:	061f      	lsls	r7, r3, #24
 800350a:	f851 5b04 	ldr.w	r5, [r1], #4
 800350e:	d402      	bmi.n	8003516 <_printf_i+0x18a>
 8003510:	065f      	lsls	r7, r3, #25
 8003512:	bf48      	it	mi
 8003514:	b2ad      	uxthmi	r5, r5
 8003516:	6031      	str	r1, [r6, #0]
 8003518:	07d9      	lsls	r1, r3, #31
 800351a:	bf44      	itt	mi
 800351c:	f043 0320 	orrmi.w	r3, r3, #32
 8003520:	6023      	strmi	r3, [r4, #0]
 8003522:	b11d      	cbz	r5, 800352c <_printf_i+0x1a0>
 8003524:	2310      	movs	r3, #16
 8003526:	e7ab      	b.n	8003480 <_printf_i+0xf4>
 8003528:	4826      	ldr	r0, [pc, #152]	@ (80035c4 <_printf_i+0x238>)
 800352a:	e7e9      	b.n	8003500 <_printf_i+0x174>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f023 0320 	bic.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	e7f6      	b.n	8003524 <_printf_i+0x198>
 8003536:	4616      	mov	r6, r2
 8003538:	e7bd      	b.n	80034b6 <_printf_i+0x12a>
 800353a:	6833      	ldr	r3, [r6, #0]
 800353c:	6825      	ldr	r5, [r4, #0]
 800353e:	1d18      	adds	r0, r3, #4
 8003540:	6961      	ldr	r1, [r4, #20]
 8003542:	6030      	str	r0, [r6, #0]
 8003544:	062e      	lsls	r6, r5, #24
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	d501      	bpl.n	800354e <_printf_i+0x1c2>
 800354a:	6019      	str	r1, [r3, #0]
 800354c:	e002      	b.n	8003554 <_printf_i+0x1c8>
 800354e:	0668      	lsls	r0, r5, #25
 8003550:	d5fb      	bpl.n	800354a <_printf_i+0x1be>
 8003552:	8019      	strh	r1, [r3, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	4616      	mov	r6, r2
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	e7bc      	b.n	80034d6 <_printf_i+0x14a>
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	2100      	movs	r1, #0
 8003560:	1d1a      	adds	r2, r3, #4
 8003562:	6032      	str	r2, [r6, #0]
 8003564:	681e      	ldr	r6, [r3, #0]
 8003566:	6862      	ldr	r2, [r4, #4]
 8003568:	4630      	mov	r0, r6
 800356a:	f000 f859 	bl	8003620 <memchr>
 800356e:	b108      	cbz	r0, 8003574 <_printf_i+0x1e8>
 8003570:	1b80      	subs	r0, r0, r6
 8003572:	6060      	str	r0, [r4, #4]
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	6123      	str	r3, [r4, #16]
 8003578:	2300      	movs	r3, #0
 800357a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800357e:	e7aa      	b.n	80034d6 <_printf_i+0x14a>
 8003580:	4632      	mov	r2, r6
 8003582:	4649      	mov	r1, r9
 8003584:	4640      	mov	r0, r8
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	47d0      	blx	sl
 800358a:	3001      	adds	r0, #1
 800358c:	d0ad      	beq.n	80034ea <_printf_i+0x15e>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	079b      	lsls	r3, r3, #30
 8003592:	d413      	bmi.n	80035bc <_printf_i+0x230>
 8003594:	68e0      	ldr	r0, [r4, #12]
 8003596:	9b03      	ldr	r3, [sp, #12]
 8003598:	4298      	cmp	r0, r3
 800359a:	bfb8      	it	lt
 800359c:	4618      	movlt	r0, r3
 800359e:	e7a6      	b.n	80034ee <_printf_i+0x162>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4632      	mov	r2, r6
 80035a4:	4649      	mov	r1, r9
 80035a6:	4640      	mov	r0, r8
 80035a8:	47d0      	blx	sl
 80035aa:	3001      	adds	r0, #1
 80035ac:	d09d      	beq.n	80034ea <_printf_i+0x15e>
 80035ae:	3501      	adds	r5, #1
 80035b0:	68e3      	ldr	r3, [r4, #12]
 80035b2:	9903      	ldr	r1, [sp, #12]
 80035b4:	1a5b      	subs	r3, r3, r1
 80035b6:	42ab      	cmp	r3, r5
 80035b8:	dcf2      	bgt.n	80035a0 <_printf_i+0x214>
 80035ba:	e7eb      	b.n	8003594 <_printf_i+0x208>
 80035bc:	2500      	movs	r5, #0
 80035be:	f104 0619 	add.w	r6, r4, #25
 80035c2:	e7f5      	b.n	80035b0 <_printf_i+0x224>
 80035c4:	08003727 	.word	0x08003727
 80035c8:	08003738 	.word	0x08003738

080035cc <memmove>:
 80035cc:	4288      	cmp	r0, r1
 80035ce:	b510      	push	{r4, lr}
 80035d0:	eb01 0402 	add.w	r4, r1, r2
 80035d4:	d902      	bls.n	80035dc <memmove+0x10>
 80035d6:	4284      	cmp	r4, r0
 80035d8:	4623      	mov	r3, r4
 80035da:	d807      	bhi.n	80035ec <memmove+0x20>
 80035dc:	1e43      	subs	r3, r0, #1
 80035de:	42a1      	cmp	r1, r4
 80035e0:	d008      	beq.n	80035f4 <memmove+0x28>
 80035e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035ea:	e7f8      	b.n	80035de <memmove+0x12>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4402      	add	r2, r0
 80035f0:	428a      	cmp	r2, r1
 80035f2:	d100      	bne.n	80035f6 <memmove+0x2a>
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035fe:	e7f7      	b.n	80035f0 <memmove+0x24>

08003600 <_sbrk_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	2300      	movs	r3, #0
 8003604:	4d05      	ldr	r5, [pc, #20]	@ (800361c <_sbrk_r+0x1c>)
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	f7fd fc2c 	bl	8000e68 <_sbrk>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d102      	bne.n	800361a <_sbrk_r+0x1a>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	b103      	cbz	r3, 800361a <_sbrk_r+0x1a>
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	200003c4 	.word	0x200003c4

08003620 <memchr>:
 8003620:	4603      	mov	r3, r0
 8003622:	b510      	push	{r4, lr}
 8003624:	b2c9      	uxtb	r1, r1
 8003626:	4402      	add	r2, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	4618      	mov	r0, r3
 800362c:	d101      	bne.n	8003632 <memchr+0x12>
 800362e:	2000      	movs	r0, #0
 8003630:	e003      	b.n	800363a <memchr+0x1a>
 8003632:	7804      	ldrb	r4, [r0, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	428c      	cmp	r4, r1
 8003638:	d1f6      	bne.n	8003628 <memchr+0x8>
 800363a:	bd10      	pop	{r4, pc}

0800363c <memcpy>:
 800363c:	440a      	add	r2, r1
 800363e:	4291      	cmp	r1, r2
 8003640:	f100 33ff 	add.w	r3, r0, #4294967295
 8003644:	d100      	bne.n	8003648 <memcpy+0xc>
 8003646:	4770      	bx	lr
 8003648:	b510      	push	{r4, lr}
 800364a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800364e:	4291      	cmp	r1, r2
 8003650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003654:	d1f9      	bne.n	800364a <memcpy+0xe>
 8003656:	bd10      	pop	{r4, pc}

08003658 <_realloc_r>:
 8003658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365c:	4680      	mov	r8, r0
 800365e:	4615      	mov	r5, r2
 8003660:	460c      	mov	r4, r1
 8003662:	b921      	cbnz	r1, 800366e <_realloc_r+0x16>
 8003664:	4611      	mov	r1, r2
 8003666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800366a:	f7ff bc39 	b.w	8002ee0 <_malloc_r>
 800366e:	b92a      	cbnz	r2, 800367c <_realloc_r+0x24>
 8003670:	f7ff fbcc 	bl	8002e0c <_free_r>
 8003674:	2400      	movs	r4, #0
 8003676:	4620      	mov	r0, r4
 8003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800367c:	f000 f81a 	bl	80036b4 <_malloc_usable_size_r>
 8003680:	4285      	cmp	r5, r0
 8003682:	4606      	mov	r6, r0
 8003684:	d802      	bhi.n	800368c <_realloc_r+0x34>
 8003686:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800368a:	d8f4      	bhi.n	8003676 <_realloc_r+0x1e>
 800368c:	4629      	mov	r1, r5
 800368e:	4640      	mov	r0, r8
 8003690:	f7ff fc26 	bl	8002ee0 <_malloc_r>
 8003694:	4607      	mov	r7, r0
 8003696:	2800      	cmp	r0, #0
 8003698:	d0ec      	beq.n	8003674 <_realloc_r+0x1c>
 800369a:	42b5      	cmp	r5, r6
 800369c:	462a      	mov	r2, r5
 800369e:	4621      	mov	r1, r4
 80036a0:	bf28      	it	cs
 80036a2:	4632      	movcs	r2, r6
 80036a4:	f7ff ffca 	bl	800363c <memcpy>
 80036a8:	4621      	mov	r1, r4
 80036aa:	4640      	mov	r0, r8
 80036ac:	f7ff fbae 	bl	8002e0c <_free_r>
 80036b0:	463c      	mov	r4, r7
 80036b2:	e7e0      	b.n	8003676 <_realloc_r+0x1e>

080036b4 <_malloc_usable_size_r>:
 80036b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b8:	1f18      	subs	r0, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfbc      	itt	lt
 80036be:	580b      	ldrlt	r3, [r1, r0]
 80036c0:	18c0      	addlt	r0, r0, r3
 80036c2:	4770      	bx	lr

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
