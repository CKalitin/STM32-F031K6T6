
Solar-ECU-ADC-Auto-Characterization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08007b88  08007b88  00008b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008018  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  080081ec  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  080081ec  0000a484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ff0  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  000131ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00014db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000632  00000000  00000000  000155f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac95  00000000  00000000  00015c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b373  00000000  00000000  000308b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980db  00000000  00000000  0003bc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  000d3d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000d71c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08007b6c 	.word	0x08007b6c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08007b6c 	.word	0x08007b6c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	2200      	movs	r2, #0
 8000c44:	2300      	movs	r3, #0
 8000c46:	4604      	mov	r4, r0
 8000c48:	460d      	mov	r5, r1
 8000c4a:	f7ff ff23 	bl	8000a94 <__aeabi_dcmplt>
 8000c4e:	b928      	cbnz	r0, 8000c5c <__aeabi_d2lz+0x1c>
 8000c50:	4620      	mov	r0, r4
 8000c52:	4629      	mov	r1, r5
 8000c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c58:	f000 b80a 	b.w	8000c70 <__aeabi_d2ulz>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c62:	f000 f805 	bl	8000c70 <__aeabi_d2ulz>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	bd38      	pop	{r3, r4, r5, pc}
 8000c6e:	bf00      	nop

08000c70 <__aeabi_d2ulz>:
 8000c70:	b5d0      	push	{r4, r6, r7, lr}
 8000c72:	2200      	movs	r2, #0
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <__aeabi_d2ulz+0x34>)
 8000c76:	4606      	mov	r6, r0
 8000c78:	460f      	mov	r7, r1
 8000c7a:	f7ff fc99 	bl	80005b0 <__aeabi_dmul>
 8000c7e:	f7ff ff6f 	bl	8000b60 <__aeabi_d2uiz>
 8000c82:	4604      	mov	r4, r0
 8000c84:	f7ff fc1a 	bl	80004bc <__aeabi_ui2d>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <__aeabi_d2ulz+0x38>)
 8000c8c:	f7ff fc90 	bl	80005b0 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4630      	mov	r0, r6
 8000c96:	4639      	mov	r1, r7
 8000c98:	f7ff fad2 	bl	8000240 <__aeabi_dsub>
 8000c9c:	f7ff ff60 	bl	8000b60 <__aeabi_d2uiz>
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca4:	3df00000 	.word	0x3df00000
 8000ca8:	41f00000 	.word	0x41f00000
 8000cac:	00000000 	.word	0x00000000

08000cb0 <Get_Averaged_ADC_Values>:
  * @param msPerObv: Milliseconds between each ADC observation
  * @param adcValuesAveraged: Pointer to the averaged ADC value
  * @param adcValuesAdjusted: Pointer to the averaged ADC value, adjusted for error
  * @retval None
  */
void Get_Averaged_ADC_Values(ADC_HandleTypeDef hadc, int numSamples, int msPerObv, int* adcValuesAveraged, int* adcValuesAdcAdjusted, int* adcValuesCurrentAdjusted){
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f107 0c18 	add.w	ip, r7, #24
 8000cbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int adcValuesSum = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

  HAL_ADC_Start(&hadc);
 8000cc4:	f107 0018 	add.w	r0, r7, #24
 8000cc8:	f000 fd9c 	bl	8001804 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	f107 0018 	add.w	r0, r7, #24
 8000cd2:	f000 fe45 	bl	8001960 <HAL_ADC_PollForConversion>

  // Get numSamples ADC values, each 1ms apart
  for (int i = 0; i < numSamples; i++){
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	e00e      	b.n	8000cfa <Get_Averaged_ADC_Values+0x4a>
    adcValuesSum += HAL_ADC_GetValue(&hadc);
 8000cdc:	f107 0018 	add.w	r0, r7, #24
 8000ce0:	f000 ff44 	bl	8001b6c <HAL_ADC_GetValue>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(msPerObv);
 8000cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fc7a 	bl	80015e8 <HAL_Delay>
  for (int i = 0; i < numSamples; i++){
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbec      	blt.n	8000cdc <Get_Averaged_ADC_Values+0x2c>
  }

  *adcValuesAveraged = adcValuesSum / numSamples; // Set pointer output
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d06:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0c:	601a      	str	r2, [r3, #0]

  // ADC Error Polynomial: -75.8 + 0.0222x
  // Current Sensor ADC Error Polynomial: 72 - 0.0325x + 19.6 - 8.82E-3x = 91.6 - 0.04132x

  int adcError = -75.8 + 0.0222 * (*adcValuesAveraged); // This is a predetermined error polynomial
 8000d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fbe2 	bl	80004dc <__aeabi_i2d>
 8000d18:	a321      	add	r3, pc, #132	@ (adr r3, 8000da0 <Get_Averaged_ADC_Values+0xf0>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fc47 	bl	80005b0 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	a31f      	add	r3, pc, #124	@ (adr r3, 8000da8 <Get_Averaged_ADC_Values+0xf8>)
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f7ff fa86 	bl	8000240 <__aeabi_dsub>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f7ff fee8 	bl	8000b10 <__aeabi_d2iz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	607b      	str	r3, [r7, #4]
  int currentSensorADCError = 91.6 - 0.04132 * (*adcValuesAveraged); // This is the predetermined erroy polynomial for the current sensor
 8000d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fbc7 	bl	80004dc <__aeabi_i2d>
 8000d4e:	a318      	add	r3, pc, #96	@ (adr r3, 8000db0 <Get_Averaged_ADC_Values+0x100>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fc2c 	bl	80005b0 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	a116      	add	r1, pc, #88	@ (adr r1, 8000db8 <Get_Averaged_ADC_Values+0x108>)
 8000d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d62:	f7ff fa6d 	bl	8000240 <__aeabi_dsub>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff fecf 	bl	8000b10 <__aeabi_d2iz>
 8000d72:	4603      	mov	r3, r0
 8000d74:	603b      	str	r3, [r7, #0]

  *adcValuesAdcAdjusted = *adcValuesAveraged - adcError; // Set the other pointer output
 8000d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d80:	601a      	str	r2, [r3, #0]
  *adcValuesCurrentAdjusted = *adcValuesAveraged - adcError - currentSensorADCError; // Set the other pointer output
 8000d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d9c:	b004      	add	sp, #16
 8000d9e:	4770      	bx	lr
 8000da0:	c7e28241 	.word	0xc7e28241
 8000da4:	3f96bb98 	.word	0x3f96bb98
 8000da8:	33333333 	.word	0x33333333
 8000dac:	4052f333 	.word	0x4052f333
 8000db0:	2157689d 	.word	0x2157689d
 8000db4:	3fa527e5 	.word	0x3fa527e5
 8000db8:	66666666 	.word	0x66666666
 8000dbc:	4056e666 	.word	0x4056e666

08000dc0 <Continue_On_UART_Receive>:
/**
  * @brief Wait for 's' character to be received over UART to continue the program
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Continue_On_UART_Receive(UART_HandleTypeDef uart){
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	f107 0c08 	add.w	ip, r7, #8
 8000dca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // The 's' character here is arbitrary
  // We just pause the program until we see 's\n' received over uart
  memset(rx_buff, 0, sizeof(rx_buff));
 8000dce:	2264      	movs	r2, #100	@ 0x64
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	480f      	ldr	r0, [pc, #60]	@ (8000e10 <Continue_On_UART_Receive+0x50>)
 8000dd4:	f003 faff 	bl	80043d6 <memset>
  while (rx_buff[0] != 's'){
 8000dd8:	e00f      	b.n	8000dfa <Continue_On_UART_Receive+0x3a>
    memset(rx_buff, 0, sizeof(rx_buff));
 8000dda:	2264      	movs	r2, #100	@ 0x64
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <Continue_On_UART_Receive+0x50>)
 8000de0:	f003 faf9 	bl	80043d6 <memset>
    HAL_UART_Receive(&uart, (uint8_t*)rx_buff, sizeof(rx_buff), 1000); // HAL_UART_Receive waits until '\n' to continue the program
 8000de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de8:	2264      	movs	r2, #100	@ 0x64
 8000dea:	4909      	ldr	r1, [pc, #36]	@ (8000e10 <Continue_On_UART_Receive+0x50>)
 8000dec:	f107 0008 	add.w	r0, r7, #8
 8000df0:	f002 f97f 	bl	80030f2 <HAL_UART_Receive>
    HAL_Delay(1); // Wait a ms because why not
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fbf7 	bl	80015e8 <HAL_Delay>
  while (rx_buff[0] != 's'){
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <Continue_On_UART_Receive+0x50>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b73      	cmp	r3, #115	@ 0x73
 8000e00:	d1eb      	bne.n	8000dda <Continue_On_UART_Receive+0x1a>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e0c:	b004      	add	sp, #16
 8000e0e:	4770      	bx	lr
 8000e10:	20000254 	.word	0x20000254

08000e14 <Send_ADC_Values_Over_UART>:
/**
  * @brief Send ADC values over UART to the Python script
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Send_ADC_Values_Over_UART(UART_HandleTypeDef uart, int adcValuesAveraged, int adcValuesADCAdjusted, int adcValuesCurrentAdjusted){
 8000e14:	b084      	sub	sp, #16
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b090      	sub	sp, #64	@ 0x40
 8000e1a:	af02      	add	r7, sp, #8
 8000e1c:	f107 0c40 	add.w	ip, r7, #64	@ 0x40
 8000e20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  char new_buff[50] = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	222e      	movs	r2, #46	@ 0x2e
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fad0 	bl	80043d6 <memset>
  memset(tx_buff, 0, sizeof(tx_buff));
 8000e36:	2264      	movs	r2, #100	@ 0x64
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <Send_ADC_Values_Over_UART+0x60>)
 8000e3c:	f003 facb 	bl	80043d6 <memset>
  sprintf(new_buff, "%d, %d, %d\n\r", adcValuesAveraged, adcValuesADCAdjusted, adcValuesCurrentAdjusted);
 8000e40:	1d38      	adds	r0, r7, #4
 8000e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000e50:	4909      	ldr	r1, [pc, #36]	@ (8000e78 <Send_ADC_Values_Over_UART+0x64>)
 8000e52:	f003 fa5d 	bl	8004310 <siprintf>
  HAL_UART_Transmit(&uart, (uint8_t*)new_buff, sizeof(new_buff), 1000);
 8000e56:	1d39      	adds	r1, r7, #4
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	2232      	movs	r2, #50	@ 0x32
 8000e5e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e62:	f002 f8bb 	bl	8002fdc <HAL_UART_Transmit>
}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	@ 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr
 8000e74:	200001f0 	.word	0x200001f0
 8000e78:	08007b88 	.word	0x08007b88

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b097      	sub	sp, #92	@ 0x5c
 8000e80:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fb4f 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f861 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 f919 	bl	80010c0 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e8e:	f000 f8ed 	bl	800106c <MX_UART5_Init>
  MX_ADC1_Init();
 8000e92:	f000 f8ad 	bl	8000ff0 <MX_ADC1_Init>

    /* USER CODE BEGIN 3 */

    // This function waits until 's' is received on UART to continue
    // This way, from the Python script we can command the STM32 chip operate only when we tell it to
    Continue_On_UART_Receive(huart5);
 8000e96:	4e2a      	ldr	r6, [pc, #168]	@ (8000f40 <main+0xc4>)
 8000e98:	466d      	mov	r5, sp
 8000e9a:	f106 0410 	add.w	r4, r6, #16
 8000e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eb2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000eb6:	f7ff ff83 	bl	8000dc0 <Continue_On_UART_Receive>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle the LED high when we're collecting or sending values
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4821      	ldr	r0, [pc, #132]	@ (8000f44 <main+0xc8>)
 8000ebe:	f001 fa85 	bl	80023cc <HAL_GPIO_TogglePin>

    int adcValuesAveraged = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
    int adcValuesAdcAdjusted = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
    int adcValuesCurrentAdjusted = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
    Get_Averaged_ADC_Values(hadc1, 200, 1, &adcValuesAveraged, &adcValuesAdcAdjusted, &adcValuesCurrentAdjusted);
 8000ece:	4e1e      	ldr	r6, [pc, #120]	@ (8000f48 <main+0xcc>)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	930c      	str	r3, [sp, #48]	@ 0x30
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ee4:	23c8      	movs	r3, #200	@ 0xc8
 8000ee6:	9308      	str	r3, [sp, #32]
 8000ee8:	466d      	mov	r5, sp
 8000eea:	f106 0410 	add.w	r4, r6, #16
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ef6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000efa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000efe:	f7ff fed7 	bl	8000cb0 <Get_Averaged_ADC_Values>

    Send_ADC_Values_Over_UART(huart5, adcValuesAveraged, adcValuesAdcAdjusted, adcValuesCurrentAdjusted);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4e0d      	ldr	r6, [pc, #52]	@ (8000f40 <main+0xc4>)
 8000f0a:	9110      	str	r1, [sp, #64]	@ 0x40
 8000f0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000f0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8000f10:	466d      	mov	r5, sp
 8000f12:	f106 0410 	add.w	r4, r6, #16
 8000f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f2e:	f7ff ff71 	bl	8000e14 <Send_ADC_Values_Over_UART>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f32:	2104      	movs	r1, #4
 8000f34:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <main+0xc8>)
 8000f36:	f001 fa49 	bl	80023cc <HAL_GPIO_TogglePin>
	{
 8000f3a:	bf00      	nop
 8000f3c:	e7ab      	b.n	8000e96 <main+0x1a>
 8000f3e:	bf00      	nop
 8000f40:	200002e8 	.word	0x200002e8
 8000f44:	40010800 	.word	0x40010800
 8000f48:	200002b8 	.word	0x200002b8

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b096      	sub	sp, #88	@ 0x58
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f56:	2228      	movs	r2, #40	@ 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa3b 	bl	80043d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fa33 	bl	8002400 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fa0:	f000 f8d8 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fca0 	bl	8002904 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fca:	f000 f8c3 	bl	8001154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fe21 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fe4:	f000 f8b6 	bl	8001154 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3758      	adds	r7, #88	@ 0x58
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_ADC1_Init+0x74>)
 8001002:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <MX_ADC1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_ADC1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_ADC1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_ADC1_Init+0x74>)
 800101a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800101e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001020:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_ADC1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_ADC1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_ADC1_Init+0x74>)
 800102e:	f000 faff 	bl	8001630 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001038:	f000 f88c 	bl	8001154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800103c:	230e      	movs	r3, #14
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_ADC1_Init+0x74>)
 800104e:	f000 fd99 	bl	8001b84 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001058:	f000 f87c 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200002b8 	.word	0x200002b8
 8001068:	40012400 	.word	0x40012400

0800106c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <MX_UART5_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_UART5_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_UART5_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_UART5_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_UART5_Init+0x4c>)
 80010a4:	f001 ff4a 	bl	8002f3c <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f851 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002e8 	.word	0x200002e8
 80010bc:	40005000 	.word	0x40005000

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a16      	ldr	r2, [pc, #88]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_GPIO_Init+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_GPIO_Init+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a10      	ldr	r2, [pc, #64]	@ (800114c <MX_GPIO_Init+0x8c>)
 800110a:	f043 0320 	orr.w	r3, r3, #32
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_GPIO_Init+0x8c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2104      	movs	r1, #4
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <MX_GPIO_Init+0x90>)
 8001122:	f001 f93b 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_GPIO_Init+0x90>)
 800113e:	f000 ff99 	bl	8002074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <HAL_MspInit+0x5c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_MspInit+0x60>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_MspInit+0x60>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <HAL_ADC_MspInit+0x6c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d121      	bne.n	8001228 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_ADC_MspInit+0x70>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001214:	2310      	movs	r3, #16
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001218:	2303      	movs	r3, #3
 800121a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_ADC_MspInit+0x74>)
 8001224:	f000 ff26 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40012400 	.word	0x40012400
 8001234:	40021000 	.word	0x40021000
 8001238:	40011000 	.word	0x40011000

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <HAL_UART_MspInit+0xa4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d13c      	bne.n	80012d6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4a20      	ldr	r2, [pc, #128]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 8001262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001266:	61d3      	str	r3, [r2, #28]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_UART_MspInit+0xa8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4619      	mov	r1, r3
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <HAL_UART_MspInit+0xac>)
 80012ba:	f000 fedb 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012be:	2304      	movs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	@ (80012ec <HAL_UART_MspInit+0xb0>)
 80012d2:	f000 fecf 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40005000 	.word	0x40005000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40011400 	.word	0x40011400

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f936 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <_kill>:

int _kill(int pid, int sig)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001360:	f003 f88c 	bl	800447c <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	2216      	movs	r2, #22
 8001368:	601a      	str	r2, [r3, #0]
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_exit>:

void _exit (int status)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137e:	f04f 31ff 	mov.w	r1, #4294967295
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffe7 	bl	8001356 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <_exit+0x12>

0800138c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
  }

  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
  }
  return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f002 fff4 	bl	800447c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000c000 	.word	0x2000c000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000330 	.word	0x20000330
 80014c8:	20000488 	.word	0x20000488

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff fff8 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	@ (800150c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014de:	490c      	ldr	r1, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f4:	4c09      	ldr	r4, [pc, #36]	@ (800151c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 ffc1 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff fcb9 	bl	8000e7c <main>
  bx lr
 800150a:	4770      	bx	lr
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001514:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 8001518:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800151c:	20000484 	.word	0x20000484

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 fd69 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	200f      	movs	r0, #15
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fe0e 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fd73 	bl	800205a <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 fd49 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a03      	ldr	r2, [pc, #12]	@ (80015d0 <HAL_IncTick+0x20>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000334 	.word	0x20000334

080015d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	@ (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000334 	.word	0x20000334

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffe0 	bl	80015d4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0ce      	b.n	80017f0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d109      	bne.n	8001674 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fda8 	bl	80011c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fbd7 	bl	8001e28 <ADC_ConversionStop_Disable>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 80a9 	bne.w	80017de <HAL_ADC_Init+0x1ae>
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 80a5 	bne.w	80017de <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800169c:	f023 0302 	bic.w	r3, r3, #2
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4951      	ldr	r1, [pc, #324]	@ (80017f8 <HAL_ADC_Init+0x1c8>)
 80016b2:	428b      	cmp	r3, r1
 80016b4:	d10a      	bne.n	80016cc <HAL_ADC_Init+0x9c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80016be:	d002      	beq.n	80016c6 <HAL_ADC_Init+0x96>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	e004      	b.n	80016d0 <HAL_ADC_Init+0xa0>
 80016c6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0xa0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b1b      	ldrb	r3, [r3, #12]
 80016d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016e8:	d003      	beq.n	80016f2 <HAL_ADC_Init+0xc2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_ADC_Init+0xc8>
 80016f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f6:	e000      	b.n	80016fa <HAL_ADC_Init+0xca>
 80016f8:	2300      	movs	r3, #0
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7d1b      	ldrb	r3, [r3, #20]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d119      	bne.n	800173c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b1b      	ldrb	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	3b01      	subs	r3, #1
 8001716:	035a      	lsls	r2, r3, #13
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e00b      	b.n	800173c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	f043 0220 	orr.w	r2, r3, #32
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <HAL_ADC_Init+0x1cc>)
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	430b      	orrs	r3, r1
 8001762:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800176c:	d003      	beq.n	8001776 <HAL_ADC_Init+0x146>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d104      	bne.n	8001780 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	3b01      	subs	r3, #1
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	430a      	orrs	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_ADC_Init+0x1d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10b      	bne.n	80017bc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ba:	e018      	b.n	80017ee <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f023 0312 	bic.w	r3, r3, #18
 80017c4:	f043 0210 	orr.w	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017dc:	e007      	b.n	80017ee <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013c00 	.word	0x40013c00
 80017fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001800:	ff1f0efe 	.word	0xff1f0efe

08001804 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADC_Start+0x1a>
 800181a:	2302      	movs	r3, #2
 800181c:	e098      	b.n	8001950 <HAL_ADC_Start+0x14c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 faa4 	bl	8001d74 <ADC_Enable>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8087 	bne.w	8001946 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a41      	ldr	r2, [pc, #260]	@ (8001958 <HAL_ADC_Start+0x154>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d105      	bne.n	8001862 <HAL_ADC_Start+0x5e>
 8001856:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HAL_ADC_Start+0x158>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d026      	beq.n	80018ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001884:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188c:	e01d      	b.n	80018ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2f      	ldr	r2, [pc, #188]	@ (800195c <HAL_ADC_Start+0x158>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Start+0xaa>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001958 <HAL_ADC_Start+0x154>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10d      	bne.n	80018ca <HAL_ADC_Start+0xc6>
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <HAL_ADC_Start+0x158>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	f023 0206 	bic.w	r2, r3, #6
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018e2:	e002      	b.n	80018ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f06f 0202 	mvn.w	r2, #2
 80018fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001906:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800190a:	d113      	bne.n	8001934 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001910:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_ADC_Start+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_ADC_Start+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	e00c      	b.n	800194e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e003      	b.n	800194e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40012800 	.word	0x40012800
 800195c:	40012400 	.word	0x40012400

08001960 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001976:	f7ff fe2d 	bl	80015d4 <HAL_GetTick>
 800197a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f043 0220 	orr.w	r2, r3, #32
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0d3      	b.n	8001b4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d131      	bne.n	8001a14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12a      	bne.n	8001a14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019be:	e021      	b.n	8001a04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d01d      	beq.n	8001a04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_ADC_PollForConversion+0x7e>
 80019ce:	f7ff fe01 	bl	80015d4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d212      	bcs.n	8001a04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10b      	bne.n	8001a04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0a2      	b.n	8001b4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0d6      	beq.n	80019c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a12:	e070      	b.n	8001af6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a14:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <HAL_ADC_PollForConversion+0x1f4>)
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f001 f9b7 	bl	8002d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6919      	ldr	r1, [r3, #16]
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <HAL_ADC_PollForConversion+0x1f8>)
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x104>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68d9      	ldr	r1, [r3, #12]
 8001a38:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <HAL_ADC_PollForConversion+0x1fc>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x104>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	4b46      	ldr	r3, [pc, #280]	@ (8001b60 <HAL_ADC_PollForConversion+0x200>)
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d108      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x100>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <HAL_ADC_PollForConversion+0x204>)
 8001a56:	400b      	ands	r3, r1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x100>
 8001a5c:	2314      	movs	r3, #20
 8001a5e:	e020      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x142>
 8001a60:	2329      	movs	r3, #41	@ 0x29
 8001a62:	e01e      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x142>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6919      	ldr	r1, [r3, #16]
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <HAL_ADC_PollForConversion+0x200>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x120>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <HAL_ADC_PollForConversion+0x204>)
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <HAL_ADC_PollForConversion+0x13c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_ADC_PollForConversion+0x208>)
 8001a88:	400b      	ands	r3, r1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x140>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68d9      	ldr	r1, [r3, #12]
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_ADC_PollForConversion+0x208>)
 8001a96:	400b      	ands	r3, r1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x140>
 8001a9c:	2354      	movs	r3, #84	@ 0x54
 8001a9e:	e000      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x142>
 8001aa0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aa8:	e021      	b.n	8001aee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d01a      	beq.n	8001ae8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_ADC_PollForConversion+0x168>
 8001ab8:	f7ff fd8c 	bl	80015d4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d20f      	bcs.n	8001ae8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d90b      	bls.n	8001ae8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e030      	b.n	8001b4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d8d9      	bhi.n	8001aaa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0212 	mvn.w	r2, #18
 8001afe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b16:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b1a:	d115      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	24924924 	.word	0x24924924
 8001b5c:	00924924 	.word	0x00924924
 8001b60:	12492492 	.word	0x12492492
 8001b64:	00492492 	.word	0x00492492
 8001b68:	00249249 	.word	0x00249249

08001b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x20>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0dc      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x1da>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d81c      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b05      	subs	r3, #5
 8001bc6:	221f      	movs	r2, #31
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4019      	ands	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b05      	subs	r3, #5
 8001be0:	fa00 f203 	lsl.w	r2, r0, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bec:	e03c      	b.n	8001c68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d81c      	bhi.n	8001c30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b23      	subs	r3, #35	@ 0x23
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4019      	ands	r1, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b23      	subs	r3, #35	@ 0x23
 8001c22:	fa00 f203 	lsl.w	r2, r0, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c2e:	e01b      	b.n	8001c68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b41      	subs	r3, #65	@ 0x41
 8001c42:	221f      	movs	r2, #31
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b41      	subs	r3, #65	@ 0x41
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d91c      	bls.n	8001caa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b1e      	subs	r3, #30
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b1e      	subs	r3, #30
 8001c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	e019      	b.n	8001cde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6919      	ldr	r1, [r3, #16]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	2207      	movs	r2, #7
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6898      	ldr	r0, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d003      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cea:	2b11      	cmp	r3, #17
 8001cec:	d132      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d125      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d126      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d11a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9a      	lsrs	r2, r3, #18
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1b2>
 8001d42:	e007      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40012400 	.word	0x40012400
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	431bde83 	.word	0x431bde83

08001d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d040      	beq.n	8001e14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <ADC_Enable+0xac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <ADC_Enable+0xb0>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9b      	lsrs	r3, r3, #18
 8001dae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db0:	e002      	b.n	8001db8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dbe:	f7ff fc09 	bl	80015d4 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc4:	e01f      	b.n	8001e06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dc6:	f7ff fc05 	bl	80015d4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d918      	bls.n	8001e06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d011      	beq.n	8001e06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e007      	b.n	8001e16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d1d8      	bne.n	8001dc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000
 8001e24:	431bde83 	.word	0x431bde83

08001e28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d12e      	bne.n	8001ea0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e52:	f7ff fbbf 	bl	80015d4 <HAL_GetTick>
 8001e56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e58:	e01b      	b.n	8001e92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e5a:	f7ff fbbb 	bl	80015d4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d914      	bls.n	8001e92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10d      	bne.n	8001e92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e007      	b.n	8001ea2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d0dc      	beq.n	8001e5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff49 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff5e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffb0 	bl	8001fc8 <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	@ 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e179      	b.n	800237c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002088:	2201      	movs	r2, #1
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8168 	bne.w	8002376 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a96      	ldr	r2, [pc, #600]	@ (8002304 <HAL_GPIO_Init+0x290>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020b0:	4a94      	ldr	r2, [pc, #592]	@ (8002304 <HAL_GPIO_Init+0x290>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d875      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020b6:	4a94      	ldr	r2, [pc, #592]	@ (8002308 <HAL_GPIO_Init+0x294>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d058      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020bc:	4a92      	ldr	r2, [pc, #584]	@ (8002308 <HAL_GPIO_Init+0x294>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d86f      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020c2:	4a92      	ldr	r2, [pc, #584]	@ (800230c <HAL_GPIO_Init+0x298>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d052      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020c8:	4a90      	ldr	r2, [pc, #576]	@ (800230c <HAL_GPIO_Init+0x298>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d869      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ce:	4a90      	ldr	r2, [pc, #576]	@ (8002310 <HAL_GPIO_Init+0x29c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04c      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002310 <HAL_GPIO_Init+0x29c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d863      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020da:	4a8e      	ldr	r2, [pc, #568]	@ (8002314 <HAL_GPIO_Init+0x2a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d046      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020e0:	4a8c      	ldr	r2, [pc, #560]	@ (8002314 <HAL_GPIO_Init+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d85d      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d82a      	bhi.n	8002140 <HAL_GPIO_Init+0xcc>
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d859      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ee:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <HAL_GPIO_Init+0x80>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	0800216f 	.word	0x0800216f
 80020f8:	08002149 	.word	0x08002149
 80020fc:	0800215b 	.word	0x0800215b
 8002100:	0800219d 	.word	0x0800219d
 8002104:	080021a3 	.word	0x080021a3
 8002108:	080021a3 	.word	0x080021a3
 800210c:	080021a3 	.word	0x080021a3
 8002110:	080021a3 	.word	0x080021a3
 8002114:	080021a3 	.word	0x080021a3
 8002118:	080021a3 	.word	0x080021a3
 800211c:	080021a3 	.word	0x080021a3
 8002120:	080021a3 	.word	0x080021a3
 8002124:	080021a3 	.word	0x080021a3
 8002128:	080021a3 	.word	0x080021a3
 800212c:	080021a3 	.word	0x080021a3
 8002130:	080021a3 	.word	0x080021a3
 8002134:	080021a3 	.word	0x080021a3
 8002138:	08002151 	.word	0x08002151
 800213c:	08002165 	.word	0x08002165
 8002140:	4a75      	ldr	r2, [pc, #468]	@ (8002318 <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002146:	e02c      	b.n	80021a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e029      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e024      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	3308      	adds	r3, #8
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e01f      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	330c      	adds	r3, #12
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e01a      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002176:	2304      	movs	r3, #4
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e013      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	611a      	str	r2, [r3, #16]
          break;
 800218e:	e009      	b.n	80021a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	615a      	str	r2, [r3, #20]
          break;
 800219a:	e003      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          break;
 80021a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2bff      	cmp	r3, #255	@ 0xff
 80021a8:	d801      	bhi.n	80021ae <HAL_GPIO_Init+0x13a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_Init+0x13e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2bff      	cmp	r3, #255	@ 0xff
 80021b8:	d802      	bhi.n	80021c0 <HAL_GPIO_Init+0x14c>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x152>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	3b08      	subs	r3, #8
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	210f      	movs	r1, #15
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80c1 	beq.w	8002376 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f4:	4b49      	ldr	r3, [pc, #292]	@ (800231c <HAL_GPIO_Init+0x2a8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a48      	ldr	r2, [pc, #288]	@ (800231c <HAL_GPIO_Init+0x2a8>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b46      	ldr	r3, [pc, #280]	@ (800231c <HAL_GPIO_Init+0x2a8>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800220c:	4a44      	ldr	r2, [pc, #272]	@ (8002320 <HAL_GPIO_Init+0x2ac>)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3c      	ldr	r2, [pc, #240]	@ (8002324 <HAL_GPIO_Init+0x2b0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01f      	beq.n	8002278 <HAL_GPIO_Init+0x204>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <HAL_GPIO_Init+0x2b4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d019      	beq.n	8002274 <HAL_GPIO_Init+0x200>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3a      	ldr	r2, [pc, #232]	@ (800232c <HAL_GPIO_Init+0x2b8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_GPIO_Init+0x1fc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a39      	ldr	r2, [pc, #228]	@ (8002330 <HAL_GPIO_Init+0x2bc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1f8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a38      	ldr	r2, [pc, #224]	@ (8002334 <HAL_GPIO_Init+0x2c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1f4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a37      	ldr	r2, [pc, #220]	@ (8002338 <HAL_GPIO_Init+0x2c4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1f0>
 8002260:	2305      	movs	r3, #5
 8002262:	e00a      	b.n	800227a <HAL_GPIO_Init+0x206>
 8002264:	2306      	movs	r3, #6
 8002266:	e008      	b.n	800227a <HAL_GPIO_Init+0x206>
 8002268:	2304      	movs	r3, #4
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x206>
 800226c:	2303      	movs	r3, #3
 800226e:	e004      	b.n	800227a <HAL_GPIO_Init+0x206>
 8002270:	2302      	movs	r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x206>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_GPIO_Init+0x206>
 8002278:	2300      	movs	r3, #0
 800227a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800228a:	4925      	ldr	r1, [pc, #148]	@ (8002320 <HAL_GPIO_Init+0x2ac>)
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4924      	ldr	r1, [pc, #144]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4920      	ldr	r1, [pc, #128]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022bc:	4013      	ands	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	491a      	ldr	r1, [pc, #104]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4916      	ldr	r1, [pc, #88]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d025      	beq.n	8002340 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4910      	ldr	r1, [pc, #64]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
 8002300:	e025      	b.n	800234e <HAL_GPIO_Init+0x2da>
 8002302:	bf00      	nop
 8002304:	10320000 	.word	0x10320000
 8002308:	10310000 	.word	0x10310000
 800230c:	10220000 	.word	0x10220000
 8002310:	10210000 	.word	0x10210000
 8002314:	10120000 	.word	0x10120000
 8002318:	10110000 	.word	0x10110000
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	40010800 	.word	0x40010800
 8002328:	40010c00 	.word	0x40010c00
 800232c:	40011000 	.word	0x40011000
 8002330:	40011400 	.word	0x40011400
 8002334:	40011800 	.word	0x40011800
 8002338:	40011c00 	.word	0x40011c00
 800233c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	43db      	mvns	r3, r3
 8002348:	4913      	ldr	r1, [pc, #76]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800234a:	4013      	ands	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235a:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	490e      	ldr	r1, [pc, #56]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
 8002366:	e006      	b.n	8002376 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	43db      	mvns	r3, r3
 8002370:	4909      	ldr	r1, [pc, #36]	@ (8002398 <HAL_GPIO_Init+0x324>)
 8002372:	4013      	ands	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f47f ae7e 	bne.w	8002088 <HAL_GPIO_Init+0x14>
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	372c      	adds	r7, #44	@ 0x2c
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43d9      	mvns	r1, r3
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	400b      	ands	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e272      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b92      	ldr	r3, [pc, #584]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
 8002438:	4b8c      	ldr	r3, [pc, #560]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002444:	d10b      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06c      	beq.n	800252c <HAL_RCC_OscConfig+0x12c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d168      	bne.n	800252c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e24c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x76>
 8002468:	4b80      	ldr	r3, [pc, #512]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7f      	ldr	r2, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e02e      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b7b      	ldr	r3, [pc, #492]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7a      	ldr	r2, [pc, #488]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0xbc>
 80024a2:	4b72      	ldr	r3, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 80024bc:	4b6b      	ldr	r3, [pc, #428]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b68      	ldr	r3, [pc, #416]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a67      	ldr	r2, [pc, #412]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff f87a 	bl	80015d4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff f876 	bl	80015d4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e200      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5d      	ldr	r3, [pc, #372]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xe4>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f866 	bl	80015d4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff f862 	bl	80015d4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	@ 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1ec      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b53      	ldr	r3, [pc, #332]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x10c>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002546:	4b49      	ldr	r3, [pc, #292]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
 8002552:	4b46      	ldr	r3, [pc, #280]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c0      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3d      	ldr	r3, [pc, #244]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4939      	ldr	r1, [pc, #228]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <HAL_RCC_OscConfig+0x270>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff f81b 	bl	80015d4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff f817 	bl	80015d4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4927      	ldr	r1, [pc, #156]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <HAL_RCC_OscConfig+0x270>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fffa 	bl	80015d4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fff6 	bl	80015d4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e180      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7fe ffda 	bl	80015d4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe ffd6 	bl	80015d4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e160      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_RCC_OscConfig+0x26c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 face 	bl	8002be4 <RCC_Delay>
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe ffc0 	bl	80015d4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe ffbc 	bl	80015d4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d908      	bls.n	8002678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e146      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000
 8002674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b92      	ldr	r3, [pc, #584]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a6 	beq.w	80027de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b8b      	ldr	r3, [pc, #556]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a87      	ldr	r2, [pc, #540]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b82      	ldr	r3, [pc, #520]	@ (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	@ (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	@ (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe ff7d 	bl	80015d4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fe ff79 	bl	80015d4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	@ 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e103      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b75      	ldr	r3, [pc, #468]	@ (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 8002704:	4b6f      	ldr	r3, [pc, #444]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a6e      	ldr	r2, [pc, #440]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x334>
 800271a:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a69      	ldr	r2, [pc, #420]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b67      	ldr	r3, [pc, #412]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x356>
 800273c:	4b61      	ldr	r3, [pc, #388]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a60      	ldr	r2, [pc, #384]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4b5e      	ldr	r3, [pc, #376]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a5d      	ldr	r2, [pc, #372]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002756:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a5a      	ldr	r2, [pc, #360]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b58      	ldr	r3, [pc, #352]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a57      	ldr	r2, [pc, #348]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff2d 	bl	80015d4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe ff29 	bl	80015d4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x37e>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe ff17 	bl	80015d4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe ff13 	bl	80015d4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09b      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a3b      	ldr	r2, [pc, #236]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d061      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d146      	bne.n	800288a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fee7 	bl	80015d4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fee3 	bl	80015d4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e06d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4921      	ldr	r1, [pc, #132]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a19      	ldr	r1, [r3, #32]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	430b      	orrs	r3, r1
 8002856:	491b      	ldr	r1, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe feb7 	bl	80015d4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe feb3 	bl	80015d4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
 8002888:	e035      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fea0 	bl	80015d4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fe9c 	bl	80015d4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e026      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
 80028b6:	e01e      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e019      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_OscConfig+0x500>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d0      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b67      	ldr	r3, [pc, #412]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4965      	ldr	r1, [pc, #404]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a58      	ldr	r2, [pc, #352]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800296a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d040      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e073      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06b      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4936      	ldr	r1, [pc, #216]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fdee 	bl	80015d4 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fdea 	bl	80015d4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e053      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d210      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4922      	ldr	r1, [pc, #136]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	@ (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fd4c 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08007b98 	.word	0x08007b98
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x30>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x36>
 8002b06:	e027      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e027      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	4a17      	ldr	r2, [pc, #92]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0c5b      	lsrs	r3, r3, #17
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	4a11      	ldr	r2, [pc, #68]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	fb03 f202 	mul.w	r2, r3, r2
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e004      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	613b      	str	r3, [r7, #16]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5a:	613b      	str	r3, [r7, #16]
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	693b      	ldr	r3, [r7, #16]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	007a1200 	.word	0x007a1200
 8002b74:	08007bb0 	.word	0x08007bb0
 8002b78:	08007bc0 	.word	0x08007bc0
 8002b7c:	003d0900 	.word	0x003d0900

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff2 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08007ba8 	.word	0x08007ba8

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0adb      	lsrs	r3, r3, #11
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08007ba8 	.word	0x08007ba8

08002be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <RCC_Delay+0x34>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <RCC_Delay+0x38>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a5b      	lsrs	r3, r3, #9
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c00:	bf00      	nop
  }
  while (Delay --);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	60fa      	str	r2, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <RCC_Delay+0x1c>
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d07d      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c40:	4b4f      	ldr	r3, [pc, #316]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a4b      	ldr	r2, [pc, #300]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	61d3      	str	r3, [r2, #28]
 8002c58:	4b49      	ldr	r3, [pc, #292]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d118      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c74:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a42      	ldr	r2, [pc, #264]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fca8 	bl	80015d4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe fca4 	bl	80015d4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e06d      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d02e      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d027      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cce:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cda:	4a29      	ldr	r2, [pc, #164]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fc73 	bl	80015d4 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fc6f 	bl	80015d4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e036      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4a13      	ldr	r2, [pc, #76]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d44:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	490b      	ldr	r1, [pc, #44]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d62:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4904      	ldr	r1, [pc, #16]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42420440 	.word	0x42420440

08002d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	f200 80af 	bhi.w	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002db2:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002e8f 	.word	0x08002e8f
 8002dbc:	08002ef5 	.word	0x08002ef5
 8002dc0:	08002f11 	.word	0x08002f11
 8002dc4:	08002e7f 	.word	0x08002e7f
 8002dc8:	08002f11 	.word	0x08002f11
 8002dcc:	08002f11 	.word	0x08002f11
 8002dd0:	08002f11 	.word	0x08002f11
 8002dd4:	08002e87 	.word	0x08002e87
 8002dd8:	08002f11 	.word	0x08002f11
 8002ddc:	08002f11 	.word	0x08002f11
 8002de0:	08002f11 	.word	0x08002f11
 8002de4:	08002f11 	.word	0x08002f11
 8002de8:	08002f11 	.word	0x08002f11
 8002dec:	08002f11 	.word	0x08002f11
 8002df0:	08002f11 	.word	0x08002f11
 8002df4:	08002df9 	.word	0x08002df9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002df8:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dfe:	4b49      	ldr	r3, [pc, #292]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8084 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	4a44      	ldr	r2, [pc, #272]	@ (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e24:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c5b      	lsrs	r3, r3, #17
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	fb02 f303 	mul.w	r3, r2, r3
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e004      	b.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4a38      	ldr	r2, [pc, #224]	@ (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e5a:	4b32      	ldr	r3, [pc, #200]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e66:	d102      	bne.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002e6c:	e052      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	61bb      	str	r3, [r7, #24]
      break;
 8002e7c:	e04a      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e7e:	f7ff fe2b 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002e82:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e84:	e049      	b.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e86:	f7ff fe27 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002e8a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e8c:	e045      	b.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002e8e:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e01f      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebc:	d109      	bne.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002eca:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e00f      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002ede:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002eea:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002eee:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002ef0:	e012      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002ef2:	e011      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ef4:	f7ff fe62 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0b9b      	lsrs	r3, r3, #14
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	3301      	adds	r3, #1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	61bb      	str	r3, [r7, #24]
      break;
 8002f0e:	e004      	b.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002f10:	bf00      	nop
 8002f12:	e002      	b.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002f14:	bf00      	nop
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002f18:	bf00      	nop
    }
  }
  return (frequency);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08007bc4 	.word	0x08007bc4
 8002f2c:	08007bd4 	.word	0x08007bd4
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	003d0900 	.word	0x003d0900
 8002f38:	aaaaaaab 	.word	0xaaaaaaab

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e042      	b.n	8002fd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe f96a 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa09 	bl	8003398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d175      	bne.n	80030e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Transmit+0x2c>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e06e      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	@ 0x21
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fe fadb 	bl	80015d4 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003034:	d108      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003050:	e02e      	b.n	80030b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	@ 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f8df 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03a      	b.n	80030ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3302      	adds	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e007      	b.n	80030a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1cb      	bne.n	8003052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f8ab 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	@ 0x28
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b20      	cmp	r3, #32
 8003110:	f040 8081 	bne.w	8003216 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Receive+0x2e>
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e079      	b.n	8003218 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2222      	movs	r2, #34	@ 0x22
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003138:	f7fe fa4c 	bl	80015d4 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003152:	d108      	bne.n	8003166 <HAL_UART_Receive+0x74>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e003      	b.n	800316e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800316e:	e047      	b.n	8003200 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	2120      	movs	r1, #32
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f850 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e042      	b.n	8003218 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10c      	bne.n	80031b2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	3302      	adds	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e01f      	b.n	80031f2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ba:	d007      	beq.n	80031cc <HAL_UART_Receive+0xda>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_UART_Receive+0xe8>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e008      	b.n	80031ec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1b2      	bne.n	8003170 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	e03b      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d037      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe f9cb 	bl	80015d4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <UART_WaitOnFlagUntilTimeout+0x30>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e03a      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d023      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b80      	cmp	r3, #128	@ 0x80
 8003266:	d020      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b40      	cmp	r3, #64	@ 0x40
 800326c:	d01d      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d116      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f81d 	bl	80032d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2208      	movs	r2, #8
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d0b4      	beq.n	8003232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b095      	sub	sp, #84	@ 0x54
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3314      	adds	r3, #20
 8003314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	61fb      	str	r3, [r7, #28]
   return(result);
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800332e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e5      	bne.n	800330e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	2b01      	cmp	r3, #1
 8003348:	d119      	bne.n	800337e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	60bb      	str	r3, [r7, #8]
   return(result);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0310 	bic.w	r3, r3, #16
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800336a:	61ba      	str	r2, [r7, #24]
 800336c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	613b      	str	r3, [r7, #16]
   return(result);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800338c:	bf00      	nop
 800338e:	3754      	adds	r7, #84	@ 0x54
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033d2:	f023 030c 	bic.w	r3, r3, #12
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <UART_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7ff fbdc 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	e002      	b.n	800340e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7ff fbc4 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 800340c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	0119      	lsls	r1, r3, #4
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <UART_SetConfig+0x118>)
 8003446:	fba3 0302 	umull	r0, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2064      	movs	r0, #100	@ 0x64
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	3332      	adds	r3, #50	@ 0x32
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003464:	4419      	add	r1, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f2f3 	udiv	r2, r2, r3
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <UART_SetConfig+0x118>)
 800347e:	fba3 0302 	umull	r0, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2064      	movs	r0, #100	@ 0x64
 8003486:	fb00 f303 	mul.w	r3, r0, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	3332      	adds	r3, #50	@ 0x32
 8003490:	4a07      	ldr	r2, [pc, #28]	@ (80034b0 <UART_SetConfig+0x118>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	440a      	add	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013800 	.word	0x40013800
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <__cvt>:
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ba:	461d      	mov	r5, r3
 80034bc:	bfbb      	ittet	lt
 80034be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	461d      	movlt	r5, r3
 80034c4:	2300      	movge	r3, #0
 80034c6:	232d      	movlt	r3, #45	@ 0x2d
 80034c8:	b088      	sub	sp, #32
 80034ca:	4614      	mov	r4, r2
 80034cc:	bfb8      	it	lt
 80034ce:	4614      	movlt	r4, r2
 80034d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80034d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80034d4:	7013      	strb	r3, [r2, #0]
 80034d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80034d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80034dc:	f023 0820 	bic.w	r8, r3, #32
 80034e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80034e4:	d005      	beq.n	80034f2 <__cvt+0x3e>
 80034e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80034ea:	d100      	bne.n	80034ee <__cvt+0x3a>
 80034ec:	3601      	adds	r6, #1
 80034ee:	2302      	movs	r3, #2
 80034f0:	e000      	b.n	80034f4 <__cvt+0x40>
 80034f2:	2303      	movs	r3, #3
 80034f4:	aa07      	add	r2, sp, #28
 80034f6:	9204      	str	r2, [sp, #16]
 80034f8:	aa06      	add	r2, sp, #24
 80034fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034fe:	e9cd 3600 	strd	r3, r6, [sp]
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	f001 f883 	bl	8004610 <_dtoa_r>
 800350a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800350e:	4607      	mov	r7, r0
 8003510:	d119      	bne.n	8003546 <__cvt+0x92>
 8003512:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d50e      	bpl.n	8003536 <__cvt+0x82>
 8003518:	eb00 0906 	add.w	r9, r0, r6
 800351c:	2200      	movs	r2, #0
 800351e:	2300      	movs	r3, #0
 8003520:	4620      	mov	r0, r4
 8003522:	4629      	mov	r1, r5
 8003524:	f7fd faac 	bl	8000a80 <__aeabi_dcmpeq>
 8003528:	b108      	cbz	r0, 800352e <__cvt+0x7a>
 800352a:	f8cd 901c 	str.w	r9, [sp, #28]
 800352e:	2230      	movs	r2, #48	@ 0x30
 8003530:	9b07      	ldr	r3, [sp, #28]
 8003532:	454b      	cmp	r3, r9
 8003534:	d31e      	bcc.n	8003574 <__cvt+0xc0>
 8003536:	4638      	mov	r0, r7
 8003538:	9b07      	ldr	r3, [sp, #28]
 800353a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800353c:	1bdb      	subs	r3, r3, r7
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	b008      	add	sp, #32
 8003542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003546:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800354a:	eb00 0906 	add.w	r9, r0, r6
 800354e:	d1e5      	bne.n	800351c <__cvt+0x68>
 8003550:	7803      	ldrb	r3, [r0, #0]
 8003552:	2b30      	cmp	r3, #48	@ 0x30
 8003554:	d10a      	bne.n	800356c <__cvt+0xb8>
 8003556:	2200      	movs	r2, #0
 8003558:	2300      	movs	r3, #0
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fd fa8f 	bl	8000a80 <__aeabi_dcmpeq>
 8003562:	b918      	cbnz	r0, 800356c <__cvt+0xb8>
 8003564:	f1c6 0601 	rsb	r6, r6, #1
 8003568:	f8ca 6000 	str.w	r6, [sl]
 800356c:	f8da 3000 	ldr.w	r3, [sl]
 8003570:	4499      	add	r9, r3
 8003572:	e7d3      	b.n	800351c <__cvt+0x68>
 8003574:	1c59      	adds	r1, r3, #1
 8003576:	9107      	str	r1, [sp, #28]
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e7d9      	b.n	8003530 <__cvt+0x7c>

0800357c <__exponent>:
 800357c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800357e:	2900      	cmp	r1, #0
 8003580:	bfb6      	itet	lt
 8003582:	232d      	movlt	r3, #45	@ 0x2d
 8003584:	232b      	movge	r3, #43	@ 0x2b
 8003586:	4249      	neglt	r1, r1
 8003588:	2909      	cmp	r1, #9
 800358a:	7002      	strb	r2, [r0, #0]
 800358c:	7043      	strb	r3, [r0, #1]
 800358e:	dd29      	ble.n	80035e4 <__exponent+0x68>
 8003590:	f10d 0307 	add.w	r3, sp, #7
 8003594:	461d      	mov	r5, r3
 8003596:	270a      	movs	r7, #10
 8003598:	fbb1 f6f7 	udiv	r6, r1, r7
 800359c:	461a      	mov	r2, r3
 800359e:	fb07 1416 	mls	r4, r7, r6, r1
 80035a2:	3430      	adds	r4, #48	@ 0x30
 80035a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035a8:	460c      	mov	r4, r1
 80035aa:	2c63      	cmp	r4, #99	@ 0x63
 80035ac:	4631      	mov	r1, r6
 80035ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80035b2:	dcf1      	bgt.n	8003598 <__exponent+0x1c>
 80035b4:	3130      	adds	r1, #48	@ 0x30
 80035b6:	1e94      	subs	r4, r2, #2
 80035b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035bc:	4623      	mov	r3, r4
 80035be:	1c41      	adds	r1, r0, #1
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	d30a      	bcc.n	80035da <__exponent+0x5e>
 80035c4:	f10d 0309 	add.w	r3, sp, #9
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	42ac      	cmp	r4, r5
 80035cc:	bf88      	it	hi
 80035ce:	2300      	movhi	r3, #0
 80035d0:	3302      	adds	r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	1a18      	subs	r0, r3, r0
 80035d6:	b003      	add	sp, #12
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80035de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80035e2:	e7ed      	b.n	80035c0 <__exponent+0x44>
 80035e4:	2330      	movs	r3, #48	@ 0x30
 80035e6:	3130      	adds	r1, #48	@ 0x30
 80035e8:	7083      	strb	r3, [r0, #2]
 80035ea:	70c1      	strb	r1, [r0, #3]
 80035ec:	1d03      	adds	r3, r0, #4
 80035ee:	e7f1      	b.n	80035d4 <__exponent+0x58>

080035f0 <_printf_float>:
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	b091      	sub	sp, #68	@ 0x44
 80035f6:	460c      	mov	r4, r1
 80035f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80035fc:	4616      	mov	r6, r2
 80035fe:	461f      	mov	r7, r3
 8003600:	4605      	mov	r5, r0
 8003602:	f000 fef1 	bl	80043e8 <_localeconv_r>
 8003606:	6803      	ldr	r3, [r0, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	9308      	str	r3, [sp, #32]
 800360c:	f7fc fe0c 	bl	8000228 <strlen>
 8003610:	2300      	movs	r3, #0
 8003612:	930e      	str	r3, [sp, #56]	@ 0x38
 8003614:	f8d8 3000 	ldr.w	r3, [r8]
 8003618:	9009      	str	r0, [sp, #36]	@ 0x24
 800361a:	3307      	adds	r3, #7
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	f103 0208 	add.w	r2, r3, #8
 8003624:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003628:	f8d4 b000 	ldr.w	fp, [r4]
 800362c:	f8c8 2000 	str.w	r2, [r8]
 8003630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003634:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800363a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800363e:	f04f 32ff 	mov.w	r2, #4294967295
 8003642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003646:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800364a:	4b9c      	ldr	r3, [pc, #624]	@ (80038bc <_printf_float+0x2cc>)
 800364c:	f7fd fa4a 	bl	8000ae4 <__aeabi_dcmpun>
 8003650:	bb70      	cbnz	r0, 80036b0 <_printf_float+0xc0>
 8003652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003656:	f04f 32ff 	mov.w	r2, #4294967295
 800365a:	4b98      	ldr	r3, [pc, #608]	@ (80038bc <_printf_float+0x2cc>)
 800365c:	f7fd fa24 	bl	8000aa8 <__aeabi_dcmple>
 8003660:	bb30      	cbnz	r0, 80036b0 <_printf_float+0xc0>
 8003662:	2200      	movs	r2, #0
 8003664:	2300      	movs	r3, #0
 8003666:	4640      	mov	r0, r8
 8003668:	4649      	mov	r1, r9
 800366a:	f7fd fa13 	bl	8000a94 <__aeabi_dcmplt>
 800366e:	b110      	cbz	r0, 8003676 <_printf_float+0x86>
 8003670:	232d      	movs	r3, #45	@ 0x2d
 8003672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003676:	4a92      	ldr	r2, [pc, #584]	@ (80038c0 <_printf_float+0x2d0>)
 8003678:	4b92      	ldr	r3, [pc, #584]	@ (80038c4 <_printf_float+0x2d4>)
 800367a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800367e:	bf94      	ite	ls
 8003680:	4690      	movls	r8, r2
 8003682:	4698      	movhi	r8, r3
 8003684:	2303      	movs	r3, #3
 8003686:	f04f 0900 	mov.w	r9, #0
 800368a:	6123      	str	r3, [r4, #16]
 800368c:	f02b 0304 	bic.w	r3, fp, #4
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	4633      	mov	r3, r6
 8003694:	4621      	mov	r1, r4
 8003696:	4628      	mov	r0, r5
 8003698:	9700      	str	r7, [sp, #0]
 800369a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800369c:	f000 f9d4 	bl	8003a48 <_printf_common>
 80036a0:	3001      	adds	r0, #1
 80036a2:	f040 8090 	bne.w	80037c6 <_printf_float+0x1d6>
 80036a6:	f04f 30ff 	mov.w	r0, #4294967295
 80036aa:	b011      	add	sp, #68	@ 0x44
 80036ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	4640      	mov	r0, r8
 80036b6:	4649      	mov	r1, r9
 80036b8:	f7fd fa14 	bl	8000ae4 <__aeabi_dcmpun>
 80036bc:	b148      	cbz	r0, 80036d2 <_printf_float+0xe2>
 80036be:	464b      	mov	r3, r9
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bfb8      	it	lt
 80036c4:	232d      	movlt	r3, #45	@ 0x2d
 80036c6:	4a80      	ldr	r2, [pc, #512]	@ (80038c8 <_printf_float+0x2d8>)
 80036c8:	bfb8      	it	lt
 80036ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80036ce:	4b7f      	ldr	r3, [pc, #508]	@ (80038cc <_printf_float+0x2dc>)
 80036d0:	e7d3      	b.n	800367a <_printf_float+0x8a>
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	d13f      	bne.n	800375c <_printf_float+0x16c>
 80036dc:	2306      	movs	r3, #6
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	9206      	str	r2, [sp, #24]
 80036ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80036ec:	e9cd a204 	strd	sl, r2, [sp, #16]
 80036f0:	aa0d      	add	r2, sp, #52	@ 0x34
 80036f2:	9203      	str	r2, [sp, #12]
 80036f4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80036f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	4642      	mov	r2, r8
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4628      	mov	r0, r5
 8003704:	464b      	mov	r3, r9
 8003706:	910a      	str	r1, [sp, #40]	@ 0x28
 8003708:	f7ff fed4 	bl	80034b4 <__cvt>
 800370c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800370e:	4680      	mov	r8, r0
 8003710:	2947      	cmp	r1, #71	@ 0x47
 8003712:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003714:	d128      	bne.n	8003768 <_printf_float+0x178>
 8003716:	1cc8      	adds	r0, r1, #3
 8003718:	db02      	blt.n	8003720 <_printf_float+0x130>
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	4299      	cmp	r1, r3
 800371e:	dd40      	ble.n	80037a2 <_printf_float+0x1b2>
 8003720:	f1aa 0a02 	sub.w	sl, sl, #2
 8003724:	fa5f fa8a 	uxtb.w	sl, sl
 8003728:	4652      	mov	r2, sl
 800372a:	3901      	subs	r1, #1
 800372c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003730:	910d      	str	r1, [sp, #52]	@ 0x34
 8003732:	f7ff ff23 	bl	800357c <__exponent>
 8003736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003738:	4681      	mov	r9, r0
 800373a:	1813      	adds	r3, r2, r0
 800373c:	2a01      	cmp	r2, #1
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	dc02      	bgt.n	8003748 <_printf_float+0x158>
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	07d2      	lsls	r2, r2, #31
 8003746:	d501      	bpl.n	800374c <_printf_float+0x15c>
 8003748:	3301      	adds	r3, #1
 800374a:	6123      	str	r3, [r4, #16]
 800374c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003750:	2b00      	cmp	r3, #0
 8003752:	d09e      	beq.n	8003692 <_printf_float+0xa2>
 8003754:	232d      	movs	r3, #45	@ 0x2d
 8003756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800375a:	e79a      	b.n	8003692 <_printf_float+0xa2>
 800375c:	2947      	cmp	r1, #71	@ 0x47
 800375e:	d1bf      	bne.n	80036e0 <_printf_float+0xf0>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1bd      	bne.n	80036e0 <_printf_float+0xf0>
 8003764:	2301      	movs	r3, #1
 8003766:	e7ba      	b.n	80036de <_printf_float+0xee>
 8003768:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800376c:	d9dc      	bls.n	8003728 <_printf_float+0x138>
 800376e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003772:	d118      	bne.n	80037a6 <_printf_float+0x1b6>
 8003774:	2900      	cmp	r1, #0
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	dd0b      	ble.n	8003792 <_printf_float+0x1a2>
 800377a:	6121      	str	r1, [r4, #16]
 800377c:	b913      	cbnz	r3, 8003784 <_printf_float+0x194>
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	07d0      	lsls	r0, r2, #31
 8003782:	d502      	bpl.n	800378a <_printf_float+0x19a>
 8003784:	3301      	adds	r3, #1
 8003786:	440b      	add	r3, r1
 8003788:	6123      	str	r3, [r4, #16]
 800378a:	f04f 0900 	mov.w	r9, #0
 800378e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003790:	e7dc      	b.n	800374c <_printf_float+0x15c>
 8003792:	b913      	cbnz	r3, 800379a <_printf_float+0x1aa>
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	07d2      	lsls	r2, r2, #31
 8003798:	d501      	bpl.n	800379e <_printf_float+0x1ae>
 800379a:	3302      	adds	r3, #2
 800379c:	e7f4      	b.n	8003788 <_printf_float+0x198>
 800379e:	2301      	movs	r3, #1
 80037a0:	e7f2      	b.n	8003788 <_printf_float+0x198>
 80037a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037a8:	4299      	cmp	r1, r3
 80037aa:	db05      	blt.n	80037b8 <_printf_float+0x1c8>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	6121      	str	r1, [r4, #16]
 80037b0:	07d8      	lsls	r0, r3, #31
 80037b2:	d5ea      	bpl.n	800378a <_printf_float+0x19a>
 80037b4:	1c4b      	adds	r3, r1, #1
 80037b6:	e7e7      	b.n	8003788 <_printf_float+0x198>
 80037b8:	2900      	cmp	r1, #0
 80037ba:	bfcc      	ite	gt
 80037bc:	2201      	movgt	r2, #1
 80037be:	f1c1 0202 	rsble	r2, r1, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	e7e0      	b.n	8003788 <_printf_float+0x198>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	055a      	lsls	r2, r3, #21
 80037ca:	d407      	bmi.n	80037dc <_printf_float+0x1ec>
 80037cc:	6923      	ldr	r3, [r4, #16]
 80037ce:	4642      	mov	r2, r8
 80037d0:	4631      	mov	r1, r6
 80037d2:	4628      	mov	r0, r5
 80037d4:	47b8      	blx	r7
 80037d6:	3001      	adds	r0, #1
 80037d8:	d12b      	bne.n	8003832 <_printf_float+0x242>
 80037da:	e764      	b.n	80036a6 <_printf_float+0xb6>
 80037dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80037e0:	f240 80dc 	bls.w	800399c <_printf_float+0x3ac>
 80037e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037e8:	2200      	movs	r2, #0
 80037ea:	2300      	movs	r3, #0
 80037ec:	f7fd f948 	bl	8000a80 <__aeabi_dcmpeq>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d033      	beq.n	800385c <_printf_float+0x26c>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	4a35      	ldr	r2, [pc, #212]	@ (80038d0 <_printf_float+0x2e0>)
 80037fc:	47b8      	blx	r7
 80037fe:	3001      	adds	r0, #1
 8003800:	f43f af51 	beq.w	80036a6 <_printf_float+0xb6>
 8003804:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003808:	4543      	cmp	r3, r8
 800380a:	db02      	blt.n	8003812 <_printf_float+0x222>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	07d8      	lsls	r0, r3, #31
 8003810:	d50f      	bpl.n	8003832 <_printf_float+0x242>
 8003812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	f43f af42 	beq.w	80036a6 <_printf_float+0xb6>
 8003822:	f04f 0900 	mov.w	r9, #0
 8003826:	f108 38ff 	add.w	r8, r8, #4294967295
 800382a:	f104 0a1a 	add.w	sl, r4, #26
 800382e:	45c8      	cmp	r8, r9
 8003830:	dc09      	bgt.n	8003846 <_printf_float+0x256>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	079b      	lsls	r3, r3, #30
 8003836:	f100 8102 	bmi.w	8003a3e <_printf_float+0x44e>
 800383a:	68e0      	ldr	r0, [r4, #12]
 800383c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800383e:	4298      	cmp	r0, r3
 8003840:	bfb8      	it	lt
 8003842:	4618      	movlt	r0, r3
 8003844:	e731      	b.n	80036aa <_printf_float+0xba>
 8003846:	2301      	movs	r3, #1
 8003848:	4652      	mov	r2, sl
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	f43f af28 	beq.w	80036a6 <_printf_float+0xb6>
 8003856:	f109 0901 	add.w	r9, r9, #1
 800385a:	e7e8      	b.n	800382e <_printf_float+0x23e>
 800385c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	dc38      	bgt.n	80038d4 <_printf_float+0x2e4>
 8003862:	2301      	movs	r3, #1
 8003864:	4631      	mov	r1, r6
 8003866:	4628      	mov	r0, r5
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <_printf_float+0x2e0>)
 800386a:	47b8      	blx	r7
 800386c:	3001      	adds	r0, #1
 800386e:	f43f af1a 	beq.w	80036a6 <_printf_float+0xb6>
 8003872:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003876:	ea59 0303 	orrs.w	r3, r9, r3
 800387a:	d102      	bne.n	8003882 <_printf_float+0x292>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	07d9      	lsls	r1, r3, #31
 8003880:	d5d7      	bpl.n	8003832 <_printf_float+0x242>
 8003882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003886:	4631      	mov	r1, r6
 8003888:	4628      	mov	r0, r5
 800388a:	47b8      	blx	r7
 800388c:	3001      	adds	r0, #1
 800388e:	f43f af0a 	beq.w	80036a6 <_printf_float+0xb6>
 8003892:	f04f 0a00 	mov.w	sl, #0
 8003896:	f104 0b1a 	add.w	fp, r4, #26
 800389a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800389c:	425b      	negs	r3, r3
 800389e:	4553      	cmp	r3, sl
 80038a0:	dc01      	bgt.n	80038a6 <_printf_float+0x2b6>
 80038a2:	464b      	mov	r3, r9
 80038a4:	e793      	b.n	80037ce <_printf_float+0x1de>
 80038a6:	2301      	movs	r3, #1
 80038a8:	465a      	mov	r2, fp
 80038aa:	4631      	mov	r1, r6
 80038ac:	4628      	mov	r0, r5
 80038ae:	47b8      	blx	r7
 80038b0:	3001      	adds	r0, #1
 80038b2:	f43f aef8 	beq.w	80036a6 <_printf_float+0xb6>
 80038b6:	f10a 0a01 	add.w	sl, sl, #1
 80038ba:	e7ee      	b.n	800389a <_printf_float+0x2aa>
 80038bc:	7fefffff 	.word	0x7fefffff
 80038c0:	08007bd6 	.word	0x08007bd6
 80038c4:	08007bda 	.word	0x08007bda
 80038c8:	08007bde 	.word	0x08007bde
 80038cc:	08007be2 	.word	0x08007be2
 80038d0:	08007be6 	.word	0x08007be6
 80038d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038da:	4553      	cmp	r3, sl
 80038dc:	bfa8      	it	ge
 80038de:	4653      	movge	r3, sl
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	4699      	mov	r9, r3
 80038e4:	dc36      	bgt.n	8003954 <_printf_float+0x364>
 80038e6:	f04f 0b00 	mov.w	fp, #0
 80038ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038ee:	f104 021a 	add.w	r2, r4, #26
 80038f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80038f6:	eba3 0309 	sub.w	r3, r3, r9
 80038fa:	455b      	cmp	r3, fp
 80038fc:	dc31      	bgt.n	8003962 <_printf_float+0x372>
 80038fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003900:	459a      	cmp	sl, r3
 8003902:	dc3a      	bgt.n	800397a <_printf_float+0x38a>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	07da      	lsls	r2, r3, #31
 8003908:	d437      	bmi.n	800397a <_printf_float+0x38a>
 800390a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800390c:	ebaa 0903 	sub.w	r9, sl, r3
 8003910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003912:	ebaa 0303 	sub.w	r3, sl, r3
 8003916:	4599      	cmp	r9, r3
 8003918:	bfa8      	it	ge
 800391a:	4699      	movge	r9, r3
 800391c:	f1b9 0f00 	cmp.w	r9, #0
 8003920:	dc33      	bgt.n	800398a <_printf_float+0x39a>
 8003922:	f04f 0800 	mov.w	r8, #0
 8003926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800392a:	f104 0b1a 	add.w	fp, r4, #26
 800392e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003930:	ebaa 0303 	sub.w	r3, sl, r3
 8003934:	eba3 0309 	sub.w	r3, r3, r9
 8003938:	4543      	cmp	r3, r8
 800393a:	f77f af7a 	ble.w	8003832 <_printf_float+0x242>
 800393e:	2301      	movs	r3, #1
 8003940:	465a      	mov	r2, fp
 8003942:	4631      	mov	r1, r6
 8003944:	4628      	mov	r0, r5
 8003946:	47b8      	blx	r7
 8003948:	3001      	adds	r0, #1
 800394a:	f43f aeac 	beq.w	80036a6 <_printf_float+0xb6>
 800394e:	f108 0801 	add.w	r8, r8, #1
 8003952:	e7ec      	b.n	800392e <_printf_float+0x33e>
 8003954:	4642      	mov	r2, r8
 8003956:	4631      	mov	r1, r6
 8003958:	4628      	mov	r0, r5
 800395a:	47b8      	blx	r7
 800395c:	3001      	adds	r0, #1
 800395e:	d1c2      	bne.n	80038e6 <_printf_float+0x2f6>
 8003960:	e6a1      	b.n	80036a6 <_printf_float+0xb6>
 8003962:	2301      	movs	r3, #1
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	920a      	str	r2, [sp, #40]	@ 0x28
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	f43f ae9a 	beq.w	80036a6 <_printf_float+0xb6>
 8003972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003974:	f10b 0b01 	add.w	fp, fp, #1
 8003978:	e7bb      	b.n	80038f2 <_printf_float+0x302>
 800397a:	4631      	mov	r1, r6
 800397c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003980:	4628      	mov	r0, r5
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	d1c0      	bne.n	800390a <_printf_float+0x31a>
 8003988:	e68d      	b.n	80036a6 <_printf_float+0xb6>
 800398a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800398c:	464b      	mov	r3, r9
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	4442      	add	r2, r8
 8003994:	47b8      	blx	r7
 8003996:	3001      	adds	r0, #1
 8003998:	d1c3      	bne.n	8003922 <_printf_float+0x332>
 800399a:	e684      	b.n	80036a6 <_printf_float+0xb6>
 800399c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039a0:	f1ba 0f01 	cmp.w	sl, #1
 80039a4:	dc01      	bgt.n	80039aa <_printf_float+0x3ba>
 80039a6:	07db      	lsls	r3, r3, #31
 80039a8:	d536      	bpl.n	8003a18 <_printf_float+0x428>
 80039aa:	2301      	movs	r3, #1
 80039ac:	4642      	mov	r2, r8
 80039ae:	4631      	mov	r1, r6
 80039b0:	4628      	mov	r0, r5
 80039b2:	47b8      	blx	r7
 80039b4:	3001      	adds	r0, #1
 80039b6:	f43f ae76 	beq.w	80036a6 <_printf_float+0xb6>
 80039ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039be:	4631      	mov	r1, r6
 80039c0:	4628      	mov	r0, r5
 80039c2:	47b8      	blx	r7
 80039c4:	3001      	adds	r0, #1
 80039c6:	f43f ae6e 	beq.w	80036a6 <_printf_float+0xb6>
 80039ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039ce:	2200      	movs	r2, #0
 80039d0:	2300      	movs	r3, #0
 80039d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039d6:	f7fd f853 	bl	8000a80 <__aeabi_dcmpeq>
 80039da:	b9c0      	cbnz	r0, 8003a0e <_printf_float+0x41e>
 80039dc:	4653      	mov	r3, sl
 80039de:	f108 0201 	add.w	r2, r8, #1
 80039e2:	4631      	mov	r1, r6
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b8      	blx	r7
 80039e8:	3001      	adds	r0, #1
 80039ea:	d10c      	bne.n	8003a06 <_printf_float+0x416>
 80039ec:	e65b      	b.n	80036a6 <_printf_float+0xb6>
 80039ee:	2301      	movs	r3, #1
 80039f0:	465a      	mov	r2, fp
 80039f2:	4631      	mov	r1, r6
 80039f4:	4628      	mov	r0, r5
 80039f6:	47b8      	blx	r7
 80039f8:	3001      	adds	r0, #1
 80039fa:	f43f ae54 	beq.w	80036a6 <_printf_float+0xb6>
 80039fe:	f108 0801 	add.w	r8, r8, #1
 8003a02:	45d0      	cmp	r8, sl
 8003a04:	dbf3      	blt.n	80039ee <_printf_float+0x3fe>
 8003a06:	464b      	mov	r3, r9
 8003a08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a0c:	e6e0      	b.n	80037d0 <_printf_float+0x1e0>
 8003a0e:	f04f 0800 	mov.w	r8, #0
 8003a12:	f104 0b1a 	add.w	fp, r4, #26
 8003a16:	e7f4      	b.n	8003a02 <_printf_float+0x412>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4642      	mov	r2, r8
 8003a1c:	e7e1      	b.n	80039e2 <_printf_float+0x3f2>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	464a      	mov	r2, r9
 8003a22:	4631      	mov	r1, r6
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b8      	blx	r7
 8003a28:	3001      	adds	r0, #1
 8003a2a:	f43f ae3c 	beq.w	80036a6 <_printf_float+0xb6>
 8003a2e:	f108 0801 	add.w	r8, r8, #1
 8003a32:	68e3      	ldr	r3, [r4, #12]
 8003a34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003a36:	1a5b      	subs	r3, r3, r1
 8003a38:	4543      	cmp	r3, r8
 8003a3a:	dcf0      	bgt.n	8003a1e <_printf_float+0x42e>
 8003a3c:	e6fd      	b.n	800383a <_printf_float+0x24a>
 8003a3e:	f04f 0800 	mov.w	r8, #0
 8003a42:	f104 0919 	add.w	r9, r4, #25
 8003a46:	e7f4      	b.n	8003a32 <_printf_float+0x442>

08003a48 <_printf_common>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	4698      	mov	r8, r3
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	4607      	mov	r7, r0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfb8      	it	lt
 8003a5a:	4613      	movlt	r3, r2
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a62:	460c      	mov	r4, r1
 8003a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a68:	b10a      	cbz	r2, 8003a6e <_printf_common+0x26>
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	0699      	lsls	r1, r3, #26
 8003a72:	bf42      	ittt	mi
 8003a74:	6833      	ldrmi	r3, [r6, #0]
 8003a76:	3302      	addmi	r3, #2
 8003a78:	6033      	strmi	r3, [r6, #0]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d106      	bne.n	8003a90 <_printf_common+0x48>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dc2b      	bgt.n	8003ae8 <_printf_common+0xa0>
 8003a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	3b00      	subs	r3, #0
 8003a98:	bf18      	it	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d430      	bmi.n	8003b02 <_printf_common+0xba>
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003aa8:	47c8      	blx	r9
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d023      	beq.n	8003af6 <_printf_common+0xae>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	6922      	ldr	r2, [r4, #16]
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf14      	ite	ne
 8003aba:	2500      	movne	r5, #0
 8003abc:	6833      	ldreq	r3, [r6, #0]
 8003abe:	f04f 0600 	mov.w	r6, #0
 8003ac2:	bf08      	it	eq
 8003ac4:	68e5      	ldreq	r5, [r4, #12]
 8003ac6:	f104 041a 	add.w	r4, r4, #26
 8003aca:	bf08      	it	eq
 8003acc:	1aed      	subeq	r5, r5, r3
 8003ace:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ad2:	bf08      	it	eq
 8003ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bfc4      	itt	gt
 8003adc:	1a9b      	subgt	r3, r3, r2
 8003ade:	18ed      	addgt	r5, r5, r3
 8003ae0:	42b5      	cmp	r5, r6
 8003ae2:	d11a      	bne.n	8003b1a <_printf_common+0xd2>
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e008      	b.n	8003afa <_printf_common+0xb2>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4652      	mov	r2, sl
 8003aec:	4641      	mov	r1, r8
 8003aee:	4638      	mov	r0, r7
 8003af0:	47c8      	blx	r9
 8003af2:	3001      	adds	r0, #1
 8003af4:	d103      	bne.n	8003afe <_printf_common+0xb6>
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afe:	3501      	adds	r5, #1
 8003b00:	e7c1      	b.n	8003a86 <_printf_common+0x3e>
 8003b02:	2030      	movs	r0, #48	@ 0x30
 8003b04:	18e1      	adds	r1, r4, r3
 8003b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b10:	4422      	add	r2, r4
 8003b12:	3302      	adds	r3, #2
 8003b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b18:	e7c2      	b.n	8003aa0 <_printf_common+0x58>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4641      	mov	r1, r8
 8003b20:	4638      	mov	r0, r7
 8003b22:	47c8      	blx	r9
 8003b24:	3001      	adds	r0, #1
 8003b26:	d0e6      	beq.n	8003af6 <_printf_common+0xae>
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7d9      	b.n	8003ae0 <_printf_common+0x98>

08003b2c <_printf_i>:
 8003b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	7e0f      	ldrb	r7, [r1, #24]
 8003b32:	4691      	mov	r9, r2
 8003b34:	2f78      	cmp	r7, #120	@ 0x78
 8003b36:	4680      	mov	r8, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	469a      	mov	sl, r3
 8003b3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b42:	d807      	bhi.n	8003b54 <_printf_i+0x28>
 8003b44:	2f62      	cmp	r7, #98	@ 0x62
 8003b46:	d80a      	bhi.n	8003b5e <_printf_i+0x32>
 8003b48:	2f00      	cmp	r7, #0
 8003b4a:	f000 80d3 	beq.w	8003cf4 <_printf_i+0x1c8>
 8003b4e:	2f58      	cmp	r7, #88	@ 0x58
 8003b50:	f000 80ba 	beq.w	8003cc8 <_printf_i+0x19c>
 8003b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b5c:	e03a      	b.n	8003bd4 <_printf_i+0xa8>
 8003b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b62:	2b15      	cmp	r3, #21
 8003b64:	d8f6      	bhi.n	8003b54 <_printf_i+0x28>
 8003b66:	a101      	add	r1, pc, #4	@ (adr r1, 8003b6c <_printf_i+0x40>)
 8003b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bd9 	.word	0x08003bd9
 8003b74:	08003b55 	.word	0x08003b55
 8003b78:	08003b55 	.word	0x08003b55
 8003b7c:	08003b55 	.word	0x08003b55
 8003b80:	08003b55 	.word	0x08003b55
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003b55 	.word	0x08003b55
 8003b8c:	08003b55 	.word	0x08003b55
 8003b90:	08003b55 	.word	0x08003b55
 8003b94:	08003b55 	.word	0x08003b55
 8003b98:	08003cdb 	.word	0x08003cdb
 8003b9c:	08003c03 	.word	0x08003c03
 8003ba0:	08003c95 	.word	0x08003c95
 8003ba4:	08003b55 	.word	0x08003b55
 8003ba8:	08003b55 	.word	0x08003b55
 8003bac:	08003cfd 	.word	0x08003cfd
 8003bb0:	08003b55 	.word	0x08003b55
 8003bb4:	08003c03 	.word	0x08003c03
 8003bb8:	08003b55 	.word	0x08003b55
 8003bbc:	08003b55 	.word	0x08003b55
 8003bc0:	08003c9d 	.word	0x08003c9d
 8003bc4:	6833      	ldr	r3, [r6, #0]
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6032      	str	r2, [r6, #0]
 8003bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e09e      	b.n	8003d16 <_printf_i+0x1ea>
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	6820      	ldr	r0, [r4, #0]
 8003bdc:	1d19      	adds	r1, r3, #4
 8003bde:	6031      	str	r1, [r6, #0]
 8003be0:	0606      	lsls	r6, r0, #24
 8003be2:	d501      	bpl.n	8003be8 <_printf_i+0xbc>
 8003be4:	681d      	ldr	r5, [r3, #0]
 8003be6:	e003      	b.n	8003bf0 <_printf_i+0xc4>
 8003be8:	0645      	lsls	r5, r0, #25
 8003bea:	d5fb      	bpl.n	8003be4 <_printf_i+0xb8>
 8003bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bf0:	2d00      	cmp	r5, #0
 8003bf2:	da03      	bge.n	8003bfc <_printf_i+0xd0>
 8003bf4:	232d      	movs	r3, #45	@ 0x2d
 8003bf6:	426d      	negs	r5, r5
 8003bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	4859      	ldr	r0, [pc, #356]	@ (8003d64 <_printf_i+0x238>)
 8003c00:	e011      	b.n	8003c26 <_printf_i+0xfa>
 8003c02:	6821      	ldr	r1, [r4, #0]
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	0608      	lsls	r0, r1, #24
 8003c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c0c:	d402      	bmi.n	8003c14 <_printf_i+0xe8>
 8003c0e:	0649      	lsls	r1, r1, #25
 8003c10:	bf48      	it	mi
 8003c12:	b2ad      	uxthmi	r5, r5
 8003c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	bf14      	ite	ne
 8003c1a:	230a      	movne	r3, #10
 8003c1c:	2308      	moveq	r3, #8
 8003c1e:	4851      	ldr	r0, [pc, #324]	@ (8003d64 <_printf_i+0x238>)
 8003c20:	2100      	movs	r1, #0
 8003c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c26:	6866      	ldr	r6, [r4, #4]
 8003c28:	2e00      	cmp	r6, #0
 8003c2a:	bfa8      	it	ge
 8003c2c:	6821      	ldrge	r1, [r4, #0]
 8003c2e:	60a6      	str	r6, [r4, #8]
 8003c30:	bfa4      	itt	ge
 8003c32:	f021 0104 	bicge.w	r1, r1, #4
 8003c36:	6021      	strge	r1, [r4, #0]
 8003c38:	b90d      	cbnz	r5, 8003c3e <_printf_i+0x112>
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	d04b      	beq.n	8003cd6 <_printf_i+0x1aa>
 8003c3e:	4616      	mov	r6, r2
 8003c40:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c44:	fb03 5711 	mls	r7, r3, r1, r5
 8003c48:	5dc7      	ldrb	r7, [r0, r7]
 8003c4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c4e:	462f      	mov	r7, r5
 8003c50:	42bb      	cmp	r3, r7
 8003c52:	460d      	mov	r5, r1
 8003c54:	d9f4      	bls.n	8003c40 <_printf_i+0x114>
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d10b      	bne.n	8003c72 <_printf_i+0x146>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	07df      	lsls	r7, r3, #31
 8003c5e:	d508      	bpl.n	8003c72 <_printf_i+0x146>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	6861      	ldr	r1, [r4, #4]
 8003c64:	4299      	cmp	r1, r3
 8003c66:	bfde      	ittt	le
 8003c68:	2330      	movle	r3, #48	@ 0x30
 8003c6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c72:	1b92      	subs	r2, r2, r6
 8003c74:	6122      	str	r2, [r4, #16]
 8003c76:	464b      	mov	r3, r9
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	f8cd a000 	str.w	sl, [sp]
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	f7ff fee1 	bl	8003a48 <_printf_common>
 8003c86:	3001      	adds	r0, #1
 8003c88:	d14a      	bne.n	8003d20 <_printf_i+0x1f4>
 8003c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8e:	b004      	add	sp, #16
 8003c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	f043 0320 	orr.w	r3, r3, #32
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	2778      	movs	r7, #120	@ 0x78
 8003c9e:	4832      	ldr	r0, [pc, #200]	@ (8003d68 <_printf_i+0x23c>)
 8003ca0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	061f      	lsls	r7, r3, #24
 8003caa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cae:	d402      	bmi.n	8003cb6 <_printf_i+0x18a>
 8003cb0:	065f      	lsls	r7, r3, #25
 8003cb2:	bf48      	it	mi
 8003cb4:	b2ad      	uxthmi	r5, r5
 8003cb6:	6031      	str	r1, [r6, #0]
 8003cb8:	07d9      	lsls	r1, r3, #31
 8003cba:	bf44      	itt	mi
 8003cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc0:	6023      	strmi	r3, [r4, #0]
 8003cc2:	b11d      	cbz	r5, 8003ccc <_printf_i+0x1a0>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	e7ab      	b.n	8003c20 <_printf_i+0xf4>
 8003cc8:	4826      	ldr	r0, [pc, #152]	@ (8003d64 <_printf_i+0x238>)
 8003cca:	e7e9      	b.n	8003ca0 <_printf_i+0x174>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	f023 0320 	bic.w	r3, r3, #32
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	e7f6      	b.n	8003cc4 <_printf_i+0x198>
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	e7bd      	b.n	8003c56 <_printf_i+0x12a>
 8003cda:	6833      	ldr	r3, [r6, #0]
 8003cdc:	6825      	ldr	r5, [r4, #0]
 8003cde:	1d18      	adds	r0, r3, #4
 8003ce0:	6961      	ldr	r1, [r4, #20]
 8003ce2:	6030      	str	r0, [r6, #0]
 8003ce4:	062e      	lsls	r6, r5, #24
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	d501      	bpl.n	8003cee <_printf_i+0x1c2>
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	e002      	b.n	8003cf4 <_printf_i+0x1c8>
 8003cee:	0668      	lsls	r0, r5, #25
 8003cf0:	d5fb      	bpl.n	8003cea <_printf_i+0x1be>
 8003cf2:	8019      	strh	r1, [r3, #0]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4616      	mov	r6, r2
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	e7bc      	b.n	8003c76 <_printf_i+0x14a>
 8003cfc:	6833      	ldr	r3, [r6, #0]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	6032      	str	r2, [r6, #0]
 8003d04:	681e      	ldr	r6, [r3, #0]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f000 fbe4 	bl	80044d6 <memchr>
 8003d0e:	b108      	cbz	r0, 8003d14 <_printf_i+0x1e8>
 8003d10:	1b80      	subs	r0, r0, r6
 8003d12:	6060      	str	r0, [r4, #4]
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d1e:	e7aa      	b.n	8003c76 <_printf_i+0x14a>
 8003d20:	4632      	mov	r2, r6
 8003d22:	4649      	mov	r1, r9
 8003d24:	4640      	mov	r0, r8
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	47d0      	blx	sl
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0ad      	beq.n	8003c8a <_printf_i+0x15e>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	079b      	lsls	r3, r3, #30
 8003d32:	d413      	bmi.n	8003d5c <_printf_i+0x230>
 8003d34:	68e0      	ldr	r0, [r4, #12]
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	4298      	cmp	r0, r3
 8003d3a:	bfb8      	it	lt
 8003d3c:	4618      	movlt	r0, r3
 8003d3e:	e7a6      	b.n	8003c8e <_printf_i+0x162>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4632      	mov	r2, r6
 8003d44:	4649      	mov	r1, r9
 8003d46:	4640      	mov	r0, r8
 8003d48:	47d0      	blx	sl
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d09d      	beq.n	8003c8a <_printf_i+0x15e>
 8003d4e:	3501      	adds	r5, #1
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	9903      	ldr	r1, [sp, #12]
 8003d54:	1a5b      	subs	r3, r3, r1
 8003d56:	42ab      	cmp	r3, r5
 8003d58:	dcf2      	bgt.n	8003d40 <_printf_i+0x214>
 8003d5a:	e7eb      	b.n	8003d34 <_printf_i+0x208>
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	f104 0619 	add.w	r6, r4, #25
 8003d62:	e7f5      	b.n	8003d50 <_printf_i+0x224>
 8003d64:	08007be8 	.word	0x08007be8
 8003d68:	08007bf9 	.word	0x08007bf9

08003d6c <_scanf_float>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b087      	sub	sp, #28
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	688b      	ldr	r3, [r1, #8]
 8003d76:	4617      	mov	r7, r2
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003d7e:	bf82      	ittt	hi
 8003d80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003d84:	eb03 0b05 	addhi.w	fp, r3, r5
 8003d88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	f04f 0500 	mov.w	r5, #0
 8003d92:	bf88      	it	hi
 8003d94:	608b      	strhi	r3, [r1, #8]
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	4680      	mov	r8, r0
 8003d9a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003d9e:	f842 3b1c 	str.w	r3, [r2], #28
 8003da2:	460c      	mov	r4, r1
 8003da4:	bf98      	it	ls
 8003da6:	f04f 0b00 	movls.w	fp, #0
 8003daa:	4616      	mov	r6, r2
 8003dac:	46aa      	mov	sl, r5
 8003dae:	46a9      	mov	r9, r5
 8003db0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003db4:	9201      	str	r2, [sp, #4]
 8003db6:	9502      	str	r5, [sp, #8]
 8003db8:	68a2      	ldr	r2, [r4, #8]
 8003dba:	b152      	cbz	r2, 8003dd2 <_scanf_float+0x66>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b4e      	cmp	r3, #78	@ 0x4e
 8003dc2:	d865      	bhi.n	8003e90 <_scanf_float+0x124>
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d83d      	bhi.n	8003e44 <_scanf_float+0xd8>
 8003dc8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003dcc:	b2c8      	uxtb	r0, r1
 8003dce:	280e      	cmp	r0, #14
 8003dd0:	d93b      	bls.n	8003e4a <_scanf_float+0xde>
 8003dd2:	f1b9 0f00 	cmp.w	r9, #0
 8003dd6:	d003      	beq.n	8003de0 <_scanf_float+0x74>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003de4:	f1ba 0f01 	cmp.w	sl, #1
 8003de8:	f200 8118 	bhi.w	800401c <_scanf_float+0x2b0>
 8003dec:	9b01      	ldr	r3, [sp, #4]
 8003dee:	429e      	cmp	r6, r3
 8003df0:	f200 8109 	bhi.w	8004006 <_scanf_float+0x29a>
 8003df4:	2001      	movs	r0, #1
 8003df6:	b007      	add	sp, #28
 8003df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003e00:	2a0d      	cmp	r2, #13
 8003e02:	d8e6      	bhi.n	8003dd2 <_scanf_float+0x66>
 8003e04:	a101      	add	r1, pc, #4	@ (adr r1, 8003e0c <_scanf_float+0xa0>)
 8003e06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003f53 	.word	0x08003f53
 8003e10:	08003dd3 	.word	0x08003dd3
 8003e14:	08003dd3 	.word	0x08003dd3
 8003e18:	08003dd3 	.word	0x08003dd3
 8003e1c:	08003fb3 	.word	0x08003fb3
 8003e20:	08003f8b 	.word	0x08003f8b
 8003e24:	08003dd3 	.word	0x08003dd3
 8003e28:	08003dd3 	.word	0x08003dd3
 8003e2c:	08003f61 	.word	0x08003f61
 8003e30:	08003dd3 	.word	0x08003dd3
 8003e34:	08003dd3 	.word	0x08003dd3
 8003e38:	08003dd3 	.word	0x08003dd3
 8003e3c:	08003dd3 	.word	0x08003dd3
 8003e40:	08003f19 	.word	0x08003f19
 8003e44:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003e48:	e7da      	b.n	8003e00 <_scanf_float+0x94>
 8003e4a:	290e      	cmp	r1, #14
 8003e4c:	d8c1      	bhi.n	8003dd2 <_scanf_float+0x66>
 8003e4e:	a001      	add	r0, pc, #4	@ (adr r0, 8003e54 <_scanf_float+0xe8>)
 8003e50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003e54:	08003f09 	.word	0x08003f09
 8003e58:	08003dd3 	.word	0x08003dd3
 8003e5c:	08003f09 	.word	0x08003f09
 8003e60:	08003f9f 	.word	0x08003f9f
 8003e64:	08003dd3 	.word	0x08003dd3
 8003e68:	08003eb1 	.word	0x08003eb1
 8003e6c:	08003eef 	.word	0x08003eef
 8003e70:	08003eef 	.word	0x08003eef
 8003e74:	08003eef 	.word	0x08003eef
 8003e78:	08003eef 	.word	0x08003eef
 8003e7c:	08003eef 	.word	0x08003eef
 8003e80:	08003eef 	.word	0x08003eef
 8003e84:	08003eef 	.word	0x08003eef
 8003e88:	08003eef 	.word	0x08003eef
 8003e8c:	08003eef 	.word	0x08003eef
 8003e90:	2b6e      	cmp	r3, #110	@ 0x6e
 8003e92:	d809      	bhi.n	8003ea8 <_scanf_float+0x13c>
 8003e94:	2b60      	cmp	r3, #96	@ 0x60
 8003e96:	d8b1      	bhi.n	8003dfc <_scanf_float+0x90>
 8003e98:	2b54      	cmp	r3, #84	@ 0x54
 8003e9a:	d07b      	beq.n	8003f94 <_scanf_float+0x228>
 8003e9c:	2b59      	cmp	r3, #89	@ 0x59
 8003e9e:	d198      	bne.n	8003dd2 <_scanf_float+0x66>
 8003ea0:	2d07      	cmp	r5, #7
 8003ea2:	d196      	bne.n	8003dd2 <_scanf_float+0x66>
 8003ea4:	2508      	movs	r5, #8
 8003ea6:	e02c      	b.n	8003f02 <_scanf_float+0x196>
 8003ea8:	2b74      	cmp	r3, #116	@ 0x74
 8003eaa:	d073      	beq.n	8003f94 <_scanf_float+0x228>
 8003eac:	2b79      	cmp	r3, #121	@ 0x79
 8003eae:	e7f6      	b.n	8003e9e <_scanf_float+0x132>
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	05c8      	lsls	r0, r1, #23
 8003eb4:	d51b      	bpl.n	8003eee <_scanf_float+0x182>
 8003eb6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003eba:	6021      	str	r1, [r4, #0]
 8003ebc:	f109 0901 	add.w	r9, r9, #1
 8003ec0:	f1bb 0f00 	cmp.w	fp, #0
 8003ec4:	d003      	beq.n	8003ece <_scanf_float+0x162>
 8003ec6:	3201      	adds	r2, #1
 8003ec8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ecc:	60a2      	str	r2, [r4, #8]
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	60a3      	str	r3, [r4, #8]
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f340 8087 	ble.w	8003ff4 <_scanf_float+0x288>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	e764      	b.n	8003db8 <_scanf_float+0x4c>
 8003eee:	eb1a 0105 	adds.w	r1, sl, r5
 8003ef2:	f47f af6e 	bne.w	8003dd2 <_scanf_float+0x66>
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	468a      	mov	sl, r1
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003f00:	6022      	str	r2, [r4, #0]
 8003f02:	f806 3b01 	strb.w	r3, [r6], #1
 8003f06:	e7e2      	b.n	8003ece <_scanf_float+0x162>
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	0610      	lsls	r0, r2, #24
 8003f0c:	f57f af61 	bpl.w	8003dd2 <_scanf_float+0x66>
 8003f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	e7f4      	b.n	8003f02 <_scanf_float+0x196>
 8003f18:	f1ba 0f00 	cmp.w	sl, #0
 8003f1c:	d10e      	bne.n	8003f3c <_scanf_float+0x1d0>
 8003f1e:	f1b9 0f00 	cmp.w	r9, #0
 8003f22:	d10e      	bne.n	8003f42 <_scanf_float+0x1d6>
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003f2a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003f2e:	d108      	bne.n	8003f42 <_scanf_float+0x1d6>
 8003f30:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003f34:	f04f 0a01 	mov.w	sl, #1
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	e7e2      	b.n	8003f02 <_scanf_float+0x196>
 8003f3c:	f1ba 0f02 	cmp.w	sl, #2
 8003f40:	d055      	beq.n	8003fee <_scanf_float+0x282>
 8003f42:	2d01      	cmp	r5, #1
 8003f44:	d002      	beq.n	8003f4c <_scanf_float+0x1e0>
 8003f46:	2d04      	cmp	r5, #4
 8003f48:	f47f af43 	bne.w	8003dd2 <_scanf_float+0x66>
 8003f4c:	3501      	adds	r5, #1
 8003f4e:	b2ed      	uxtb	r5, r5
 8003f50:	e7d7      	b.n	8003f02 <_scanf_float+0x196>
 8003f52:	f1ba 0f01 	cmp.w	sl, #1
 8003f56:	f47f af3c 	bne.w	8003dd2 <_scanf_float+0x66>
 8003f5a:	f04f 0a02 	mov.w	sl, #2
 8003f5e:	e7d0      	b.n	8003f02 <_scanf_float+0x196>
 8003f60:	b97d      	cbnz	r5, 8003f82 <_scanf_float+0x216>
 8003f62:	f1b9 0f00 	cmp.w	r9, #0
 8003f66:	f47f af37 	bne.w	8003dd8 <_scanf_float+0x6c>
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003f70:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003f74:	f040 8103 	bne.w	800417e <_scanf_float+0x412>
 8003f78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003f7c:	2501      	movs	r5, #1
 8003f7e:	6022      	str	r2, [r4, #0]
 8003f80:	e7bf      	b.n	8003f02 <_scanf_float+0x196>
 8003f82:	2d03      	cmp	r5, #3
 8003f84:	d0e2      	beq.n	8003f4c <_scanf_float+0x1e0>
 8003f86:	2d05      	cmp	r5, #5
 8003f88:	e7de      	b.n	8003f48 <_scanf_float+0x1dc>
 8003f8a:	2d02      	cmp	r5, #2
 8003f8c:	f47f af21 	bne.w	8003dd2 <_scanf_float+0x66>
 8003f90:	2503      	movs	r5, #3
 8003f92:	e7b6      	b.n	8003f02 <_scanf_float+0x196>
 8003f94:	2d06      	cmp	r5, #6
 8003f96:	f47f af1c 	bne.w	8003dd2 <_scanf_float+0x66>
 8003f9a:	2507      	movs	r5, #7
 8003f9c:	e7b1      	b.n	8003f02 <_scanf_float+0x196>
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	0591      	lsls	r1, r2, #22
 8003fa2:	f57f af16 	bpl.w	8003dd2 <_scanf_float+0x66>
 8003fa6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	f8cd 9008 	str.w	r9, [sp, #8]
 8003fb0:	e7a7      	b.n	8003f02 <_scanf_float+0x196>
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003fb8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003fbc:	d006      	beq.n	8003fcc <_scanf_float+0x260>
 8003fbe:	0550      	lsls	r0, r2, #21
 8003fc0:	f57f af07 	bpl.w	8003dd2 <_scanf_float+0x66>
 8003fc4:	f1b9 0f00 	cmp.w	r9, #0
 8003fc8:	f000 80d9 	beq.w	800417e <_scanf_float+0x412>
 8003fcc:	0591      	lsls	r1, r2, #22
 8003fce:	bf58      	it	pl
 8003fd0:	9902      	ldrpl	r1, [sp, #8]
 8003fd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003fd6:	bf58      	it	pl
 8003fd8:	eba9 0101 	subpl.w	r1, r9, r1
 8003fdc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003fe0:	f04f 0900 	mov.w	r9, #0
 8003fe4:	bf58      	it	pl
 8003fe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003fea:	6022      	str	r2, [r4, #0]
 8003fec:	e789      	b.n	8003f02 <_scanf_float+0x196>
 8003fee:	f04f 0a03 	mov.w	sl, #3
 8003ff2:	e786      	b.n	8003f02 <_scanf_float+0x196>
 8003ff4:	4639      	mov	r1, r7
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003ffc:	4798      	blx	r3
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f43f aeda 	beq.w	8003db8 <_scanf_float+0x4c>
 8004004:	e6e5      	b.n	8003dd2 <_scanf_float+0x66>
 8004006:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800400a:	463a      	mov	r2, r7
 800400c:	4640      	mov	r0, r8
 800400e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004012:	4798      	blx	r3
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	3b01      	subs	r3, #1
 8004018:	6123      	str	r3, [r4, #16]
 800401a:	e6e7      	b.n	8003dec <_scanf_float+0x80>
 800401c:	1e6b      	subs	r3, r5, #1
 800401e:	2b06      	cmp	r3, #6
 8004020:	d824      	bhi.n	800406c <_scanf_float+0x300>
 8004022:	2d02      	cmp	r5, #2
 8004024:	d836      	bhi.n	8004094 <_scanf_float+0x328>
 8004026:	9b01      	ldr	r3, [sp, #4]
 8004028:	429e      	cmp	r6, r3
 800402a:	f67f aee3 	bls.w	8003df4 <_scanf_float+0x88>
 800402e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004032:	463a      	mov	r2, r7
 8004034:	4640      	mov	r0, r8
 8004036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800403a:	4798      	blx	r3
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	3b01      	subs	r3, #1
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	e7f0      	b.n	8004026 <_scanf_float+0x2ba>
 8004044:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004048:	463a      	mov	r2, r7
 800404a:	4640      	mov	r0, r8
 800404c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004050:	4798      	blx	r3
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	3b01      	subs	r3, #1
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	f10a 3aff 	add.w	sl, sl, #4294967295
 800405c:	fa5f fa8a 	uxtb.w	sl, sl
 8004060:	f1ba 0f02 	cmp.w	sl, #2
 8004064:	d1ee      	bne.n	8004044 <_scanf_float+0x2d8>
 8004066:	3d03      	subs	r5, #3
 8004068:	b2ed      	uxtb	r5, r5
 800406a:	1b76      	subs	r6, r6, r5
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	05da      	lsls	r2, r3, #23
 8004070:	d530      	bpl.n	80040d4 <_scanf_float+0x368>
 8004072:	055b      	lsls	r3, r3, #21
 8004074:	d511      	bpl.n	800409a <_scanf_float+0x32e>
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	429e      	cmp	r6, r3
 800407a:	f67f aebb 	bls.w	8003df4 <_scanf_float+0x88>
 800407e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004082:	463a      	mov	r2, r7
 8004084:	4640      	mov	r0, r8
 8004086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800408a:	4798      	blx	r3
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	e7f0      	b.n	8004076 <_scanf_float+0x30a>
 8004094:	46aa      	mov	sl, r5
 8004096:	46b3      	mov	fp, r6
 8004098:	e7de      	b.n	8004058 <_scanf_float+0x2ec>
 800409a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	2965      	cmp	r1, #101	@ 0x65
 80040a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80040a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	d00c      	beq.n	80040c8 <_scanf_float+0x35c>
 80040ae:	2945      	cmp	r1, #69	@ 0x45
 80040b0:	d00a      	beq.n	80040c8 <_scanf_float+0x35c>
 80040b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80040b6:	463a      	mov	r2, r7
 80040b8:	4640      	mov	r0, r8
 80040ba:	4798      	blx	r3
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	1eb5      	subs	r5, r6, #2
 80040c6:	6123      	str	r3, [r4, #16]
 80040c8:	463a      	mov	r2, r7
 80040ca:	4640      	mov	r0, r8
 80040cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80040d0:	4798      	blx	r3
 80040d2:	462e      	mov	r6, r5
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	f012 0210 	ands.w	r2, r2, #16
 80040da:	d001      	beq.n	80040e0 <_scanf_float+0x374>
 80040dc:	2000      	movs	r0, #0
 80040de:	e68a      	b.n	8003df6 <_scanf_float+0x8a>
 80040e0:	7032      	strb	r2, [r6, #0]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ec:	d11c      	bne.n	8004128 <_scanf_float+0x3bc>
 80040ee:	9b02      	ldr	r3, [sp, #8]
 80040f0:	454b      	cmp	r3, r9
 80040f2:	eba3 0209 	sub.w	r2, r3, r9
 80040f6:	d123      	bne.n	8004140 <_scanf_float+0x3d4>
 80040f8:	2200      	movs	r2, #0
 80040fa:	4640      	mov	r0, r8
 80040fc:	9901      	ldr	r1, [sp, #4]
 80040fe:	f002 fbef 	bl	80068e0 <_strtod_r>
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	6825      	ldr	r5, [r4, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f015 0f02 	tst.w	r5, #2
 800410c:	4606      	mov	r6, r0
 800410e:	460f      	mov	r7, r1
 8004110:	f103 0204 	add.w	r2, r3, #4
 8004114:	d01f      	beq.n	8004156 <_scanf_float+0x3ea>
 8004116:	9903      	ldr	r1, [sp, #12]
 8004118:	600a      	str	r2, [r1, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	e9c3 6700 	strd	r6, r7, [r3]
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60e3      	str	r3, [r4, #12]
 8004126:	e7d9      	b.n	80040dc <_scanf_float+0x370>
 8004128:	9b04      	ldr	r3, [sp, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0e4      	beq.n	80040f8 <_scanf_float+0x38c>
 800412e:	9905      	ldr	r1, [sp, #20]
 8004130:	230a      	movs	r3, #10
 8004132:	4640      	mov	r0, r8
 8004134:	3101      	adds	r1, #1
 8004136:	f002 fc53 	bl	80069e0 <_strtol_r>
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	9e05      	ldr	r6, [sp, #20]
 800413e:	1ac2      	subs	r2, r0, r3
 8004140:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004144:	429e      	cmp	r6, r3
 8004146:	bf28      	it	cs
 8004148:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800414c:	4630      	mov	r0, r6
 800414e:	490d      	ldr	r1, [pc, #52]	@ (8004184 <_scanf_float+0x418>)
 8004150:	f000 f8de 	bl	8004310 <siprintf>
 8004154:	e7d0      	b.n	80040f8 <_scanf_float+0x38c>
 8004156:	076d      	lsls	r5, r5, #29
 8004158:	d4dd      	bmi.n	8004116 <_scanf_float+0x3aa>
 800415a:	9d03      	ldr	r5, [sp, #12]
 800415c:	602a      	str	r2, [r5, #0]
 800415e:	681d      	ldr	r5, [r3, #0]
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	f7fc fcbe 	bl	8000ae4 <__aeabi_dcmpun>
 8004168:	b120      	cbz	r0, 8004174 <_scanf_float+0x408>
 800416a:	4807      	ldr	r0, [pc, #28]	@ (8004188 <_scanf_float+0x41c>)
 800416c:	f000 f9c2 	bl	80044f4 <nanf>
 8004170:	6028      	str	r0, [r5, #0]
 8004172:	e7d5      	b.n	8004120 <_scanf_float+0x3b4>
 8004174:	4630      	mov	r0, r6
 8004176:	4639      	mov	r1, r7
 8004178:	f7fc fd12 	bl	8000ba0 <__aeabi_d2f>
 800417c:	e7f8      	b.n	8004170 <_scanf_float+0x404>
 800417e:	f04f 0900 	mov.w	r9, #0
 8004182:	e62d      	b.n	8003de0 <_scanf_float+0x74>
 8004184:	08007c0a 	.word	0x08007c0a
 8004188:	08007fa5 	.word	0x08007fa5

0800418c <std>:
 800418c:	2300      	movs	r3, #0
 800418e:	b510      	push	{r4, lr}
 8004190:	4604      	mov	r4, r0
 8004192:	e9c0 3300 	strd	r3, r3, [r0]
 8004196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800419a:	6083      	str	r3, [r0, #8]
 800419c:	8181      	strh	r1, [r0, #12]
 800419e:	6643      	str	r3, [r0, #100]	@ 0x64
 80041a0:	81c2      	strh	r2, [r0, #14]
 80041a2:	6183      	str	r3, [r0, #24]
 80041a4:	4619      	mov	r1, r3
 80041a6:	2208      	movs	r2, #8
 80041a8:	305c      	adds	r0, #92	@ 0x5c
 80041aa:	f000 f914 	bl	80043d6 <memset>
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <std+0x58>)
 80041b0:	6224      	str	r4, [r4, #32]
 80041b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <std+0x5c>)
 80041b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <std+0x60>)
 80041ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <std+0x64>)
 80041be:	6323      	str	r3, [r4, #48]	@ 0x30
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <std+0x68>)
 80041c2:	429c      	cmp	r4, r3
 80041c4:	d006      	beq.n	80041d4 <std+0x48>
 80041c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041ca:	4294      	cmp	r4, r2
 80041cc:	d002      	beq.n	80041d4 <std+0x48>
 80041ce:	33d0      	adds	r3, #208	@ 0xd0
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d105      	bne.n	80041e0 <std+0x54>
 80041d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041dc:	f000 b978 	b.w	80044d0 <__retarget_lock_init_recursive>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	bf00      	nop
 80041e4:	08004351 	.word	0x08004351
 80041e8:	08004373 	.word	0x08004373
 80041ec:	080043ab 	.word	0x080043ab
 80041f0:	080043cf 	.word	0x080043cf
 80041f4:	20000338 	.word	0x20000338

080041f8 <stdio_exit_handler>:
 80041f8:	4a02      	ldr	r2, [pc, #8]	@ (8004204 <stdio_exit_handler+0xc>)
 80041fa:	4903      	ldr	r1, [pc, #12]	@ (8004208 <stdio_exit_handler+0x10>)
 80041fc:	4803      	ldr	r0, [pc, #12]	@ (800420c <stdio_exit_handler+0x14>)
 80041fe:	f000 b869 	b.w	80042d4 <_fwalk_sglue>
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c
 8004208:	08006d95 	.word	0x08006d95
 800420c:	2000001c 	.word	0x2000001c

08004210 <cleanup_stdio>:
 8004210:	6841      	ldr	r1, [r0, #4]
 8004212:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <cleanup_stdio+0x34>)
 8004214:	b510      	push	{r4, lr}
 8004216:	4299      	cmp	r1, r3
 8004218:	4604      	mov	r4, r0
 800421a:	d001      	beq.n	8004220 <cleanup_stdio+0x10>
 800421c:	f002 fdba 	bl	8006d94 <_fflush_r>
 8004220:	68a1      	ldr	r1, [r4, #8]
 8004222:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <cleanup_stdio+0x38>)
 8004224:	4299      	cmp	r1, r3
 8004226:	d002      	beq.n	800422e <cleanup_stdio+0x1e>
 8004228:	4620      	mov	r0, r4
 800422a:	f002 fdb3 	bl	8006d94 <_fflush_r>
 800422e:	68e1      	ldr	r1, [r4, #12]
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <cleanup_stdio+0x3c>)
 8004232:	4299      	cmp	r1, r3
 8004234:	d004      	beq.n	8004240 <cleanup_stdio+0x30>
 8004236:	4620      	mov	r0, r4
 8004238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800423c:	f002 bdaa 	b.w	8006d94 <_fflush_r>
 8004240:	bd10      	pop	{r4, pc}
 8004242:	bf00      	nop
 8004244:	20000338 	.word	0x20000338
 8004248:	200003a0 	.word	0x200003a0
 800424c:	20000408 	.word	0x20000408

08004250 <global_stdio_init.part.0>:
 8004250:	b510      	push	{r4, lr}
 8004252:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <global_stdio_init.part.0+0x30>)
 8004254:	4c0b      	ldr	r4, [pc, #44]	@ (8004284 <global_stdio_init.part.0+0x34>)
 8004256:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <global_stdio_init.part.0+0x38>)
 8004258:	4620      	mov	r0, r4
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	2104      	movs	r1, #4
 800425e:	2200      	movs	r2, #0
 8004260:	f7ff ff94 	bl	800418c <std>
 8004264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004268:	2201      	movs	r2, #1
 800426a:	2109      	movs	r1, #9
 800426c:	f7ff ff8e 	bl	800418c <std>
 8004270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004274:	2202      	movs	r2, #2
 8004276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800427a:	2112      	movs	r1, #18
 800427c:	f7ff bf86 	b.w	800418c <std>
 8004280:	20000470 	.word	0x20000470
 8004284:	20000338 	.word	0x20000338
 8004288:	080041f9 	.word	0x080041f9

0800428c <__sfp_lock_acquire>:
 800428c:	4801      	ldr	r0, [pc, #4]	@ (8004294 <__sfp_lock_acquire+0x8>)
 800428e:	f000 b920 	b.w	80044d2 <__retarget_lock_acquire_recursive>
 8004292:	bf00      	nop
 8004294:	20000479 	.word	0x20000479

08004298 <__sfp_lock_release>:
 8004298:	4801      	ldr	r0, [pc, #4]	@ (80042a0 <__sfp_lock_release+0x8>)
 800429a:	f000 b91b 	b.w	80044d4 <__retarget_lock_release_recursive>
 800429e:	bf00      	nop
 80042a0:	20000479 	.word	0x20000479

080042a4 <__sinit>:
 80042a4:	b510      	push	{r4, lr}
 80042a6:	4604      	mov	r4, r0
 80042a8:	f7ff fff0 	bl	800428c <__sfp_lock_acquire>
 80042ac:	6a23      	ldr	r3, [r4, #32]
 80042ae:	b11b      	cbz	r3, 80042b8 <__sinit+0x14>
 80042b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b4:	f7ff bff0 	b.w	8004298 <__sfp_lock_release>
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <__sinit+0x28>)
 80042ba:	6223      	str	r3, [r4, #32]
 80042bc:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <__sinit+0x2c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f5      	bne.n	80042b0 <__sinit+0xc>
 80042c4:	f7ff ffc4 	bl	8004250 <global_stdio_init.part.0>
 80042c8:	e7f2      	b.n	80042b0 <__sinit+0xc>
 80042ca:	bf00      	nop
 80042cc:	08004211 	.word	0x08004211
 80042d0:	20000470 	.word	0x20000470

080042d4 <_fwalk_sglue>:
 80042d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d8:	4607      	mov	r7, r0
 80042da:	4688      	mov	r8, r1
 80042dc:	4614      	mov	r4, r2
 80042de:	2600      	movs	r6, #0
 80042e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042e4:	f1b9 0901 	subs.w	r9, r9, #1
 80042e8:	d505      	bpl.n	80042f6 <_fwalk_sglue+0x22>
 80042ea:	6824      	ldr	r4, [r4, #0]
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	d1f7      	bne.n	80042e0 <_fwalk_sglue+0xc>
 80042f0:	4630      	mov	r0, r6
 80042f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d907      	bls.n	800430c <_fwalk_sglue+0x38>
 80042fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004300:	3301      	adds	r3, #1
 8004302:	d003      	beq.n	800430c <_fwalk_sglue+0x38>
 8004304:	4629      	mov	r1, r5
 8004306:	4638      	mov	r0, r7
 8004308:	47c0      	blx	r8
 800430a:	4306      	orrs	r6, r0
 800430c:	3568      	adds	r5, #104	@ 0x68
 800430e:	e7e9      	b.n	80042e4 <_fwalk_sglue+0x10>

08004310 <siprintf>:
 8004310:	b40e      	push	{r1, r2, r3}
 8004312:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004316:	b500      	push	{lr}
 8004318:	b09c      	sub	sp, #112	@ 0x70
 800431a:	ab1d      	add	r3, sp, #116	@ 0x74
 800431c:	9002      	str	r0, [sp, #8]
 800431e:	9006      	str	r0, [sp, #24]
 8004320:	9107      	str	r1, [sp, #28]
 8004322:	9104      	str	r1, [sp, #16]
 8004324:	4808      	ldr	r0, [pc, #32]	@ (8004348 <siprintf+0x38>)
 8004326:	4909      	ldr	r1, [pc, #36]	@ (800434c <siprintf+0x3c>)
 8004328:	f853 2b04 	ldr.w	r2, [r3], #4
 800432c:	9105      	str	r1, [sp, #20]
 800432e:	6800      	ldr	r0, [r0, #0]
 8004330:	a902      	add	r1, sp, #8
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	f002 fbb2 	bl	8006a9c <_svfiprintf_r>
 8004338:	2200      	movs	r2, #0
 800433a:	9b02      	ldr	r3, [sp, #8]
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	b01c      	add	sp, #112	@ 0x70
 8004340:	f85d eb04 	ldr.w	lr, [sp], #4
 8004344:	b003      	add	sp, #12
 8004346:	4770      	bx	lr
 8004348:	20000018 	.word	0x20000018
 800434c:	ffff0208 	.word	0xffff0208

08004350 <__sread>:
 8004350:	b510      	push	{r4, lr}
 8004352:	460c      	mov	r4, r1
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	f000 f86c 	bl	8004434 <_read_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	bfab      	itete	ge
 8004360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004362:	89a3      	ldrhlt	r3, [r4, #12]
 8004364:	181b      	addge	r3, r3, r0
 8004366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800436a:	bfac      	ite	ge
 800436c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800436e:	81a3      	strhlt	r3, [r4, #12]
 8004370:	bd10      	pop	{r4, pc}

08004372 <__swrite>:
 8004372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	898b      	ldrh	r3, [r1, #12]
 800437a:	4605      	mov	r5, r0
 800437c:	05db      	lsls	r3, r3, #23
 800437e:	460c      	mov	r4, r1
 8004380:	4616      	mov	r6, r2
 8004382:	d505      	bpl.n	8004390 <__swrite+0x1e>
 8004384:	2302      	movs	r3, #2
 8004386:	2200      	movs	r2, #0
 8004388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438c:	f000 f840 	bl	8004410 <_lseek_r>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	4632      	mov	r2, r6
 8004394:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	4628      	mov	r0, r5
 800439c:	463b      	mov	r3, r7
 800439e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	f000 b857 	b.w	8004458 <_write_r>

080043aa <__sseek>:
 80043aa:	b510      	push	{r4, lr}
 80043ac:	460c      	mov	r4, r1
 80043ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b2:	f000 f82d 	bl	8004410 <_lseek_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	bf15      	itete	ne
 80043bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043c6:	81a3      	strheq	r3, [r4, #12]
 80043c8:	bf18      	it	ne
 80043ca:	81a3      	strhne	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__sclose>:
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 b80d 	b.w	80043f0 <_close_r>

080043d6 <memset>:
 80043d6:	4603      	mov	r3, r0
 80043d8:	4402      	add	r2, r0
 80043da:	4293      	cmp	r3, r2
 80043dc:	d100      	bne.n	80043e0 <memset+0xa>
 80043de:	4770      	bx	lr
 80043e0:	f803 1b01 	strb.w	r1, [r3], #1
 80043e4:	e7f9      	b.n	80043da <memset+0x4>
	...

080043e8 <_localeconv_r>:
 80043e8:	4800      	ldr	r0, [pc, #0]	@ (80043ec <_localeconv_r+0x4>)
 80043ea:	4770      	bx	lr
 80043ec:	20000158 	.word	0x20000158

080043f0 <_close_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	2300      	movs	r3, #0
 80043f4:	4d05      	ldr	r5, [pc, #20]	@ (800440c <_close_r+0x1c>)
 80043f6:	4604      	mov	r4, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	f7fc ffff 	bl	80013fe <_close>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_close_r+0x1a>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_close_r+0x1a>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000474 	.word	0x20000474

08004410 <_lseek_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	2200      	movs	r2, #0
 800441a:	4d05      	ldr	r5, [pc, #20]	@ (8004430 <_lseek_r+0x20>)
 800441c:	602a      	str	r2, [r5, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	f7fd f811 	bl	8001446 <_lseek>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_lseek_r+0x1e>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_lseek_r+0x1e>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000474 	.word	0x20000474

08004434 <_read_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	2200      	movs	r2, #0
 800443e:	4d05      	ldr	r5, [pc, #20]	@ (8004454 <_read_r+0x20>)
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f7fc ffa2 	bl	800138c <_read>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_read_r+0x1e>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_read_r+0x1e>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000474 	.word	0x20000474

08004458 <_write_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	4611      	mov	r1, r2
 8004460:	2200      	movs	r2, #0
 8004462:	4d05      	ldr	r5, [pc, #20]	@ (8004478 <_write_r+0x20>)
 8004464:	602a      	str	r2, [r5, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	f7fc ffad 	bl	80013c6 <_write>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_write_r+0x1e>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_write_r+0x1e>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000474 	.word	0x20000474

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	@ (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000018 	.word	0x20000018

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	2600      	movs	r6, #0
 800448c:	4d0c      	ldr	r5, [pc, #48]	@ (80044c0 <__libc_init_array+0x38>)
 800448e:	4c0d      	ldr	r4, [pc, #52]	@ (80044c4 <__libc_init_array+0x3c>)
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	f003 fb68 	bl	8007b6c <_init>
 800449c:	2600      	movs	r6, #0
 800449e:	4d0a      	ldr	r5, [pc, #40]	@ (80044c8 <__libc_init_array+0x40>)
 80044a0:	4c0a      	ldr	r4, [pc, #40]	@ (80044cc <__libc_init_array+0x44>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08008010 	.word	0x08008010
 80044c4:	08008010 	.word	0x08008010
 80044c8:	08008010 	.word	0x08008010
 80044cc:	08008014 	.word	0x08008014

080044d0 <__retarget_lock_init_recursive>:
 80044d0:	4770      	bx	lr

080044d2 <__retarget_lock_acquire_recursive>:
 80044d2:	4770      	bx	lr

080044d4 <__retarget_lock_release_recursive>:
 80044d4:	4770      	bx	lr

080044d6 <memchr>:
 80044d6:	4603      	mov	r3, r0
 80044d8:	b510      	push	{r4, lr}
 80044da:	b2c9      	uxtb	r1, r1
 80044dc:	4402      	add	r2, r0
 80044de:	4293      	cmp	r3, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	d101      	bne.n	80044e8 <memchr+0x12>
 80044e4:	2000      	movs	r0, #0
 80044e6:	e003      	b.n	80044f0 <memchr+0x1a>
 80044e8:	7804      	ldrb	r4, [r0, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	428c      	cmp	r4, r1
 80044ee:	d1f6      	bne.n	80044de <memchr+0x8>
 80044f0:	bd10      	pop	{r4, pc}
	...

080044f4 <nanf>:
 80044f4:	4800      	ldr	r0, [pc, #0]	@ (80044f8 <nanf+0x4>)
 80044f6:	4770      	bx	lr
 80044f8:	7fc00000 	.word	0x7fc00000

080044fc <quorem>:
 80044fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	6903      	ldr	r3, [r0, #16]
 8004502:	690c      	ldr	r4, [r1, #16]
 8004504:	4607      	mov	r7, r0
 8004506:	42a3      	cmp	r3, r4
 8004508:	db7e      	blt.n	8004608 <quorem+0x10c>
 800450a:	3c01      	subs	r4, #1
 800450c:	00a3      	lsls	r3, r4, #2
 800450e:	f100 0514 	add.w	r5, r0, #20
 8004512:	f101 0814 	add.w	r8, r1, #20
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004526:	3301      	adds	r3, #1
 8004528:	429a      	cmp	r2, r3
 800452a:	fbb2 f6f3 	udiv	r6, r2, r3
 800452e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004532:	d32e      	bcc.n	8004592 <quorem+0x96>
 8004534:	f04f 0a00 	mov.w	sl, #0
 8004538:	46c4      	mov	ip, r8
 800453a:	46ae      	mov	lr, r5
 800453c:	46d3      	mov	fp, sl
 800453e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004542:	b298      	uxth	r0, r3
 8004544:	fb06 a000 	mla	r0, r6, r0, sl
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	0c02      	lsrs	r2, r0, #16
 800454c:	fb06 2303 	mla	r3, r6, r3, r2
 8004550:	f8de 2000 	ldr.w	r2, [lr]
 8004554:	b280      	uxth	r0, r0
 8004556:	b292      	uxth	r2, r2
 8004558:	1a12      	subs	r2, r2, r0
 800455a:	445a      	add	r2, fp
 800455c:	f8de 0000 	ldr.w	r0, [lr]
 8004560:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004564:	b29b      	uxth	r3, r3
 8004566:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800456a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800456e:	b292      	uxth	r2, r2
 8004570:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004574:	45e1      	cmp	r9, ip
 8004576:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800457a:	f84e 2b04 	str.w	r2, [lr], #4
 800457e:	d2de      	bcs.n	800453e <quorem+0x42>
 8004580:	9b00      	ldr	r3, [sp, #0]
 8004582:	58eb      	ldr	r3, [r5, r3]
 8004584:	b92b      	cbnz	r3, 8004592 <quorem+0x96>
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	3b04      	subs	r3, #4
 800458a:	429d      	cmp	r5, r3
 800458c:	461a      	mov	r2, r3
 800458e:	d32f      	bcc.n	80045f0 <quorem+0xf4>
 8004590:	613c      	str	r4, [r7, #16]
 8004592:	4638      	mov	r0, r7
 8004594:	f001 f9c4 	bl	8005920 <__mcmp>
 8004598:	2800      	cmp	r0, #0
 800459a:	db25      	blt.n	80045e8 <quorem+0xec>
 800459c:	4629      	mov	r1, r5
 800459e:	2000      	movs	r0, #0
 80045a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80045a4:	f8d1 c000 	ldr.w	ip, [r1]
 80045a8:	fa1f fe82 	uxth.w	lr, r2
 80045ac:	fa1f f38c 	uxth.w	r3, ip
 80045b0:	eba3 030e 	sub.w	r3, r3, lr
 80045b4:	4403      	add	r3, r0
 80045b6:	0c12      	lsrs	r2, r2, #16
 80045b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045c6:	45c1      	cmp	r9, r8
 80045c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045cc:	f841 3b04 	str.w	r3, [r1], #4
 80045d0:	d2e6      	bcs.n	80045a0 <quorem+0xa4>
 80045d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045da:	b922      	cbnz	r2, 80045e6 <quorem+0xea>
 80045dc:	3b04      	subs	r3, #4
 80045de:	429d      	cmp	r5, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	d30b      	bcc.n	80045fc <quorem+0x100>
 80045e4:	613c      	str	r4, [r7, #16]
 80045e6:	3601      	adds	r6, #1
 80045e8:	4630      	mov	r0, r6
 80045ea:	b003      	add	sp, #12
 80045ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	3b04      	subs	r3, #4
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	d1cb      	bne.n	8004590 <quorem+0x94>
 80045f8:	3c01      	subs	r4, #1
 80045fa:	e7c6      	b.n	800458a <quorem+0x8e>
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	3b04      	subs	r3, #4
 8004600:	2a00      	cmp	r2, #0
 8004602:	d1ef      	bne.n	80045e4 <quorem+0xe8>
 8004604:	3c01      	subs	r4, #1
 8004606:	e7ea      	b.n	80045de <quorem+0xe2>
 8004608:	2000      	movs	r0, #0
 800460a:	e7ee      	b.n	80045ea <quorem+0xee>
 800460c:	0000      	movs	r0, r0
	...

08004610 <_dtoa_r>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	69c7      	ldr	r7, [r0, #28]
 800461a:	b097      	sub	sp, #92	@ 0x5c
 800461c:	4683      	mov	fp, r0
 800461e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004622:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004624:	b97f      	cbnz	r7, 8004646 <_dtoa_r+0x36>
 8004626:	2010      	movs	r0, #16
 8004628:	f000 fe02 	bl	8005230 <malloc>
 800462c:	4602      	mov	r2, r0
 800462e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004632:	b920      	cbnz	r0, 800463e <_dtoa_r+0x2e>
 8004634:	21ef      	movs	r1, #239	@ 0xef
 8004636:	4ba8      	ldr	r3, [pc, #672]	@ (80048d8 <_dtoa_r+0x2c8>)
 8004638:	48a8      	ldr	r0, [pc, #672]	@ (80048dc <_dtoa_r+0x2cc>)
 800463a:	f002 fc23 	bl	8006e84 <__assert_func>
 800463e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004642:	6007      	str	r7, [r0, #0]
 8004644:	60c7      	str	r7, [r0, #12]
 8004646:	f8db 301c 	ldr.w	r3, [fp, #28]
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	b159      	cbz	r1, 8004666 <_dtoa_r+0x56>
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	2301      	movs	r3, #1
 8004652:	4093      	lsls	r3, r2
 8004654:	604a      	str	r2, [r1, #4]
 8004656:	608b      	str	r3, [r1, #8]
 8004658:	4658      	mov	r0, fp
 800465a:	f000 fedf 	bl	800541c <_Bfree>
 800465e:	2200      	movs	r2, #0
 8004660:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	1e2b      	subs	r3, r5, #0
 8004668:	bfaf      	iteee	ge
 800466a:	2300      	movge	r3, #0
 800466c:	2201      	movlt	r2, #1
 800466e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004672:	9303      	strlt	r3, [sp, #12]
 8004674:	bfa8      	it	ge
 8004676:	6033      	strge	r3, [r6, #0]
 8004678:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800467c:	4b98      	ldr	r3, [pc, #608]	@ (80048e0 <_dtoa_r+0x2d0>)
 800467e:	bfb8      	it	lt
 8004680:	6032      	strlt	r2, [r6, #0]
 8004682:	ea33 0308 	bics.w	r3, r3, r8
 8004686:	d112      	bne.n	80046ae <_dtoa_r+0x9e>
 8004688:	f242 730f 	movw	r3, #9999	@ 0x270f
 800468c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004694:	4323      	orrs	r3, r4
 8004696:	f000 8550 	beq.w	800513a <_dtoa_r+0xb2a>
 800469a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800469c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80048e4 <_dtoa_r+0x2d4>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8552 	beq.w	800514a <_dtoa_r+0xb3a>
 80046a6:	f10a 0303 	add.w	r3, sl, #3
 80046aa:	f000 bd4c 	b.w	8005146 <_dtoa_r+0xb36>
 80046ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80046b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046ba:	2200      	movs	r2, #0
 80046bc:	2300      	movs	r3, #0
 80046be:	f7fc f9df 	bl	8000a80 <__aeabi_dcmpeq>
 80046c2:	4607      	mov	r7, r0
 80046c4:	b158      	cbz	r0, 80046de <_dtoa_r+0xce>
 80046c6:	2301      	movs	r3, #1
 80046c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ce:	b113      	cbz	r3, 80046d6 <_dtoa_r+0xc6>
 80046d0:	4b85      	ldr	r3, [pc, #532]	@ (80048e8 <_dtoa_r+0x2d8>)
 80046d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80048ec <_dtoa_r+0x2dc>
 80046da:	f000 bd36 	b.w	800514a <_dtoa_r+0xb3a>
 80046de:	ab14      	add	r3, sp, #80	@ 0x50
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	ab15      	add	r3, sp, #84	@ 0x54
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	4658      	mov	r0, fp
 80046e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046ec:	f001 fa30 	bl	8005b50 <__d2b>
 80046f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046f4:	4681      	mov	r9, r0
 80046f6:	2e00      	cmp	r6, #0
 80046f8:	d077      	beq.n	80047ea <_dtoa_r+0x1da>
 80046fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004700:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800470c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004710:	9712      	str	r7, [sp, #72]	@ 0x48
 8004712:	4619      	mov	r1, r3
 8004714:	2200      	movs	r2, #0
 8004716:	4b76      	ldr	r3, [pc, #472]	@ (80048f0 <_dtoa_r+0x2e0>)
 8004718:	f7fb fd92 	bl	8000240 <__aeabi_dsub>
 800471c:	a368      	add	r3, pc, #416	@ (adr r3, 80048c0 <_dtoa_r+0x2b0>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fb ff45 	bl	80005b0 <__aeabi_dmul>
 8004726:	a368      	add	r3, pc, #416	@ (adr r3, 80048c8 <_dtoa_r+0x2b8>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb fd8a 	bl	8000244 <__adddf3>
 8004730:	4604      	mov	r4, r0
 8004732:	4630      	mov	r0, r6
 8004734:	460d      	mov	r5, r1
 8004736:	f7fb fed1 	bl	80004dc <__aeabi_i2d>
 800473a:	a365      	add	r3, pc, #404	@ (adr r3, 80048d0 <_dtoa_r+0x2c0>)
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f7fb ff36 	bl	80005b0 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4620      	mov	r0, r4
 800474a:	4629      	mov	r1, r5
 800474c:	f7fb fd7a 	bl	8000244 <__adddf3>
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	f7fc f9dc 	bl	8000b10 <__aeabi_d2iz>
 8004758:	2200      	movs	r2, #0
 800475a:	4607      	mov	r7, r0
 800475c:	2300      	movs	r3, #0
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fc f997 	bl	8000a94 <__aeabi_dcmplt>
 8004766:	b140      	cbz	r0, 800477a <_dtoa_r+0x16a>
 8004768:	4638      	mov	r0, r7
 800476a:	f7fb feb7 	bl	80004dc <__aeabi_i2d>
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	f7fc f985 	bl	8000a80 <__aeabi_dcmpeq>
 8004776:	b900      	cbnz	r0, 800477a <_dtoa_r+0x16a>
 8004778:	3f01      	subs	r7, #1
 800477a:	2f16      	cmp	r7, #22
 800477c:	d853      	bhi.n	8004826 <_dtoa_r+0x216>
 800477e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004782:	4b5c      	ldr	r3, [pc, #368]	@ (80048f4 <_dtoa_r+0x2e4>)
 8004784:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fc f982 	bl	8000a94 <__aeabi_dcmplt>
 8004790:	2800      	cmp	r0, #0
 8004792:	d04a      	beq.n	800482a <_dtoa_r+0x21a>
 8004794:	2300      	movs	r3, #0
 8004796:	3f01      	subs	r7, #1
 8004798:	930f      	str	r3, [sp, #60]	@ 0x3c
 800479a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800479c:	1b9b      	subs	r3, r3, r6
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	bf46      	itte	mi
 80047a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80047a6:	2300      	movmi	r3, #0
 80047a8:	f04f 0800 	movpl.w	r8, #0
 80047ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ae:	bf48      	it	mi
 80047b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80047b2:	2f00      	cmp	r7, #0
 80047b4:	db3b      	blt.n	800482e <_dtoa_r+0x21e>
 80047b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80047ba:	443b      	add	r3, r7
 80047bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047be:	2300      	movs	r3, #0
 80047c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80047c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	d866      	bhi.n	8004896 <_dtoa_r+0x286>
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	bfc4      	itt	gt
 80047cc:	3b04      	subgt	r3, #4
 80047ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80047d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047d2:	bfc8      	it	gt
 80047d4:	2400      	movgt	r4, #0
 80047d6:	f1a3 0302 	sub.w	r3, r3, #2
 80047da:	bfd8      	it	le
 80047dc:	2401      	movle	r4, #1
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d864      	bhi.n	80048ac <_dtoa_r+0x29c>
 80047e2:	e8df f003 	tbb	[pc, r3]
 80047e6:	382b      	.short	0x382b
 80047e8:	5636      	.short	0x5636
 80047ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047ee:	441e      	add	r6, r3
 80047f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	bfc1      	itttt	gt
 80047f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004800:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004804:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004808:	bfd6      	itet	le
 800480a:	f1c3 0320 	rsble	r3, r3, #32
 800480e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004812:	fa04 f003 	lslle.w	r0, r4, r3
 8004816:	f7fb fe51 	bl	80004bc <__aeabi_ui2d>
 800481a:	2201      	movs	r2, #1
 800481c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004820:	3e01      	subs	r6, #1
 8004822:	9212      	str	r2, [sp, #72]	@ 0x48
 8004824:	e775      	b.n	8004712 <_dtoa_r+0x102>
 8004826:	2301      	movs	r3, #1
 8004828:	e7b6      	b.n	8004798 <_dtoa_r+0x188>
 800482a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800482c:	e7b5      	b.n	800479a <_dtoa_r+0x18a>
 800482e:	427b      	negs	r3, r7
 8004830:	930a      	str	r3, [sp, #40]	@ 0x28
 8004832:	2300      	movs	r3, #0
 8004834:	eba8 0807 	sub.w	r8, r8, r7
 8004838:	930e      	str	r3, [sp, #56]	@ 0x38
 800483a:	e7c2      	b.n	80047c2 <_dtoa_r+0x1b2>
 800483c:	2300      	movs	r3, #0
 800483e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004840:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004842:	2b00      	cmp	r3, #0
 8004844:	dc35      	bgt.n	80048b2 <_dtoa_r+0x2a2>
 8004846:	2301      	movs	r3, #1
 8004848:	461a      	mov	r2, r3
 800484a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800484e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004850:	e00b      	b.n	800486a <_dtoa_r+0x25a>
 8004852:	2301      	movs	r3, #1
 8004854:	e7f3      	b.n	800483e <_dtoa_r+0x22e>
 8004856:	2300      	movs	r3, #0
 8004858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800485a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	9308      	str	r3, [sp, #32]
 8004860:	3301      	adds	r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	9307      	str	r3, [sp, #28]
 8004866:	bfb8      	it	lt
 8004868:	2301      	movlt	r3, #1
 800486a:	2100      	movs	r1, #0
 800486c:	2204      	movs	r2, #4
 800486e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004872:	f102 0514 	add.w	r5, r2, #20
 8004876:	429d      	cmp	r5, r3
 8004878:	d91f      	bls.n	80048ba <_dtoa_r+0x2aa>
 800487a:	6041      	str	r1, [r0, #4]
 800487c:	4658      	mov	r0, fp
 800487e:	f000 fd8d 	bl	800539c <_Balloc>
 8004882:	4682      	mov	sl, r0
 8004884:	2800      	cmp	r0, #0
 8004886:	d139      	bne.n	80048fc <_dtoa_r+0x2ec>
 8004888:	4602      	mov	r2, r0
 800488a:	f240 11af 	movw	r1, #431	@ 0x1af
 800488e:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <_dtoa_r+0x2e8>)
 8004890:	e6d2      	b.n	8004638 <_dtoa_r+0x28>
 8004892:	2301      	movs	r3, #1
 8004894:	e7e0      	b.n	8004858 <_dtoa_r+0x248>
 8004896:	2401      	movs	r4, #1
 8004898:	2300      	movs	r3, #0
 800489a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800489c:	9320      	str	r3, [sp, #128]	@ 0x80
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	2200      	movs	r2, #0
 80048a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80048a8:	2312      	movs	r3, #18
 80048aa:	e7d0      	b.n	800484e <_dtoa_r+0x23e>
 80048ac:	2301      	movs	r3, #1
 80048ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048b0:	e7f5      	b.n	800489e <_dtoa_r+0x28e>
 80048b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80048b8:	e7d7      	b.n	800486a <_dtoa_r+0x25a>
 80048ba:	3101      	adds	r1, #1
 80048bc:	0052      	lsls	r2, r2, #1
 80048be:	e7d8      	b.n	8004872 <_dtoa_r+0x262>
 80048c0:	636f4361 	.word	0x636f4361
 80048c4:	3fd287a7 	.word	0x3fd287a7
 80048c8:	8b60c8b3 	.word	0x8b60c8b3
 80048cc:	3fc68a28 	.word	0x3fc68a28
 80048d0:	509f79fb 	.word	0x509f79fb
 80048d4:	3fd34413 	.word	0x3fd34413
 80048d8:	08007c1c 	.word	0x08007c1c
 80048dc:	08007c33 	.word	0x08007c33
 80048e0:	7ff00000 	.word	0x7ff00000
 80048e4:	08007c18 	.word	0x08007c18
 80048e8:	08007be7 	.word	0x08007be7
 80048ec:	08007be6 	.word	0x08007be6
 80048f0:	3ff80000 	.word	0x3ff80000
 80048f4:	08007d30 	.word	0x08007d30
 80048f8:	08007c8b 	.word	0x08007c8b
 80048fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	9b07      	ldr	r3, [sp, #28]
 8004904:	2b0e      	cmp	r3, #14
 8004906:	f200 80a4 	bhi.w	8004a52 <_dtoa_r+0x442>
 800490a:	2c00      	cmp	r4, #0
 800490c:	f000 80a1 	beq.w	8004a52 <_dtoa_r+0x442>
 8004910:	2f00      	cmp	r7, #0
 8004912:	dd33      	ble.n	800497c <_dtoa_r+0x36c>
 8004914:	4b86      	ldr	r3, [pc, #536]	@ (8004b30 <_dtoa_r+0x520>)
 8004916:	f007 020f 	and.w	r2, r7, #15
 800491a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800491e:	05f8      	lsls	r0, r7, #23
 8004920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004924:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004928:	ea4f 1427 	mov.w	r4, r7, asr #4
 800492c:	d516      	bpl.n	800495c <_dtoa_r+0x34c>
 800492e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004932:	4b80      	ldr	r3, [pc, #512]	@ (8004b34 <_dtoa_r+0x524>)
 8004934:	2603      	movs	r6, #3
 8004936:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800493a:	f7fb ff63 	bl	8000804 <__aeabi_ddiv>
 800493e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004942:	f004 040f 	and.w	r4, r4, #15
 8004946:	4d7b      	ldr	r5, [pc, #492]	@ (8004b34 <_dtoa_r+0x524>)
 8004948:	b954      	cbnz	r4, 8004960 <_dtoa_r+0x350>
 800494a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800494e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004952:	f7fb ff57 	bl	8000804 <__aeabi_ddiv>
 8004956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800495a:	e028      	b.n	80049ae <_dtoa_r+0x39e>
 800495c:	2602      	movs	r6, #2
 800495e:	e7f2      	b.n	8004946 <_dtoa_r+0x336>
 8004960:	07e1      	lsls	r1, r4, #31
 8004962:	d508      	bpl.n	8004976 <_dtoa_r+0x366>
 8004964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800496c:	f7fb fe20 	bl	80005b0 <__aeabi_dmul>
 8004970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004974:	3601      	adds	r6, #1
 8004976:	1064      	asrs	r4, r4, #1
 8004978:	3508      	adds	r5, #8
 800497a:	e7e5      	b.n	8004948 <_dtoa_r+0x338>
 800497c:	f000 80d2 	beq.w	8004b24 <_dtoa_r+0x514>
 8004980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004984:	427c      	negs	r4, r7
 8004986:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <_dtoa_r+0x520>)
 8004988:	f004 020f 	and.w	r2, r4, #15
 800498c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fe0c 	bl	80005b0 <__aeabi_dmul>
 8004998:	2602      	movs	r6, #2
 800499a:	2300      	movs	r3, #0
 800499c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a0:	4d64      	ldr	r5, [pc, #400]	@ (8004b34 <_dtoa_r+0x524>)
 80049a2:	1124      	asrs	r4, r4, #4
 80049a4:	2c00      	cmp	r4, #0
 80049a6:	f040 80b2 	bne.w	8004b0e <_dtoa_r+0x4fe>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1d3      	bne.n	8004956 <_dtoa_r+0x346>
 80049ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80b7 	beq.w	8004b28 <_dtoa_r+0x518>
 80049ba:	2200      	movs	r2, #0
 80049bc:	4620      	mov	r0, r4
 80049be:	4629      	mov	r1, r5
 80049c0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b38 <_dtoa_r+0x528>)
 80049c2:	f7fc f867 	bl	8000a94 <__aeabi_dcmplt>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f000 80ae 	beq.w	8004b28 <_dtoa_r+0x518>
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80aa 	beq.w	8004b28 <_dtoa_r+0x518>
 80049d4:	9b08      	ldr	r3, [sp, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd37      	ble.n	8004a4a <_dtoa_r+0x43a>
 80049da:	1e7b      	subs	r3, r7, #1
 80049dc:	4620      	mov	r0, r4
 80049de:	9304      	str	r3, [sp, #16]
 80049e0:	2200      	movs	r2, #0
 80049e2:	4629      	mov	r1, r5
 80049e4:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <_dtoa_r+0x52c>)
 80049e6:	f7fb fde3 	bl	80005b0 <__aeabi_dmul>
 80049ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ee:	9c08      	ldr	r4, [sp, #32]
 80049f0:	3601      	adds	r6, #1
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7fb fd72 	bl	80004dc <__aeabi_i2d>
 80049f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049fc:	f7fb fdd8 	bl	80005b0 <__aeabi_dmul>
 8004a00:	2200      	movs	r2, #0
 8004a02:	4b4f      	ldr	r3, [pc, #316]	@ (8004b40 <_dtoa_r+0x530>)
 8004a04:	f7fb fc1e 	bl	8000244 <__adddf3>
 8004a08:	4605      	mov	r5, r0
 8004a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	f040 809a 	bne.w	8004b48 <_dtoa_r+0x538>
 8004a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b44 <_dtoa_r+0x534>)
 8004a1c:	f7fb fc10 	bl	8000240 <__aeabi_dsub>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4633      	mov	r3, r6
 8004a2c:	f7fc f850 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	f040 828e 	bne.w	8004f52 <_dtoa_r+0x942>
 8004a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a40:	f7fc f828 	bl	8000a94 <__aeabi_dcmplt>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	f040 8127 	bne.w	8004c98 <_dtoa_r+0x688>
 8004a4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f2c0 8163 	blt.w	8004d20 <_dtoa_r+0x710>
 8004a5a:	2f0e      	cmp	r7, #14
 8004a5c:	f300 8160 	bgt.w	8004d20 <_dtoa_r+0x710>
 8004a60:	4b33      	ldr	r3, [pc, #204]	@ (8004b30 <_dtoa_r+0x520>)
 8004a62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da03      	bge.n	8004a7c <_dtoa_r+0x46c>
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f340 8100 	ble.w	8004c7c <_dtoa_r+0x66c>
 8004a7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a80:	4656      	mov	r6, sl
 8004a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb febb 	bl	8000804 <__aeabi_ddiv>
 8004a8e:	f7fc f83f 	bl	8000b10 <__aeabi_d2iz>
 8004a92:	4680      	mov	r8, r0
 8004a94:	f7fb fd22 	bl	80004dc <__aeabi_i2d>
 8004a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a9c:	f7fb fd88 	bl	80005b0 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fbca 	bl	8000240 <__aeabi_dsub>
 8004aac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ab0:	9d07      	ldr	r5, [sp, #28]
 8004ab2:	f806 4b01 	strb.w	r4, [r6], #1
 8004ab6:	eba6 040a 	sub.w	r4, r6, sl
 8004aba:	42a5      	cmp	r5, r4
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	f040 8116 	bne.w	8004cf0 <_dtoa_r+0x6e0>
 8004ac4:	f7fb fbbe 	bl	8000244 <__adddf3>
 8004ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	f7fb fffe 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	f040 80f8 	bne.w	8004cca <_dtoa_r+0x6ba>
 8004ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb ffcd 	bl	8000a80 <__aeabi_dcmpeq>
 8004ae6:	b118      	cbz	r0, 8004af0 <_dtoa_r+0x4e0>
 8004ae8:	f018 0f01 	tst.w	r8, #1
 8004aec:	f040 80ed 	bne.w	8004cca <_dtoa_r+0x6ba>
 8004af0:	4649      	mov	r1, r9
 8004af2:	4658      	mov	r0, fp
 8004af4:	f000 fc92 	bl	800541c <_Bfree>
 8004af8:	2300      	movs	r3, #0
 8004afa:	7033      	strb	r3, [r6, #0]
 8004afc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004afe:	3701      	adds	r7, #1
 8004b00:	601f      	str	r7, [r3, #0]
 8004b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8320 	beq.w	800514a <_dtoa_r+0xb3a>
 8004b0a:	601e      	str	r6, [r3, #0]
 8004b0c:	e31d      	b.n	800514a <_dtoa_r+0xb3a>
 8004b0e:	07e2      	lsls	r2, r4, #31
 8004b10:	d505      	bpl.n	8004b1e <_dtoa_r+0x50e>
 8004b12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b16:	f7fb fd4b 	bl	80005b0 <__aeabi_dmul>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	1064      	asrs	r4, r4, #1
 8004b20:	3508      	adds	r5, #8
 8004b22:	e73f      	b.n	80049a4 <_dtoa_r+0x394>
 8004b24:	2602      	movs	r6, #2
 8004b26:	e742      	b.n	80049ae <_dtoa_r+0x39e>
 8004b28:	9c07      	ldr	r4, [sp, #28]
 8004b2a:	9704      	str	r7, [sp, #16]
 8004b2c:	e761      	b.n	80049f2 <_dtoa_r+0x3e2>
 8004b2e:	bf00      	nop
 8004b30:	08007d30 	.word	0x08007d30
 8004b34:	08007d08 	.word	0x08007d08
 8004b38:	3ff00000 	.word	0x3ff00000
 8004b3c:	40240000 	.word	0x40240000
 8004b40:	401c0000 	.word	0x401c0000
 8004b44:	40140000 	.word	0x40140000
 8004b48:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <_dtoa_r+0x6fc>)
 8004b4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b54:	4454      	add	r4, sl
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d045      	beq.n	8004be6 <_dtoa_r+0x5d6>
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	496c      	ldr	r1, [pc, #432]	@ (8004d10 <_dtoa_r+0x700>)
 8004b5e:	f7fb fe51 	bl	8000804 <__aeabi_ddiv>
 8004b62:	4633      	mov	r3, r6
 8004b64:	462a      	mov	r2, r5
 8004b66:	f7fb fb6b 	bl	8000240 <__aeabi_dsub>
 8004b6a:	4656      	mov	r6, sl
 8004b6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb ffcc 	bl	8000b10 <__aeabi_d2iz>
 8004b78:	4605      	mov	r5, r0
 8004b7a:	f7fb fcaf 	bl	80004dc <__aeabi_i2d>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b86:	f7fb fb5b 	bl	8000240 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	3530      	adds	r5, #48	@ 0x30
 8004b90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b98:	f806 5b01 	strb.w	r5, [r6], #1
 8004b9c:	f7fb ff7a 	bl	8000a94 <__aeabi_dcmplt>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d163      	bne.n	8004c6c <_dtoa_r+0x65c>
 8004ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ba8:	2000      	movs	r0, #0
 8004baa:	495a      	ldr	r1, [pc, #360]	@ (8004d14 <_dtoa_r+0x704>)
 8004bac:	f7fb fb48 	bl	8000240 <__aeabi_dsub>
 8004bb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bb4:	f7fb ff6e 	bl	8000a94 <__aeabi_dcmplt>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f040 8087 	bne.w	8004ccc <_dtoa_r+0x6bc>
 8004bbe:	42a6      	cmp	r6, r4
 8004bc0:	f43f af43 	beq.w	8004a4a <_dtoa_r+0x43a>
 8004bc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <_dtoa_r+0x708>)
 8004bcc:	f7fb fcf0 	bl	80005b0 <__aeabi_dmul>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bda:	4b4f      	ldr	r3, [pc, #316]	@ (8004d18 <_dtoa_r+0x708>)
 8004bdc:	f7fb fce8 	bl	80005b0 <__aeabi_dmul>
 8004be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be4:	e7c4      	b.n	8004b70 <_dtoa_r+0x560>
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7fb fce1 	bl	80005b0 <__aeabi_dmul>
 8004bee:	4656      	mov	r6, sl
 8004bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bf4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bfa:	f7fb ff89 	bl	8000b10 <__aeabi_d2iz>
 8004bfe:	4605      	mov	r5, r0
 8004c00:	f7fb fc6c 	bl	80004dc <__aeabi_i2d>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c0c:	f7fb fb18 	bl	8000240 <__aeabi_dsub>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	3530      	adds	r5, #48	@ 0x30
 8004c16:	f806 5b01 	strb.w	r5, [r6], #1
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	d124      	bne.n	8004c70 <_dtoa_r+0x660>
 8004c26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c2a:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <_dtoa_r+0x700>)
 8004c2c:	f7fb fb0a 	bl	8000244 <__adddf3>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c38:	f7fb ff4a 	bl	8000ad0 <__aeabi_dcmpgt>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d145      	bne.n	8004ccc <_dtoa_r+0x6bc>
 8004c40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c44:	2000      	movs	r0, #0
 8004c46:	4932      	ldr	r1, [pc, #200]	@ (8004d10 <_dtoa_r+0x700>)
 8004c48:	f7fb fafa 	bl	8000240 <__aeabi_dsub>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c54:	f7fb ff1e 	bl	8000a94 <__aeabi_dcmplt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f43f aef6 	beq.w	8004a4a <_dtoa_r+0x43a>
 8004c5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c60:	1e73      	subs	r3, r6, #1
 8004c62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c68:	2b30      	cmp	r3, #48	@ 0x30
 8004c6a:	d0f8      	beq.n	8004c5e <_dtoa_r+0x64e>
 8004c6c:	9f04      	ldr	r7, [sp, #16]
 8004c6e:	e73f      	b.n	8004af0 <_dtoa_r+0x4e0>
 8004c70:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <_dtoa_r+0x708>)
 8004c72:	f7fb fc9d 	bl	80005b0 <__aeabi_dmul>
 8004c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c7a:	e7bc      	b.n	8004bf6 <_dtoa_r+0x5e6>
 8004c7c:	d10c      	bne.n	8004c98 <_dtoa_r+0x688>
 8004c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <_dtoa_r+0x70c>)
 8004c86:	f7fb fc93 	bl	80005b0 <__aeabi_dmul>
 8004c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c8e:	f7fb ff15 	bl	8000abc <__aeabi_dcmpge>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	f000 815b 	beq.w	8004f4e <_dtoa_r+0x93e>
 8004c98:	2400      	movs	r4, #0
 8004c9a:	4625      	mov	r5, r4
 8004c9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c9e:	4656      	mov	r6, sl
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	2700      	movs	r7, #0
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4658      	mov	r0, fp
 8004caa:	f000 fbb7 	bl	800541c <_Bfree>
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d0dc      	beq.n	8004c6c <_dtoa_r+0x65c>
 8004cb2:	b12f      	cbz	r7, 8004cc0 <_dtoa_r+0x6b0>
 8004cb4:	42af      	cmp	r7, r5
 8004cb6:	d003      	beq.n	8004cc0 <_dtoa_r+0x6b0>
 8004cb8:	4639      	mov	r1, r7
 8004cba:	4658      	mov	r0, fp
 8004cbc:	f000 fbae 	bl	800541c <_Bfree>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f000 fbaa 	bl	800541c <_Bfree>
 8004cc8:	e7d0      	b.n	8004c6c <_dtoa_r+0x65c>
 8004cca:	9704      	str	r7, [sp, #16]
 8004ccc:	4633      	mov	r3, r6
 8004cce:	461e      	mov	r6, r3
 8004cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cd4:	2a39      	cmp	r2, #57	@ 0x39
 8004cd6:	d107      	bne.n	8004ce8 <_dtoa_r+0x6d8>
 8004cd8:	459a      	cmp	sl, r3
 8004cda:	d1f8      	bne.n	8004cce <_dtoa_r+0x6be>
 8004cdc:	9a04      	ldr	r2, [sp, #16]
 8004cde:	3201      	adds	r2, #1
 8004ce0:	9204      	str	r2, [sp, #16]
 8004ce2:	2230      	movs	r2, #48	@ 0x30
 8004ce4:	f88a 2000 	strb.w	r2, [sl]
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	3201      	adds	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e7bd      	b.n	8004c6c <_dtoa_r+0x65c>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <_dtoa_r+0x708>)
 8004cf4:	f7fb fc5c 	bl	80005b0 <__aeabi_dmul>
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	460d      	mov	r5, r1
 8004d00:	f7fb febe 	bl	8000a80 <__aeabi_dcmpeq>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f43f aebc 	beq.w	8004a82 <_dtoa_r+0x472>
 8004d0a:	e6f1      	b.n	8004af0 <_dtoa_r+0x4e0>
 8004d0c:	08007d30 	.word	0x08007d30
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	3ff00000 	.word	0x3ff00000
 8004d18:	40240000 	.word	0x40240000
 8004d1c:	40140000 	.word	0x40140000
 8004d20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	f000 80db 	beq.w	8004ede <_dtoa_r+0x8ce>
 8004d28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d2a:	2a01      	cmp	r2, #1
 8004d2c:	f300 80bf 	bgt.w	8004eae <_dtoa_r+0x89e>
 8004d30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	f000 80b7 	beq.w	8004ea6 <_dtoa_r+0x896>
 8004d38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d3c:	4646      	mov	r6, r8
 8004d3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d42:	2101      	movs	r1, #1
 8004d44:	441a      	add	r2, r3
 8004d46:	4658      	mov	r0, fp
 8004d48:	4498      	add	r8, r3
 8004d4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d4c:	f000 fc64 	bl	8005618 <__i2b>
 8004d50:	4605      	mov	r5, r0
 8004d52:	b15e      	cbz	r6, 8004d6c <_dtoa_r+0x75c>
 8004d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dd08      	ble.n	8004d6c <_dtoa_r+0x75c>
 8004d5a:	42b3      	cmp	r3, r6
 8004d5c:	bfa8      	it	ge
 8004d5e:	4633      	movge	r3, r6
 8004d60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d62:	eba8 0803 	sub.w	r8, r8, r3
 8004d66:	1af6      	subs	r6, r6, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d6e:	b1f3      	cbz	r3, 8004dae <_dtoa_r+0x79e>
 8004d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80b7 	beq.w	8004ee6 <_dtoa_r+0x8d6>
 8004d78:	b18c      	cbz	r4, 8004d9e <_dtoa_r+0x78e>
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4658      	mov	r0, fp
 8004d80:	f000 fd08 	bl	8005794 <__pow5mult>
 8004d84:	464a      	mov	r2, r9
 8004d86:	4601      	mov	r1, r0
 8004d88:	4605      	mov	r5, r0
 8004d8a:	4658      	mov	r0, fp
 8004d8c:	f000 fc5a 	bl	8005644 <__multiply>
 8004d90:	4649      	mov	r1, r9
 8004d92:	9004      	str	r0, [sp, #16]
 8004d94:	4658      	mov	r0, fp
 8004d96:	f000 fb41 	bl	800541c <_Bfree>
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004da0:	1b1a      	subs	r2, r3, r4
 8004da2:	d004      	beq.n	8004dae <_dtoa_r+0x79e>
 8004da4:	4649      	mov	r1, r9
 8004da6:	4658      	mov	r0, fp
 8004da8:	f000 fcf4 	bl	8005794 <__pow5mult>
 8004dac:	4681      	mov	r9, r0
 8004dae:	2101      	movs	r1, #1
 8004db0:	4658      	mov	r0, fp
 8004db2:	f000 fc31 	bl	8005618 <__i2b>
 8004db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004db8:	4604      	mov	r4, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 81c9 	beq.w	8005152 <_dtoa_r+0xb42>
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	4658      	mov	r0, fp
 8004dc6:	f000 fce5 	bl	8005794 <__pow5mult>
 8004dca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dcc:	4604      	mov	r4, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	f300 808f 	bgt.w	8004ef2 <_dtoa_r+0x8e2>
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 8087 	bne.w	8004eea <_dtoa_r+0x8da>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8083 	bne.w	8004eee <_dtoa_r+0x8de>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dee:	0d1b      	lsrs	r3, r3, #20
 8004df0:	051b      	lsls	r3, r3, #20
 8004df2:	b12b      	cbz	r3, 8004e00 <_dtoa_r+0x7f0>
 8004df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df6:	f108 0801 	add.w	r8, r8, #1
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dfe:	2301      	movs	r3, #1
 8004e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 81aa 	beq.w	800515e <_dtoa_r+0xb4e>
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e10:	6918      	ldr	r0, [r3, #16]
 8004e12:	f000 fbb5 	bl	8005580 <__hi0bits>
 8004e16:	f1c0 0020 	rsb	r0, r0, #32
 8004e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1c:	4418      	add	r0, r3
 8004e1e:	f010 001f 	ands.w	r0, r0, #31
 8004e22:	d071      	beq.n	8004f08 <_dtoa_r+0x8f8>
 8004e24:	f1c0 0320 	rsb	r3, r0, #32
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	dd65      	ble.n	8004ef8 <_dtoa_r+0x8e8>
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	f1c0 001c 	rsb	r0, r0, #28
 8004e32:	4403      	add	r3, r0
 8004e34:	4480      	add	r8, r0
 8004e36:	4406      	add	r6, r0
 8004e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e3a:	f1b8 0f00 	cmp.w	r8, #0
 8004e3e:	dd05      	ble.n	8004e4c <_dtoa_r+0x83c>
 8004e40:	4649      	mov	r1, r9
 8004e42:	4642      	mov	r2, r8
 8004e44:	4658      	mov	r0, fp
 8004e46:	f000 fcff 	bl	8005848 <__lshift>
 8004e4a:	4681      	mov	r9, r0
 8004e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	dd05      	ble.n	8004e5e <_dtoa_r+0x84e>
 8004e52:	4621      	mov	r1, r4
 8004e54:	461a      	mov	r2, r3
 8004e56:	4658      	mov	r0, fp
 8004e58:	f000 fcf6 	bl	8005848 <__lshift>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d053      	beq.n	8004f0c <_dtoa_r+0x8fc>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4648      	mov	r0, r9
 8004e68:	f000 fd5a 	bl	8005920 <__mcmp>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	da4d      	bge.n	8004f0c <_dtoa_r+0x8fc>
 8004e70:	1e7b      	subs	r3, r7, #1
 8004e72:	4649      	mov	r1, r9
 8004e74:	9304      	str	r3, [sp, #16]
 8004e76:	220a      	movs	r2, #10
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4658      	mov	r0, fp
 8004e7c:	f000 faf0 	bl	8005460 <__multadd>
 8004e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e82:	4681      	mov	r9, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 816c 	beq.w	8005162 <_dtoa_r+0xb52>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	220a      	movs	r2, #10
 8004e90:	4658      	mov	r0, fp
 8004e92:	f000 fae5 	bl	8005460 <__multadd>
 8004e96:	9b08      	ldr	r3, [sp, #32]
 8004e98:	4605      	mov	r5, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	dc61      	bgt.n	8004f62 <_dtoa_r+0x952>
 8004e9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	dc3b      	bgt.n	8004f1c <_dtoa_r+0x90c>
 8004ea4:	e05d      	b.n	8004f62 <_dtoa_r+0x952>
 8004ea6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ea8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004eac:	e746      	b.n	8004d3c <_dtoa_r+0x72c>
 8004eae:	9b07      	ldr	r3, [sp, #28]
 8004eb0:	1e5c      	subs	r4, r3, #1
 8004eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	bfbf      	itttt	lt
 8004eb8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004eba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004ebc:	1ae3      	sublt	r3, r4, r3
 8004ebe:	18d2      	addlt	r2, r2, r3
 8004ec0:	bfa8      	it	ge
 8004ec2:	1b1c      	subge	r4, r3, r4
 8004ec4:	9b07      	ldr	r3, [sp, #28]
 8004ec6:	bfbe      	ittt	lt
 8004ec8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004ecc:	2400      	movlt	r4, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb5      	itete	lt
 8004ed2:	eba8 0603 	sublt.w	r6, r8, r3
 8004ed6:	4646      	movge	r6, r8
 8004ed8:	2300      	movlt	r3, #0
 8004eda:	9b07      	ldrge	r3, [sp, #28]
 8004edc:	e730      	b.n	8004d40 <_dtoa_r+0x730>
 8004ede:	4646      	mov	r6, r8
 8004ee0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ee2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ee4:	e735      	b.n	8004d52 <_dtoa_r+0x742>
 8004ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ee8:	e75c      	b.n	8004da4 <_dtoa_r+0x794>
 8004eea:	2300      	movs	r3, #0
 8004eec:	e788      	b.n	8004e00 <_dtoa_r+0x7f0>
 8004eee:	9b02      	ldr	r3, [sp, #8]
 8004ef0:	e786      	b.n	8004e00 <_dtoa_r+0x7f0>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef6:	e788      	b.n	8004e0a <_dtoa_r+0x7fa>
 8004ef8:	d09f      	beq.n	8004e3a <_dtoa_r+0x82a>
 8004efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004efc:	331c      	adds	r3, #28
 8004efe:	441a      	add	r2, r3
 8004f00:	4498      	add	r8, r3
 8004f02:	441e      	add	r6, r3
 8004f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f06:	e798      	b.n	8004e3a <_dtoa_r+0x82a>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	e7f6      	b.n	8004efa <_dtoa_r+0x8ea>
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	9704      	str	r7, [sp, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dc20      	bgt.n	8004f56 <_dtoa_r+0x946>
 8004f14:	9308      	str	r3, [sp, #32]
 8004f16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	dd1e      	ble.n	8004f5a <_dtoa_r+0x94a>
 8004f1c:	9b08      	ldr	r3, [sp, #32]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f47f aebc 	bne.w	8004c9c <_dtoa_r+0x68c>
 8004f24:	4621      	mov	r1, r4
 8004f26:	2205      	movs	r2, #5
 8004f28:	4658      	mov	r0, fp
 8004f2a:	f000 fa99 	bl	8005460 <__multadd>
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4604      	mov	r4, r0
 8004f32:	4648      	mov	r0, r9
 8004f34:	f000 fcf4 	bl	8005920 <__mcmp>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f77f aeaf 	ble.w	8004c9c <_dtoa_r+0x68c>
 8004f3e:	2331      	movs	r3, #49	@ 0x31
 8004f40:	4656      	mov	r6, sl
 8004f42:	f806 3b01 	strb.w	r3, [r6], #1
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	e6aa      	b.n	8004ca4 <_dtoa_r+0x694>
 8004f4e:	9c07      	ldr	r4, [sp, #28]
 8004f50:	9704      	str	r7, [sp, #16]
 8004f52:	4625      	mov	r5, r4
 8004f54:	e7f3      	b.n	8004f3e <_dtoa_r+0x92e>
 8004f56:	9b07      	ldr	r3, [sp, #28]
 8004f58:	9308      	str	r3, [sp, #32]
 8004f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8104 	beq.w	800516a <_dtoa_r+0xb5a>
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	dd05      	ble.n	8004f72 <_dtoa_r+0x962>
 8004f66:	4629      	mov	r1, r5
 8004f68:	4632      	mov	r2, r6
 8004f6a:	4658      	mov	r0, fp
 8004f6c:	f000 fc6c 	bl	8005848 <__lshift>
 8004f70:	4605      	mov	r5, r0
 8004f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05a      	beq.n	800502e <_dtoa_r+0xa1e>
 8004f78:	4658      	mov	r0, fp
 8004f7a:	6869      	ldr	r1, [r5, #4]
 8004f7c:	f000 fa0e 	bl	800539c <_Balloc>
 8004f80:	4606      	mov	r6, r0
 8004f82:	b928      	cbnz	r0, 8004f90 <_dtoa_r+0x980>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f8a:	4b83      	ldr	r3, [pc, #524]	@ (8005198 <_dtoa_r+0xb88>)
 8004f8c:	f7ff bb54 	b.w	8004638 <_dtoa_r+0x28>
 8004f90:	692a      	ldr	r2, [r5, #16]
 8004f92:	f105 010c 	add.w	r1, r5, #12
 8004f96:	3202      	adds	r2, #2
 8004f98:	0092      	lsls	r2, r2, #2
 8004f9a:	300c      	adds	r0, #12
 8004f9c:	f001 ff5e 	bl	8006e5c <memcpy>
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	f000 fc4f 	bl	8005848 <__lshift>
 8004faa:	462f      	mov	r7, r5
 8004fac:	4605      	mov	r5, r0
 8004fae:	f10a 0301 	add.w	r3, sl, #1
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	9b08      	ldr	r3, [sp, #32]
 8004fb6:	4453      	add	r3, sl
 8004fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc2:	9b07      	ldr	r3, [sp, #28]
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	4648      	mov	r0, r9
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	f7ff fa96 	bl	80044fc <quorem>
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	9008      	str	r0, [sp, #32]
 8004fd4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fd8:	4648      	mov	r0, r9
 8004fda:	f000 fca1 	bl	8005920 <__mcmp>
 8004fde:	462a      	mov	r2, r5
 8004fe0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	f000 fcb7 	bl	8005958 <__mdiff>
 8004fea:	68c2      	ldr	r2, [r0, #12]
 8004fec:	4606      	mov	r6, r0
 8004fee:	bb02      	cbnz	r2, 8005032 <_dtoa_r+0xa22>
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	4648      	mov	r0, r9
 8004ff4:	f000 fc94 	bl	8005920 <__mcmp>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4658      	mov	r0, fp
 8004ffe:	920c      	str	r2, [sp, #48]	@ 0x30
 8005000:	f000 fa0c 	bl	800541c <_Bfree>
 8005004:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005006:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005008:	9e07      	ldr	r6, [sp, #28]
 800500a:	ea43 0102 	orr.w	r1, r3, r2
 800500e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005010:	4319      	orrs	r1, r3
 8005012:	d110      	bne.n	8005036 <_dtoa_r+0xa26>
 8005014:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005018:	d029      	beq.n	800506e <_dtoa_r+0xa5e>
 800501a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	dd02      	ble.n	8005026 <_dtoa_r+0xa16>
 8005020:	9b08      	ldr	r3, [sp, #32]
 8005022:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005026:	9b02      	ldr	r3, [sp, #8]
 8005028:	f883 8000 	strb.w	r8, [r3]
 800502c:	e63b      	b.n	8004ca6 <_dtoa_r+0x696>
 800502e:	4628      	mov	r0, r5
 8005030:	e7bb      	b.n	8004faa <_dtoa_r+0x99a>
 8005032:	2201      	movs	r2, #1
 8005034:	e7e1      	b.n	8004ffa <_dtoa_r+0x9ea>
 8005036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	db04      	blt.n	8005046 <_dtoa_r+0xa36>
 800503c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800503e:	430b      	orrs	r3, r1
 8005040:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005042:	430b      	orrs	r3, r1
 8005044:	d120      	bne.n	8005088 <_dtoa_r+0xa78>
 8005046:	2a00      	cmp	r2, #0
 8005048:	dded      	ble.n	8005026 <_dtoa_r+0xa16>
 800504a:	4649      	mov	r1, r9
 800504c:	2201      	movs	r2, #1
 800504e:	4658      	mov	r0, fp
 8005050:	f000 fbfa 	bl	8005848 <__lshift>
 8005054:	4621      	mov	r1, r4
 8005056:	4681      	mov	r9, r0
 8005058:	f000 fc62 	bl	8005920 <__mcmp>
 800505c:	2800      	cmp	r0, #0
 800505e:	dc03      	bgt.n	8005068 <_dtoa_r+0xa58>
 8005060:	d1e1      	bne.n	8005026 <_dtoa_r+0xa16>
 8005062:	f018 0f01 	tst.w	r8, #1
 8005066:	d0de      	beq.n	8005026 <_dtoa_r+0xa16>
 8005068:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800506c:	d1d8      	bne.n	8005020 <_dtoa_r+0xa10>
 800506e:	2339      	movs	r3, #57	@ 0x39
 8005070:	9a02      	ldr	r2, [sp, #8]
 8005072:	7013      	strb	r3, [r2, #0]
 8005074:	4633      	mov	r3, r6
 8005076:	461e      	mov	r6, r3
 8005078:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800507c:	3b01      	subs	r3, #1
 800507e:	2a39      	cmp	r2, #57	@ 0x39
 8005080:	d052      	beq.n	8005128 <_dtoa_r+0xb18>
 8005082:	3201      	adds	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e60e      	b.n	8004ca6 <_dtoa_r+0x696>
 8005088:	2a00      	cmp	r2, #0
 800508a:	dd07      	ble.n	800509c <_dtoa_r+0xa8c>
 800508c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005090:	d0ed      	beq.n	800506e <_dtoa_r+0xa5e>
 8005092:	9a02      	ldr	r2, [sp, #8]
 8005094:	f108 0301 	add.w	r3, r8, #1
 8005098:	7013      	strb	r3, [r2, #0]
 800509a:	e604      	b.n	8004ca6 <_dtoa_r+0x696>
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80050a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d028      	beq.n	80050fc <_dtoa_r+0xaec>
 80050aa:	4649      	mov	r1, r9
 80050ac:	2300      	movs	r3, #0
 80050ae:	220a      	movs	r2, #10
 80050b0:	4658      	mov	r0, fp
 80050b2:	f000 f9d5 	bl	8005460 <__multadd>
 80050b6:	42af      	cmp	r7, r5
 80050b8:	4681      	mov	r9, r0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	f04f 020a 	mov.w	r2, #10
 80050c2:	4639      	mov	r1, r7
 80050c4:	4658      	mov	r0, fp
 80050c6:	d107      	bne.n	80050d8 <_dtoa_r+0xac8>
 80050c8:	f000 f9ca 	bl	8005460 <__multadd>
 80050cc:	4607      	mov	r7, r0
 80050ce:	4605      	mov	r5, r0
 80050d0:	9b07      	ldr	r3, [sp, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	9307      	str	r3, [sp, #28]
 80050d6:	e774      	b.n	8004fc2 <_dtoa_r+0x9b2>
 80050d8:	f000 f9c2 	bl	8005460 <__multadd>
 80050dc:	4629      	mov	r1, r5
 80050de:	4607      	mov	r7, r0
 80050e0:	2300      	movs	r3, #0
 80050e2:	220a      	movs	r2, #10
 80050e4:	4658      	mov	r0, fp
 80050e6:	f000 f9bb 	bl	8005460 <__multadd>
 80050ea:	4605      	mov	r5, r0
 80050ec:	e7f0      	b.n	80050d0 <_dtoa_r+0xac0>
 80050ee:	9b08      	ldr	r3, [sp, #32]
 80050f0:	2700      	movs	r7, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfcc      	ite	gt
 80050f6:	461e      	movgt	r6, r3
 80050f8:	2601      	movle	r6, #1
 80050fa:	4456      	add	r6, sl
 80050fc:	4649      	mov	r1, r9
 80050fe:	2201      	movs	r2, #1
 8005100:	4658      	mov	r0, fp
 8005102:	f000 fba1 	bl	8005848 <__lshift>
 8005106:	4621      	mov	r1, r4
 8005108:	4681      	mov	r9, r0
 800510a:	f000 fc09 	bl	8005920 <__mcmp>
 800510e:	2800      	cmp	r0, #0
 8005110:	dcb0      	bgt.n	8005074 <_dtoa_r+0xa64>
 8005112:	d102      	bne.n	800511a <_dtoa_r+0xb0a>
 8005114:	f018 0f01 	tst.w	r8, #1
 8005118:	d1ac      	bne.n	8005074 <_dtoa_r+0xa64>
 800511a:	4633      	mov	r3, r6
 800511c:	461e      	mov	r6, r3
 800511e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005122:	2a30      	cmp	r2, #48	@ 0x30
 8005124:	d0fa      	beq.n	800511c <_dtoa_r+0xb0c>
 8005126:	e5be      	b.n	8004ca6 <_dtoa_r+0x696>
 8005128:	459a      	cmp	sl, r3
 800512a:	d1a4      	bne.n	8005076 <_dtoa_r+0xa66>
 800512c:	9b04      	ldr	r3, [sp, #16]
 800512e:	3301      	adds	r3, #1
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	2331      	movs	r3, #49	@ 0x31
 8005134:	f88a 3000 	strb.w	r3, [sl]
 8005138:	e5b5      	b.n	8004ca6 <_dtoa_r+0x696>
 800513a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800513c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800519c <_dtoa_r+0xb8c>
 8005140:	b11b      	cbz	r3, 800514a <_dtoa_r+0xb3a>
 8005142:	f10a 0308 	add.w	r3, sl, #8
 8005146:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4650      	mov	r0, sl
 800514c:	b017      	add	sp, #92	@ 0x5c
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005154:	2b01      	cmp	r3, #1
 8005156:	f77f ae3d 	ble.w	8004dd4 <_dtoa_r+0x7c4>
 800515a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800515c:	930a      	str	r3, [sp, #40]	@ 0x28
 800515e:	2001      	movs	r0, #1
 8005160:	e65b      	b.n	8004e1a <_dtoa_r+0x80a>
 8005162:	9b08      	ldr	r3, [sp, #32]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f77f aed6 	ble.w	8004f16 <_dtoa_r+0x906>
 800516a:	4656      	mov	r6, sl
 800516c:	4621      	mov	r1, r4
 800516e:	4648      	mov	r0, r9
 8005170:	f7ff f9c4 	bl	80044fc <quorem>
 8005174:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005178:	9b08      	ldr	r3, [sp, #32]
 800517a:	f806 8b01 	strb.w	r8, [r6], #1
 800517e:	eba6 020a 	sub.w	r2, r6, sl
 8005182:	4293      	cmp	r3, r2
 8005184:	ddb3      	ble.n	80050ee <_dtoa_r+0xade>
 8005186:	4649      	mov	r1, r9
 8005188:	2300      	movs	r3, #0
 800518a:	220a      	movs	r2, #10
 800518c:	4658      	mov	r0, fp
 800518e:	f000 f967 	bl	8005460 <__multadd>
 8005192:	4681      	mov	r9, r0
 8005194:	e7ea      	b.n	800516c <_dtoa_r+0xb5c>
 8005196:	bf00      	nop
 8005198:	08007c8b 	.word	0x08007c8b
 800519c:	08007c0f 	.word	0x08007c0f

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d040      	beq.n	800522a <_free_r+0x8a>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f8e6 	bl	8005384 <__malloc_lock>
 80051b8:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <_free_r+0x8c>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b8e2 	b.w	8005390 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4408      	add	r0, r1
 8005206:	6010      	str	r0, [r2, #0]
 8005208:	6053      	str	r3, [r2, #4]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	6054      	str	r4, [r2, #4]
 8005228:	e7cb      	b.n	80051c2 <_free_r+0x22>
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20000480 	.word	0x20000480

08005230 <malloc>:
 8005230:	4b02      	ldr	r3, [pc, #8]	@ (800523c <malloc+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f000 b825 	b.w	8005284 <_malloc_r>
 800523a:	bf00      	nop
 800523c:	20000018 	.word	0x20000018

08005240 <sbrk_aligned>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4e0f      	ldr	r6, [pc, #60]	@ (8005280 <sbrk_aligned+0x40>)
 8005244:	460c      	mov	r4, r1
 8005246:	6831      	ldr	r1, [r6, #0]
 8005248:	4605      	mov	r5, r0
 800524a:	b911      	cbnz	r1, 8005252 <sbrk_aligned+0x12>
 800524c:	f001 fdf6 	bl	8006e3c <_sbrk_r>
 8005250:	6030      	str	r0, [r6, #0]
 8005252:	4621      	mov	r1, r4
 8005254:	4628      	mov	r0, r5
 8005256:	f001 fdf1 	bl	8006e3c <_sbrk_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d103      	bne.n	8005266 <sbrk_aligned+0x26>
 800525e:	f04f 34ff 	mov.w	r4, #4294967295
 8005262:	4620      	mov	r0, r4
 8005264:	bd70      	pop	{r4, r5, r6, pc}
 8005266:	1cc4      	adds	r4, r0, #3
 8005268:	f024 0403 	bic.w	r4, r4, #3
 800526c:	42a0      	cmp	r0, r4
 800526e:	d0f8      	beq.n	8005262 <sbrk_aligned+0x22>
 8005270:	1a21      	subs	r1, r4, r0
 8005272:	4628      	mov	r0, r5
 8005274:	f001 fde2 	bl	8006e3c <_sbrk_r>
 8005278:	3001      	adds	r0, #1
 800527a:	d1f2      	bne.n	8005262 <sbrk_aligned+0x22>
 800527c:	e7ef      	b.n	800525e <sbrk_aligned+0x1e>
 800527e:	bf00      	nop
 8005280:	2000047c 	.word	0x2000047c

08005284 <_malloc_r>:
 8005284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005288:	1ccd      	adds	r5, r1, #3
 800528a:	f025 0503 	bic.w	r5, r5, #3
 800528e:	3508      	adds	r5, #8
 8005290:	2d0c      	cmp	r5, #12
 8005292:	bf38      	it	cc
 8005294:	250c      	movcc	r5, #12
 8005296:	2d00      	cmp	r5, #0
 8005298:	4606      	mov	r6, r0
 800529a:	db01      	blt.n	80052a0 <_malloc_r+0x1c>
 800529c:	42a9      	cmp	r1, r5
 800529e:	d904      	bls.n	80052aa <_malloc_r+0x26>
 80052a0:	230c      	movs	r3, #12
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	2000      	movs	r0, #0
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005380 <_malloc_r+0xfc>
 80052ae:	f000 f869 	bl	8005384 <__malloc_lock>
 80052b2:	f8d8 3000 	ldr.w	r3, [r8]
 80052b6:	461c      	mov	r4, r3
 80052b8:	bb44      	cbnz	r4, 800530c <_malloc_r+0x88>
 80052ba:	4629      	mov	r1, r5
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff ffbf 	bl	8005240 <sbrk_aligned>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	4604      	mov	r4, r0
 80052c6:	d158      	bne.n	800537a <_malloc_r+0xf6>
 80052c8:	f8d8 4000 	ldr.w	r4, [r8]
 80052cc:	4627      	mov	r7, r4
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	d143      	bne.n	800535a <_malloc_r+0xd6>
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	d04b      	beq.n	800536e <_malloc_r+0xea>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	4639      	mov	r1, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	eb04 0903 	add.w	r9, r4, r3
 80052e0:	f001 fdac 	bl	8006e3c <_sbrk_r>
 80052e4:	4581      	cmp	r9, r0
 80052e6:	d142      	bne.n	800536e <_malloc_r+0xea>
 80052e8:	6821      	ldr	r1, [r4, #0]
 80052ea:	4630      	mov	r0, r6
 80052ec:	1a6d      	subs	r5, r5, r1
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7ff ffa6 	bl	8005240 <sbrk_aligned>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d03a      	beq.n	800536e <_malloc_r+0xea>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	442b      	add	r3, r5
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	bb62      	cbnz	r2, 8005360 <_malloc_r+0xdc>
 8005306:	f8c8 7000 	str.w	r7, [r8]
 800530a:	e00f      	b.n	800532c <_malloc_r+0xa8>
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	1b52      	subs	r2, r2, r5
 8005310:	d420      	bmi.n	8005354 <_malloc_r+0xd0>
 8005312:	2a0b      	cmp	r2, #11
 8005314:	d917      	bls.n	8005346 <_malloc_r+0xc2>
 8005316:	1961      	adds	r1, r4, r5
 8005318:	42a3      	cmp	r3, r4
 800531a:	6025      	str	r5, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	6059      	strne	r1, [r3, #4]
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	bf08      	it	eq
 8005324:	f8c8 1000 	streq.w	r1, [r8]
 8005328:	5162      	str	r2, [r4, r5]
 800532a:	604b      	str	r3, [r1, #4]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f82f 	bl	8005390 <__malloc_unlock>
 8005332:	f104 000b 	add.w	r0, r4, #11
 8005336:	1d23      	adds	r3, r4, #4
 8005338:	f020 0007 	bic.w	r0, r0, #7
 800533c:	1ac2      	subs	r2, r0, r3
 800533e:	bf1c      	itt	ne
 8005340:	1a1b      	subne	r3, r3, r0
 8005342:	50a3      	strne	r3, [r4, r2]
 8005344:	e7af      	b.n	80052a6 <_malloc_r+0x22>
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	42a3      	cmp	r3, r4
 800534a:	bf0c      	ite	eq
 800534c:	f8c8 2000 	streq.w	r2, [r8]
 8005350:	605a      	strne	r2, [r3, #4]
 8005352:	e7eb      	b.n	800532c <_malloc_r+0xa8>
 8005354:	4623      	mov	r3, r4
 8005356:	6864      	ldr	r4, [r4, #4]
 8005358:	e7ae      	b.n	80052b8 <_malloc_r+0x34>
 800535a:	463c      	mov	r4, r7
 800535c:	687f      	ldr	r7, [r7, #4]
 800535e:	e7b6      	b.n	80052ce <_malloc_r+0x4a>
 8005360:	461a      	mov	r2, r3
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	42a3      	cmp	r3, r4
 8005366:	d1fb      	bne.n	8005360 <_malloc_r+0xdc>
 8005368:	2300      	movs	r3, #0
 800536a:	6053      	str	r3, [r2, #4]
 800536c:	e7de      	b.n	800532c <_malloc_r+0xa8>
 800536e:	230c      	movs	r3, #12
 8005370:	4630      	mov	r0, r6
 8005372:	6033      	str	r3, [r6, #0]
 8005374:	f000 f80c 	bl	8005390 <__malloc_unlock>
 8005378:	e794      	b.n	80052a4 <_malloc_r+0x20>
 800537a:	6005      	str	r5, [r0, #0]
 800537c:	e7d6      	b.n	800532c <_malloc_r+0xa8>
 800537e:	bf00      	nop
 8005380:	20000480 	.word	0x20000480

08005384 <__malloc_lock>:
 8005384:	4801      	ldr	r0, [pc, #4]	@ (800538c <__malloc_lock+0x8>)
 8005386:	f7ff b8a4 	b.w	80044d2 <__retarget_lock_acquire_recursive>
 800538a:	bf00      	nop
 800538c:	20000478 	.word	0x20000478

08005390 <__malloc_unlock>:
 8005390:	4801      	ldr	r0, [pc, #4]	@ (8005398 <__malloc_unlock+0x8>)
 8005392:	f7ff b89f 	b.w	80044d4 <__retarget_lock_release_recursive>
 8005396:	bf00      	nop
 8005398:	20000478 	.word	0x20000478

0800539c <_Balloc>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	69c6      	ldr	r6, [r0, #28]
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	b976      	cbnz	r6, 80053c4 <_Balloc+0x28>
 80053a6:	2010      	movs	r0, #16
 80053a8:	f7ff ff42 	bl	8005230 <malloc>
 80053ac:	4602      	mov	r2, r0
 80053ae:	61e0      	str	r0, [r4, #28]
 80053b0:	b920      	cbnz	r0, 80053bc <_Balloc+0x20>
 80053b2:	216b      	movs	r1, #107	@ 0x6b
 80053b4:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <_Balloc+0x78>)
 80053b6:	4818      	ldr	r0, [pc, #96]	@ (8005418 <_Balloc+0x7c>)
 80053b8:	f001 fd64 	bl	8006e84 <__assert_func>
 80053bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053c0:	6006      	str	r6, [r0, #0]
 80053c2:	60c6      	str	r6, [r0, #12]
 80053c4:	69e6      	ldr	r6, [r4, #28]
 80053c6:	68f3      	ldr	r3, [r6, #12]
 80053c8:	b183      	cbz	r3, 80053ec <_Balloc+0x50>
 80053ca:	69e3      	ldr	r3, [r4, #28]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053d2:	b9b8      	cbnz	r0, 8005404 <_Balloc+0x68>
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f605 	lsl.w	r6, r1, r5
 80053da:	1d72      	adds	r2, r6, #5
 80053dc:	4620      	mov	r0, r4
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	f001 fd6e 	bl	8006ec0 <_calloc_r>
 80053e4:	b160      	cbz	r0, 8005400 <_Balloc+0x64>
 80053e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ea:	e00e      	b.n	800540a <_Balloc+0x6e>
 80053ec:	2221      	movs	r2, #33	@ 0x21
 80053ee:	2104      	movs	r1, #4
 80053f0:	4620      	mov	r0, r4
 80053f2:	f001 fd65 	bl	8006ec0 <_calloc_r>
 80053f6:	69e3      	ldr	r3, [r4, #28]
 80053f8:	60f0      	str	r0, [r6, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e4      	bne.n	80053ca <_Balloc+0x2e>
 8005400:	2000      	movs	r0, #0
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	6802      	ldr	r2, [r0, #0]
 8005406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800540a:	2300      	movs	r3, #0
 800540c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005410:	e7f7      	b.n	8005402 <_Balloc+0x66>
 8005412:	bf00      	nop
 8005414:	08007c1c 	.word	0x08007c1c
 8005418:	08007c9c 	.word	0x08007c9c

0800541c <_Bfree>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	69c6      	ldr	r6, [r0, #28]
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b976      	cbnz	r6, 8005444 <_Bfree+0x28>
 8005426:	2010      	movs	r0, #16
 8005428:	f7ff ff02 	bl	8005230 <malloc>
 800542c:	4602      	mov	r2, r0
 800542e:	61e8      	str	r0, [r5, #28]
 8005430:	b920      	cbnz	r0, 800543c <_Bfree+0x20>
 8005432:	218f      	movs	r1, #143	@ 0x8f
 8005434:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <_Bfree+0x3c>)
 8005436:	4809      	ldr	r0, [pc, #36]	@ (800545c <_Bfree+0x40>)
 8005438:	f001 fd24 	bl	8006e84 <__assert_func>
 800543c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005440:	6006      	str	r6, [r0, #0]
 8005442:	60c6      	str	r6, [r0, #12]
 8005444:	b13c      	cbz	r4, 8005456 <_Bfree+0x3a>
 8005446:	69eb      	ldr	r3, [r5, #28]
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005450:	6021      	str	r1, [r4, #0]
 8005452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	08007c1c 	.word	0x08007c1c
 800545c:	08007c9c 	.word	0x08007c9c

08005460 <__multadd>:
 8005460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005464:	4607      	mov	r7, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461e      	mov	r6, r3
 800546a:	2000      	movs	r0, #0
 800546c:	690d      	ldr	r5, [r1, #16]
 800546e:	f101 0c14 	add.w	ip, r1, #20
 8005472:	f8dc 3000 	ldr.w	r3, [ip]
 8005476:	3001      	adds	r0, #1
 8005478:	b299      	uxth	r1, r3
 800547a:	fb02 6101 	mla	r1, r2, r1, r6
 800547e:	0c1e      	lsrs	r6, r3, #16
 8005480:	0c0b      	lsrs	r3, r1, #16
 8005482:	fb02 3306 	mla	r3, r2, r6, r3
 8005486:	b289      	uxth	r1, r1
 8005488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800548c:	4285      	cmp	r5, r0
 800548e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005492:	f84c 1b04 	str.w	r1, [ip], #4
 8005496:	dcec      	bgt.n	8005472 <__multadd+0x12>
 8005498:	b30e      	cbz	r6, 80054de <__multadd+0x7e>
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	42ab      	cmp	r3, r5
 800549e:	dc19      	bgt.n	80054d4 <__multadd+0x74>
 80054a0:	6861      	ldr	r1, [r4, #4]
 80054a2:	4638      	mov	r0, r7
 80054a4:	3101      	adds	r1, #1
 80054a6:	f7ff ff79 	bl	800539c <_Balloc>
 80054aa:	4680      	mov	r8, r0
 80054ac:	b928      	cbnz	r0, 80054ba <__multadd+0x5a>
 80054ae:	4602      	mov	r2, r0
 80054b0:	21ba      	movs	r1, #186	@ 0xba
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <__multadd+0x84>)
 80054b4:	480c      	ldr	r0, [pc, #48]	@ (80054e8 <__multadd+0x88>)
 80054b6:	f001 fce5 	bl	8006e84 <__assert_func>
 80054ba:	6922      	ldr	r2, [r4, #16]
 80054bc:	f104 010c 	add.w	r1, r4, #12
 80054c0:	3202      	adds	r2, #2
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	300c      	adds	r0, #12
 80054c6:	f001 fcc9 	bl	8006e5c <memcpy>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ffa5 	bl	800541c <_Bfree>
 80054d2:	4644      	mov	r4, r8
 80054d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054d8:	3501      	adds	r5, #1
 80054da:	615e      	str	r6, [r3, #20]
 80054dc:	6125      	str	r5, [r4, #16]
 80054de:	4620      	mov	r0, r4
 80054e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e4:	08007c8b 	.word	0x08007c8b
 80054e8:	08007c9c 	.word	0x08007c9c

080054ec <__s2b>:
 80054ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f0:	4615      	mov	r5, r2
 80054f2:	2209      	movs	r2, #9
 80054f4:	461f      	mov	r7, r3
 80054f6:	3308      	adds	r3, #8
 80054f8:	460c      	mov	r4, r1
 80054fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80054fe:	4606      	mov	r6, r0
 8005500:	2201      	movs	r2, #1
 8005502:	2100      	movs	r1, #0
 8005504:	429a      	cmp	r2, r3
 8005506:	db09      	blt.n	800551c <__s2b+0x30>
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ff47 	bl	800539c <_Balloc>
 800550e:	b940      	cbnz	r0, 8005522 <__s2b+0x36>
 8005510:	4602      	mov	r2, r0
 8005512:	21d3      	movs	r1, #211	@ 0xd3
 8005514:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <__s2b+0x8c>)
 8005516:	4819      	ldr	r0, [pc, #100]	@ (800557c <__s2b+0x90>)
 8005518:	f001 fcb4 	bl	8006e84 <__assert_func>
 800551c:	0052      	lsls	r2, r2, #1
 800551e:	3101      	adds	r1, #1
 8005520:	e7f0      	b.n	8005504 <__s2b+0x18>
 8005522:	9b08      	ldr	r3, [sp, #32]
 8005524:	2d09      	cmp	r5, #9
 8005526:	6143      	str	r3, [r0, #20]
 8005528:	f04f 0301 	mov.w	r3, #1
 800552c:	6103      	str	r3, [r0, #16]
 800552e:	dd16      	ble.n	800555e <__s2b+0x72>
 8005530:	f104 0909 	add.w	r9, r4, #9
 8005534:	46c8      	mov	r8, r9
 8005536:	442c      	add	r4, r5
 8005538:	f818 3b01 	ldrb.w	r3, [r8], #1
 800553c:	4601      	mov	r1, r0
 800553e:	220a      	movs	r2, #10
 8005540:	4630      	mov	r0, r6
 8005542:	3b30      	subs	r3, #48	@ 0x30
 8005544:	f7ff ff8c 	bl	8005460 <__multadd>
 8005548:	45a0      	cmp	r8, r4
 800554a:	d1f5      	bne.n	8005538 <__s2b+0x4c>
 800554c:	f1a5 0408 	sub.w	r4, r5, #8
 8005550:	444c      	add	r4, r9
 8005552:	1b2d      	subs	r5, r5, r4
 8005554:	1963      	adds	r3, r4, r5
 8005556:	42bb      	cmp	r3, r7
 8005558:	db04      	blt.n	8005564 <__s2b+0x78>
 800555a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555e:	2509      	movs	r5, #9
 8005560:	340a      	adds	r4, #10
 8005562:	e7f6      	b.n	8005552 <__s2b+0x66>
 8005564:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005568:	4601      	mov	r1, r0
 800556a:	220a      	movs	r2, #10
 800556c:	4630      	mov	r0, r6
 800556e:	3b30      	subs	r3, #48	@ 0x30
 8005570:	f7ff ff76 	bl	8005460 <__multadd>
 8005574:	e7ee      	b.n	8005554 <__s2b+0x68>
 8005576:	bf00      	nop
 8005578:	08007c8b 	.word	0x08007c8b
 800557c:	08007c9c 	.word	0x08007c9c

08005580 <__hi0bits>:
 8005580:	4603      	mov	r3, r0
 8005582:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005586:	bf3a      	itte	cc
 8005588:	0403      	lslcc	r3, r0, #16
 800558a:	2010      	movcc	r0, #16
 800558c:	2000      	movcs	r0, #0
 800558e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005592:	bf3c      	itt	cc
 8005594:	021b      	lslcc	r3, r3, #8
 8005596:	3008      	addcc	r0, #8
 8005598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800559c:	bf3c      	itt	cc
 800559e:	011b      	lslcc	r3, r3, #4
 80055a0:	3004      	addcc	r0, #4
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a6:	bf3c      	itt	cc
 80055a8:	009b      	lslcc	r3, r3, #2
 80055aa:	3002      	addcc	r0, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db05      	blt.n	80055bc <__hi0bits+0x3c>
 80055b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80055b4:	f100 0001 	add.w	r0, r0, #1
 80055b8:	bf08      	it	eq
 80055ba:	2020      	moveq	r0, #32
 80055bc:	4770      	bx	lr

080055be <__lo0bits>:
 80055be:	6803      	ldr	r3, [r0, #0]
 80055c0:	4602      	mov	r2, r0
 80055c2:	f013 0007 	ands.w	r0, r3, #7
 80055c6:	d00b      	beq.n	80055e0 <__lo0bits+0x22>
 80055c8:	07d9      	lsls	r1, r3, #31
 80055ca:	d421      	bmi.n	8005610 <__lo0bits+0x52>
 80055cc:	0798      	lsls	r0, r3, #30
 80055ce:	bf49      	itett	mi
 80055d0:	085b      	lsrmi	r3, r3, #1
 80055d2:	089b      	lsrpl	r3, r3, #2
 80055d4:	2001      	movmi	r0, #1
 80055d6:	6013      	strmi	r3, [r2, #0]
 80055d8:	bf5c      	itt	pl
 80055da:	2002      	movpl	r0, #2
 80055dc:	6013      	strpl	r3, [r2, #0]
 80055de:	4770      	bx	lr
 80055e0:	b299      	uxth	r1, r3
 80055e2:	b909      	cbnz	r1, 80055e8 <__lo0bits+0x2a>
 80055e4:	2010      	movs	r0, #16
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b2d9      	uxtb	r1, r3
 80055ea:	b909      	cbnz	r1, 80055f0 <__lo0bits+0x32>
 80055ec:	3008      	adds	r0, #8
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	0719      	lsls	r1, r3, #28
 80055f2:	bf04      	itt	eq
 80055f4:	091b      	lsreq	r3, r3, #4
 80055f6:	3004      	addeq	r0, #4
 80055f8:	0799      	lsls	r1, r3, #30
 80055fa:	bf04      	itt	eq
 80055fc:	089b      	lsreq	r3, r3, #2
 80055fe:	3002      	addeq	r0, #2
 8005600:	07d9      	lsls	r1, r3, #31
 8005602:	d403      	bmi.n	800560c <__lo0bits+0x4e>
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	f100 0001 	add.w	r0, r0, #1
 800560a:	d003      	beq.n	8005614 <__lo0bits+0x56>
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4770      	bx	lr
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr
 8005614:	2020      	movs	r0, #32
 8005616:	4770      	bx	lr

08005618 <__i2b>:
 8005618:	b510      	push	{r4, lr}
 800561a:	460c      	mov	r4, r1
 800561c:	2101      	movs	r1, #1
 800561e:	f7ff febd 	bl	800539c <_Balloc>
 8005622:	4602      	mov	r2, r0
 8005624:	b928      	cbnz	r0, 8005632 <__i2b+0x1a>
 8005626:	f240 1145 	movw	r1, #325	@ 0x145
 800562a:	4b04      	ldr	r3, [pc, #16]	@ (800563c <__i2b+0x24>)
 800562c:	4804      	ldr	r0, [pc, #16]	@ (8005640 <__i2b+0x28>)
 800562e:	f001 fc29 	bl	8006e84 <__assert_func>
 8005632:	2301      	movs	r3, #1
 8005634:	6144      	str	r4, [r0, #20]
 8005636:	6103      	str	r3, [r0, #16]
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	08007c8b 	.word	0x08007c8b
 8005640:	08007c9c 	.word	0x08007c9c

08005644 <__multiply>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	4614      	mov	r4, r2
 800564a:	690a      	ldr	r2, [r1, #16]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	460f      	mov	r7, r1
 8005650:	429a      	cmp	r2, r3
 8005652:	bfa2      	ittt	ge
 8005654:	4623      	movge	r3, r4
 8005656:	460c      	movge	r4, r1
 8005658:	461f      	movge	r7, r3
 800565a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800565e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	6861      	ldr	r1, [r4, #4]
 8005666:	eb0a 0609 	add.w	r6, sl, r9
 800566a:	42b3      	cmp	r3, r6
 800566c:	b085      	sub	sp, #20
 800566e:	bfb8      	it	lt
 8005670:	3101      	addlt	r1, #1
 8005672:	f7ff fe93 	bl	800539c <_Balloc>
 8005676:	b930      	cbnz	r0, 8005686 <__multiply+0x42>
 8005678:	4602      	mov	r2, r0
 800567a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800567e:	4b43      	ldr	r3, [pc, #268]	@ (800578c <__multiply+0x148>)
 8005680:	4843      	ldr	r0, [pc, #268]	@ (8005790 <__multiply+0x14c>)
 8005682:	f001 fbff 	bl	8006e84 <__assert_func>
 8005686:	f100 0514 	add.w	r5, r0, #20
 800568a:	462b      	mov	r3, r5
 800568c:	2200      	movs	r2, #0
 800568e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005692:	4543      	cmp	r3, r8
 8005694:	d321      	bcc.n	80056da <__multiply+0x96>
 8005696:	f107 0114 	add.w	r1, r7, #20
 800569a:	f104 0214 	add.w	r2, r4, #20
 800569e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80056a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	1b13      	subs	r3, r2, r4
 80056aa:	3b15      	subs	r3, #21
 80056ac:	f023 0303 	bic.w	r3, r3, #3
 80056b0:	3304      	adds	r3, #4
 80056b2:	f104 0715 	add.w	r7, r4, #21
 80056b6:	42ba      	cmp	r2, r7
 80056b8:	bf38      	it	cc
 80056ba:	2304      	movcc	r3, #4
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	9103      	str	r1, [sp, #12]
 80056c2:	428b      	cmp	r3, r1
 80056c4:	d80c      	bhi.n	80056e0 <__multiply+0x9c>
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	dd03      	ble.n	80056d2 <__multiply+0x8e>
 80056ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d05a      	beq.n	8005788 <__multiply+0x144>
 80056d2:	6106      	str	r6, [r0, #16]
 80056d4:	b005      	add	sp, #20
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	f843 2b04 	str.w	r2, [r3], #4
 80056de:	e7d8      	b.n	8005692 <__multiply+0x4e>
 80056e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80056e4:	f1ba 0f00 	cmp.w	sl, #0
 80056e8:	d023      	beq.n	8005732 <__multiply+0xee>
 80056ea:	46a9      	mov	r9, r5
 80056ec:	f04f 0c00 	mov.w	ip, #0
 80056f0:	f104 0e14 	add.w	lr, r4, #20
 80056f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056f8:	f8d9 3000 	ldr.w	r3, [r9]
 80056fc:	fa1f fb87 	uxth.w	fp, r7
 8005700:	b29b      	uxth	r3, r3
 8005702:	fb0a 330b 	mla	r3, sl, fp, r3
 8005706:	4463      	add	r3, ip
 8005708:	f8d9 c000 	ldr.w	ip, [r9]
 800570c:	0c3f      	lsrs	r7, r7, #16
 800570e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005712:	fb0a c707 	mla	r7, sl, r7, ip
 8005716:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800571a:	b29b      	uxth	r3, r3
 800571c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005720:	4572      	cmp	r2, lr
 8005722:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005726:	f849 3b04 	str.w	r3, [r9], #4
 800572a:	d8e3      	bhi.n	80056f4 <__multiply+0xb0>
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	f845 c003 	str.w	ip, [r5, r3]
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	3104      	adds	r1, #4
 8005736:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800573a:	f1b9 0f00 	cmp.w	r9, #0
 800573e:	d021      	beq.n	8005784 <__multiply+0x140>
 8005740:	46ae      	mov	lr, r5
 8005742:	f04f 0a00 	mov.w	sl, #0
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	f104 0c14 	add.w	ip, r4, #20
 800574c:	f8bc b000 	ldrh.w	fp, [ip]
 8005750:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005754:	b29b      	uxth	r3, r3
 8005756:	fb09 770b 	mla	r7, r9, fp, r7
 800575a:	4457      	add	r7, sl
 800575c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005760:	f84e 3b04 	str.w	r3, [lr], #4
 8005764:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005768:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800576c:	f8be 3000 	ldrh.w	r3, [lr]
 8005770:	4562      	cmp	r2, ip
 8005772:	fb09 330a 	mla	r3, r9, sl, r3
 8005776:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800577a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800577e:	d8e5      	bhi.n	800574c <__multiply+0x108>
 8005780:	9f01      	ldr	r7, [sp, #4]
 8005782:	51eb      	str	r3, [r5, r7]
 8005784:	3504      	adds	r5, #4
 8005786:	e79a      	b.n	80056be <__multiply+0x7a>
 8005788:	3e01      	subs	r6, #1
 800578a:	e79c      	b.n	80056c6 <__multiply+0x82>
 800578c:	08007c8b 	.word	0x08007c8b
 8005790:	08007c9c 	.word	0x08007c9c

08005794 <__pow5mult>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	4615      	mov	r5, r2
 800579a:	f012 0203 	ands.w	r2, r2, #3
 800579e:	4607      	mov	r7, r0
 80057a0:	460e      	mov	r6, r1
 80057a2:	d007      	beq.n	80057b4 <__pow5mult+0x20>
 80057a4:	4c25      	ldr	r4, [pc, #148]	@ (800583c <__pow5mult+0xa8>)
 80057a6:	3a01      	subs	r2, #1
 80057a8:	2300      	movs	r3, #0
 80057aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057ae:	f7ff fe57 	bl	8005460 <__multadd>
 80057b2:	4606      	mov	r6, r0
 80057b4:	10ad      	asrs	r5, r5, #2
 80057b6:	d03d      	beq.n	8005834 <__pow5mult+0xa0>
 80057b8:	69fc      	ldr	r4, [r7, #28]
 80057ba:	b97c      	cbnz	r4, 80057dc <__pow5mult+0x48>
 80057bc:	2010      	movs	r0, #16
 80057be:	f7ff fd37 	bl	8005230 <malloc>
 80057c2:	4602      	mov	r2, r0
 80057c4:	61f8      	str	r0, [r7, #28]
 80057c6:	b928      	cbnz	r0, 80057d4 <__pow5mult+0x40>
 80057c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005840 <__pow5mult+0xac>)
 80057ce:	481d      	ldr	r0, [pc, #116]	@ (8005844 <__pow5mult+0xb0>)
 80057d0:	f001 fb58 	bl	8006e84 <__assert_func>
 80057d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057d8:	6004      	str	r4, [r0, #0]
 80057da:	60c4      	str	r4, [r0, #12]
 80057dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e4:	b94c      	cbnz	r4, 80057fa <__pow5mult+0x66>
 80057e6:	f240 2171 	movw	r1, #625	@ 0x271
 80057ea:	4638      	mov	r0, r7
 80057ec:	f7ff ff14 	bl	8005618 <__i2b>
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057f8:	6003      	str	r3, [r0, #0]
 80057fa:	f04f 0900 	mov.w	r9, #0
 80057fe:	07eb      	lsls	r3, r5, #31
 8005800:	d50a      	bpl.n	8005818 <__pow5mult+0x84>
 8005802:	4631      	mov	r1, r6
 8005804:	4622      	mov	r2, r4
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff ff1c 	bl	8005644 <__multiply>
 800580c:	4680      	mov	r8, r0
 800580e:	4631      	mov	r1, r6
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff fe03 	bl	800541c <_Bfree>
 8005816:	4646      	mov	r6, r8
 8005818:	106d      	asrs	r5, r5, #1
 800581a:	d00b      	beq.n	8005834 <__pow5mult+0xa0>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	b938      	cbnz	r0, 8005830 <__pow5mult+0x9c>
 8005820:	4622      	mov	r2, r4
 8005822:	4621      	mov	r1, r4
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ff0d 	bl	8005644 <__multiply>
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	f8c0 9000 	str.w	r9, [r0]
 8005830:	4604      	mov	r4, r0
 8005832:	e7e4      	b.n	80057fe <__pow5mult+0x6a>
 8005834:	4630      	mov	r0, r6
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	bf00      	nop
 800583c:	08007cf8 	.word	0x08007cf8
 8005840:	08007c1c 	.word	0x08007c1c
 8005844:	08007c9c 	.word	0x08007c9c

08005848 <__lshift>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	4607      	mov	r7, r0
 8005850:	4691      	mov	r9, r2
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	6849      	ldr	r1, [r1, #4]
 8005856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005860:	f108 0601 	add.w	r6, r8, #1
 8005864:	42b3      	cmp	r3, r6
 8005866:	db0b      	blt.n	8005880 <__lshift+0x38>
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff fd97 	bl	800539c <_Balloc>
 800586e:	4605      	mov	r5, r0
 8005870:	b948      	cbnz	r0, 8005886 <__lshift+0x3e>
 8005872:	4602      	mov	r2, r0
 8005874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005878:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <__lshift+0xd0>)
 800587a:	4828      	ldr	r0, [pc, #160]	@ (800591c <__lshift+0xd4>)
 800587c:	f001 fb02 	bl	8006e84 <__assert_func>
 8005880:	3101      	adds	r1, #1
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	e7ee      	b.n	8005864 <__lshift+0x1c>
 8005886:	2300      	movs	r3, #0
 8005888:	f100 0114 	add.w	r1, r0, #20
 800588c:	f100 0210 	add.w	r2, r0, #16
 8005890:	4618      	mov	r0, r3
 8005892:	4553      	cmp	r3, sl
 8005894:	db33      	blt.n	80058fe <__lshift+0xb6>
 8005896:	6920      	ldr	r0, [r4, #16]
 8005898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800589c:	f104 0314 	add.w	r3, r4, #20
 80058a0:	f019 091f 	ands.w	r9, r9, #31
 80058a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058ac:	d02b      	beq.n	8005906 <__lshift+0xbe>
 80058ae:	468a      	mov	sl, r1
 80058b0:	2200      	movs	r2, #0
 80058b2:	f1c9 0e20 	rsb	lr, r9, #32
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	fa00 f009 	lsl.w	r0, r0, r9
 80058bc:	4310      	orrs	r0, r2
 80058be:	f84a 0b04 	str.w	r0, [sl], #4
 80058c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c6:	459c      	cmp	ip, r3
 80058c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80058cc:	d8f3      	bhi.n	80058b6 <__lshift+0x6e>
 80058ce:	ebac 0304 	sub.w	r3, ip, r4
 80058d2:	3b15      	subs	r3, #21
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	3304      	adds	r3, #4
 80058da:	f104 0015 	add.w	r0, r4, #21
 80058de:	4584      	cmp	ip, r0
 80058e0:	bf38      	it	cc
 80058e2:	2304      	movcc	r3, #4
 80058e4:	50ca      	str	r2, [r1, r3]
 80058e6:	b10a      	cbz	r2, 80058ec <__lshift+0xa4>
 80058e8:	f108 0602 	add.w	r6, r8, #2
 80058ec:	3e01      	subs	r6, #1
 80058ee:	4638      	mov	r0, r7
 80058f0:	4621      	mov	r1, r4
 80058f2:	612e      	str	r6, [r5, #16]
 80058f4:	f7ff fd92 	bl	800541c <_Bfree>
 80058f8:	4628      	mov	r0, r5
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005902:	3301      	adds	r3, #1
 8005904:	e7c5      	b.n	8005892 <__lshift+0x4a>
 8005906:	3904      	subs	r1, #4
 8005908:	f853 2b04 	ldr.w	r2, [r3], #4
 800590c:	459c      	cmp	ip, r3
 800590e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005912:	d8f9      	bhi.n	8005908 <__lshift+0xc0>
 8005914:	e7ea      	b.n	80058ec <__lshift+0xa4>
 8005916:	bf00      	nop
 8005918:	08007c8b 	.word	0x08007c8b
 800591c:	08007c9c 	.word	0x08007c9c

08005920 <__mcmp>:
 8005920:	4603      	mov	r3, r0
 8005922:	690a      	ldr	r2, [r1, #16]
 8005924:	6900      	ldr	r0, [r0, #16]
 8005926:	b530      	push	{r4, r5, lr}
 8005928:	1a80      	subs	r0, r0, r2
 800592a:	d10e      	bne.n	800594a <__mcmp+0x2a>
 800592c:	3314      	adds	r3, #20
 800592e:	3114      	adds	r1, #20
 8005930:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005934:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800593c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005940:	4295      	cmp	r5, r2
 8005942:	d003      	beq.n	800594c <__mcmp+0x2c>
 8005944:	d205      	bcs.n	8005952 <__mcmp+0x32>
 8005946:	f04f 30ff 	mov.w	r0, #4294967295
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	42a3      	cmp	r3, r4
 800594e:	d3f3      	bcc.n	8005938 <__mcmp+0x18>
 8005950:	e7fb      	b.n	800594a <__mcmp+0x2a>
 8005952:	2001      	movs	r0, #1
 8005954:	e7f9      	b.n	800594a <__mcmp+0x2a>
	...

08005958 <__mdiff>:
 8005958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	4689      	mov	r9, r1
 800595e:	4606      	mov	r6, r0
 8005960:	4611      	mov	r1, r2
 8005962:	4648      	mov	r0, r9
 8005964:	4614      	mov	r4, r2
 8005966:	f7ff ffdb 	bl	8005920 <__mcmp>
 800596a:	1e05      	subs	r5, r0, #0
 800596c:	d112      	bne.n	8005994 <__mdiff+0x3c>
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff fd13 	bl	800539c <_Balloc>
 8005976:	4602      	mov	r2, r0
 8005978:	b928      	cbnz	r0, 8005986 <__mdiff+0x2e>
 800597a:	f240 2137 	movw	r1, #567	@ 0x237
 800597e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <__mdiff+0x120>)
 8005980:	483e      	ldr	r0, [pc, #248]	@ (8005a7c <__mdiff+0x124>)
 8005982:	f001 fa7f 	bl	8006e84 <__assert_func>
 8005986:	2301      	movs	r3, #1
 8005988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800598c:	4610      	mov	r0, r2
 800598e:	b003      	add	sp, #12
 8005990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005994:	bfbc      	itt	lt
 8005996:	464b      	movlt	r3, r9
 8005998:	46a1      	movlt	r9, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059a0:	bfba      	itte	lt
 80059a2:	461c      	movlt	r4, r3
 80059a4:	2501      	movlt	r5, #1
 80059a6:	2500      	movge	r5, #0
 80059a8:	f7ff fcf8 	bl	800539c <_Balloc>
 80059ac:	4602      	mov	r2, r0
 80059ae:	b918      	cbnz	r0, 80059b8 <__mdiff+0x60>
 80059b0:	f240 2145 	movw	r1, #581	@ 0x245
 80059b4:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <__mdiff+0x120>)
 80059b6:	e7e3      	b.n	8005980 <__mdiff+0x28>
 80059b8:	f100 0b14 	add.w	fp, r0, #20
 80059bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059c0:	f109 0310 	add.w	r3, r9, #16
 80059c4:	60c5      	str	r5, [r0, #12]
 80059c6:	f04f 0c00 	mov.w	ip, #0
 80059ca:	f109 0514 	add.w	r5, r9, #20
 80059ce:	46d9      	mov	r9, fp
 80059d0:	6926      	ldr	r6, [r4, #16]
 80059d2:	f104 0e14 	add.w	lr, r4, #20
 80059d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059ea:	b281      	uxth	r1, r0
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	fa1f f38a 	uxth.w	r3, sl
 80059f2:	1a5b      	subs	r3, r3, r1
 80059f4:	0c00      	lsrs	r0, r0, #16
 80059f6:	4463      	add	r3, ip
 80059f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a06:	4576      	cmp	r6, lr
 8005a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a0c:	f849 3b04 	str.w	r3, [r9], #4
 8005a10:	d8e6      	bhi.n	80059e0 <__mdiff+0x88>
 8005a12:	1b33      	subs	r3, r6, r4
 8005a14:	3b15      	subs	r3, #21
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	3415      	adds	r4, #21
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	bf38      	it	cc
 8005a22:	2304      	movcc	r3, #4
 8005a24:	441d      	add	r5, r3
 8005a26:	445b      	add	r3, fp
 8005a28:	461e      	mov	r6, r3
 8005a2a:	462c      	mov	r4, r5
 8005a2c:	4544      	cmp	r4, r8
 8005a2e:	d30e      	bcc.n	8005a4e <__mdiff+0xf6>
 8005a30:	f108 0103 	add.w	r1, r8, #3
 8005a34:	1b49      	subs	r1, r1, r5
 8005a36:	f021 0103 	bic.w	r1, r1, #3
 8005a3a:	3d03      	subs	r5, #3
 8005a3c:	45a8      	cmp	r8, r5
 8005a3e:	bf38      	it	cc
 8005a40:	2100      	movcc	r1, #0
 8005a42:	440b      	add	r3, r1
 8005a44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a48:	b199      	cbz	r1, 8005a72 <__mdiff+0x11a>
 8005a4a:	6117      	str	r7, [r2, #16]
 8005a4c:	e79e      	b.n	800598c <__mdiff+0x34>
 8005a4e:	46e6      	mov	lr, ip
 8005a50:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a54:	fa1f fc81 	uxth.w	ip, r1
 8005a58:	44f4      	add	ip, lr
 8005a5a:	0c08      	lsrs	r0, r1, #16
 8005a5c:	4471      	add	r1, lr
 8005a5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a62:	b289      	uxth	r1, r1
 8005a64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a6c:	f846 1b04 	str.w	r1, [r6], #4
 8005a70:	e7dc      	b.n	8005a2c <__mdiff+0xd4>
 8005a72:	3f01      	subs	r7, #1
 8005a74:	e7e6      	b.n	8005a44 <__mdiff+0xec>
 8005a76:	bf00      	nop
 8005a78:	08007c8b 	.word	0x08007c8b
 8005a7c:	08007c9c 	.word	0x08007c9c

08005a80 <__ulp>:
 8005a80:	4b0e      	ldr	r3, [pc, #56]	@ (8005abc <__ulp+0x3c>)
 8005a82:	400b      	ands	r3, r1
 8005a84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc08      	bgt.n	8005a9e <__ulp+0x1e>
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005a92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005a96:	da04      	bge.n	8005aa2 <__ulp+0x22>
 8005a98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a9c:	4113      	asrs	r3, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	e008      	b.n	8005ab4 <__ulp+0x34>
 8005aa2:	f1a2 0314 	sub.w	r3, r2, #20
 8005aa6:	2b1e      	cmp	r3, #30
 8005aa8:	bfd6      	itet	le
 8005aaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005aae:	2201      	movgt	r2, #1
 8005ab0:	40da      	lsrle	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	7ff00000 	.word	0x7ff00000

08005ac0 <__b2d>:
 8005ac0:	6902      	ldr	r2, [r0, #16]
 8005ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac4:	f100 0614 	add.w	r6, r0, #20
 8005ac8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005acc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005ad0:	4f1e      	ldr	r7, [pc, #120]	@ (8005b4c <__b2d+0x8c>)
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff fd54 	bl	8005580 <__hi0bits>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f1c0 0020 	rsb	r0, r0, #32
 8005ade:	2b0a      	cmp	r3, #10
 8005ae0:	f1a2 0504 	sub.w	r5, r2, #4
 8005ae4:	6008      	str	r0, [r1, #0]
 8005ae6:	dc12      	bgt.n	8005b0e <__b2d+0x4e>
 8005ae8:	42ae      	cmp	r6, r5
 8005aea:	bf2c      	ite	cs
 8005aec:	2200      	movcs	r2, #0
 8005aee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005af2:	f1c3 0c0b 	rsb	ip, r3, #11
 8005af6:	3315      	adds	r3, #21
 8005af8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005afc:	fa04 f303 	lsl.w	r3, r4, r3
 8005b00:	fa22 f20c 	lsr.w	r2, r2, ip
 8005b04:	ea4e 0107 	orr.w	r1, lr, r7
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b0e:	42ae      	cmp	r6, r5
 8005b10:	bf36      	itet	cc
 8005b12:	f1a2 0508 	subcc.w	r5, r2, #8
 8005b16:	2200      	movcs	r2, #0
 8005b18:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005b1c:	3b0b      	subs	r3, #11
 8005b1e:	d012      	beq.n	8005b46 <__b2d+0x86>
 8005b20:	f1c3 0720 	rsb	r7, r3, #32
 8005b24:	fa22 f107 	lsr.w	r1, r2, r7
 8005b28:	409c      	lsls	r4, r3
 8005b2a:	430c      	orrs	r4, r1
 8005b2c:	42b5      	cmp	r5, r6
 8005b2e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005b32:	bf94      	ite	ls
 8005b34:	2400      	movls	r4, #0
 8005b36:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	40fc      	lsrs	r4, r7
 8005b3e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005b42:	4322      	orrs	r2, r4
 8005b44:	e7e1      	b.n	8005b0a <__b2d+0x4a>
 8005b46:	ea44 0107 	orr.w	r1, r4, r7
 8005b4a:	e7de      	b.n	8005b0a <__b2d+0x4a>
 8005b4c:	3ff00000 	.word	0x3ff00000

08005b50 <__d2b>:
 8005b50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005b54:	2101      	movs	r1, #1
 8005b56:	4690      	mov	r8, r2
 8005b58:	4699      	mov	r9, r3
 8005b5a:	9e08      	ldr	r6, [sp, #32]
 8005b5c:	f7ff fc1e 	bl	800539c <_Balloc>
 8005b60:	4604      	mov	r4, r0
 8005b62:	b930      	cbnz	r0, 8005b72 <__d2b+0x22>
 8005b64:	4602      	mov	r2, r0
 8005b66:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b6a:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <__d2b+0xa8>)
 8005b6c:	4823      	ldr	r0, [pc, #140]	@ (8005bfc <__d2b+0xac>)
 8005b6e:	f001 f989 	bl	8006e84 <__assert_func>
 8005b72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b7a:	b10d      	cbz	r5, 8005b80 <__d2b+0x30>
 8005b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	f1b8 0300 	subs.w	r3, r8, #0
 8005b86:	d024      	beq.n	8005bd2 <__d2b+0x82>
 8005b88:	4668      	mov	r0, sp
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f7ff fd17 	bl	80055be <__lo0bits>
 8005b90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b94:	b1d8      	cbz	r0, 8005bce <__d2b+0x7e>
 8005b96:	f1c0 0320 	rsb	r3, r0, #32
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	40c2      	lsrs	r2, r0
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	9201      	str	r2, [sp, #4]
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2201      	moveq	r2, #1
 8005bae:	2202      	movne	r2, #2
 8005bb0:	61a3      	str	r3, [r4, #24]
 8005bb2:	6122      	str	r2, [r4, #16]
 8005bb4:	b1ad      	cbz	r5, 8005be2 <__d2b+0x92>
 8005bb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005bba:	4405      	add	r5, r0
 8005bbc:	6035      	str	r5, [r6, #0]
 8005bbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc4:	6018      	str	r0, [r3, #0]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	b002      	add	sp, #8
 8005bca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005bce:	6161      	str	r1, [r4, #20]
 8005bd0:	e7e9      	b.n	8005ba6 <__d2b+0x56>
 8005bd2:	a801      	add	r0, sp, #4
 8005bd4:	f7ff fcf3 	bl	80055be <__lo0bits>
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	6163      	str	r3, [r4, #20]
 8005bde:	3020      	adds	r0, #32
 8005be0:	e7e7      	b.n	8005bb2 <__d2b+0x62>
 8005be2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005be6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bea:	6030      	str	r0, [r6, #0]
 8005bec:	6918      	ldr	r0, [r3, #16]
 8005bee:	f7ff fcc7 	bl	8005580 <__hi0bits>
 8005bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005bf6:	e7e4      	b.n	8005bc2 <__d2b+0x72>
 8005bf8:	08007c8b 	.word	0x08007c8b
 8005bfc:	08007c9c 	.word	0x08007c9c

08005c00 <__ratio>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	b085      	sub	sp, #20
 8005c06:	e9cd 1000 	strd	r1, r0, [sp]
 8005c0a:	a902      	add	r1, sp, #8
 8005c0c:	f7ff ff58 	bl	8005ac0 <__b2d>
 8005c10:	468b      	mov	fp, r1
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	9800      	ldr	r0, [sp, #0]
 8005c18:	a903      	add	r1, sp, #12
 8005c1a:	f7ff ff51 	bl	8005ac0 <__b2d>
 8005c1e:	460d      	mov	r5, r1
 8005c20:	9b01      	ldr	r3, [sp, #4]
 8005c22:	4689      	mov	r9, r1
 8005c24:	6919      	ldr	r1, [r3, #16]
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	4604      	mov	r4, r0
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	1ac9      	subs	r1, r1, r3
 8005c30:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bfcd      	iteet	gt
 8005c3e:	463a      	movgt	r2, r7
 8005c40:	462a      	movle	r2, r5
 8005c42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005c46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005c4a:	bfd8      	it	le
 8005c4c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005c50:	464b      	mov	r3, r9
 8005c52:	4622      	mov	r2, r4
 8005c54:	4659      	mov	r1, fp
 8005c56:	f7fa fdd5 	bl	8000804 <__aeabi_ddiv>
 8005c5a:	b005      	add	sp, #20
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c60 <__copybits>:
 8005c60:	3901      	subs	r1, #1
 8005c62:	b570      	push	{r4, r5, r6, lr}
 8005c64:	1149      	asrs	r1, r1, #5
 8005c66:	6914      	ldr	r4, [r2, #16]
 8005c68:	3101      	adds	r1, #1
 8005c6a:	f102 0314 	add.w	r3, r2, #20
 8005c6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005c72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005c76:	1f05      	subs	r5, r0, #4
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d30c      	bcc.n	8005c96 <__copybits+0x36>
 8005c7c:	1aa3      	subs	r3, r4, r2
 8005c7e:	3b11      	subs	r3, #17
 8005c80:	f023 0303 	bic.w	r3, r3, #3
 8005c84:	3211      	adds	r2, #17
 8005c86:	42a2      	cmp	r2, r4
 8005c88:	bf88      	it	hi
 8005c8a:	2300      	movhi	r3, #0
 8005c8c:	4418      	add	r0, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4288      	cmp	r0, r1
 8005c92:	d305      	bcc.n	8005ca0 <__copybits+0x40>
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	f853 6b04 	ldr.w	r6, [r3], #4
 8005c9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8005c9e:	e7eb      	b.n	8005c78 <__copybits+0x18>
 8005ca0:	f840 3b04 	str.w	r3, [r0], #4
 8005ca4:	e7f4      	b.n	8005c90 <__copybits+0x30>

08005ca6 <__any_on>:
 8005ca6:	f100 0214 	add.w	r2, r0, #20
 8005caa:	6900      	ldr	r0, [r0, #16]
 8005cac:	114b      	asrs	r3, r1, #5
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	db11      	blt.n	8005cd8 <__any_on+0x32>
 8005cb4:	dd0a      	ble.n	8005ccc <__any_on+0x26>
 8005cb6:	f011 011f 	ands.w	r1, r1, #31
 8005cba:	d007      	beq.n	8005ccc <__any_on+0x26>
 8005cbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005cc0:	fa24 f001 	lsr.w	r0, r4, r1
 8005cc4:	fa00 f101 	lsl.w	r1, r0, r1
 8005cc8:	428c      	cmp	r4, r1
 8005cca:	d10b      	bne.n	8005ce4 <__any_on+0x3e>
 8005ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d803      	bhi.n	8005cdc <__any_on+0x36>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bd10      	pop	{r4, pc}
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e7f7      	b.n	8005ccc <__any_on+0x26>
 8005cdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d0f5      	beq.n	8005cd0 <__any_on+0x2a>
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	e7f6      	b.n	8005cd6 <__any_on+0x30>

08005ce8 <sulp>:
 8005ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cec:	460f      	mov	r7, r1
 8005cee:	4690      	mov	r8, r2
 8005cf0:	f7ff fec6 	bl	8005a80 <__ulp>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	d011      	beq.n	8005d22 <sulp+0x3a>
 8005cfe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005d02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dd0b      	ble.n	8005d22 <sulp+0x3a>
 8005d0a:	2400      	movs	r4, #0
 8005d0c:	051b      	lsls	r3, r3, #20
 8005d0e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005d12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005d16:	4622      	mov	r2, r4
 8005d18:	462b      	mov	r3, r5
 8005d1a:	f7fa fc49 	bl	80005b0 <__aeabi_dmul>
 8005d1e:	4604      	mov	r4, r0
 8005d20:	460d      	mov	r5, r1
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d2a:	0000      	movs	r0, r0
 8005d2c:	0000      	movs	r0, r0
	...

08005d30 <_strtod_l>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	b09f      	sub	sp, #124	@ 0x7c
 8005d36:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005d38:	2200      	movs	r2, #0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005d3e:	f04f 0a00 	mov.w	sl, #0
 8005d42:	f04f 0b00 	mov.w	fp, #0
 8005d46:	460a      	mov	r2, r1
 8005d48:	9005      	str	r0, [sp, #20]
 8005d4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d4c:	7811      	ldrb	r1, [r2, #0]
 8005d4e:	292b      	cmp	r1, #43	@ 0x2b
 8005d50:	d048      	beq.n	8005de4 <_strtod_l+0xb4>
 8005d52:	d836      	bhi.n	8005dc2 <_strtod_l+0x92>
 8005d54:	290d      	cmp	r1, #13
 8005d56:	d830      	bhi.n	8005dba <_strtod_l+0x8a>
 8005d58:	2908      	cmp	r1, #8
 8005d5a:	d830      	bhi.n	8005dbe <_strtod_l+0x8e>
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d039      	beq.n	8005dd4 <_strtod_l+0xa4>
 8005d60:	2200      	movs	r2, #0
 8005d62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005d66:	782a      	ldrb	r2, [r5, #0]
 8005d68:	2a30      	cmp	r2, #48	@ 0x30
 8005d6a:	f040 80b1 	bne.w	8005ed0 <_strtod_l+0x1a0>
 8005d6e:	786a      	ldrb	r2, [r5, #1]
 8005d70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d74:	2a58      	cmp	r2, #88	@ 0x58
 8005d76:	d16c      	bne.n	8005e52 <_strtod_l+0x122>
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb8 <_strtod_l+0x288>)
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	ab1a      	add	r3, sp, #104	@ 0x68
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	9805      	ldr	r0, [sp, #20]
 8005d86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005d88:	a919      	add	r1, sp, #100	@ 0x64
 8005d8a:	f001 f915 	bl	8006fb8 <__gethex>
 8005d8e:	f010 060f 	ands.w	r6, r0, #15
 8005d92:	4604      	mov	r4, r0
 8005d94:	d005      	beq.n	8005da2 <_strtod_l+0x72>
 8005d96:	2e06      	cmp	r6, #6
 8005d98:	d126      	bne.n	8005de8 <_strtod_l+0xb8>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8584 	bne.w	80068b2 <_strtod_l+0xb82>
 8005daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dac:	b1bb      	cbz	r3, 8005dde <_strtod_l+0xae>
 8005dae:	4650      	mov	r0, sl
 8005db0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005db4:	b01f      	add	sp, #124	@ 0x7c
 8005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dba:	2920      	cmp	r1, #32
 8005dbc:	d1d0      	bne.n	8005d60 <_strtod_l+0x30>
 8005dbe:	3201      	adds	r2, #1
 8005dc0:	e7c3      	b.n	8005d4a <_strtod_l+0x1a>
 8005dc2:	292d      	cmp	r1, #45	@ 0x2d
 8005dc4:	d1cc      	bne.n	8005d60 <_strtod_l+0x30>
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005dca:	1c51      	adds	r1, r2, #1
 8005dcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8005dce:	7852      	ldrb	r2, [r2, #1]
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d1c7      	bne.n	8005d64 <_strtod_l+0x34>
 8005dd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005dd6:	9419      	str	r4, [sp, #100]	@ 0x64
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 8568 	bne.w	80068ae <_strtod_l+0xb7e>
 8005dde:	4650      	mov	r0, sl
 8005de0:	4659      	mov	r1, fp
 8005de2:	e7e7      	b.n	8005db4 <_strtod_l+0x84>
 8005de4:	2100      	movs	r1, #0
 8005de6:	e7ef      	b.n	8005dc8 <_strtod_l+0x98>
 8005de8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005dea:	b13a      	cbz	r2, 8005dfc <_strtod_l+0xcc>
 8005dec:	2135      	movs	r1, #53	@ 0x35
 8005dee:	a81c      	add	r0, sp, #112	@ 0x70
 8005df0:	f7ff ff36 	bl	8005c60 <__copybits>
 8005df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005df6:	9805      	ldr	r0, [sp, #20]
 8005df8:	f7ff fb10 	bl	800541c <_Bfree>
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005e00:	2e04      	cmp	r6, #4
 8005e02:	d806      	bhi.n	8005e12 <_strtod_l+0xe2>
 8005e04:	e8df f006 	tbb	[pc, r6]
 8005e08:	201d0314 	.word	0x201d0314
 8005e0c:	14          	.byte	0x14
 8005e0d:	00          	.byte	0x00
 8005e0e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005e12:	05e1      	lsls	r1, r4, #23
 8005e14:	bf48      	it	mi
 8005e16:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005e1e:	0d1b      	lsrs	r3, r3, #20
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1bd      	bne.n	8005da2 <_strtod_l+0x72>
 8005e26:	f7fe fb29 	bl	800447c <__errno>
 8005e2a:	2322      	movs	r3, #34	@ 0x22
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	e7b8      	b.n	8005da2 <_strtod_l+0x72>
 8005e30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005e34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005e38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e3c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e40:	e7e7      	b.n	8005e12 <_strtod_l+0xe2>
 8005e42:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005fbc <_strtod_l+0x28c>
 8005e46:	e7e4      	b.n	8005e12 <_strtod_l+0xe2>
 8005e48:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005e4c:	f04f 3aff 	mov.w	sl, #4294967295
 8005e50:	e7df      	b.n	8005e12 <_strtod_l+0xe2>
 8005e52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b30      	cmp	r3, #48	@ 0x30
 8005e5c:	d0f9      	beq.n	8005e52 <_strtod_l+0x122>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d09f      	beq.n	8005da2 <_strtod_l+0x72>
 8005e62:	2301      	movs	r3, #1
 8005e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e68:	220a      	movs	r2, #10
 8005e6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	461f      	mov	r7, r3
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e74:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005e76:	7805      	ldrb	r5, [r0, #0]
 8005e78:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005e7c:	b2d9      	uxtb	r1, r3
 8005e7e:	2909      	cmp	r1, #9
 8005e80:	d928      	bls.n	8005ed4 <_strtod_l+0x1a4>
 8005e82:	2201      	movs	r2, #1
 8005e84:	494e      	ldr	r1, [pc, #312]	@ (8005fc0 <_strtod_l+0x290>)
 8005e86:	f000 ffc7 	bl	8006e18 <strncmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d032      	beq.n	8005ef4 <_strtod_l+0x1c4>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	462a      	mov	r2, r5
 8005e92:	4681      	mov	r9, r0
 8005e94:	463d      	mov	r5, r7
 8005e96:	4603      	mov	r3, r0
 8005e98:	2a65      	cmp	r2, #101	@ 0x65
 8005e9a:	d001      	beq.n	8005ea0 <_strtod_l+0x170>
 8005e9c:	2a45      	cmp	r2, #69	@ 0x45
 8005e9e:	d114      	bne.n	8005eca <_strtod_l+0x19a>
 8005ea0:	b91d      	cbnz	r5, 8005eaa <_strtod_l+0x17a>
 8005ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea4:	4302      	orrs	r2, r0
 8005ea6:	d095      	beq.n	8005dd4 <_strtod_l+0xa4>
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005eac:	1c62      	adds	r2, r4, #1
 8005eae:	9219      	str	r2, [sp, #100]	@ 0x64
 8005eb0:	7862      	ldrb	r2, [r4, #1]
 8005eb2:	2a2b      	cmp	r2, #43	@ 0x2b
 8005eb4:	d077      	beq.n	8005fa6 <_strtod_l+0x276>
 8005eb6:	2a2d      	cmp	r2, #45	@ 0x2d
 8005eb8:	d07b      	beq.n	8005fb2 <_strtod_l+0x282>
 8005eba:	f04f 0c00 	mov.w	ip, #0
 8005ebe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005ec2:	2909      	cmp	r1, #9
 8005ec4:	f240 8082 	bls.w	8005fcc <_strtod_l+0x29c>
 8005ec8:	9419      	str	r4, [sp, #100]	@ 0x64
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	e0a2      	b.n	8006016 <_strtod_l+0x2e6>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e7c7      	b.n	8005e64 <_strtod_l+0x134>
 8005ed4:	2f08      	cmp	r7, #8
 8005ed6:	bfd5      	itete	le
 8005ed8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005eda:	9908      	ldrgt	r1, [sp, #32]
 8005edc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ee0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ee4:	f100 0001 	add.w	r0, r0, #1
 8005ee8:	bfd4      	ite	le
 8005eea:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005eec:	9308      	strgt	r3, [sp, #32]
 8005eee:	3701      	adds	r7, #1
 8005ef0:	9019      	str	r0, [sp, #100]	@ 0x64
 8005ef2:	e7bf      	b.n	8005e74 <_strtod_l+0x144>
 8005ef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005efa:	785a      	ldrb	r2, [r3, #1]
 8005efc:	b37f      	cbz	r7, 8005f5e <_strtod_l+0x22e>
 8005efe:	4681      	mov	r9, r0
 8005f00:	463d      	mov	r5, r7
 8005f02:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d912      	bls.n	8005f30 <_strtod_l+0x200>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e7c4      	b.n	8005e98 <_strtod_l+0x168>
 8005f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f10:	3001      	adds	r0, #1
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f16:	785a      	ldrb	r2, [r3, #1]
 8005f18:	2a30      	cmp	r2, #48	@ 0x30
 8005f1a:	d0f8      	beq.n	8005f0e <_strtod_l+0x1de>
 8005f1c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	f200 84cb 	bhi.w	80068bc <_strtod_l+0xb8c>
 8005f26:	4681      	mov	r9, r0
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f30:	3a30      	subs	r2, #48	@ 0x30
 8005f32:	f100 0301 	add.w	r3, r0, #1
 8005f36:	d02a      	beq.n	8005f8e <_strtod_l+0x25e>
 8005f38:	4499      	add	r9, r3
 8005f3a:	210a      	movs	r1, #10
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	eb00 0c05 	add.w	ip, r0, r5
 8005f42:	4563      	cmp	r3, ip
 8005f44:	d10d      	bne.n	8005f62 <_strtod_l+0x232>
 8005f46:	1c69      	adds	r1, r5, #1
 8005f48:	4401      	add	r1, r0
 8005f4a:	4428      	add	r0, r5
 8005f4c:	2808      	cmp	r0, #8
 8005f4e:	dc16      	bgt.n	8005f7e <_strtod_l+0x24e>
 8005f50:	230a      	movs	r3, #10
 8005f52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f54:	fb03 2300 	mla	r3, r3, r0, r2
 8005f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e018      	b.n	8005f90 <_strtod_l+0x260>
 8005f5e:	4638      	mov	r0, r7
 8005f60:	e7da      	b.n	8005f18 <_strtod_l+0x1e8>
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	f103 0301 	add.w	r3, r3, #1
 8005f68:	dc03      	bgt.n	8005f72 <_strtod_l+0x242>
 8005f6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005f6c:	434e      	muls	r6, r1
 8005f6e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005f70:	e7e7      	b.n	8005f42 <_strtod_l+0x212>
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	bfde      	ittt	le
 8005f76:	9e08      	ldrle	r6, [sp, #32]
 8005f78:	434e      	mulle	r6, r1
 8005f7a:	9608      	strle	r6, [sp, #32]
 8005f7c:	e7e1      	b.n	8005f42 <_strtod_l+0x212>
 8005f7e:	280f      	cmp	r0, #15
 8005f80:	dceb      	bgt.n	8005f5a <_strtod_l+0x22a>
 8005f82:	230a      	movs	r3, #10
 8005f84:	9808      	ldr	r0, [sp, #32]
 8005f86:	fb03 2300 	mla	r3, r3, r0, r2
 8005f8a:	9308      	str	r3, [sp, #32]
 8005f8c:	e7e5      	b.n	8005f5a <_strtod_l+0x22a>
 8005f8e:	4629      	mov	r1, r5
 8005f90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f92:	460d      	mov	r5, r1
 8005f94:	1c50      	adds	r0, r2, #1
 8005f96:	9019      	str	r0, [sp, #100]	@ 0x64
 8005f98:	7852      	ldrb	r2, [r2, #1]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	e7b1      	b.n	8005f02 <_strtod_l+0x1d2>
 8005f9e:	f04f 0900 	mov.w	r9, #0
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e77d      	b.n	8005ea2 <_strtod_l+0x172>
 8005fa6:	f04f 0c00 	mov.w	ip, #0
 8005faa:	1ca2      	adds	r2, r4, #2
 8005fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fae:	78a2      	ldrb	r2, [r4, #2]
 8005fb0:	e785      	b.n	8005ebe <_strtod_l+0x18e>
 8005fb2:	f04f 0c01 	mov.w	ip, #1
 8005fb6:	e7f8      	b.n	8005faa <_strtod_l+0x27a>
 8005fb8:	08007e10 	.word	0x08007e10
 8005fbc:	7ff00000 	.word	0x7ff00000
 8005fc0:	08007df8 	.word	0x08007df8
 8005fc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fc6:	1c51      	adds	r1, r2, #1
 8005fc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fca:	7852      	ldrb	r2, [r2, #1]
 8005fcc:	2a30      	cmp	r2, #48	@ 0x30
 8005fce:	d0f9      	beq.n	8005fc4 <_strtod_l+0x294>
 8005fd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005fd4:	2908      	cmp	r1, #8
 8005fd6:	f63f af78 	bhi.w	8005eca <_strtod_l+0x19a>
 8005fda:	f04f 080a 	mov.w	r8, #10
 8005fde:	3a30      	subs	r2, #48	@ 0x30
 8005fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fe4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005fe6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fe8:	1c56      	adds	r6, r2, #1
 8005fea:	9619      	str	r6, [sp, #100]	@ 0x64
 8005fec:	7852      	ldrb	r2, [r2, #1]
 8005fee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005ff2:	f1be 0f09 	cmp.w	lr, #9
 8005ff6:	d939      	bls.n	800606c <_strtod_l+0x33c>
 8005ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ffa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005ffe:	1a76      	subs	r6, r6, r1
 8006000:	2e08      	cmp	r6, #8
 8006002:	dc03      	bgt.n	800600c <_strtod_l+0x2dc>
 8006004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006006:	4588      	cmp	r8, r1
 8006008:	bfa8      	it	ge
 800600a:	4688      	movge	r8, r1
 800600c:	f1bc 0f00 	cmp.w	ip, #0
 8006010:	d001      	beq.n	8006016 <_strtod_l+0x2e6>
 8006012:	f1c8 0800 	rsb	r8, r8, #0
 8006016:	2d00      	cmp	r5, #0
 8006018:	d14e      	bne.n	80060b8 <_strtod_l+0x388>
 800601a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800601c:	4308      	orrs	r0, r1
 800601e:	f47f aec0 	bne.w	8005da2 <_strtod_l+0x72>
 8006022:	2b00      	cmp	r3, #0
 8006024:	f47f aed6 	bne.w	8005dd4 <_strtod_l+0xa4>
 8006028:	2a69      	cmp	r2, #105	@ 0x69
 800602a:	d028      	beq.n	800607e <_strtod_l+0x34e>
 800602c:	dc25      	bgt.n	800607a <_strtod_l+0x34a>
 800602e:	2a49      	cmp	r2, #73	@ 0x49
 8006030:	d025      	beq.n	800607e <_strtod_l+0x34e>
 8006032:	2a4e      	cmp	r2, #78	@ 0x4e
 8006034:	f47f aece 	bne.w	8005dd4 <_strtod_l+0xa4>
 8006038:	499a      	ldr	r1, [pc, #616]	@ (80062a4 <_strtod_l+0x574>)
 800603a:	a819      	add	r0, sp, #100	@ 0x64
 800603c:	f001 f9de 	bl	80073fc <__match>
 8006040:	2800      	cmp	r0, #0
 8006042:	f43f aec7 	beq.w	8005dd4 <_strtod_l+0xa4>
 8006046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b28      	cmp	r3, #40	@ 0x28
 800604c:	d12e      	bne.n	80060ac <_strtod_l+0x37c>
 800604e:	4996      	ldr	r1, [pc, #600]	@ (80062a8 <_strtod_l+0x578>)
 8006050:	aa1c      	add	r2, sp, #112	@ 0x70
 8006052:	a819      	add	r0, sp, #100	@ 0x64
 8006054:	f001 f9e6 	bl	8007424 <__hexnan>
 8006058:	2805      	cmp	r0, #5
 800605a:	d127      	bne.n	80060ac <_strtod_l+0x37c>
 800605c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800605e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006062:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006066:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800606a:	e69a      	b.n	8005da2 <_strtod_l+0x72>
 800606c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800606e:	fb08 2101 	mla	r1, r8, r1, r2
 8006072:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006076:	920e      	str	r2, [sp, #56]	@ 0x38
 8006078:	e7b5      	b.n	8005fe6 <_strtod_l+0x2b6>
 800607a:	2a6e      	cmp	r2, #110	@ 0x6e
 800607c:	e7da      	b.n	8006034 <_strtod_l+0x304>
 800607e:	498b      	ldr	r1, [pc, #556]	@ (80062ac <_strtod_l+0x57c>)
 8006080:	a819      	add	r0, sp, #100	@ 0x64
 8006082:	f001 f9bb 	bl	80073fc <__match>
 8006086:	2800      	cmp	r0, #0
 8006088:	f43f aea4 	beq.w	8005dd4 <_strtod_l+0xa4>
 800608c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800608e:	4988      	ldr	r1, [pc, #544]	@ (80062b0 <_strtod_l+0x580>)
 8006090:	3b01      	subs	r3, #1
 8006092:	a819      	add	r0, sp, #100	@ 0x64
 8006094:	9319      	str	r3, [sp, #100]	@ 0x64
 8006096:	f001 f9b1 	bl	80073fc <__match>
 800609a:	b910      	cbnz	r0, 80060a2 <_strtod_l+0x372>
 800609c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800609e:	3301      	adds	r3, #1
 80060a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80062b4 <_strtod_l+0x584>
 80060aa:	e67a      	b.n	8005da2 <_strtod_l+0x72>
 80060ac:	4882      	ldr	r0, [pc, #520]	@ (80062b8 <_strtod_l+0x588>)
 80060ae:	f000 fee3 	bl	8006e78 <nan>
 80060b2:	4682      	mov	sl, r0
 80060b4:	468b      	mov	fp, r1
 80060b6:	e674      	b.n	8005da2 <_strtod_l+0x72>
 80060b8:	eba8 0309 	sub.w	r3, r8, r9
 80060bc:	2f00      	cmp	r7, #0
 80060be:	bf08      	it	eq
 80060c0:	462f      	moveq	r7, r5
 80060c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060c4:	2d10      	cmp	r5, #16
 80060c6:	462c      	mov	r4, r5
 80060c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ca:	bfa8      	it	ge
 80060cc:	2410      	movge	r4, #16
 80060ce:	f7fa f9f5 	bl	80004bc <__aeabi_ui2d>
 80060d2:	2d09      	cmp	r5, #9
 80060d4:	4682      	mov	sl, r0
 80060d6:	468b      	mov	fp, r1
 80060d8:	dc11      	bgt.n	80060fe <_strtod_l+0x3ce>
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f43f ae60 	beq.w	8005da2 <_strtod_l+0x72>
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	dd76      	ble.n	80061d4 <_strtod_l+0x4a4>
 80060e6:	2b16      	cmp	r3, #22
 80060e8:	dc5d      	bgt.n	80061a6 <_strtod_l+0x476>
 80060ea:	4974      	ldr	r1, [pc, #464]	@ (80062bc <_strtod_l+0x58c>)
 80060ec:	4652      	mov	r2, sl
 80060ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060f2:	465b      	mov	r3, fp
 80060f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f8:	f7fa fa5a 	bl	80005b0 <__aeabi_dmul>
 80060fc:	e7d9      	b.n	80060b2 <_strtod_l+0x382>
 80060fe:	4b6f      	ldr	r3, [pc, #444]	@ (80062bc <_strtod_l+0x58c>)
 8006100:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006104:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006108:	f7fa fa52 	bl	80005b0 <__aeabi_dmul>
 800610c:	4682      	mov	sl, r0
 800610e:	9808      	ldr	r0, [sp, #32]
 8006110:	468b      	mov	fp, r1
 8006112:	f7fa f9d3 	bl	80004bc <__aeabi_ui2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa f891 	bl	8000244 <__adddf3>
 8006122:	2d0f      	cmp	r5, #15
 8006124:	4682      	mov	sl, r0
 8006126:	468b      	mov	fp, r1
 8006128:	ddd7      	ble.n	80060da <_strtod_l+0x3aa>
 800612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800612c:	1b2c      	subs	r4, r5, r4
 800612e:	441c      	add	r4, r3
 8006130:	2c00      	cmp	r4, #0
 8006132:	f340 8096 	ble.w	8006262 <_strtod_l+0x532>
 8006136:	f014 030f 	ands.w	r3, r4, #15
 800613a:	d00a      	beq.n	8006152 <_strtod_l+0x422>
 800613c:	495f      	ldr	r1, [pc, #380]	@ (80062bc <_strtod_l+0x58c>)
 800613e:	4652      	mov	r2, sl
 8006140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006148:	465b      	mov	r3, fp
 800614a:	f7fa fa31 	bl	80005b0 <__aeabi_dmul>
 800614e:	4682      	mov	sl, r0
 8006150:	468b      	mov	fp, r1
 8006152:	f034 040f 	bics.w	r4, r4, #15
 8006156:	d073      	beq.n	8006240 <_strtod_l+0x510>
 8006158:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800615c:	dd48      	ble.n	80061f0 <_strtod_l+0x4c0>
 800615e:	2400      	movs	r4, #0
 8006160:	46a0      	mov	r8, r4
 8006162:	46a1      	mov	r9, r4
 8006164:	940a      	str	r4, [sp, #40]	@ 0x28
 8006166:	2322      	movs	r3, #34	@ 0x22
 8006168:	f04f 0a00 	mov.w	sl, #0
 800616c:	9a05      	ldr	r2, [sp, #20]
 800616e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80062b4 <_strtod_l+0x584>
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	f43f ae13 	beq.w	8005da2 <_strtod_l+0x72>
 800617c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800617e:	9805      	ldr	r0, [sp, #20]
 8006180:	f7ff f94c 	bl	800541c <_Bfree>
 8006184:	4649      	mov	r1, r9
 8006186:	9805      	ldr	r0, [sp, #20]
 8006188:	f7ff f948 	bl	800541c <_Bfree>
 800618c:	4641      	mov	r1, r8
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	f7ff f944 	bl	800541c <_Bfree>
 8006194:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006196:	9805      	ldr	r0, [sp, #20]
 8006198:	f7ff f940 	bl	800541c <_Bfree>
 800619c:	4621      	mov	r1, r4
 800619e:	9805      	ldr	r0, [sp, #20]
 80061a0:	f7ff f93c 	bl	800541c <_Bfree>
 80061a4:	e5fd      	b.n	8005da2 <_strtod_l+0x72>
 80061a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80061ac:	4293      	cmp	r3, r2
 80061ae:	dbbc      	blt.n	800612a <_strtod_l+0x3fa>
 80061b0:	4c42      	ldr	r4, [pc, #264]	@ (80062bc <_strtod_l+0x58c>)
 80061b2:	f1c5 050f 	rsb	r5, r5, #15
 80061b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80061ba:	4652      	mov	r2, sl
 80061bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c0:	465b      	mov	r3, fp
 80061c2:	f7fa f9f5 	bl	80005b0 <__aeabi_dmul>
 80061c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c8:	1b5d      	subs	r5, r3, r5
 80061ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80061ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061d2:	e791      	b.n	80060f8 <_strtod_l+0x3c8>
 80061d4:	3316      	adds	r3, #22
 80061d6:	dba8      	blt.n	800612a <_strtod_l+0x3fa>
 80061d8:	4b38      	ldr	r3, [pc, #224]	@ (80062bc <_strtod_l+0x58c>)
 80061da:	eba9 0808 	sub.w	r8, r9, r8
 80061de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80061e2:	4650      	mov	r0, sl
 80061e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80061e8:	4659      	mov	r1, fp
 80061ea:	f7fa fb0b 	bl	8000804 <__aeabi_ddiv>
 80061ee:	e760      	b.n	80060b2 <_strtod_l+0x382>
 80061f0:	4b33      	ldr	r3, [pc, #204]	@ (80062c0 <_strtod_l+0x590>)
 80061f2:	4650      	mov	r0, sl
 80061f4:	9308      	str	r3, [sp, #32]
 80061f6:	2300      	movs	r3, #0
 80061f8:	4659      	mov	r1, fp
 80061fa:	461e      	mov	r6, r3
 80061fc:	1124      	asrs	r4, r4, #4
 80061fe:	2c01      	cmp	r4, #1
 8006200:	dc21      	bgt.n	8006246 <_strtod_l+0x516>
 8006202:	b10b      	cbz	r3, 8006208 <_strtod_l+0x4d8>
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	492d      	ldr	r1, [pc, #180]	@ (80062c0 <_strtod_l+0x590>)
 800620a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800620e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006212:	4652      	mov	r2, sl
 8006214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006218:	465b      	mov	r3, fp
 800621a:	f7fa f9c9 	bl	80005b0 <__aeabi_dmul>
 800621e:	4b25      	ldr	r3, [pc, #148]	@ (80062b4 <_strtod_l+0x584>)
 8006220:	460a      	mov	r2, r1
 8006222:	400b      	ands	r3, r1
 8006224:	4927      	ldr	r1, [pc, #156]	@ (80062c4 <_strtod_l+0x594>)
 8006226:	4682      	mov	sl, r0
 8006228:	428b      	cmp	r3, r1
 800622a:	d898      	bhi.n	800615e <_strtod_l+0x42e>
 800622c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006230:	428b      	cmp	r3, r1
 8006232:	bf86      	itte	hi
 8006234:	f04f 3aff 	movhi.w	sl, #4294967295
 8006238:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80062c8 <_strtod_l+0x598>
 800623c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006240:	2300      	movs	r3, #0
 8006242:	9308      	str	r3, [sp, #32]
 8006244:	e07a      	b.n	800633c <_strtod_l+0x60c>
 8006246:	07e2      	lsls	r2, r4, #31
 8006248:	d505      	bpl.n	8006256 <_strtod_l+0x526>
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9ae 	bl	80005b0 <__aeabi_dmul>
 8006254:	2301      	movs	r3, #1
 8006256:	9a08      	ldr	r2, [sp, #32]
 8006258:	3601      	adds	r6, #1
 800625a:	3208      	adds	r2, #8
 800625c:	1064      	asrs	r4, r4, #1
 800625e:	9208      	str	r2, [sp, #32]
 8006260:	e7cd      	b.n	80061fe <_strtod_l+0x4ce>
 8006262:	d0ed      	beq.n	8006240 <_strtod_l+0x510>
 8006264:	4264      	negs	r4, r4
 8006266:	f014 020f 	ands.w	r2, r4, #15
 800626a:	d00a      	beq.n	8006282 <_strtod_l+0x552>
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <_strtod_l+0x58c>)
 800626e:	4650      	mov	r0, sl
 8006270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006274:	4659      	mov	r1, fp
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa fac3 	bl	8000804 <__aeabi_ddiv>
 800627e:	4682      	mov	sl, r0
 8006280:	468b      	mov	fp, r1
 8006282:	1124      	asrs	r4, r4, #4
 8006284:	d0dc      	beq.n	8006240 <_strtod_l+0x510>
 8006286:	2c1f      	cmp	r4, #31
 8006288:	dd20      	ble.n	80062cc <_strtod_l+0x59c>
 800628a:	2400      	movs	r4, #0
 800628c:	46a0      	mov	r8, r4
 800628e:	46a1      	mov	r9, r4
 8006290:	940a      	str	r4, [sp, #40]	@ 0x28
 8006292:	2322      	movs	r3, #34	@ 0x22
 8006294:	9a05      	ldr	r2, [sp, #20]
 8006296:	f04f 0a00 	mov.w	sl, #0
 800629a:	f04f 0b00 	mov.w	fp, #0
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e768      	b.n	8006174 <_strtod_l+0x444>
 80062a2:	bf00      	nop
 80062a4:	08007be3 	.word	0x08007be3
 80062a8:	08007dfc 	.word	0x08007dfc
 80062ac:	08007bdb 	.word	0x08007bdb
 80062b0:	08007c12 	.word	0x08007c12
 80062b4:	7ff00000 	.word	0x7ff00000
 80062b8:	08007fa5 	.word	0x08007fa5
 80062bc:	08007d30 	.word	0x08007d30
 80062c0:	08007d08 	.word	0x08007d08
 80062c4:	7ca00000 	.word	0x7ca00000
 80062c8:	7fefffff 	.word	0x7fefffff
 80062cc:	f014 0310 	ands.w	r3, r4, #16
 80062d0:	bf18      	it	ne
 80062d2:	236a      	movne	r3, #106	@ 0x6a
 80062d4:	4650      	mov	r0, sl
 80062d6:	9308      	str	r3, [sp, #32]
 80062d8:	4659      	mov	r1, fp
 80062da:	2300      	movs	r3, #0
 80062dc:	4ea9      	ldr	r6, [pc, #676]	@ (8006584 <_strtod_l+0x854>)
 80062de:	07e2      	lsls	r2, r4, #31
 80062e0:	d504      	bpl.n	80062ec <_strtod_l+0x5bc>
 80062e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062e6:	f7fa f963 	bl	80005b0 <__aeabi_dmul>
 80062ea:	2301      	movs	r3, #1
 80062ec:	1064      	asrs	r4, r4, #1
 80062ee:	f106 0608 	add.w	r6, r6, #8
 80062f2:	d1f4      	bne.n	80062de <_strtod_l+0x5ae>
 80062f4:	b10b      	cbz	r3, 80062fa <_strtod_l+0x5ca>
 80062f6:	4682      	mov	sl, r0
 80062f8:	468b      	mov	fp, r1
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	b1b3      	cbz	r3, 800632c <_strtod_l+0x5fc>
 80062fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006302:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006306:	2b00      	cmp	r3, #0
 8006308:	4659      	mov	r1, fp
 800630a:	dd0f      	ble.n	800632c <_strtod_l+0x5fc>
 800630c:	2b1f      	cmp	r3, #31
 800630e:	dd57      	ble.n	80063c0 <_strtod_l+0x690>
 8006310:	2b34      	cmp	r3, #52	@ 0x34
 8006312:	bfd8      	it	le
 8006314:	f04f 33ff 	movle.w	r3, #4294967295
 8006318:	f04f 0a00 	mov.w	sl, #0
 800631c:	bfcf      	iteee	gt
 800631e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006322:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006326:	4093      	lslle	r3, r2
 8006328:	ea03 0b01 	andle.w	fp, r3, r1
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	f7fa fba4 	bl	8000a80 <__aeabi_dcmpeq>
 8006338:	2800      	cmp	r0, #0
 800633a:	d1a6      	bne.n	800628a <_strtod_l+0x55a>
 800633c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800633e:	463a      	mov	r2, r7
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006344:	462b      	mov	r3, r5
 8006346:	9805      	ldr	r0, [sp, #20]
 8006348:	f7ff f8d0 	bl	80054ec <__s2b>
 800634c:	900a      	str	r0, [sp, #40]	@ 0x28
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f af05 	beq.w	800615e <_strtod_l+0x42e>
 8006354:	2400      	movs	r4, #0
 8006356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006358:	eba9 0308 	sub.w	r3, r9, r8
 800635c:	2a00      	cmp	r2, #0
 800635e:	bfa8      	it	ge
 8006360:	2300      	movge	r3, #0
 8006362:	46a0      	mov	r8, r4
 8006364:	9312      	str	r3, [sp, #72]	@ 0x48
 8006366:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800636a:	9316      	str	r3, [sp, #88]	@ 0x58
 800636c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	f7ff f813 	bl	800539c <_Balloc>
 8006376:	4681      	mov	r9, r0
 8006378:	2800      	cmp	r0, #0
 800637a:	f43f aef4 	beq.w	8006166 <_strtod_l+0x436>
 800637e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006380:	300c      	adds	r0, #12
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	f103 010c 	add.w	r1, r3, #12
 8006388:	3202      	adds	r2, #2
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	f000 fd66 	bl	8006e5c <memcpy>
 8006390:	ab1c      	add	r3, sp, #112	@ 0x70
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4652      	mov	r2, sl
 800639a:	465b      	mov	r3, fp
 800639c:	9805      	ldr	r0, [sp, #20]
 800639e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80063a2:	f7ff fbd5 	bl	8005b50 <__d2b>
 80063a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f43f aedc 	beq.w	8006166 <_strtod_l+0x436>
 80063ae:	2101      	movs	r1, #1
 80063b0:	9805      	ldr	r0, [sp, #20]
 80063b2:	f7ff f931 	bl	8005618 <__i2b>
 80063b6:	4680      	mov	r8, r0
 80063b8:	b948      	cbnz	r0, 80063ce <_strtod_l+0x69e>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	e6d2      	b.n	8006166 <_strtod_l+0x436>
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	ea03 0a0a 	and.w	sl, r3, sl
 80063cc:	e7ae      	b.n	800632c <_strtod_l+0x5fc>
 80063ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80063d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	bfab      	itete	ge
 80063d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80063d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80063da:	18ef      	addge	r7, r5, r3
 80063dc:	1b5e      	sublt	r6, r3, r5
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	bfa8      	it	ge
 80063e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80063e4:	eba5 0503 	sub.w	r5, r5, r3
 80063e8:	4415      	add	r5, r2
 80063ea:	4b67      	ldr	r3, [pc, #412]	@ (8006588 <_strtod_l+0x858>)
 80063ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80063f0:	bfb8      	it	lt
 80063f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80063f4:	429d      	cmp	r5, r3
 80063f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80063fa:	da50      	bge.n	800649e <_strtod_l+0x76e>
 80063fc:	1b5b      	subs	r3, r3, r5
 80063fe:	2b1f      	cmp	r3, #31
 8006400:	f04f 0101 	mov.w	r1, #1
 8006404:	eba2 0203 	sub.w	r2, r2, r3
 8006408:	dc3d      	bgt.n	8006486 <_strtod_l+0x756>
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006410:	2300      	movs	r3, #0
 8006412:	9310      	str	r3, [sp, #64]	@ 0x40
 8006414:	18bd      	adds	r5, r7, r2
 8006416:	9b08      	ldr	r3, [sp, #32]
 8006418:	42af      	cmp	r7, r5
 800641a:	4416      	add	r6, r2
 800641c:	441e      	add	r6, r3
 800641e:	463b      	mov	r3, r7
 8006420:	bfa8      	it	ge
 8006422:	462b      	movge	r3, r5
 8006424:	42b3      	cmp	r3, r6
 8006426:	bfa8      	it	ge
 8006428:	4633      	movge	r3, r6
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfc2      	ittt	gt
 800642e:	1aed      	subgt	r5, r5, r3
 8006430:	1af6      	subgt	r6, r6, r3
 8006432:	1aff      	subgt	r7, r7, r3
 8006434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd16      	ble.n	8006468 <_strtod_l+0x738>
 800643a:	4641      	mov	r1, r8
 800643c:	461a      	mov	r2, r3
 800643e:	9805      	ldr	r0, [sp, #20]
 8006440:	f7ff f9a8 	bl	8005794 <__pow5mult>
 8006444:	4680      	mov	r8, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	d0b7      	beq.n	80063ba <_strtod_l+0x68a>
 800644a:	4601      	mov	r1, r0
 800644c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800644e:	9805      	ldr	r0, [sp, #20]
 8006450:	f7ff f8f8 	bl	8005644 <__multiply>
 8006454:	900e      	str	r0, [sp, #56]	@ 0x38
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f ae85 	beq.w	8006166 <_strtod_l+0x436>
 800645c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800645e:	9805      	ldr	r0, [sp, #20]
 8006460:	f7fe ffdc 	bl	800541c <_Bfree>
 8006464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006466:	931a      	str	r3, [sp, #104]	@ 0x68
 8006468:	2d00      	cmp	r5, #0
 800646a:	dc1d      	bgt.n	80064a8 <_strtod_l+0x778>
 800646c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	dd23      	ble.n	80064ba <_strtod_l+0x78a>
 8006472:	4649      	mov	r1, r9
 8006474:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006476:	9805      	ldr	r0, [sp, #20]
 8006478:	f7ff f98c 	bl	8005794 <__pow5mult>
 800647c:	4681      	mov	r9, r0
 800647e:	b9e0      	cbnz	r0, 80064ba <_strtod_l+0x78a>
 8006480:	f04f 0900 	mov.w	r9, #0
 8006484:	e66f      	b.n	8006166 <_strtod_l+0x436>
 8006486:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800648a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800648e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006492:	35e2      	adds	r5, #226	@ 0xe2
 8006494:	fa01 f305 	lsl.w	r3, r1, r5
 8006498:	9310      	str	r3, [sp, #64]	@ 0x40
 800649a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800649c:	e7ba      	b.n	8006414 <_strtod_l+0x6e4>
 800649e:	2300      	movs	r3, #0
 80064a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80064a2:	2301      	movs	r3, #1
 80064a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064a6:	e7b5      	b.n	8006414 <_strtod_l+0x6e4>
 80064a8:	462a      	mov	r2, r5
 80064aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064ac:	9805      	ldr	r0, [sp, #20]
 80064ae:	f7ff f9cb 	bl	8005848 <__lshift>
 80064b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1d9      	bne.n	800646c <_strtod_l+0x73c>
 80064b8:	e655      	b.n	8006166 <_strtod_l+0x436>
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	dd07      	ble.n	80064ce <_strtod_l+0x79e>
 80064be:	4649      	mov	r1, r9
 80064c0:	4632      	mov	r2, r6
 80064c2:	9805      	ldr	r0, [sp, #20]
 80064c4:	f7ff f9c0 	bl	8005848 <__lshift>
 80064c8:	4681      	mov	r9, r0
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d0d8      	beq.n	8006480 <_strtod_l+0x750>
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	dd08      	ble.n	80064e4 <_strtod_l+0x7b4>
 80064d2:	4641      	mov	r1, r8
 80064d4:	463a      	mov	r2, r7
 80064d6:	9805      	ldr	r0, [sp, #20]
 80064d8:	f7ff f9b6 	bl	8005848 <__lshift>
 80064dc:	4680      	mov	r8, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f ae41 	beq.w	8006166 <_strtod_l+0x436>
 80064e4:	464a      	mov	r2, r9
 80064e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064e8:	9805      	ldr	r0, [sp, #20]
 80064ea:	f7ff fa35 	bl	8005958 <__mdiff>
 80064ee:	4604      	mov	r4, r0
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f43f ae38 	beq.w	8006166 <_strtod_l+0x436>
 80064f6:	68c3      	ldr	r3, [r0, #12]
 80064f8:	4641      	mov	r1, r8
 80064fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064fc:	2300      	movs	r3, #0
 80064fe:	60c3      	str	r3, [r0, #12]
 8006500:	f7ff fa0e 	bl	8005920 <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	da45      	bge.n	8006594 <_strtod_l+0x864>
 8006508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800650a:	ea53 030a 	orrs.w	r3, r3, sl
 800650e:	d16b      	bne.n	80065e8 <_strtod_l+0x8b8>
 8006510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006514:	2b00      	cmp	r3, #0
 8006516:	d167      	bne.n	80065e8 <_strtod_l+0x8b8>
 8006518:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800651c:	0d1b      	lsrs	r3, r3, #20
 800651e:	051b      	lsls	r3, r3, #20
 8006520:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006524:	d960      	bls.n	80065e8 <_strtod_l+0x8b8>
 8006526:	6963      	ldr	r3, [r4, #20]
 8006528:	b913      	cbnz	r3, 8006530 <_strtod_l+0x800>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	2b01      	cmp	r3, #1
 800652e:	dd5b      	ble.n	80065e8 <_strtod_l+0x8b8>
 8006530:	4621      	mov	r1, r4
 8006532:	2201      	movs	r2, #1
 8006534:	9805      	ldr	r0, [sp, #20]
 8006536:	f7ff f987 	bl	8005848 <__lshift>
 800653a:	4641      	mov	r1, r8
 800653c:	4604      	mov	r4, r0
 800653e:	f7ff f9ef 	bl	8005920 <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	dd50      	ble.n	80065e8 <_strtod_l+0x8b8>
 8006546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800654a:	9a08      	ldr	r2, [sp, #32]
 800654c:	0d1b      	lsrs	r3, r3, #20
 800654e:	051b      	lsls	r3, r3, #20
 8006550:	2a00      	cmp	r2, #0
 8006552:	d06a      	beq.n	800662a <_strtod_l+0x8fa>
 8006554:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006558:	d867      	bhi.n	800662a <_strtod_l+0x8fa>
 800655a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800655e:	f67f ae98 	bls.w	8006292 <_strtod_l+0x562>
 8006562:	4650      	mov	r0, sl
 8006564:	4659      	mov	r1, fp
 8006566:	4b09      	ldr	r3, [pc, #36]	@ (800658c <_strtod_l+0x85c>)
 8006568:	2200      	movs	r2, #0
 800656a:	f7fa f821 	bl	80005b0 <__aeabi_dmul>
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <_strtod_l+0x860>)
 8006570:	4682      	mov	sl, r0
 8006572:	400b      	ands	r3, r1
 8006574:	468b      	mov	fp, r1
 8006576:	2b00      	cmp	r3, #0
 8006578:	f47f ae00 	bne.w	800617c <_strtod_l+0x44c>
 800657c:	2322      	movs	r3, #34	@ 0x22
 800657e:	9a05      	ldr	r2, [sp, #20]
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e5fb      	b.n	800617c <_strtod_l+0x44c>
 8006584:	08007e28 	.word	0x08007e28
 8006588:	fffffc02 	.word	0xfffffc02
 800658c:	39500000 	.word	0x39500000
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006598:	d165      	bne.n	8006666 <_strtod_l+0x936>
 800659a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800659c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065a0:	b35a      	cbz	r2, 80065fa <_strtod_l+0x8ca>
 80065a2:	4a99      	ldr	r2, [pc, #612]	@ (8006808 <_strtod_l+0xad8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d12b      	bne.n	8006600 <_strtod_l+0x8d0>
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	4651      	mov	r1, sl
 80065ac:	b303      	cbz	r3, 80065f0 <_strtod_l+0x8c0>
 80065ae:	465a      	mov	r2, fp
 80065b0:	4b96      	ldr	r3, [pc, #600]	@ (800680c <_strtod_l+0xadc>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	d81b      	bhi.n	80065f6 <_strtod_l+0x8c6>
 80065be:	0d1b      	lsrs	r3, r3, #20
 80065c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d119      	bne.n	8006600 <_strtod_l+0x8d0>
 80065cc:	4b90      	ldr	r3, [pc, #576]	@ (8006810 <_strtod_l+0xae0>)
 80065ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <_strtod_l+0x8aa>
 80065d4:	3101      	adds	r1, #1
 80065d6:	f43f adc6 	beq.w	8006166 <_strtod_l+0x436>
 80065da:	f04f 0a00 	mov.w	sl, #0
 80065de:	4b8b      	ldr	r3, [pc, #556]	@ (800680c <_strtod_l+0xadc>)
 80065e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065e2:	401a      	ands	r2, r3
 80065e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1b9      	bne.n	8006562 <_strtod_l+0x832>
 80065ee:	e5c5      	b.n	800617c <_strtod_l+0x44c>
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
 80065f4:	e7e8      	b.n	80065c8 <_strtod_l+0x898>
 80065f6:	4613      	mov	r3, r2
 80065f8:	e7e6      	b.n	80065c8 <_strtod_l+0x898>
 80065fa:	ea53 030a 	orrs.w	r3, r3, sl
 80065fe:	d0a2      	beq.n	8006546 <_strtod_l+0x816>
 8006600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006602:	b1db      	cbz	r3, 800663c <_strtod_l+0x90c>
 8006604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006606:	4213      	tst	r3, r2
 8006608:	d0ee      	beq.n	80065e8 <_strtod_l+0x8b8>
 800660a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800660c:	4650      	mov	r0, sl
 800660e:	4659      	mov	r1, fp
 8006610:	9a08      	ldr	r2, [sp, #32]
 8006612:	b1bb      	cbz	r3, 8006644 <_strtod_l+0x914>
 8006614:	f7ff fb68 	bl	8005ce8 <sulp>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006620:	f7f9 fe10 	bl	8000244 <__adddf3>
 8006624:	4682      	mov	sl, r0
 8006626:	468b      	mov	fp, r1
 8006628:	e7de      	b.n	80065e8 <_strtod_l+0x8b8>
 800662a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800662e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006632:	f04f 3aff 	mov.w	sl, #4294967295
 8006636:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800663a:	e7d5      	b.n	80065e8 <_strtod_l+0x8b8>
 800663c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800663e:	ea13 0f0a 	tst.w	r3, sl
 8006642:	e7e1      	b.n	8006608 <_strtod_l+0x8d8>
 8006644:	f7ff fb50 	bl	8005ce8 <sulp>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006650:	f7f9 fdf6 	bl	8000240 <__aeabi_dsub>
 8006654:	2200      	movs	r2, #0
 8006656:	2300      	movs	r3, #0
 8006658:	4682      	mov	sl, r0
 800665a:	468b      	mov	fp, r1
 800665c:	f7fa fa10 	bl	8000a80 <__aeabi_dcmpeq>
 8006660:	2800      	cmp	r0, #0
 8006662:	d0c1      	beq.n	80065e8 <_strtod_l+0x8b8>
 8006664:	e615      	b.n	8006292 <_strtod_l+0x562>
 8006666:	4641      	mov	r1, r8
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff fac9 	bl	8005c00 <__ratio>
 800666e:	2200      	movs	r2, #0
 8006670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006674:	4606      	mov	r6, r0
 8006676:	460f      	mov	r7, r1
 8006678:	f7fa fa16 	bl	8000aa8 <__aeabi_dcmple>
 800667c:	2800      	cmp	r0, #0
 800667e:	d06d      	beq.n	800675c <_strtod_l+0xa2c>
 8006680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d178      	bne.n	8006778 <_strtod_l+0xa48>
 8006686:	f1ba 0f00 	cmp.w	sl, #0
 800668a:	d156      	bne.n	800673a <_strtod_l+0xa0a>
 800668c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800668e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006692:	2b00      	cmp	r3, #0
 8006694:	d158      	bne.n	8006748 <_strtod_l+0xa18>
 8006696:	2200      	movs	r2, #0
 8006698:	4630      	mov	r0, r6
 800669a:	4639      	mov	r1, r7
 800669c:	4b5d      	ldr	r3, [pc, #372]	@ (8006814 <_strtod_l+0xae4>)
 800669e:	f7fa f9f9 	bl	8000a94 <__aeabi_dcmplt>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d157      	bne.n	8006756 <_strtod_l+0xa26>
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	2200      	movs	r2, #0
 80066ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006818 <_strtod_l+0xae8>)
 80066ae:	f7f9 ff7f 	bl	80005b0 <__aeabi_dmul>
 80066b2:	4606      	mov	r6, r0
 80066b4:	460f      	mov	r7, r1
 80066b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80066ba:	9606      	str	r6, [sp, #24]
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066c2:	4d52      	ldr	r5, [pc, #328]	@ (800680c <_strtod_l+0xadc>)
 80066c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80066c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ca:	401d      	ands	r5, r3
 80066cc:	4b53      	ldr	r3, [pc, #332]	@ (800681c <_strtod_l+0xaec>)
 80066ce:	429d      	cmp	r5, r3
 80066d0:	f040 80aa 	bne.w	8006828 <_strtod_l+0xaf8>
 80066d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066d6:	4650      	mov	r0, sl
 80066d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80066dc:	4659      	mov	r1, fp
 80066de:	f7ff f9cf 	bl	8005a80 <__ulp>
 80066e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066e6:	f7f9 ff63 	bl	80005b0 <__aeabi_dmul>
 80066ea:	4652      	mov	r2, sl
 80066ec:	465b      	mov	r3, fp
 80066ee:	f7f9 fda9 	bl	8000244 <__adddf3>
 80066f2:	460b      	mov	r3, r1
 80066f4:	4945      	ldr	r1, [pc, #276]	@ (800680c <_strtod_l+0xadc>)
 80066f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006820 <_strtod_l+0xaf0>)
 80066f8:	4019      	ands	r1, r3
 80066fa:	4291      	cmp	r1, r2
 80066fc:	4682      	mov	sl, r0
 80066fe:	d942      	bls.n	8006786 <_strtod_l+0xa56>
 8006700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006702:	4b43      	ldr	r3, [pc, #268]	@ (8006810 <_strtod_l+0xae0>)
 8006704:	429a      	cmp	r2, r3
 8006706:	d103      	bne.n	8006710 <_strtod_l+0x9e0>
 8006708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800670a:	3301      	adds	r3, #1
 800670c:	f43f ad2b 	beq.w	8006166 <_strtod_l+0x436>
 8006710:	f04f 3aff 	mov.w	sl, #4294967295
 8006714:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006810 <_strtod_l+0xae0>
 8006718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	f7fe fe7e 	bl	800541c <_Bfree>
 8006720:	4649      	mov	r1, r9
 8006722:	9805      	ldr	r0, [sp, #20]
 8006724:	f7fe fe7a 	bl	800541c <_Bfree>
 8006728:	4641      	mov	r1, r8
 800672a:	9805      	ldr	r0, [sp, #20]
 800672c:	f7fe fe76 	bl	800541c <_Bfree>
 8006730:	4621      	mov	r1, r4
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	f7fe fe72 	bl	800541c <_Bfree>
 8006738:	e618      	b.n	800636c <_strtod_l+0x63c>
 800673a:	f1ba 0f01 	cmp.w	sl, #1
 800673e:	d103      	bne.n	8006748 <_strtod_l+0xa18>
 8006740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006742:	2b00      	cmp	r3, #0
 8006744:	f43f ada5 	beq.w	8006292 <_strtod_l+0x562>
 8006748:	2200      	movs	r2, #0
 800674a:	4b36      	ldr	r3, [pc, #216]	@ (8006824 <_strtod_l+0xaf4>)
 800674c:	2600      	movs	r6, #0
 800674e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006752:	4f30      	ldr	r7, [pc, #192]	@ (8006814 <_strtod_l+0xae4>)
 8006754:	e7b3      	b.n	80066be <_strtod_l+0x98e>
 8006756:	2600      	movs	r6, #0
 8006758:	4f2f      	ldr	r7, [pc, #188]	@ (8006818 <_strtod_l+0xae8>)
 800675a:	e7ac      	b.n	80066b6 <_strtod_l+0x986>
 800675c:	4630      	mov	r0, r6
 800675e:	4639      	mov	r1, r7
 8006760:	4b2d      	ldr	r3, [pc, #180]	@ (8006818 <_strtod_l+0xae8>)
 8006762:	2200      	movs	r2, #0
 8006764:	f7f9 ff24 	bl	80005b0 <__aeabi_dmul>
 8006768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0a1      	beq.n	80066b6 <_strtod_l+0x986>
 8006772:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006776:	e7a2      	b.n	80066be <_strtod_l+0x98e>
 8006778:	2200      	movs	r2, #0
 800677a:	4b26      	ldr	r3, [pc, #152]	@ (8006814 <_strtod_l+0xae4>)
 800677c:	4616      	mov	r6, r2
 800677e:	461f      	mov	r7, r3
 8006780:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006784:	e79b      	b.n	80066be <_strtod_l+0x98e>
 8006786:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800678a:	9b08      	ldr	r3, [sp, #32]
 800678c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1c1      	bne.n	8006718 <_strtod_l+0x9e8>
 8006794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006798:	0d1b      	lsrs	r3, r3, #20
 800679a:	051b      	lsls	r3, r3, #20
 800679c:	429d      	cmp	r5, r3
 800679e:	d1bb      	bne.n	8006718 <_strtod_l+0x9e8>
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa fa4c 	bl	8000c40 <__aeabi_d2lz>
 80067a8:	f7f9 fed4 	bl	8000554 <__aeabi_l2d>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7f9 fd44 	bl	8000240 <__aeabi_dsub>
 80067b8:	460b      	mov	r3, r1
 80067ba:	4602      	mov	r2, r0
 80067bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80067c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067c6:	ea46 060a 	orr.w	r6, r6, sl
 80067ca:	431e      	orrs	r6, r3
 80067cc:	d069      	beq.n	80068a2 <_strtod_l+0xb72>
 80067ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80067f8 <_strtod_l+0xac8>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7fa f95e 	bl	8000a94 <__aeabi_dcmplt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f47f accf 	bne.w	800617c <_strtod_l+0x44c>
 80067de:	a308      	add	r3, pc, #32	@ (adr r3, 8006800 <_strtod_l+0xad0>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e8:	f7fa f972 	bl	8000ad0 <__aeabi_dcmpgt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d093      	beq.n	8006718 <_strtod_l+0x9e8>
 80067f0:	e4c4      	b.n	800617c <_strtod_l+0x44c>
 80067f2:	bf00      	nop
 80067f4:	f3af 8000 	nop.w
 80067f8:	94a03595 	.word	0x94a03595
 80067fc:	3fdfffff 	.word	0x3fdfffff
 8006800:	35afe535 	.word	0x35afe535
 8006804:	3fe00000 	.word	0x3fe00000
 8006808:	000fffff 	.word	0x000fffff
 800680c:	7ff00000 	.word	0x7ff00000
 8006810:	7fefffff 	.word	0x7fefffff
 8006814:	3ff00000 	.word	0x3ff00000
 8006818:	3fe00000 	.word	0x3fe00000
 800681c:	7fe00000 	.word	0x7fe00000
 8006820:	7c9fffff 	.word	0x7c9fffff
 8006824:	bff00000 	.word	0xbff00000
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	b323      	cbz	r3, 8006876 <_strtod_l+0xb46>
 800682c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006830:	d821      	bhi.n	8006876 <_strtod_l+0xb46>
 8006832:	a327      	add	r3, pc, #156	@ (adr r3, 80068d0 <_strtod_l+0xba0>)
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7fa f934 	bl	8000aa8 <__aeabi_dcmple>
 8006840:	b1a0      	cbz	r0, 800686c <_strtod_l+0xb3c>
 8006842:	4639      	mov	r1, r7
 8006844:	4630      	mov	r0, r6
 8006846:	f7fa f98b 	bl	8000b60 <__aeabi_d2uiz>
 800684a:	2801      	cmp	r0, #1
 800684c:	bf38      	it	cc
 800684e:	2001      	movcc	r0, #1
 8006850:	f7f9 fe34 	bl	80004bc <__aeabi_ui2d>
 8006854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006856:	4606      	mov	r6, r0
 8006858:	460f      	mov	r7, r1
 800685a:	b9fb      	cbnz	r3, 800689c <_strtod_l+0xb6c>
 800685c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006860:	9014      	str	r0, [sp, #80]	@ 0x50
 8006862:	9315      	str	r3, [sp, #84]	@ 0x54
 8006864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006868:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800686c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800686e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006872:	1b5b      	subs	r3, r3, r5
 8006874:	9311      	str	r3, [sp, #68]	@ 0x44
 8006876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800687a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800687e:	f7ff f8ff 	bl	8005a80 <__ulp>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4650      	mov	r0, sl
 8006888:	4659      	mov	r1, fp
 800688a:	f7f9 fe91 	bl	80005b0 <__aeabi_dmul>
 800688e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006892:	f7f9 fcd7 	bl	8000244 <__adddf3>
 8006896:	4682      	mov	sl, r0
 8006898:	468b      	mov	fp, r1
 800689a:	e776      	b.n	800678a <_strtod_l+0xa5a>
 800689c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80068a0:	e7e0      	b.n	8006864 <_strtod_l+0xb34>
 80068a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80068d8 <_strtod_l+0xba8>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7fa f8f4 	bl	8000a94 <__aeabi_dcmplt>
 80068ac:	e79e      	b.n	80067ec <_strtod_l+0xabc>
 80068ae:	2300      	movs	r3, #0
 80068b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	f7ff ba77 	b.w	8005daa <_strtod_l+0x7a>
 80068bc:	2a65      	cmp	r2, #101	@ 0x65
 80068be:	f43f ab6e 	beq.w	8005f9e <_strtod_l+0x26e>
 80068c2:	2a45      	cmp	r2, #69	@ 0x45
 80068c4:	f43f ab6b 	beq.w	8005f9e <_strtod_l+0x26e>
 80068c8:	2301      	movs	r3, #1
 80068ca:	f7ff bba6 	b.w	800601a <_strtod_l+0x2ea>
 80068ce:	bf00      	nop
 80068d0:	ffc00000 	.word	0xffc00000
 80068d4:	41dfffff 	.word	0x41dfffff
 80068d8:	94a03595 	.word	0x94a03595
 80068dc:	3fcfffff 	.word	0x3fcfffff

080068e0 <_strtod_r>:
 80068e0:	4b01      	ldr	r3, [pc, #4]	@ (80068e8 <_strtod_r+0x8>)
 80068e2:	f7ff ba25 	b.w	8005d30 <_strtod_l>
 80068e6:	bf00      	nop
 80068e8:	20000068 	.word	0x20000068

080068ec <_strtol_l.constprop.0>:
 80068ec:	2b24      	cmp	r3, #36	@ 0x24
 80068ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f2:	4686      	mov	lr, r0
 80068f4:	4690      	mov	r8, r2
 80068f6:	d801      	bhi.n	80068fc <_strtol_l.constprop.0+0x10>
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d106      	bne.n	800690a <_strtol_l.constprop.0+0x1e>
 80068fc:	f7fd fdbe 	bl	800447c <__errno>
 8006900:	2316      	movs	r3, #22
 8006902:	6003      	str	r3, [r0, #0]
 8006904:	2000      	movs	r0, #0
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	460d      	mov	r5, r1
 800690c:	4833      	ldr	r0, [pc, #204]	@ (80069dc <_strtol_l.constprop.0+0xf0>)
 800690e:	462a      	mov	r2, r5
 8006910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006914:	5d06      	ldrb	r6, [r0, r4]
 8006916:	f016 0608 	ands.w	r6, r6, #8
 800691a:	d1f8      	bne.n	800690e <_strtol_l.constprop.0+0x22>
 800691c:	2c2d      	cmp	r4, #45	@ 0x2d
 800691e:	d12d      	bne.n	800697c <_strtol_l.constprop.0+0x90>
 8006920:	2601      	movs	r6, #1
 8006922:	782c      	ldrb	r4, [r5, #0]
 8006924:	1c95      	adds	r5, r2, #2
 8006926:	f033 0210 	bics.w	r2, r3, #16
 800692a:	d109      	bne.n	8006940 <_strtol_l.constprop.0+0x54>
 800692c:	2c30      	cmp	r4, #48	@ 0x30
 800692e:	d12a      	bne.n	8006986 <_strtol_l.constprop.0+0x9a>
 8006930:	782a      	ldrb	r2, [r5, #0]
 8006932:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006936:	2a58      	cmp	r2, #88	@ 0x58
 8006938:	d125      	bne.n	8006986 <_strtol_l.constprop.0+0x9a>
 800693a:	2310      	movs	r3, #16
 800693c:	786c      	ldrb	r4, [r5, #1]
 800693e:	3502      	adds	r5, #2
 8006940:	2200      	movs	r2, #0
 8006942:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006946:	f10c 3cff 	add.w	ip, ip, #4294967295
 800694a:	fbbc f9f3 	udiv	r9, ip, r3
 800694e:	4610      	mov	r0, r2
 8006950:	fb03 ca19 	mls	sl, r3, r9, ip
 8006954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006958:	2f09      	cmp	r7, #9
 800695a:	d81b      	bhi.n	8006994 <_strtol_l.constprop.0+0xa8>
 800695c:	463c      	mov	r4, r7
 800695e:	42a3      	cmp	r3, r4
 8006960:	dd27      	ble.n	80069b2 <_strtol_l.constprop.0+0xc6>
 8006962:	1c57      	adds	r7, r2, #1
 8006964:	d007      	beq.n	8006976 <_strtol_l.constprop.0+0x8a>
 8006966:	4581      	cmp	r9, r0
 8006968:	d320      	bcc.n	80069ac <_strtol_l.constprop.0+0xc0>
 800696a:	d101      	bne.n	8006970 <_strtol_l.constprop.0+0x84>
 800696c:	45a2      	cmp	sl, r4
 800696e:	db1d      	blt.n	80069ac <_strtol_l.constprop.0+0xc0>
 8006970:	2201      	movs	r2, #1
 8006972:	fb00 4003 	mla	r0, r0, r3, r4
 8006976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800697a:	e7eb      	b.n	8006954 <_strtol_l.constprop.0+0x68>
 800697c:	2c2b      	cmp	r4, #43	@ 0x2b
 800697e:	bf04      	itt	eq
 8006980:	782c      	ldrbeq	r4, [r5, #0]
 8006982:	1c95      	addeq	r5, r2, #2
 8006984:	e7cf      	b.n	8006926 <_strtol_l.constprop.0+0x3a>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1da      	bne.n	8006940 <_strtol_l.constprop.0+0x54>
 800698a:	2c30      	cmp	r4, #48	@ 0x30
 800698c:	bf0c      	ite	eq
 800698e:	2308      	moveq	r3, #8
 8006990:	230a      	movne	r3, #10
 8006992:	e7d5      	b.n	8006940 <_strtol_l.constprop.0+0x54>
 8006994:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006998:	2f19      	cmp	r7, #25
 800699a:	d801      	bhi.n	80069a0 <_strtol_l.constprop.0+0xb4>
 800699c:	3c37      	subs	r4, #55	@ 0x37
 800699e:	e7de      	b.n	800695e <_strtol_l.constprop.0+0x72>
 80069a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069a4:	2f19      	cmp	r7, #25
 80069a6:	d804      	bhi.n	80069b2 <_strtol_l.constprop.0+0xc6>
 80069a8:	3c57      	subs	r4, #87	@ 0x57
 80069aa:	e7d8      	b.n	800695e <_strtol_l.constprop.0+0x72>
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295
 80069b0:	e7e1      	b.n	8006976 <_strtol_l.constprop.0+0x8a>
 80069b2:	1c53      	adds	r3, r2, #1
 80069b4:	d108      	bne.n	80069c8 <_strtol_l.constprop.0+0xdc>
 80069b6:	2322      	movs	r3, #34	@ 0x22
 80069b8:	4660      	mov	r0, ip
 80069ba:	f8ce 3000 	str.w	r3, [lr]
 80069be:	f1b8 0f00 	cmp.w	r8, #0
 80069c2:	d0a0      	beq.n	8006906 <_strtol_l.constprop.0+0x1a>
 80069c4:	1e69      	subs	r1, r5, #1
 80069c6:	e006      	b.n	80069d6 <_strtol_l.constprop.0+0xea>
 80069c8:	b106      	cbz	r6, 80069cc <_strtol_l.constprop.0+0xe0>
 80069ca:	4240      	negs	r0, r0
 80069cc:	f1b8 0f00 	cmp.w	r8, #0
 80069d0:	d099      	beq.n	8006906 <_strtol_l.constprop.0+0x1a>
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	d1f6      	bne.n	80069c4 <_strtol_l.constprop.0+0xd8>
 80069d6:	f8c8 1000 	str.w	r1, [r8]
 80069da:	e794      	b.n	8006906 <_strtol_l.constprop.0+0x1a>
 80069dc:	08007e51 	.word	0x08007e51

080069e0 <_strtol_r>:
 80069e0:	f7ff bf84 	b.w	80068ec <_strtol_l.constprop.0>

080069e4 <__ssputs_r>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	461f      	mov	r7, r3
 80069ea:	688e      	ldr	r6, [r1, #8]
 80069ec:	4682      	mov	sl, r0
 80069ee:	42be      	cmp	r6, r7
 80069f0:	460c      	mov	r4, r1
 80069f2:	4690      	mov	r8, r2
 80069f4:	680b      	ldr	r3, [r1, #0]
 80069f6:	d82d      	bhi.n	8006a54 <__ssputs_r+0x70>
 80069f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a00:	d026      	beq.n	8006a50 <__ssputs_r+0x6c>
 8006a02:	6965      	ldr	r5, [r4, #20]
 8006a04:	6909      	ldr	r1, [r1, #16]
 8006a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a0a:	eba3 0901 	sub.w	r9, r3, r1
 8006a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a12:	1c7b      	adds	r3, r7, #1
 8006a14:	444b      	add	r3, r9
 8006a16:	106d      	asrs	r5, r5, #1
 8006a18:	429d      	cmp	r5, r3
 8006a1a:	bf38      	it	cc
 8006a1c:	461d      	movcc	r5, r3
 8006a1e:	0553      	lsls	r3, r2, #21
 8006a20:	d527      	bpl.n	8006a72 <__ssputs_r+0x8e>
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7fe fc2e 	bl	8005284 <_malloc_r>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	b360      	cbz	r0, 8006a86 <__ssputs_r+0xa2>
 8006a2c:	464a      	mov	r2, r9
 8006a2e:	6921      	ldr	r1, [r4, #16]
 8006a30:	f000 fa14 	bl	8006e5c <memcpy>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	6126      	str	r6, [r4, #16]
 8006a42:	444e      	add	r6, r9
 8006a44:	6026      	str	r6, [r4, #0]
 8006a46:	463e      	mov	r6, r7
 8006a48:	6165      	str	r5, [r4, #20]
 8006a4a:	eba5 0509 	sub.w	r5, r5, r9
 8006a4e:	60a5      	str	r5, [r4, #8]
 8006a50:	42be      	cmp	r6, r7
 8006a52:	d900      	bls.n	8006a56 <__ssputs_r+0x72>
 8006a54:	463e      	mov	r6, r7
 8006a56:	4632      	mov	r2, r6
 8006a58:	4641      	mov	r1, r8
 8006a5a:	6820      	ldr	r0, [r4, #0]
 8006a5c:	f000 f9c2 	bl	8006de4 <memmove>
 8006a60:	2000      	movs	r0, #0
 8006a62:	68a3      	ldr	r3, [r4, #8]
 8006a64:	1b9b      	subs	r3, r3, r6
 8006a66:	60a3      	str	r3, [r4, #8]
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	4433      	add	r3, r6
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	462a      	mov	r2, r5
 8006a74:	f000 fd83 	bl	800757e <_realloc_r>
 8006a78:	4606      	mov	r6, r0
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d1e0      	bne.n	8006a40 <__ssputs_r+0x5c>
 8006a7e:	4650      	mov	r0, sl
 8006a80:	6921      	ldr	r1, [r4, #16]
 8006a82:	f7fe fb8d 	bl	80051a0 <_free_r>
 8006a86:	230c      	movs	r3, #12
 8006a88:	f8ca 3000 	str.w	r3, [sl]
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	e7e9      	b.n	8006a6e <__ssputs_r+0x8a>
	...

08006a9c <_svfiprintf_r>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4698      	mov	r8, r3
 8006aa2:	898b      	ldrh	r3, [r1, #12]
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4614      	mov	r4, r2
 8006aac:	b09d      	sub	sp, #116	@ 0x74
 8006aae:	d510      	bpl.n	8006ad2 <_svfiprintf_r+0x36>
 8006ab0:	690b      	ldr	r3, [r1, #16]
 8006ab2:	b973      	cbnz	r3, 8006ad2 <_svfiprintf_r+0x36>
 8006ab4:	2140      	movs	r1, #64	@ 0x40
 8006ab6:	f7fe fbe5 	bl	8005284 <_malloc_r>
 8006aba:	6028      	str	r0, [r5, #0]
 8006abc:	6128      	str	r0, [r5, #16]
 8006abe:	b930      	cbnz	r0, 8006ace <_svfiprintf_r+0x32>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	b01d      	add	sp, #116	@ 0x74
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	2340      	movs	r3, #64	@ 0x40
 8006ad0:	616b      	str	r3, [r5, #20]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006adc:	2330      	movs	r3, #48	@ 0x30
 8006ade:	f04f 0901 	mov.w	r9, #1
 8006ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006c80 <_svfiprintf_r+0x1e4>
 8006aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006aee:	4623      	mov	r3, r4
 8006af0:	469a      	mov	sl, r3
 8006af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af6:	b10a      	cbz	r2, 8006afc <_svfiprintf_r+0x60>
 8006af8:	2a25      	cmp	r2, #37	@ 0x25
 8006afa:	d1f9      	bne.n	8006af0 <_svfiprintf_r+0x54>
 8006afc:	ebba 0b04 	subs.w	fp, sl, r4
 8006b00:	d00b      	beq.n	8006b1a <_svfiprintf_r+0x7e>
 8006b02:	465b      	mov	r3, fp
 8006b04:	4622      	mov	r2, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f7ff ff6b 	bl	80069e4 <__ssputs_r>
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f000 80a7 	beq.w	8006c62 <_svfiprintf_r+0x1c6>
 8006b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b16:	445a      	add	r2, fp
 8006b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 809f 	beq.w	8006c62 <_svfiprintf_r+0x1c6>
 8006b24:	2300      	movs	r3, #0
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2e:	f10a 0a01 	add.w	sl, sl, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	9307      	str	r3, [sp, #28]
 8006b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b3c:	4654      	mov	r4, sl
 8006b3e:	2205      	movs	r2, #5
 8006b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b44:	484e      	ldr	r0, [pc, #312]	@ (8006c80 <_svfiprintf_r+0x1e4>)
 8006b46:	f7fd fcc6 	bl	80044d6 <memchr>
 8006b4a:	9a04      	ldr	r2, [sp, #16]
 8006b4c:	b9d8      	cbnz	r0, 8006b86 <_svfiprintf_r+0xea>
 8006b4e:	06d0      	lsls	r0, r2, #27
 8006b50:	bf44      	itt	mi
 8006b52:	2320      	movmi	r3, #32
 8006b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b58:	0711      	lsls	r1, r2, #28
 8006b5a:	bf44      	itt	mi
 8006b5c:	232b      	movmi	r3, #43	@ 0x2b
 8006b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b62:	f89a 3000 	ldrb.w	r3, [sl]
 8006b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b68:	d015      	beq.n	8006b96 <_svfiprintf_r+0xfa>
 8006b6a:	4654      	mov	r4, sl
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f04f 0c0a 	mov.w	ip, #10
 8006b72:	9a07      	ldr	r2, [sp, #28]
 8006b74:	4621      	mov	r1, r4
 8006b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7a:	3b30      	subs	r3, #48	@ 0x30
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d94b      	bls.n	8006c18 <_svfiprintf_r+0x17c>
 8006b80:	b1b0      	cbz	r0, 8006bb0 <_svfiprintf_r+0x114>
 8006b82:	9207      	str	r2, [sp, #28]
 8006b84:	e014      	b.n	8006bb0 <_svfiprintf_r+0x114>
 8006b86:	eba0 0308 	sub.w	r3, r0, r8
 8006b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	46a2      	mov	sl, r4
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	e7d2      	b.n	8006b3c <_svfiprintf_r+0xa0>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	9103      	str	r1, [sp, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bfbb      	ittet	lt
 8006ba2:	425b      	neglt	r3, r3
 8006ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba8:	9307      	strge	r3, [sp, #28]
 8006baa:	9307      	strlt	r3, [sp, #28]
 8006bac:	bfb8      	it	lt
 8006bae:	9204      	strlt	r2, [sp, #16]
 8006bb0:	7823      	ldrb	r3, [r4, #0]
 8006bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bb4:	d10a      	bne.n	8006bcc <_svfiprintf_r+0x130>
 8006bb6:	7863      	ldrb	r3, [r4, #1]
 8006bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bba:	d132      	bne.n	8006c22 <_svfiprintf_r+0x186>
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	3402      	adds	r4, #2
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9203      	str	r2, [sp, #12]
 8006bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006c84 <_svfiprintf_r+0x1e8>
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	7821      	ldrb	r1, [r4, #0]
 8006bd6:	f7fd fc7e 	bl	80044d6 <memchr>
 8006bda:	b138      	cbz	r0, 8006bec <_svfiprintf_r+0x150>
 8006bdc:	2240      	movs	r2, #64	@ 0x40
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	eba0 000a 	sub.w	r0, r0, sl
 8006be4:	4082      	lsls	r2, r0
 8006be6:	4313      	orrs	r3, r2
 8006be8:	3401      	adds	r4, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	4825      	ldr	r0, [pc, #148]	@ (8006c88 <_svfiprintf_r+0x1ec>)
 8006bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bf8:	f7fd fc6d 	bl	80044d6 <memchr>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d036      	beq.n	8006c6e <_svfiprintf_r+0x1d2>
 8006c00:	4b22      	ldr	r3, [pc, #136]	@ (8006c8c <_svfiprintf_r+0x1f0>)
 8006c02:	bb1b      	cbnz	r3, 8006c4c <_svfiprintf_r+0x1b0>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	3307      	adds	r3, #7
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c12:	4433      	add	r3, r6
 8006c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c16:	e76a      	b.n	8006aee <_svfiprintf_r+0x52>
 8006c18:	460c      	mov	r4, r1
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c20:	e7a8      	b.n	8006b74 <_svfiprintf_r+0xd8>
 8006c22:	2300      	movs	r3, #0
 8006c24:	f04f 0c0a 	mov.w	ip, #10
 8006c28:	4619      	mov	r1, r3
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c34:	3a30      	subs	r2, #48	@ 0x30
 8006c36:	2a09      	cmp	r2, #9
 8006c38:	d903      	bls.n	8006c42 <_svfiprintf_r+0x1a6>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0c6      	beq.n	8006bcc <_svfiprintf_r+0x130>
 8006c3e:	9105      	str	r1, [sp, #20]
 8006c40:	e7c4      	b.n	8006bcc <_svfiprintf_r+0x130>
 8006c42:	4604      	mov	r4, r0
 8006c44:	2301      	movs	r3, #1
 8006c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4a:	e7f0      	b.n	8006c2e <_svfiprintf_r+0x192>
 8006c4c:	ab03      	add	r3, sp, #12
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	462a      	mov	r2, r5
 8006c52:	4638      	mov	r0, r7
 8006c54:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <_svfiprintf_r+0x1f4>)
 8006c56:	a904      	add	r1, sp, #16
 8006c58:	f7fc fcca 	bl	80035f0 <_printf_float>
 8006c5c:	1c42      	adds	r2, r0, #1
 8006c5e:	4606      	mov	r6, r0
 8006c60:	d1d6      	bne.n	8006c10 <_svfiprintf_r+0x174>
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	065b      	lsls	r3, r3, #25
 8006c66:	f53f af2d 	bmi.w	8006ac4 <_svfiprintf_r+0x28>
 8006c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c6c:	e72c      	b.n	8006ac8 <_svfiprintf_r+0x2c>
 8006c6e:	ab03      	add	r3, sp, #12
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	462a      	mov	r2, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <_svfiprintf_r+0x1f4>)
 8006c78:	a904      	add	r1, sp, #16
 8006c7a:	f7fc ff57 	bl	8003b2c <_printf_i>
 8006c7e:	e7ed      	b.n	8006c5c <_svfiprintf_r+0x1c0>
 8006c80:	08007f51 	.word	0x08007f51
 8006c84:	08007f57 	.word	0x08007f57
 8006c88:	08007f5b 	.word	0x08007f5b
 8006c8c:	080035f1 	.word	0x080035f1
 8006c90:	080069e5 	.word	0x080069e5

08006c94 <__sflush_r>:
 8006c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	0716      	lsls	r6, r2, #28
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	d454      	bmi.n	8006d4c <__sflush_r+0xb8>
 8006ca2:	684b      	ldr	r3, [r1, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc02      	bgt.n	8006cae <__sflush_r+0x1a>
 8006ca8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd48      	ble.n	8006d40 <__sflush_r+0xac>
 8006cae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d045      	beq.n	8006d40 <__sflush_r+0xac>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cba:	682f      	ldr	r7, [r5, #0]
 8006cbc:	6a21      	ldr	r1, [r4, #32]
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	d030      	beq.n	8006d24 <__sflush_r+0x90>
 8006cc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	0759      	lsls	r1, r3, #29
 8006cc8:	d505      	bpl.n	8006cd6 <__sflush_r+0x42>
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cd0:	b10b      	cbz	r3, 8006cd6 <__sflush_r+0x42>
 8006cd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cdc:	6a21      	ldr	r1, [r4, #32]
 8006cde:	47b0      	blx	r6
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	d106      	bne.n	8006cf4 <__sflush_r+0x60>
 8006ce6:	6829      	ldr	r1, [r5, #0]
 8006ce8:	291d      	cmp	r1, #29
 8006cea:	d82b      	bhi.n	8006d44 <__sflush_r+0xb0>
 8006cec:	4a28      	ldr	r2, [pc, #160]	@ (8006d90 <__sflush_r+0xfc>)
 8006cee:	410a      	asrs	r2, r1
 8006cf0:	07d6      	lsls	r6, r2, #31
 8006cf2:	d427      	bmi.n	8006d44 <__sflush_r+0xb0>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6062      	str	r2, [r4, #4]
 8006cf8:	6922      	ldr	r2, [r4, #16]
 8006cfa:	04d9      	lsls	r1, r3, #19
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	d504      	bpl.n	8006d0a <__sflush_r+0x76>
 8006d00:	1c42      	adds	r2, r0, #1
 8006d02:	d101      	bne.n	8006d08 <__sflush_r+0x74>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b903      	cbnz	r3, 8006d0a <__sflush_r+0x76>
 8006d08:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d0c:	602f      	str	r7, [r5, #0]
 8006d0e:	b1b9      	cbz	r1, 8006d40 <__sflush_r+0xac>
 8006d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d14:	4299      	cmp	r1, r3
 8006d16:	d002      	beq.n	8006d1e <__sflush_r+0x8a>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f7fe fa41 	bl	80051a0 <_free_r>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d22:	e00d      	b.n	8006d40 <__sflush_r+0xac>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b0      	blx	r6
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	1c50      	adds	r0, r2, #1
 8006d2e:	d1c9      	bne.n	8006cc4 <__sflush_r+0x30>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0c6      	beq.n	8006cc4 <__sflush_r+0x30>
 8006d36:	2b1d      	cmp	r3, #29
 8006d38:	d001      	beq.n	8006d3e <__sflush_r+0xaa>
 8006d3a:	2b16      	cmp	r3, #22
 8006d3c:	d11d      	bne.n	8006d7a <__sflush_r+0xe6>
 8006d3e:	602f      	str	r7, [r5, #0]
 8006d40:	2000      	movs	r0, #0
 8006d42:	e021      	b.n	8006d88 <__sflush_r+0xf4>
 8006d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	e01a      	b.n	8006d82 <__sflush_r+0xee>
 8006d4c:	690f      	ldr	r7, [r1, #16]
 8006d4e:	2f00      	cmp	r7, #0
 8006d50:	d0f6      	beq.n	8006d40 <__sflush_r+0xac>
 8006d52:	0793      	lsls	r3, r2, #30
 8006d54:	bf18      	it	ne
 8006d56:	2300      	movne	r3, #0
 8006d58:	680e      	ldr	r6, [r1, #0]
 8006d5a:	bf08      	it	eq
 8006d5c:	694b      	ldreq	r3, [r1, #20]
 8006d5e:	1bf6      	subs	r6, r6, r7
 8006d60:	600f      	str	r7, [r1, #0]
 8006d62:	608b      	str	r3, [r1, #8]
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	ddeb      	ble.n	8006d40 <__sflush_r+0xac>
 8006d68:	4633      	mov	r3, r6
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	6a21      	ldr	r1, [r4, #32]
 8006d70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d74:	47e0      	blx	ip
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dc07      	bgt.n	8006d8a <__sflush_r+0xf6>
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8a:	4407      	add	r7, r0
 8006d8c:	1a36      	subs	r6, r6, r0
 8006d8e:	e7e9      	b.n	8006d64 <__sflush_r+0xd0>
 8006d90:	dfbffffe 	.word	0xdfbffffe

08006d94 <_fflush_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	b913      	cbnz	r3, 8006da4 <_fflush_r+0x10>
 8006d9e:	2500      	movs	r5, #0
 8006da0:	4628      	mov	r0, r5
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	b118      	cbz	r0, 8006dae <_fflush_r+0x1a>
 8006da6:	6a03      	ldr	r3, [r0, #32]
 8006da8:	b90b      	cbnz	r3, 8006dae <_fflush_r+0x1a>
 8006daa:	f7fd fa7b 	bl	80042a4 <__sinit>
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f3      	beq.n	8006d9e <_fflush_r+0xa>
 8006db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006db8:	07d0      	lsls	r0, r2, #31
 8006dba:	d404      	bmi.n	8006dc6 <_fflush_r+0x32>
 8006dbc:	0599      	lsls	r1, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_fflush_r+0x32>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc2:	f7fd fb86 	bl	80044d2 <__retarget_lock_acquire_recursive>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f7ff ff63 	bl	8006c94 <__sflush_r>
 8006dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d4e4      	bmi.n	8006da0 <_fflush_r+0xc>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	059b      	lsls	r3, r3, #22
 8006dda:	d4e1      	bmi.n	8006da0 <_fflush_r+0xc>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dde:	f7fd fb79 	bl	80044d4 <__retarget_lock_release_recursive>
 8006de2:	e7dd      	b.n	8006da0 <_fflush_r+0xc>

08006de4 <memmove>:
 8006de4:	4288      	cmp	r0, r1
 8006de6:	b510      	push	{r4, lr}
 8006de8:	eb01 0402 	add.w	r4, r1, r2
 8006dec:	d902      	bls.n	8006df4 <memmove+0x10>
 8006dee:	4284      	cmp	r4, r0
 8006df0:	4623      	mov	r3, r4
 8006df2:	d807      	bhi.n	8006e04 <memmove+0x20>
 8006df4:	1e43      	subs	r3, r0, #1
 8006df6:	42a1      	cmp	r1, r4
 8006df8:	d008      	beq.n	8006e0c <memmove+0x28>
 8006dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e02:	e7f8      	b.n	8006df6 <memmove+0x12>
 8006e04:	4601      	mov	r1, r0
 8006e06:	4402      	add	r2, r0
 8006e08:	428a      	cmp	r2, r1
 8006e0a:	d100      	bne.n	8006e0e <memmove+0x2a>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e16:	e7f7      	b.n	8006e08 <memmove+0x24>

08006e18 <strncmp>:
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	b16a      	cbz	r2, 8006e38 <strncmp+0x20>
 8006e1c:	3901      	subs	r1, #1
 8006e1e:	1884      	adds	r4, r0, r2
 8006e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d103      	bne.n	8006e34 <strncmp+0x1c>
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d001      	beq.n	8006e34 <strncmp+0x1c>
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d1f5      	bne.n	8006e20 <strncmp+0x8>
 8006e34:	1ad0      	subs	r0, r2, r3
 8006e36:	bd10      	pop	{r4, pc}
 8006e38:	4610      	mov	r0, r2
 8006e3a:	e7fc      	b.n	8006e36 <strncmp+0x1e>

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4d05      	ldr	r5, [pc, #20]	@ (8006e58 <_sbrk_r+0x1c>)
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7fa fb0a 	bl	8001460 <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20000474 	.word	0x20000474

08006e5c <memcpy>:
 8006e5c:	440a      	add	r2, r1
 8006e5e:	4291      	cmp	r1, r2
 8006e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e64:	d100      	bne.n	8006e68 <memcpy+0xc>
 8006e66:	4770      	bx	lr
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6e:	4291      	cmp	r1, r2
 8006e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e74:	d1f9      	bne.n	8006e6a <memcpy+0xe>
 8006e76:	bd10      	pop	{r4, pc}

08006e78 <nan>:
 8006e78:	2000      	movs	r0, #0
 8006e7a:	4901      	ldr	r1, [pc, #4]	@ (8006e80 <nan+0x8>)
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	7ff80000 	.word	0x7ff80000

08006e84 <__assert_func>:
 8006e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e86:	4614      	mov	r4, r2
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4b09      	ldr	r3, [pc, #36]	@ (8006eb0 <__assert_func+0x2c>)
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68d8      	ldr	r0, [r3, #12]
 8006e92:	b954      	cbnz	r4, 8006eaa <__assert_func+0x26>
 8006e94:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <__assert_func+0x30>)
 8006e96:	461c      	mov	r4, r3
 8006e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e9c:	9100      	str	r1, [sp, #0]
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	4905      	ldr	r1, [pc, #20]	@ (8006eb8 <__assert_func+0x34>)
 8006ea2:	f000 fba7 	bl	80075f4 <fiprintf>
 8006ea6:	f000 fbb7 	bl	8007618 <abort>
 8006eaa:	4b04      	ldr	r3, [pc, #16]	@ (8006ebc <__assert_func+0x38>)
 8006eac:	e7f4      	b.n	8006e98 <__assert_func+0x14>
 8006eae:	bf00      	nop
 8006eb0:	20000018 	.word	0x20000018
 8006eb4:	08007fa5 	.word	0x08007fa5
 8006eb8:	08007f77 	.word	0x08007f77
 8006ebc:	08007f6a 	.word	0x08007f6a

08006ec0 <_calloc_r>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ec6:	b93c      	cbnz	r4, 8006ed8 <_calloc_r+0x18>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7fe f9db 	bl	8005284 <_malloc_r>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	b928      	cbnz	r0, 8006ede <_calloc_r+0x1e>
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	220c      	movs	r2, #12
 8006eda:	6002      	str	r2, [r0, #0]
 8006edc:	e7f9      	b.n	8006ed2 <_calloc_r+0x12>
 8006ede:	462a      	mov	r2, r5
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7fd fa78 	bl	80043d6 <memset>
 8006ee6:	e7f5      	b.n	8006ed4 <_calloc_r+0x14>

08006ee8 <rshift>:
 8006ee8:	6903      	ldr	r3, [r0, #16]
 8006eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ef2:	f100 0414 	add.w	r4, r0, #20
 8006ef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006efa:	dd46      	ble.n	8006f8a <rshift+0xa2>
 8006efc:	f011 011f 	ands.w	r1, r1, #31
 8006f00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f08:	d10c      	bne.n	8006f24 <rshift+0x3c>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f100 0710 	add.w	r7, r0, #16
 8006f10:	42b1      	cmp	r1, r6
 8006f12:	d335      	bcc.n	8006f80 <rshift+0x98>
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	1eea      	subs	r2, r5, #3
 8006f1a:	4296      	cmp	r6, r2
 8006f1c:	bf38      	it	cc
 8006f1e:	2300      	movcc	r3, #0
 8006f20:	4423      	add	r3, r4
 8006f22:	e015      	b.n	8006f50 <rshift+0x68>
 8006f24:	46a1      	mov	r9, r4
 8006f26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f2a:	f1c1 0820 	rsb	r8, r1, #32
 8006f2e:	40cf      	lsrs	r7, r1
 8006f30:	f105 0e04 	add.w	lr, r5, #4
 8006f34:	4576      	cmp	r6, lr
 8006f36:	46f4      	mov	ip, lr
 8006f38:	d816      	bhi.n	8006f68 <rshift+0x80>
 8006f3a:	1a9a      	subs	r2, r3, r2
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	3a04      	subs	r2, #4
 8006f40:	3501      	adds	r5, #1
 8006f42:	42ae      	cmp	r6, r5
 8006f44:	bf38      	it	cc
 8006f46:	2200      	movcc	r2, #0
 8006f48:	18a3      	adds	r3, r4, r2
 8006f4a:	50a7      	str	r7, [r4, r2]
 8006f4c:	b107      	cbz	r7, 8006f50 <rshift+0x68>
 8006f4e:	3304      	adds	r3, #4
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	eba3 0204 	sub.w	r2, r3, r4
 8006f56:	bf08      	it	eq
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f5e:	6102      	str	r2, [r0, #16]
 8006f60:	bf08      	it	eq
 8006f62:	6143      	streq	r3, [r0, #20]
 8006f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f68:	f8dc c000 	ldr.w	ip, [ip]
 8006f6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006f70:	ea4c 0707 	orr.w	r7, ip, r7
 8006f74:	f849 7b04 	str.w	r7, [r9], #4
 8006f78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f7c:	40cf      	lsrs	r7, r1
 8006f7e:	e7d9      	b.n	8006f34 <rshift+0x4c>
 8006f80:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f84:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f88:	e7c2      	b.n	8006f10 <rshift+0x28>
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	e7e0      	b.n	8006f50 <rshift+0x68>

08006f8e <__hexdig_fun>:
 8006f8e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d802      	bhi.n	8006f9c <__hexdig_fun+0xe>
 8006f96:	3820      	subs	r0, #32
 8006f98:	b2c0      	uxtb	r0, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d801      	bhi.n	8006fa8 <__hexdig_fun+0x1a>
 8006fa4:	3847      	subs	r0, #71	@ 0x47
 8006fa6:	e7f7      	b.n	8006f98 <__hexdig_fun+0xa>
 8006fa8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d801      	bhi.n	8006fb4 <__hexdig_fun+0x26>
 8006fb0:	3827      	subs	r0, #39	@ 0x27
 8006fb2:	e7f1      	b.n	8006f98 <__hexdig_fun+0xa>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr

08006fb8 <__gethex>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	468a      	mov	sl, r1
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	9302      	str	r3, [sp, #8]
 8006fc4:	680b      	ldr	r3, [r1, #0]
 8006fc6:	9001      	str	r0, [sp, #4]
 8006fc8:	1c9c      	adds	r4, r3, #2
 8006fca:	46a1      	mov	r9, r4
 8006fcc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006fd0:	2830      	cmp	r0, #48	@ 0x30
 8006fd2:	d0fa      	beq.n	8006fca <__gethex+0x12>
 8006fd4:	eba9 0303 	sub.w	r3, r9, r3
 8006fd8:	f1a3 0b02 	sub.w	fp, r3, #2
 8006fdc:	f7ff ffd7 	bl	8006f8e <__hexdig_fun>
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d168      	bne.n	80070b8 <__gethex+0x100>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4648      	mov	r0, r9
 8006fea:	499f      	ldr	r1, [pc, #636]	@ (8007268 <__gethex+0x2b0>)
 8006fec:	f7ff ff14 	bl	8006e18 <strncmp>
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d167      	bne.n	80070c6 <__gethex+0x10e>
 8006ff6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006ffa:	4626      	mov	r6, r4
 8006ffc:	f7ff ffc7 	bl	8006f8e <__hexdig_fun>
 8007000:	2800      	cmp	r0, #0
 8007002:	d062      	beq.n	80070ca <__gethex+0x112>
 8007004:	4623      	mov	r3, r4
 8007006:	7818      	ldrb	r0, [r3, #0]
 8007008:	4699      	mov	r9, r3
 800700a:	2830      	cmp	r0, #48	@ 0x30
 800700c:	f103 0301 	add.w	r3, r3, #1
 8007010:	d0f9      	beq.n	8007006 <__gethex+0x4e>
 8007012:	f7ff ffbc 	bl	8006f8e <__hexdig_fun>
 8007016:	fab0 f580 	clz	r5, r0
 800701a:	f04f 0b01 	mov.w	fp, #1
 800701e:	096d      	lsrs	r5, r5, #5
 8007020:	464a      	mov	r2, r9
 8007022:	4616      	mov	r6, r2
 8007024:	7830      	ldrb	r0, [r6, #0]
 8007026:	3201      	adds	r2, #1
 8007028:	f7ff ffb1 	bl	8006f8e <__hexdig_fun>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1f8      	bne.n	8007022 <__gethex+0x6a>
 8007030:	2201      	movs	r2, #1
 8007032:	4630      	mov	r0, r6
 8007034:	498c      	ldr	r1, [pc, #560]	@ (8007268 <__gethex+0x2b0>)
 8007036:	f7ff feef 	bl	8006e18 <strncmp>
 800703a:	2800      	cmp	r0, #0
 800703c:	d13f      	bne.n	80070be <__gethex+0x106>
 800703e:	b944      	cbnz	r4, 8007052 <__gethex+0x9a>
 8007040:	1c74      	adds	r4, r6, #1
 8007042:	4622      	mov	r2, r4
 8007044:	4616      	mov	r6, r2
 8007046:	7830      	ldrb	r0, [r6, #0]
 8007048:	3201      	adds	r2, #1
 800704a:	f7ff ffa0 	bl	8006f8e <__hexdig_fun>
 800704e:	2800      	cmp	r0, #0
 8007050:	d1f8      	bne.n	8007044 <__gethex+0x8c>
 8007052:	1ba4      	subs	r4, r4, r6
 8007054:	00a7      	lsls	r7, r4, #2
 8007056:	7833      	ldrb	r3, [r6, #0]
 8007058:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800705c:	2b50      	cmp	r3, #80	@ 0x50
 800705e:	d13e      	bne.n	80070de <__gethex+0x126>
 8007060:	7873      	ldrb	r3, [r6, #1]
 8007062:	2b2b      	cmp	r3, #43	@ 0x2b
 8007064:	d033      	beq.n	80070ce <__gethex+0x116>
 8007066:	2b2d      	cmp	r3, #45	@ 0x2d
 8007068:	d034      	beq.n	80070d4 <__gethex+0x11c>
 800706a:	2400      	movs	r4, #0
 800706c:	1c71      	adds	r1, r6, #1
 800706e:	7808      	ldrb	r0, [r1, #0]
 8007070:	f7ff ff8d 	bl	8006f8e <__hexdig_fun>
 8007074:	1e43      	subs	r3, r0, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b18      	cmp	r3, #24
 800707a:	d830      	bhi.n	80070de <__gethex+0x126>
 800707c:	f1a0 0210 	sub.w	r2, r0, #16
 8007080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007084:	f7ff ff83 	bl	8006f8e <__hexdig_fun>
 8007088:	f100 3cff 	add.w	ip, r0, #4294967295
 800708c:	fa5f fc8c 	uxtb.w	ip, ip
 8007090:	f1bc 0f18 	cmp.w	ip, #24
 8007094:	f04f 030a 	mov.w	r3, #10
 8007098:	d91e      	bls.n	80070d8 <__gethex+0x120>
 800709a:	b104      	cbz	r4, 800709e <__gethex+0xe6>
 800709c:	4252      	negs	r2, r2
 800709e:	4417      	add	r7, r2
 80070a0:	f8ca 1000 	str.w	r1, [sl]
 80070a4:	b1ed      	cbz	r5, 80070e2 <__gethex+0x12a>
 80070a6:	f1bb 0f00 	cmp.w	fp, #0
 80070aa:	bf0c      	ite	eq
 80070ac:	2506      	moveq	r5, #6
 80070ae:	2500      	movne	r5, #0
 80070b0:	4628      	mov	r0, r5
 80070b2:	b005      	add	sp, #20
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	2500      	movs	r5, #0
 80070ba:	462c      	mov	r4, r5
 80070bc:	e7b0      	b.n	8007020 <__gethex+0x68>
 80070be:	2c00      	cmp	r4, #0
 80070c0:	d1c7      	bne.n	8007052 <__gethex+0x9a>
 80070c2:	4627      	mov	r7, r4
 80070c4:	e7c7      	b.n	8007056 <__gethex+0x9e>
 80070c6:	464e      	mov	r6, r9
 80070c8:	462f      	mov	r7, r5
 80070ca:	2501      	movs	r5, #1
 80070cc:	e7c3      	b.n	8007056 <__gethex+0x9e>
 80070ce:	2400      	movs	r4, #0
 80070d0:	1cb1      	adds	r1, r6, #2
 80070d2:	e7cc      	b.n	800706e <__gethex+0xb6>
 80070d4:	2401      	movs	r4, #1
 80070d6:	e7fb      	b.n	80070d0 <__gethex+0x118>
 80070d8:	fb03 0002 	mla	r0, r3, r2, r0
 80070dc:	e7ce      	b.n	800707c <__gethex+0xc4>
 80070de:	4631      	mov	r1, r6
 80070e0:	e7de      	b.n	80070a0 <__gethex+0xe8>
 80070e2:	4629      	mov	r1, r5
 80070e4:	eba6 0309 	sub.w	r3, r6, r9
 80070e8:	3b01      	subs	r3, #1
 80070ea:	2b07      	cmp	r3, #7
 80070ec:	dc0a      	bgt.n	8007104 <__gethex+0x14c>
 80070ee:	9801      	ldr	r0, [sp, #4]
 80070f0:	f7fe f954 	bl	800539c <_Balloc>
 80070f4:	4604      	mov	r4, r0
 80070f6:	b940      	cbnz	r0, 800710a <__gethex+0x152>
 80070f8:	4602      	mov	r2, r0
 80070fa:	21e4      	movs	r1, #228	@ 0xe4
 80070fc:	4b5b      	ldr	r3, [pc, #364]	@ (800726c <__gethex+0x2b4>)
 80070fe:	485c      	ldr	r0, [pc, #368]	@ (8007270 <__gethex+0x2b8>)
 8007100:	f7ff fec0 	bl	8006e84 <__assert_func>
 8007104:	3101      	adds	r1, #1
 8007106:	105b      	asrs	r3, r3, #1
 8007108:	e7ef      	b.n	80070ea <__gethex+0x132>
 800710a:	2300      	movs	r3, #0
 800710c:	f100 0a14 	add.w	sl, r0, #20
 8007110:	4655      	mov	r5, sl
 8007112:	469b      	mov	fp, r3
 8007114:	45b1      	cmp	r9, r6
 8007116:	d337      	bcc.n	8007188 <__gethex+0x1d0>
 8007118:	f845 bb04 	str.w	fp, [r5], #4
 800711c:	eba5 050a 	sub.w	r5, r5, sl
 8007120:	10ad      	asrs	r5, r5, #2
 8007122:	6125      	str	r5, [r4, #16]
 8007124:	4658      	mov	r0, fp
 8007126:	f7fe fa2b 	bl	8005580 <__hi0bits>
 800712a:	016d      	lsls	r5, r5, #5
 800712c:	f8d8 6000 	ldr.w	r6, [r8]
 8007130:	1a2d      	subs	r5, r5, r0
 8007132:	42b5      	cmp	r5, r6
 8007134:	dd54      	ble.n	80071e0 <__gethex+0x228>
 8007136:	1bad      	subs	r5, r5, r6
 8007138:	4629      	mov	r1, r5
 800713a:	4620      	mov	r0, r4
 800713c:	f7fe fdb3 	bl	8005ca6 <__any_on>
 8007140:	4681      	mov	r9, r0
 8007142:	b178      	cbz	r0, 8007164 <__gethex+0x1ac>
 8007144:	f04f 0901 	mov.w	r9, #1
 8007148:	1e6b      	subs	r3, r5, #1
 800714a:	1159      	asrs	r1, r3, #5
 800714c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007150:	f003 021f 	and.w	r2, r3, #31
 8007154:	fa09 f202 	lsl.w	r2, r9, r2
 8007158:	420a      	tst	r2, r1
 800715a:	d003      	beq.n	8007164 <__gethex+0x1ac>
 800715c:	454b      	cmp	r3, r9
 800715e:	dc36      	bgt.n	80071ce <__gethex+0x216>
 8007160:	f04f 0902 	mov.w	r9, #2
 8007164:	4629      	mov	r1, r5
 8007166:	4620      	mov	r0, r4
 8007168:	f7ff febe 	bl	8006ee8 <rshift>
 800716c:	442f      	add	r7, r5
 800716e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007172:	42bb      	cmp	r3, r7
 8007174:	da42      	bge.n	80071fc <__gethex+0x244>
 8007176:	4621      	mov	r1, r4
 8007178:	9801      	ldr	r0, [sp, #4]
 800717a:	f7fe f94f 	bl	800541c <_Bfree>
 800717e:	2300      	movs	r3, #0
 8007180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007182:	25a3      	movs	r5, #163	@ 0xa3
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e793      	b.n	80070b0 <__gethex+0xf8>
 8007188:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800718c:	2a2e      	cmp	r2, #46	@ 0x2e
 800718e:	d012      	beq.n	80071b6 <__gethex+0x1fe>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d104      	bne.n	800719e <__gethex+0x1e6>
 8007194:	f845 bb04 	str.w	fp, [r5], #4
 8007198:	f04f 0b00 	mov.w	fp, #0
 800719c:	465b      	mov	r3, fp
 800719e:	7830      	ldrb	r0, [r6, #0]
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	f7ff fef4 	bl	8006f8e <__hexdig_fun>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	f000 000f 	and.w	r0, r0, #15
 80071ac:	4098      	lsls	r0, r3
 80071ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80071b2:	3304      	adds	r3, #4
 80071b4:	e7ae      	b.n	8007114 <__gethex+0x15c>
 80071b6:	45b1      	cmp	r9, r6
 80071b8:	d8ea      	bhi.n	8007190 <__gethex+0x1d8>
 80071ba:	2201      	movs	r2, #1
 80071bc:	4630      	mov	r0, r6
 80071be:	492a      	ldr	r1, [pc, #168]	@ (8007268 <__gethex+0x2b0>)
 80071c0:	9303      	str	r3, [sp, #12]
 80071c2:	f7ff fe29 	bl	8006e18 <strncmp>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1e1      	bne.n	8007190 <__gethex+0x1d8>
 80071cc:	e7a2      	b.n	8007114 <__gethex+0x15c>
 80071ce:	4620      	mov	r0, r4
 80071d0:	1ea9      	subs	r1, r5, #2
 80071d2:	f7fe fd68 	bl	8005ca6 <__any_on>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0c2      	beq.n	8007160 <__gethex+0x1a8>
 80071da:	f04f 0903 	mov.w	r9, #3
 80071de:	e7c1      	b.n	8007164 <__gethex+0x1ac>
 80071e0:	da09      	bge.n	80071f6 <__gethex+0x23e>
 80071e2:	1b75      	subs	r5, r6, r5
 80071e4:	4621      	mov	r1, r4
 80071e6:	462a      	mov	r2, r5
 80071e8:	9801      	ldr	r0, [sp, #4]
 80071ea:	f7fe fb2d 	bl	8005848 <__lshift>
 80071ee:	4604      	mov	r4, r0
 80071f0:	1b7f      	subs	r7, r7, r5
 80071f2:	f100 0a14 	add.w	sl, r0, #20
 80071f6:	f04f 0900 	mov.w	r9, #0
 80071fa:	e7b8      	b.n	800716e <__gethex+0x1b6>
 80071fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007200:	42bd      	cmp	r5, r7
 8007202:	dd6f      	ble.n	80072e4 <__gethex+0x32c>
 8007204:	1bed      	subs	r5, r5, r7
 8007206:	42ae      	cmp	r6, r5
 8007208:	dc34      	bgt.n	8007274 <__gethex+0x2bc>
 800720a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d022      	beq.n	8007258 <__gethex+0x2a0>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d024      	beq.n	8007260 <__gethex+0x2a8>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d115      	bne.n	8007246 <__gethex+0x28e>
 800721a:	42ae      	cmp	r6, r5
 800721c:	d113      	bne.n	8007246 <__gethex+0x28e>
 800721e:	2e01      	cmp	r6, #1
 8007220:	d10b      	bne.n	800723a <__gethex+0x282>
 8007222:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007226:	9a02      	ldr	r2, [sp, #8]
 8007228:	2562      	movs	r5, #98	@ 0x62
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	2301      	movs	r3, #1
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	f8ca 3000 	str.w	r3, [sl]
 8007234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007236:	601c      	str	r4, [r3, #0]
 8007238:	e73a      	b.n	80070b0 <__gethex+0xf8>
 800723a:	4620      	mov	r0, r4
 800723c:	1e71      	subs	r1, r6, #1
 800723e:	f7fe fd32 	bl	8005ca6 <__any_on>
 8007242:	2800      	cmp	r0, #0
 8007244:	d1ed      	bne.n	8007222 <__gethex+0x26a>
 8007246:	4621      	mov	r1, r4
 8007248:	9801      	ldr	r0, [sp, #4]
 800724a:	f7fe f8e7 	bl	800541c <_Bfree>
 800724e:	2300      	movs	r3, #0
 8007250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007252:	2550      	movs	r5, #80	@ 0x50
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e72b      	b.n	80070b0 <__gethex+0xf8>
 8007258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f3      	bne.n	8007246 <__gethex+0x28e>
 800725e:	e7e0      	b.n	8007222 <__gethex+0x26a>
 8007260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1dd      	bne.n	8007222 <__gethex+0x26a>
 8007266:	e7ee      	b.n	8007246 <__gethex+0x28e>
 8007268:	08007df8 	.word	0x08007df8
 800726c:	08007c8b 	.word	0x08007c8b
 8007270:	08007fa6 	.word	0x08007fa6
 8007274:	1e6f      	subs	r7, r5, #1
 8007276:	f1b9 0f00 	cmp.w	r9, #0
 800727a:	d130      	bne.n	80072de <__gethex+0x326>
 800727c:	b127      	cbz	r7, 8007288 <__gethex+0x2d0>
 800727e:	4639      	mov	r1, r7
 8007280:	4620      	mov	r0, r4
 8007282:	f7fe fd10 	bl	8005ca6 <__any_on>
 8007286:	4681      	mov	r9, r0
 8007288:	2301      	movs	r3, #1
 800728a:	4629      	mov	r1, r5
 800728c:	1b76      	subs	r6, r6, r5
 800728e:	2502      	movs	r5, #2
 8007290:	117a      	asrs	r2, r7, #5
 8007292:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007296:	f007 071f 	and.w	r7, r7, #31
 800729a:	40bb      	lsls	r3, r7
 800729c:	4213      	tst	r3, r2
 800729e:	4620      	mov	r0, r4
 80072a0:	bf18      	it	ne
 80072a2:	f049 0902 	orrne.w	r9, r9, #2
 80072a6:	f7ff fe1f 	bl	8006ee8 <rshift>
 80072aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80072ae:	f1b9 0f00 	cmp.w	r9, #0
 80072b2:	d047      	beq.n	8007344 <__gethex+0x38c>
 80072b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d015      	beq.n	80072e8 <__gethex+0x330>
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d017      	beq.n	80072f0 <__gethex+0x338>
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d109      	bne.n	80072d8 <__gethex+0x320>
 80072c4:	f019 0f02 	tst.w	r9, #2
 80072c8:	d006      	beq.n	80072d8 <__gethex+0x320>
 80072ca:	f8da 3000 	ldr.w	r3, [sl]
 80072ce:	ea49 0903 	orr.w	r9, r9, r3
 80072d2:	f019 0f01 	tst.w	r9, #1
 80072d6:	d10e      	bne.n	80072f6 <__gethex+0x33e>
 80072d8:	f045 0510 	orr.w	r5, r5, #16
 80072dc:	e032      	b.n	8007344 <__gethex+0x38c>
 80072de:	f04f 0901 	mov.w	r9, #1
 80072e2:	e7d1      	b.n	8007288 <__gethex+0x2d0>
 80072e4:	2501      	movs	r5, #1
 80072e6:	e7e2      	b.n	80072ae <__gethex+0x2f6>
 80072e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ea:	f1c3 0301 	rsb	r3, r3, #1
 80072ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <__gethex+0x320>
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80072fe:	f104 0314 	add.w	r3, r4, #20
 8007302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800730a:	4618      	mov	r0, r3
 800730c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007310:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007314:	d01b      	beq.n	800734e <__gethex+0x396>
 8007316:	3201      	adds	r2, #1
 8007318:	6002      	str	r2, [r0, #0]
 800731a:	2d02      	cmp	r5, #2
 800731c:	f104 0314 	add.w	r3, r4, #20
 8007320:	d13c      	bne.n	800739c <__gethex+0x3e4>
 8007322:	f8d8 2000 	ldr.w	r2, [r8]
 8007326:	3a01      	subs	r2, #1
 8007328:	42b2      	cmp	r2, r6
 800732a:	d109      	bne.n	8007340 <__gethex+0x388>
 800732c:	2201      	movs	r2, #1
 800732e:	1171      	asrs	r1, r6, #5
 8007330:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007334:	f006 061f 	and.w	r6, r6, #31
 8007338:	fa02 f606 	lsl.w	r6, r2, r6
 800733c:	421e      	tst	r6, r3
 800733e:	d13a      	bne.n	80073b6 <__gethex+0x3fe>
 8007340:	f045 0520 	orr.w	r5, r5, #32
 8007344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007346:	601c      	str	r4, [r3, #0]
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	601f      	str	r7, [r3, #0]
 800734c:	e6b0      	b.n	80070b0 <__gethex+0xf8>
 800734e:	4299      	cmp	r1, r3
 8007350:	f843 cc04 	str.w	ip, [r3, #-4]
 8007354:	d8d9      	bhi.n	800730a <__gethex+0x352>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	459b      	cmp	fp, r3
 800735a:	db17      	blt.n	800738c <__gethex+0x3d4>
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	9801      	ldr	r0, [sp, #4]
 8007360:	3101      	adds	r1, #1
 8007362:	f7fe f81b 	bl	800539c <_Balloc>
 8007366:	4681      	mov	r9, r0
 8007368:	b918      	cbnz	r0, 8007372 <__gethex+0x3ba>
 800736a:	4602      	mov	r2, r0
 800736c:	2184      	movs	r1, #132	@ 0x84
 800736e:	4b19      	ldr	r3, [pc, #100]	@ (80073d4 <__gethex+0x41c>)
 8007370:	e6c5      	b.n	80070fe <__gethex+0x146>
 8007372:	6922      	ldr	r2, [r4, #16]
 8007374:	f104 010c 	add.w	r1, r4, #12
 8007378:	3202      	adds	r2, #2
 800737a:	0092      	lsls	r2, r2, #2
 800737c:	300c      	adds	r0, #12
 800737e:	f7ff fd6d 	bl	8006e5c <memcpy>
 8007382:	4621      	mov	r1, r4
 8007384:	9801      	ldr	r0, [sp, #4]
 8007386:	f7fe f849 	bl	800541c <_Bfree>
 800738a:	464c      	mov	r4, r9
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	6122      	str	r2, [r4, #16]
 8007392:	2201      	movs	r2, #1
 8007394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007398:	615a      	str	r2, [r3, #20]
 800739a:	e7be      	b.n	800731a <__gethex+0x362>
 800739c:	6922      	ldr	r2, [r4, #16]
 800739e:	455a      	cmp	r2, fp
 80073a0:	dd0b      	ble.n	80073ba <__gethex+0x402>
 80073a2:	2101      	movs	r1, #1
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7ff fd9f 	bl	8006ee8 <rshift>
 80073aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073ae:	3701      	adds	r7, #1
 80073b0:	42bb      	cmp	r3, r7
 80073b2:	f6ff aee0 	blt.w	8007176 <__gethex+0x1be>
 80073b6:	2501      	movs	r5, #1
 80073b8:	e7c2      	b.n	8007340 <__gethex+0x388>
 80073ba:	f016 061f 	ands.w	r6, r6, #31
 80073be:	d0fa      	beq.n	80073b6 <__gethex+0x3fe>
 80073c0:	4453      	add	r3, sl
 80073c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80073c6:	f7fe f8db 	bl	8005580 <__hi0bits>
 80073ca:	f1c6 0620 	rsb	r6, r6, #32
 80073ce:	42b0      	cmp	r0, r6
 80073d0:	dbe7      	blt.n	80073a2 <__gethex+0x3ea>
 80073d2:	e7f0      	b.n	80073b6 <__gethex+0x3fe>
 80073d4:	08007c8b 	.word	0x08007c8b

080073d8 <L_shift>:
 80073d8:	f1c2 0208 	rsb	r2, r2, #8
 80073dc:	0092      	lsls	r2, r2, #2
 80073de:	b570      	push	{r4, r5, r6, lr}
 80073e0:	f1c2 0620 	rsb	r6, r2, #32
 80073e4:	6843      	ldr	r3, [r0, #4]
 80073e6:	6804      	ldr	r4, [r0, #0]
 80073e8:	fa03 f506 	lsl.w	r5, r3, r6
 80073ec:	432c      	orrs	r4, r5
 80073ee:	40d3      	lsrs	r3, r2
 80073f0:	6004      	str	r4, [r0, #0]
 80073f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80073f6:	4288      	cmp	r0, r1
 80073f8:	d3f4      	bcc.n	80073e4 <L_shift+0xc>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}

080073fc <__match>:
 80073fc:	b530      	push	{r4, r5, lr}
 80073fe:	6803      	ldr	r3, [r0, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007406:	b914      	cbnz	r4, 800740e <__match+0x12>
 8007408:	6003      	str	r3, [r0, #0]
 800740a:	2001      	movs	r0, #1
 800740c:	bd30      	pop	{r4, r5, pc}
 800740e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007412:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007416:	2d19      	cmp	r5, #25
 8007418:	bf98      	it	ls
 800741a:	3220      	addls	r2, #32
 800741c:	42a2      	cmp	r2, r4
 800741e:	d0f0      	beq.n	8007402 <__match+0x6>
 8007420:	2000      	movs	r0, #0
 8007422:	e7f3      	b.n	800740c <__match+0x10>

08007424 <__hexnan>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	2500      	movs	r5, #0
 800742a:	680b      	ldr	r3, [r1, #0]
 800742c:	4682      	mov	sl, r0
 800742e:	115e      	asrs	r6, r3, #5
 8007430:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007434:	f013 031f 	ands.w	r3, r3, #31
 8007438:	bf18      	it	ne
 800743a:	3604      	addne	r6, #4
 800743c:	1f37      	subs	r7, r6, #4
 800743e:	4690      	mov	r8, r2
 8007440:	46b9      	mov	r9, r7
 8007442:	463c      	mov	r4, r7
 8007444:	46ab      	mov	fp, r5
 8007446:	b087      	sub	sp, #28
 8007448:	6801      	ldr	r1, [r0, #0]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007450:	9502      	str	r5, [sp, #8]
 8007452:	784a      	ldrb	r2, [r1, #1]
 8007454:	1c4b      	adds	r3, r1, #1
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	b342      	cbz	r2, 80074ac <__hexnan+0x88>
 800745a:	4610      	mov	r0, r2
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	9204      	str	r2, [sp, #16]
 8007460:	f7ff fd95 	bl	8006f8e <__hexdig_fun>
 8007464:	2800      	cmp	r0, #0
 8007466:	d151      	bne.n	800750c <__hexnan+0xe8>
 8007468:	9a04      	ldr	r2, [sp, #16]
 800746a:	9905      	ldr	r1, [sp, #20]
 800746c:	2a20      	cmp	r2, #32
 800746e:	d818      	bhi.n	80074a2 <__hexnan+0x7e>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	459b      	cmp	fp, r3
 8007474:	dd13      	ble.n	800749e <__hexnan+0x7a>
 8007476:	454c      	cmp	r4, r9
 8007478:	d206      	bcs.n	8007488 <__hexnan+0x64>
 800747a:	2d07      	cmp	r5, #7
 800747c:	dc04      	bgt.n	8007488 <__hexnan+0x64>
 800747e:	462a      	mov	r2, r5
 8007480:	4649      	mov	r1, r9
 8007482:	4620      	mov	r0, r4
 8007484:	f7ff ffa8 	bl	80073d8 <L_shift>
 8007488:	4544      	cmp	r4, r8
 800748a:	d952      	bls.n	8007532 <__hexnan+0x10e>
 800748c:	2300      	movs	r3, #0
 800748e:	f1a4 0904 	sub.w	r9, r4, #4
 8007492:	f844 3c04 	str.w	r3, [r4, #-4]
 8007496:	461d      	mov	r5, r3
 8007498:	464c      	mov	r4, r9
 800749a:	f8cd b008 	str.w	fp, [sp, #8]
 800749e:	9903      	ldr	r1, [sp, #12]
 80074a0:	e7d7      	b.n	8007452 <__hexnan+0x2e>
 80074a2:	2a29      	cmp	r2, #41	@ 0x29
 80074a4:	d157      	bne.n	8007556 <__hexnan+0x132>
 80074a6:	3102      	adds	r1, #2
 80074a8:	f8ca 1000 	str.w	r1, [sl]
 80074ac:	f1bb 0f00 	cmp.w	fp, #0
 80074b0:	d051      	beq.n	8007556 <__hexnan+0x132>
 80074b2:	454c      	cmp	r4, r9
 80074b4:	d206      	bcs.n	80074c4 <__hexnan+0xa0>
 80074b6:	2d07      	cmp	r5, #7
 80074b8:	dc04      	bgt.n	80074c4 <__hexnan+0xa0>
 80074ba:	462a      	mov	r2, r5
 80074bc:	4649      	mov	r1, r9
 80074be:	4620      	mov	r0, r4
 80074c0:	f7ff ff8a 	bl	80073d8 <L_shift>
 80074c4:	4544      	cmp	r4, r8
 80074c6:	d936      	bls.n	8007536 <__hexnan+0x112>
 80074c8:	4623      	mov	r3, r4
 80074ca:	f1a8 0204 	sub.w	r2, r8, #4
 80074ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80074d2:	429f      	cmp	r7, r3
 80074d4:	f842 1f04 	str.w	r1, [r2, #4]!
 80074d8:	d2f9      	bcs.n	80074ce <__hexnan+0xaa>
 80074da:	1b3b      	subs	r3, r7, r4
 80074dc:	f023 0303 	bic.w	r3, r3, #3
 80074e0:	3304      	adds	r3, #4
 80074e2:	3401      	adds	r4, #1
 80074e4:	3e03      	subs	r6, #3
 80074e6:	42b4      	cmp	r4, r6
 80074e8:	bf88      	it	hi
 80074ea:	2304      	movhi	r3, #4
 80074ec:	2200      	movs	r2, #0
 80074ee:	4443      	add	r3, r8
 80074f0:	f843 2b04 	str.w	r2, [r3], #4
 80074f4:	429f      	cmp	r7, r3
 80074f6:	d2fb      	bcs.n	80074f0 <__hexnan+0xcc>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	b91b      	cbnz	r3, 8007504 <__hexnan+0xe0>
 80074fc:	4547      	cmp	r7, r8
 80074fe:	d128      	bne.n	8007552 <__hexnan+0x12e>
 8007500:	2301      	movs	r3, #1
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	2005      	movs	r0, #5
 8007506:	b007      	add	sp, #28
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	3501      	adds	r5, #1
 800750e:	2d08      	cmp	r5, #8
 8007510:	f10b 0b01 	add.w	fp, fp, #1
 8007514:	dd06      	ble.n	8007524 <__hexnan+0x100>
 8007516:	4544      	cmp	r4, r8
 8007518:	d9c1      	bls.n	800749e <__hexnan+0x7a>
 800751a:	2300      	movs	r3, #0
 800751c:	2501      	movs	r5, #1
 800751e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007522:	3c04      	subs	r4, #4
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	f000 000f 	and.w	r0, r0, #15
 800752a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800752e:	6020      	str	r0, [r4, #0]
 8007530:	e7b5      	b.n	800749e <__hexnan+0x7a>
 8007532:	2508      	movs	r5, #8
 8007534:	e7b3      	b.n	800749e <__hexnan+0x7a>
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0dd      	beq.n	80074f8 <__hexnan+0xd4>
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	f1c3 0320 	rsb	r3, r3, #32
 8007544:	40da      	lsrs	r2, r3
 8007546:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800754a:	4013      	ands	r3, r2
 800754c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007550:	e7d2      	b.n	80074f8 <__hexnan+0xd4>
 8007552:	3f04      	subs	r7, #4
 8007554:	e7d0      	b.n	80074f8 <__hexnan+0xd4>
 8007556:	2004      	movs	r0, #4
 8007558:	e7d5      	b.n	8007506 <__hexnan+0xe2>

0800755a <__ascii_mbtowc>:
 800755a:	b082      	sub	sp, #8
 800755c:	b901      	cbnz	r1, 8007560 <__ascii_mbtowc+0x6>
 800755e:	a901      	add	r1, sp, #4
 8007560:	b142      	cbz	r2, 8007574 <__ascii_mbtowc+0x1a>
 8007562:	b14b      	cbz	r3, 8007578 <__ascii_mbtowc+0x1e>
 8007564:	7813      	ldrb	r3, [r2, #0]
 8007566:	600b      	str	r3, [r1, #0]
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	1e10      	subs	r0, r2, #0
 800756c:	bf18      	it	ne
 800756e:	2001      	movne	r0, #1
 8007570:	b002      	add	sp, #8
 8007572:	4770      	bx	lr
 8007574:	4610      	mov	r0, r2
 8007576:	e7fb      	b.n	8007570 <__ascii_mbtowc+0x16>
 8007578:	f06f 0001 	mvn.w	r0, #1
 800757c:	e7f8      	b.n	8007570 <__ascii_mbtowc+0x16>

0800757e <_realloc_r>:
 800757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007582:	4680      	mov	r8, r0
 8007584:	4615      	mov	r5, r2
 8007586:	460c      	mov	r4, r1
 8007588:	b921      	cbnz	r1, 8007594 <_realloc_r+0x16>
 800758a:	4611      	mov	r1, r2
 800758c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007590:	f7fd be78 	b.w	8005284 <_malloc_r>
 8007594:	b92a      	cbnz	r2, 80075a2 <_realloc_r+0x24>
 8007596:	f7fd fe03 	bl	80051a0 <_free_r>
 800759a:	2400      	movs	r4, #0
 800759c:	4620      	mov	r0, r4
 800759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a2:	f000 f840 	bl	8007626 <_malloc_usable_size_r>
 80075a6:	4285      	cmp	r5, r0
 80075a8:	4606      	mov	r6, r0
 80075aa:	d802      	bhi.n	80075b2 <_realloc_r+0x34>
 80075ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075b0:	d8f4      	bhi.n	800759c <_realloc_r+0x1e>
 80075b2:	4629      	mov	r1, r5
 80075b4:	4640      	mov	r0, r8
 80075b6:	f7fd fe65 	bl	8005284 <_malloc_r>
 80075ba:	4607      	mov	r7, r0
 80075bc:	2800      	cmp	r0, #0
 80075be:	d0ec      	beq.n	800759a <_realloc_r+0x1c>
 80075c0:	42b5      	cmp	r5, r6
 80075c2:	462a      	mov	r2, r5
 80075c4:	4621      	mov	r1, r4
 80075c6:	bf28      	it	cs
 80075c8:	4632      	movcs	r2, r6
 80075ca:	f7ff fc47 	bl	8006e5c <memcpy>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4640      	mov	r0, r8
 80075d2:	f7fd fde5 	bl	80051a0 <_free_r>
 80075d6:	463c      	mov	r4, r7
 80075d8:	e7e0      	b.n	800759c <_realloc_r+0x1e>

080075da <__ascii_wctomb>:
 80075da:	4603      	mov	r3, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	b141      	cbz	r1, 80075f2 <__ascii_wctomb+0x18>
 80075e0:	2aff      	cmp	r2, #255	@ 0xff
 80075e2:	d904      	bls.n	80075ee <__ascii_wctomb+0x14>
 80075e4:	228a      	movs	r2, #138	@ 0x8a
 80075e6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	4770      	bx	lr
 80075ee:	2001      	movs	r0, #1
 80075f0:	700a      	strb	r2, [r1, #0]
 80075f2:	4770      	bx	lr

080075f4 <fiprintf>:
 80075f4:	b40e      	push	{r1, r2, r3}
 80075f6:	b503      	push	{r0, r1, lr}
 80075f8:	4601      	mov	r1, r0
 80075fa:	ab03      	add	r3, sp, #12
 80075fc:	4805      	ldr	r0, [pc, #20]	@ (8007614 <fiprintf+0x20>)
 80075fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	f000 f83d 	bl	8007684 <_vfiprintf_r>
 800760a:	b002      	add	sp, #8
 800760c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007610:	b003      	add	sp, #12
 8007612:	4770      	bx	lr
 8007614:	20000018 	.word	0x20000018

08007618 <abort>:
 8007618:	2006      	movs	r0, #6
 800761a:	b508      	push	{r3, lr}
 800761c:	f000 fa06 	bl	8007a2c <raise>
 8007620:	2001      	movs	r0, #1
 8007622:	f7f9 fea8 	bl	8001376 <_exit>

08007626 <_malloc_usable_size_r>:
 8007626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762a:	1f18      	subs	r0, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbc      	itt	lt
 8007630:	580b      	ldrlt	r3, [r1, r0]
 8007632:	18c0      	addlt	r0, r0, r3
 8007634:	4770      	bx	lr

08007636 <__sfputc_r>:
 8007636:	6893      	ldr	r3, [r2, #8]
 8007638:	b410      	push	{r4}
 800763a:	3b01      	subs	r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	6093      	str	r3, [r2, #8]
 8007640:	da07      	bge.n	8007652 <__sfputc_r+0x1c>
 8007642:	6994      	ldr	r4, [r2, #24]
 8007644:	42a3      	cmp	r3, r4
 8007646:	db01      	blt.n	800764c <__sfputc_r+0x16>
 8007648:	290a      	cmp	r1, #10
 800764a:	d102      	bne.n	8007652 <__sfputc_r+0x1c>
 800764c:	bc10      	pop	{r4}
 800764e:	f000 b931 	b.w	80078b4 <__swbuf_r>
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	1c58      	adds	r0, r3, #1
 8007656:	6010      	str	r0, [r2, #0]
 8007658:	7019      	strb	r1, [r3, #0]
 800765a:	4608      	mov	r0, r1
 800765c:	bc10      	pop	{r4}
 800765e:	4770      	bx	lr

08007660 <__sfputs_r>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	4614      	mov	r4, r2
 8007668:	18d5      	adds	r5, r2, r3
 800766a:	42ac      	cmp	r4, r5
 800766c:	d101      	bne.n	8007672 <__sfputs_r+0x12>
 800766e:	2000      	movs	r0, #0
 8007670:	e007      	b.n	8007682 <__sfputs_r+0x22>
 8007672:	463a      	mov	r2, r7
 8007674:	4630      	mov	r0, r6
 8007676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767a:	f7ff ffdc 	bl	8007636 <__sfputc_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d1f3      	bne.n	800766a <__sfputs_r+0xa>
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007684 <_vfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	460d      	mov	r5, r1
 800768a:	4614      	mov	r4, r2
 800768c:	4698      	mov	r8, r3
 800768e:	4606      	mov	r6, r0
 8007690:	b09d      	sub	sp, #116	@ 0x74
 8007692:	b118      	cbz	r0, 800769c <_vfiprintf_r+0x18>
 8007694:	6a03      	ldr	r3, [r0, #32]
 8007696:	b90b      	cbnz	r3, 800769c <_vfiprintf_r+0x18>
 8007698:	f7fc fe04 	bl	80042a4 <__sinit>
 800769c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076aa:	f7fc ff12 	bl	80044d2 <__retarget_lock_acquire_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	d501      	bpl.n	80076b8 <_vfiprintf_r+0x34>
 80076b4:	692b      	ldr	r3, [r5, #16]
 80076b6:	b99b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x5c>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 f938 	bl	8007930 <__swsetup_r>
 80076c0:	b170      	cbz	r0, 80076e0 <_vfiprintf_r+0x5c>
 80076c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c4:	07dc      	lsls	r4, r3, #31
 80076c6:	d504      	bpl.n	80076d2 <_vfiprintf_r+0x4e>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b01d      	add	sp, #116	@ 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	0598      	lsls	r0, r3, #22
 80076d6:	d4f7      	bmi.n	80076c8 <_vfiprintf_r+0x44>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7fc fefb 	bl	80044d4 <__retarget_lock_release_recursive>
 80076de:	e7f3      	b.n	80076c8 <_vfiprintf_r+0x44>
 80076e0:	2300      	movs	r3, #0
 80076e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e4:	2320      	movs	r3, #32
 80076e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ea:	2330      	movs	r3, #48	@ 0x30
 80076ec:	f04f 0901 	mov.w	r9, #1
 80076f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80078a0 <_vfiprintf_r+0x21c>
 80076f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076fc:	4623      	mov	r3, r4
 80076fe:	469a      	mov	sl, r3
 8007700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007704:	b10a      	cbz	r2, 800770a <_vfiprintf_r+0x86>
 8007706:	2a25      	cmp	r2, #37	@ 0x25
 8007708:	d1f9      	bne.n	80076fe <_vfiprintf_r+0x7a>
 800770a:	ebba 0b04 	subs.w	fp, sl, r4
 800770e:	d00b      	beq.n	8007728 <_vfiprintf_r+0xa4>
 8007710:	465b      	mov	r3, fp
 8007712:	4622      	mov	r2, r4
 8007714:	4629      	mov	r1, r5
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ffa2 	bl	8007660 <__sfputs_r>
 800771c:	3001      	adds	r0, #1
 800771e:	f000 80a7 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007724:	445a      	add	r2, fp
 8007726:	9209      	str	r2, [sp, #36]	@ 0x24
 8007728:	f89a 3000 	ldrb.w	r3, [sl]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 809f 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007732:	2300      	movs	r3, #0
 8007734:	f04f 32ff 	mov.w	r2, #4294967295
 8007738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773c:	f10a 0a01 	add.w	sl, sl, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007748:	931a      	str	r3, [sp, #104]	@ 0x68
 800774a:	4654      	mov	r4, sl
 800774c:	2205      	movs	r2, #5
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	4853      	ldr	r0, [pc, #332]	@ (80078a0 <_vfiprintf_r+0x21c>)
 8007754:	f7fc febf 	bl	80044d6 <memchr>
 8007758:	9a04      	ldr	r2, [sp, #16]
 800775a:	b9d8      	cbnz	r0, 8007794 <_vfiprintf_r+0x110>
 800775c:	06d1      	lsls	r1, r2, #27
 800775e:	bf44      	itt	mi
 8007760:	2320      	movmi	r3, #32
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007766:	0713      	lsls	r3, r2, #28
 8007768:	bf44      	itt	mi
 800776a:	232b      	movmi	r3, #43	@ 0x2b
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b2a      	cmp	r3, #42	@ 0x2a
 8007776:	d015      	beq.n	80077a4 <_vfiprintf_r+0x120>
 8007778:	4654      	mov	r4, sl
 800777a:	2000      	movs	r0, #0
 800777c:	f04f 0c0a 	mov.w	ip, #10
 8007780:	9a07      	ldr	r2, [sp, #28]
 8007782:	4621      	mov	r1, r4
 8007784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007788:	3b30      	subs	r3, #48	@ 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d94b      	bls.n	8007826 <_vfiprintf_r+0x1a2>
 800778e:	b1b0      	cbz	r0, 80077be <_vfiprintf_r+0x13a>
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	e014      	b.n	80077be <_vfiprintf_r+0x13a>
 8007794:	eba0 0308 	sub.w	r3, r0, r8
 8007798:	fa09 f303 	lsl.w	r3, r9, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	46a2      	mov	sl, r4
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	e7d2      	b.n	800774a <_vfiprintf_r+0xc6>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	1d19      	adds	r1, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbb      	ittet	lt
 80077b0:	425b      	neglt	r3, r3
 80077b2:	f042 0202 	orrlt.w	r2, r2, #2
 80077b6:	9307      	strge	r3, [sp, #28]
 80077b8:	9307      	strlt	r3, [sp, #28]
 80077ba:	bfb8      	it	lt
 80077bc:	9204      	strlt	r2, [sp, #16]
 80077be:	7823      	ldrb	r3, [r4, #0]
 80077c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077c2:	d10a      	bne.n	80077da <_vfiprintf_r+0x156>
 80077c4:	7863      	ldrb	r3, [r4, #1]
 80077c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c8:	d132      	bne.n	8007830 <_vfiprintf_r+0x1ac>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	3402      	adds	r4, #2
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	9203      	str	r2, [sp, #12]
 80077d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078a4 <_vfiprintf_r+0x220>
 80077de:	2203      	movs	r2, #3
 80077e0:	4650      	mov	r0, sl
 80077e2:	7821      	ldrb	r1, [r4, #0]
 80077e4:	f7fc fe77 	bl	80044d6 <memchr>
 80077e8:	b138      	cbz	r0, 80077fa <_vfiprintf_r+0x176>
 80077ea:	2240      	movs	r2, #64	@ 0x40
 80077ec:	9b04      	ldr	r3, [sp, #16]
 80077ee:	eba0 000a 	sub.w	r0, r0, sl
 80077f2:	4082      	lsls	r2, r0
 80077f4:	4313      	orrs	r3, r2
 80077f6:	3401      	adds	r4, #1
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fe:	2206      	movs	r2, #6
 8007800:	4829      	ldr	r0, [pc, #164]	@ (80078a8 <_vfiprintf_r+0x224>)
 8007802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007806:	f7fc fe66 	bl	80044d6 <memchr>
 800780a:	2800      	cmp	r0, #0
 800780c:	d03f      	beq.n	800788e <_vfiprintf_r+0x20a>
 800780e:	4b27      	ldr	r3, [pc, #156]	@ (80078ac <_vfiprintf_r+0x228>)
 8007810:	bb1b      	cbnz	r3, 800785a <_vfiprintf_r+0x1d6>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	3307      	adds	r3, #7
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	3308      	adds	r3, #8
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	443b      	add	r3, r7
 8007822:	9309      	str	r3, [sp, #36]	@ 0x24
 8007824:	e76a      	b.n	80076fc <_vfiprintf_r+0x78>
 8007826:	460c      	mov	r4, r1
 8007828:	2001      	movs	r0, #1
 800782a:	fb0c 3202 	mla	r2, ip, r2, r3
 800782e:	e7a8      	b.n	8007782 <_vfiprintf_r+0xfe>
 8007830:	2300      	movs	r3, #0
 8007832:	f04f 0c0a 	mov.w	ip, #10
 8007836:	4619      	mov	r1, r3
 8007838:	3401      	adds	r4, #1
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	4620      	mov	r0, r4
 800783e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007842:	3a30      	subs	r2, #48	@ 0x30
 8007844:	2a09      	cmp	r2, #9
 8007846:	d903      	bls.n	8007850 <_vfiprintf_r+0x1cc>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0c6      	beq.n	80077da <_vfiprintf_r+0x156>
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	e7c4      	b.n	80077da <_vfiprintf_r+0x156>
 8007850:	4604      	mov	r4, r0
 8007852:	2301      	movs	r3, #1
 8007854:	fb0c 2101 	mla	r1, ip, r1, r2
 8007858:	e7f0      	b.n	800783c <_vfiprintf_r+0x1b8>
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4630      	mov	r0, r6
 8007862:	4b13      	ldr	r3, [pc, #76]	@ (80078b0 <_vfiprintf_r+0x22c>)
 8007864:	a904      	add	r1, sp, #16
 8007866:	f7fb fec3 	bl	80035f0 <_printf_float>
 800786a:	4607      	mov	r7, r0
 800786c:	1c78      	adds	r0, r7, #1
 800786e:	d1d6      	bne.n	800781e <_vfiprintf_r+0x19a>
 8007870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007872:	07d9      	lsls	r1, r3, #31
 8007874:	d405      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	059a      	lsls	r2, r3, #22
 800787a:	d402      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 800787c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800787e:	f7fc fe29 	bl	80044d4 <__retarget_lock_release_recursive>
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	065b      	lsls	r3, r3, #25
 8007886:	f53f af1f 	bmi.w	80076c8 <_vfiprintf_r+0x44>
 800788a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800788c:	e71e      	b.n	80076cc <_vfiprintf_r+0x48>
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4630      	mov	r0, r6
 8007896:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <_vfiprintf_r+0x22c>)
 8007898:	a904      	add	r1, sp, #16
 800789a:	f7fc f947 	bl	8003b2c <_printf_i>
 800789e:	e7e4      	b.n	800786a <_vfiprintf_r+0x1e6>
 80078a0:	08007f51 	.word	0x08007f51
 80078a4:	08007f57 	.word	0x08007f57
 80078a8:	08007f5b 	.word	0x08007f5b
 80078ac:	080035f1 	.word	0x080035f1
 80078b0:	08007661 	.word	0x08007661

080078b4 <__swbuf_r>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	460e      	mov	r6, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	4605      	mov	r5, r0
 80078bc:	b118      	cbz	r0, 80078c6 <__swbuf_r+0x12>
 80078be:	6a03      	ldr	r3, [r0, #32]
 80078c0:	b90b      	cbnz	r3, 80078c6 <__swbuf_r+0x12>
 80078c2:	f7fc fcef 	bl	80042a4 <__sinit>
 80078c6:	69a3      	ldr	r3, [r4, #24]
 80078c8:	60a3      	str	r3, [r4, #8]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	071a      	lsls	r2, r3, #28
 80078ce:	d501      	bpl.n	80078d4 <__swbuf_r+0x20>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	b943      	cbnz	r3, 80078e6 <__swbuf_r+0x32>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f82a 	bl	8007930 <__swsetup_r>
 80078dc:	b118      	cbz	r0, 80078e6 <__swbuf_r+0x32>
 80078de:	f04f 37ff 	mov.w	r7, #4294967295
 80078e2:	4638      	mov	r0, r7
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	b2f6      	uxtb	r6, r6
 80078ec:	1a98      	subs	r0, r3, r2
 80078ee:	6963      	ldr	r3, [r4, #20]
 80078f0:	4637      	mov	r7, r6
 80078f2:	4283      	cmp	r3, r0
 80078f4:	dc05      	bgt.n	8007902 <__swbuf_r+0x4e>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7ff fa4b 	bl	8006d94 <_fflush_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d1ed      	bne.n	80078de <__swbuf_r+0x2a>
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	60a3      	str	r3, [r4, #8]
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	701e      	strb	r6, [r3, #0]
 8007910:	6962      	ldr	r2, [r4, #20]
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	429a      	cmp	r2, r3
 8007916:	d004      	beq.n	8007922 <__swbuf_r+0x6e>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	07db      	lsls	r3, r3, #31
 800791c:	d5e1      	bpl.n	80078e2 <__swbuf_r+0x2e>
 800791e:	2e0a      	cmp	r6, #10
 8007920:	d1df      	bne.n	80078e2 <__swbuf_r+0x2e>
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f7ff fa35 	bl	8006d94 <_fflush_r>
 800792a:	2800      	cmp	r0, #0
 800792c:	d0d9      	beq.n	80078e2 <__swbuf_r+0x2e>
 800792e:	e7d6      	b.n	80078de <__swbuf_r+0x2a>

08007930 <__swsetup_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4b29      	ldr	r3, [pc, #164]	@ (80079d8 <__swsetup_r+0xa8>)
 8007934:	4605      	mov	r5, r0
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	460c      	mov	r4, r1
 800793a:	b118      	cbz	r0, 8007944 <__swsetup_r+0x14>
 800793c:	6a03      	ldr	r3, [r0, #32]
 800793e:	b90b      	cbnz	r3, 8007944 <__swsetup_r+0x14>
 8007940:	f7fc fcb0 	bl	80042a4 <__sinit>
 8007944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007948:	0719      	lsls	r1, r3, #28
 800794a:	d422      	bmi.n	8007992 <__swsetup_r+0x62>
 800794c:	06da      	lsls	r2, r3, #27
 800794e:	d407      	bmi.n	8007960 <__swsetup_r+0x30>
 8007950:	2209      	movs	r2, #9
 8007952:	602a      	str	r2, [r5, #0]
 8007954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	e033      	b.n	80079c8 <__swsetup_r+0x98>
 8007960:	0758      	lsls	r0, r3, #29
 8007962:	d512      	bpl.n	800798a <__swsetup_r+0x5a>
 8007964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007966:	b141      	cbz	r1, 800797a <__swsetup_r+0x4a>
 8007968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <__swsetup_r+0x46>
 8007970:	4628      	mov	r0, r5
 8007972:	f7fd fc15 	bl	80051a0 <_free_r>
 8007976:	2300      	movs	r3, #0
 8007978:	6363      	str	r3, [r4, #52]	@ 0x34
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	2300      	movs	r3, #0
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	6923      	ldr	r3, [r4, #16]
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f043 0308 	orr.w	r3, r3, #8
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	b94b      	cbnz	r3, 80079aa <__swsetup_r+0x7a>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800799c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a0:	d003      	beq.n	80079aa <__swsetup_r+0x7a>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f882 	bl	8007aae <__smakebuf_r>
 80079aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ae:	f013 0201 	ands.w	r2, r3, #1
 80079b2:	d00a      	beq.n	80079ca <__swsetup_r+0x9a>
 80079b4:	2200      	movs	r2, #0
 80079b6:	60a2      	str	r2, [r4, #8]
 80079b8:	6962      	ldr	r2, [r4, #20]
 80079ba:	4252      	negs	r2, r2
 80079bc:	61a2      	str	r2, [r4, #24]
 80079be:	6922      	ldr	r2, [r4, #16]
 80079c0:	b942      	cbnz	r2, 80079d4 <__swsetup_r+0xa4>
 80079c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079c6:	d1c5      	bne.n	8007954 <__swsetup_r+0x24>
 80079c8:	bd38      	pop	{r3, r4, r5, pc}
 80079ca:	0799      	lsls	r1, r3, #30
 80079cc:	bf58      	it	pl
 80079ce:	6962      	ldrpl	r2, [r4, #20]
 80079d0:	60a2      	str	r2, [r4, #8]
 80079d2:	e7f4      	b.n	80079be <__swsetup_r+0x8e>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7f7      	b.n	80079c8 <__swsetup_r+0x98>
 80079d8:	20000018 	.word	0x20000018

080079dc <_raise_r>:
 80079dc:	291f      	cmp	r1, #31
 80079de:	b538      	push	{r3, r4, r5, lr}
 80079e0:	4605      	mov	r5, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	d904      	bls.n	80079f0 <_raise_r+0x14>
 80079e6:	2316      	movs	r3, #22
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079f2:	b112      	cbz	r2, 80079fa <_raise_r+0x1e>
 80079f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f8:	b94b      	cbnz	r3, 8007a0e <_raise_r+0x32>
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f830 	bl	8007a60 <_getpid_r>
 8007a00:	4622      	mov	r2, r4
 8007a02:	4601      	mov	r1, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a0a:	f000 b817 	b.w	8007a3c <_kill_r>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00a      	beq.n	8007a28 <_raise_r+0x4c>
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	d103      	bne.n	8007a1e <_raise_r+0x42>
 8007a16:	2316      	movs	r3, #22
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7e7      	b.n	80079ee <_raise_r+0x12>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4620      	mov	r0, r4
 8007a22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a26:	4798      	blx	r3
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7e0      	b.n	80079ee <_raise_r+0x12>

08007a2c <raise>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <raise+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f7ff bfd3 	b.w	80079dc <_raise_r>
 8007a36:	bf00      	nop
 8007a38:	20000018 	.word	0x20000018

08007a3c <_kill_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4d06      	ldr	r5, [pc, #24]	@ (8007a5c <_kill_r+0x20>)
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f7f9 fc84 	bl	8001356 <_kill>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d102      	bne.n	8007a58 <_kill_r+0x1c>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b103      	cbz	r3, 8007a58 <_kill_r+0x1c>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000474 	.word	0x20000474

08007a60 <_getpid_r>:
 8007a60:	f7f9 bc72 	b.w	8001348 <_getpid>

08007a64 <__swhatbuf_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	460c      	mov	r4, r1
 8007a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6c:	4615      	mov	r5, r2
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	461e      	mov	r6, r3
 8007a72:	b096      	sub	sp, #88	@ 0x58
 8007a74:	da0c      	bge.n	8007a90 <__swhatbuf_r+0x2c>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a7e:	bf14      	ite	ne
 8007a80:	2340      	movne	r3, #64	@ 0x40
 8007a82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a86:	2000      	movs	r0, #0
 8007a88:	6031      	str	r1, [r6, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	b016      	add	sp, #88	@ 0x58
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	466a      	mov	r2, sp
 8007a92:	f000 f849 	bl	8007b28 <_fstat_r>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	dbed      	blt.n	8007a76 <__swhatbuf_r+0x12>
 8007a9a:	9901      	ldr	r1, [sp, #4]
 8007a9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aa0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aa4:	4259      	negs	r1, r3
 8007aa6:	4159      	adcs	r1, r3
 8007aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aac:	e7eb      	b.n	8007a86 <__swhatbuf_r+0x22>

08007aae <__smakebuf_r>:
 8007aae:	898b      	ldrh	r3, [r1, #12]
 8007ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ab2:	079d      	lsls	r5, r3, #30
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	d507      	bpl.n	8007aca <__smakebuf_r+0x1c>
 8007aba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	6163      	str	r3, [r4, #20]
 8007ac6:	b003      	add	sp, #12
 8007ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aca:	466a      	mov	r2, sp
 8007acc:	ab01      	add	r3, sp, #4
 8007ace:	f7ff ffc9 	bl	8007a64 <__swhatbuf_r>
 8007ad2:	9f00      	ldr	r7, [sp, #0]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f7fd fbd3 	bl	8005284 <_malloc_r>
 8007ade:	b948      	cbnz	r0, 8007af4 <__smakebuf_r+0x46>
 8007ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae4:	059a      	lsls	r2, r3, #22
 8007ae6:	d4ee      	bmi.n	8007ac6 <__smakebuf_r+0x18>
 8007ae8:	f023 0303 	bic.w	r3, r3, #3
 8007aec:	f043 0302 	orr.w	r3, r3, #2
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	e7e2      	b.n	8007aba <__smakebuf_r+0xc>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	6020      	str	r0, [r4, #0]
 8007b04:	b15b      	cbz	r3, 8007b1e <__smakebuf_r+0x70>
 8007b06:	4630      	mov	r0, r6
 8007b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0c:	f000 f81e 	bl	8007b4c <_isatty_r>
 8007b10:	b128      	cbz	r0, 8007b1e <__smakebuf_r+0x70>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	431d      	orrs	r5, r3
 8007b22:	81a5      	strh	r5, [r4, #12]
 8007b24:	e7cf      	b.n	8007ac6 <__smakebuf_r+0x18>
	...

08007b28 <_fstat_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4d06      	ldr	r5, [pc, #24]	@ (8007b48 <_fstat_r+0x20>)
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f7f9 fc6d 	bl	8001414 <_fstat>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d102      	bne.n	8007b44 <_fstat_r+0x1c>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	b103      	cbz	r3, 8007b44 <_fstat_r+0x1c>
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	20000474 	.word	0x20000474

08007b4c <_isatty_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4d05      	ldr	r5, [pc, #20]	@ (8007b68 <_isatty_r+0x1c>)
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 fc6b 	bl	8001432 <_isatty>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_isatty_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_isatty_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000474 	.word	0x20000474

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
