
Nucleo-DMA-ADC-Characterization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004014  08004014  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004014  08004014  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004014  08004014  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800401c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000005c  08004078  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004078  000063fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d470  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002242  00000000  00000000  000134f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00015738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7a  00000000  00000000  000164a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d92  00000000  00000000  00016f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001084d  00000000  00000000  0002fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fda0  00000000  00000000  00040501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d02a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000d02e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d4090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f8c 	.word	0x08003f8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08003f8c 	.word	0x08003f8c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	0000      	movs	r0, r0
	...

08000770 <Get_Averaged_ADC_Values>:
  * @brief Take numSamples ADC values, average them, then return both raw and error adjusted values
  * @param adcValuesAveraged: Pointer to the averaged ADC value
  * @param adcValuesAdjusted: Pointer to the averaged ADC value, adjusted for error
  * @retval None
  */
void Get_Averaged_ADC_Values(int* adcValuesAveraged, int* adcValuesADCAdjusted, int* adcValuesCurrentAdjusted){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  *adcValuesAveraged = adcAveragedValue; // Set the pointer output
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <Get_Averaged_ADC_Values+0xc8>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	601a      	str	r2, [r3, #0]

  // ADC Error Polynomial: -75.8 + 0.0222x
  // Current Sensor ADC Error Polynomial: 72 - 0.0325x + 19.6 - 8.82E-3x = 91.6 - 0.04132x

  int adcError = -75.8 + 0.0222 * (*adcValuesAveraged); // This is a predetermined error polynomial
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff5c 	bl	8000648 <__aeabi_i2d>
 8000790:	a321      	add	r3, pc, #132	@ (adr r3, 8000818 <Get_Averaged_ADC_Values+0xa8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	f7ff fcdb 	bl	8000150 <__aeabi_dmul>
 800079a:	4602      	mov	r2, r0
 800079c:	460b      	mov	r3, r1
 800079e:	4610      	mov	r0, r2
 80007a0:	4619      	mov	r1, r3
 80007a2:	a31f      	add	r3, pc, #124	@ (adr r3, 8000820 <Get_Averaged_ADC_Values+0xb0>)
 80007a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a8:	f7ff fe00 	bl	80003ac <__aeabi_dsub>
 80007ac:	4602      	mov	r2, r0
 80007ae:	460b      	mov	r3, r1
 80007b0:	4610      	mov	r0, r2
 80007b2:	4619      	mov	r1, r3
 80007b4:	f7ff ffb2 	bl	800071c <__aeabi_d2iz>
 80007b8:	4603      	mov	r3, r0
 80007ba:	617b      	str	r3, [r7, #20]
  int currentSensorADCError = 91.6 - 0.04132 * (*adcValuesAveraged); // This is the predetermined erroy polynomial for the current sensor
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff41 	bl	8000648 <__aeabi_i2d>
 80007c6:	a318      	add	r3, pc, #96	@ (adr r3, 8000828 <Get_Averaged_ADC_Values+0xb8>)
 80007c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007cc:	f7ff fcc0 	bl	8000150 <__aeabi_dmul>
 80007d0:	4602      	mov	r2, r0
 80007d2:	460b      	mov	r3, r1
 80007d4:	a116      	add	r1, pc, #88	@ (adr r1, 8000830 <Get_Averaged_ADC_Values+0xc0>)
 80007d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007da:	f7ff fde7 	bl	80003ac <__aeabi_dsub>
 80007de:	4602      	mov	r2, r0
 80007e0:	460b      	mov	r3, r1
 80007e2:	4610      	mov	r0, r2
 80007e4:	4619      	mov	r1, r3
 80007e6:	f7ff ff99 	bl	800071c <__aeabi_d2iz>
 80007ea:	4603      	mov	r3, r0
 80007ec:	613b      	str	r3, [r7, #16]

  *adcValuesADCAdjusted = *adcValuesAveraged - adcError; // Set the other pointer output
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	1ad2      	subs	r2, r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	601a      	str	r2, [r3, #0]
  *adcValuesCurrentAdjusted = *adcValuesAveraged - adcError - currentSensorADCError; // Set the other pointer output
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	1ad2      	subs	r2, r2, r3
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	1ad2      	subs	r2, r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	f3af 8000 	nop.w
 8000818:	c7e28241 	.word	0xc7e28241
 800081c:	3f96bb98 	.word	0x3f96bb98
 8000820:	33333333 	.word	0x33333333
 8000824:	4052f333 	.word	0x4052f333
 8000828:	2157689d 	.word	0x2157689d
 800082c:	3fa527e5 	.word	0x3fa527e5
 8000830:	66666666 	.word	0x66666666
 8000834:	4056e666 	.word	0x4056e666
 8000838:	200000dc 	.word	0x200000dc

0800083c <Continue_On_UART_Receive>:
/**
  * @brief Wait for 's' character to be received over UART to continue the program
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Continue_On_UART_Receive(UART_HandleTypeDef uart){
 800083c:	b084      	sub	sp, #16
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
 8000842:	f107 0c08 	add.w	ip, r7, #8
 8000846:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // The 's' character here is arbitrary
  // We just pause the program until we see 's\n' received over uart
  memset(rx_buff, 0, sizeof(rx_buff));
 800084a:	2264      	movs	r2, #100	@ 0x64
 800084c:	2100      	movs	r1, #0
 800084e:	480f      	ldr	r0, [pc, #60]	@ (800088c <Continue_On_UART_Receive+0x50>)
 8000850:	f002 ff0c 	bl	800366c <memset>
  while (rx_buff[0] != 's'){
 8000854:	e00f      	b.n	8000876 <Continue_On_UART_Receive+0x3a>
    memset(rx_buff, 0, sizeof(rx_buff));
 8000856:	2264      	movs	r2, #100	@ 0x64
 8000858:	2100      	movs	r1, #0
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <Continue_On_UART_Receive+0x50>)
 800085c:	f002 ff06 	bl	800366c <memset>
    HAL_UART_Receive(&uart, (uint8_t*)rx_buff, sizeof(rx_buff), 1000); // HAL_UART_Receive waits until '\n' to continue the program
 8000860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000864:	2264      	movs	r2, #100	@ 0x64
 8000866:	4909      	ldr	r1, [pc, #36]	@ (800088c <Continue_On_UART_Receive+0x50>)
 8000868:	f107 0008 	add.w	r0, r7, #8
 800086c:	f002 fcfd 	bl	800326a <HAL_UART_Receive>
    HAL_Delay(1); // Wait a ms because why not
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fbf3 	bl	800105c <HAL_Delay>
  while (rx_buff[0] != 's'){
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <Continue_On_UART_Receive+0x50>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b73      	cmp	r3, #115	@ 0x73
 800087c:	d1eb      	bne.n	8000856 <Continue_On_UART_Receive+0x1a>
  }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr
 800088c:	20000144 	.word	0x20000144

08000890 <Send_ADC_Values_Over_UART>:
/**
  * @brief Send ADC values over UART to the Python script
  * @param uart: UART_HandleTypeDef object
  * @retval None
  */
void Send_ADC_Values_Over_UART(UART_HandleTypeDef uart, int adcValuesAveraged, int adcValuesADCAdjusted, int adcValuesCurrentAdjusted){
 8000890:	b084      	sub	sp, #16
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af02      	add	r7, sp, #8
 8000898:	f107 0c08 	add.w	ip, r7, #8
 800089c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  memset(tx_buff, 0, sizeof(tx_buff));
 80008a0:	2264      	movs	r2, #100	@ 0x64
 80008a2:	2100      	movs	r1, #0
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <Send_ADC_Values_Over_UART+0x48>)
 80008a6:	f002 fee1 	bl	800366c <memset>
  sprintf(tx_buff, "%d, %d, %d\n\r", adcValuesAveraged, adcValuesADCAdjusted, adcValuesCurrentAdjusted);
 80008aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80008b2:	490a      	ldr	r1, [pc, #40]	@ (80008dc <Send_ADC_Values_Over_UART+0x4c>)
 80008b4:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <Send_ADC_Values_Over_UART+0x48>)
 80008b6:	f002 feb9 	bl	800362c <siprintf>
  HAL_UART_Transmit(&uart, (uint8_t*)tx_buff, sizeof(tx_buff), 1000);
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	2264      	movs	r2, #100	@ 0x64
 80008c0:	4905      	ldr	r1, [pc, #20]	@ (80008d8 <Send_ADC_Values_Over_UART+0x48>)
 80008c2:	f107 0008 	add.w	r0, r7, #8
 80008c6:	f002 fc45 	bl	8003154 <HAL_UART_Transmit>
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008d2:	b004      	add	sp, #16
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200000e0 	.word	0x200000e0
 80008dc:	08003fa4 	.word	0x08003fa4

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b097      	sub	sp, #92	@ 0x5c
 80008e4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fb57 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f85f 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f000 f981 	bl	8000bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f2:	f000 f961 	bl	8000bb8 <MX_DMA_Init>
  MX_ADC1_Init();
 80008f6:	f000 f8a9 	bl	8000a4c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80008fa:	f000 f933 	bl	8000b64 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80008fe:	f000 f8e3 	bl	8000ac8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);  // Start the timer
 8000902:	4825      	ldr	r0, [pc, #148]	@ (8000998 <main+0xb8>)
 8000904:	f002 f962 	bl	8002bcc <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, sizeof(adcBuffer));
 8000908:	2264      	movs	r2, #100	@ 0x64
 800090a:	4924      	ldr	r1, [pc, #144]	@ (800099c <main+0xbc>)
 800090c:	4824      	ldr	r0, [pc, #144]	@ (80009a0 <main+0xc0>)
 800090e:	f000 fca1 	bl	8001254 <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */
    
    // This function waits until 's' is received on UART to continue
    // This way, from the Python script we can command the STM32 chip operate only when we tell it to
    Continue_On_UART_Receive(huart2);
 8000912:	4e24      	ldr	r6, [pc, #144]	@ (80009a4 <main+0xc4>)
 8000914:	466d      	mov	r5, sp
 8000916:	f106 0410 	add.w	r4, r6, #16
 800091a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800092a:	e885 0003 	stmia.w	r5, {r0, r1}
 800092e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000932:	f7ff ff83 	bl	800083c <Continue_On_UART_Receive>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle the LED high when we're collecting or sending values
 8000936:	2120      	movs	r1, #32
 8000938:	481b      	ldr	r0, [pc, #108]	@ (80009a8 <main+0xc8>)
 800093a:	f001 fc17 	bl	800216c <HAL_GPIO_TogglePin>

    int adcValuesAveraged = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
    int adcValuesADCAdjusted = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
    int adcValuesCurrentAdjusted = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
    Get_Averaged_ADC_Values(&adcValuesAveraged, &adcValuesADCAdjusted, &adcValuesCurrentAdjusted);
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff0b 	bl	8000770 <Get_Averaged_ADC_Values>

    Send_ADC_Values_Over_UART(huart2, adcValuesAveraged, adcValuesADCAdjusted, adcValuesCurrentAdjusted);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4e10      	ldr	r6, [pc, #64]	@ (80009a4 <main+0xc4>)
 8000962:	9110      	str	r1, [sp, #64]	@ 0x40
 8000964:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000966:	930e      	str	r3, [sp, #56]	@ 0x38
 8000968:	466d      	mov	r5, sp
 800096a:	f106 0410 	add.w	r4, r6, #16
 800096e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800097e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000982:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000986:	f7ff ff83 	bl	8000890 <Send_ADC_Values_Over_UART>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800098a:	2120      	movs	r1, #32
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <main+0xc8>)
 800098e:	f001 fbed 	bl	800216c <HAL_GPIO_TogglePin>
  {
 8000992:	bf00      	nop
 8000994:	e7bd      	b.n	8000912 <main+0x32>
 8000996:	bf00      	nop
 8000998:	2000021c 	.word	0x2000021c
 800099c:	20000078 	.word	0x20000078
 80009a0:	200001a8 	.word	0x200001a8
 80009a4:	20000264 	.word	0x20000264
 80009a8:	40010800 	.word	0x40010800

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b6:	2228      	movs	r2, #40	@ 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fe56 	bl	800366c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2310      	movs	r3, #16
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fbd5 	bl	80021a0 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80009fc:	f000 f92c 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fe42 	bl	80026a4 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a26:	f000 f917 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 ffc3 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a40:	f000 f90a 	bl	8000c58 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3750      	adds	r7, #80	@ 0x50
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <MX_ADC1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a8a:	f000 fb0b 	bl	80010a4 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 f8e0 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000aaa:	f000 fccd 	bl	8001448 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f000 f8d0 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001a8 	.word	0x200001a8
 8000ac4:	40012400 	.word	0x40012400

08000ac8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <MX_TIM3_Init+0x98>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800-1;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000aec:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b0a:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000b0c:	f002 f80e 	bl	8002b2c <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 f89f 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000b28:	f002 f89a 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 f891 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b36:	2320      	movs	r3, #32
 8000b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_TIM3_Init+0x94>)
 8000b44:	f002 fa58 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b4e:	f000 f883 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000021c 	.word	0x2000021c
 8000b60:	40000400 	.word	0x40000400

08000b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <MX_USART2_UART_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f002 fa8a 	bl	80030b4 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f000 f857 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000264 	.word	0x20000264
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_DMA_Init+0x38>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <MX_DMA_Init+0x38>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_DMA_Init+0x38>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f000 ff05 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000be0:	200b      	movs	r0, #11
 8000be2:	f000 ff1e 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_GPIO_Init+0x5c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <MX_GPIO_Init+0x5c>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_GPIO_Init+0x5c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <MX_GPIO_Init+0x60>)
 8000c26:	f001 fa89 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2302      	movs	r3, #2
 8000c38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_GPIO_Init+0x60>)
 8000c42:	f001 f8f7 	bl	8001e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <HAL_ADC_MspInit+0xbc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d149      	bne.n	8000d7c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce8:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4819      	ldr	r0, [pc, #100]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d28:	f001 f884 	bl	8001e34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d2e:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d40:	2280      	movs	r2, #128	@ 0x80
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d62:	f000 fe79 	bl	8001a58 <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d6c:	f7ff ff74 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d74:	621a      	str	r2, [r3, #32]
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012400 	.word	0x40012400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	200001d8 	.word	0x200001d8
 8000d94:	40020008 	.word	0x40020008

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <HAL_TIM_Base_MspInit+0x34>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10b      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40000400 	.word	0x40000400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d12f      	bne.n	8000e54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfe:	61d3      	str	r3, [r2, #28]
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e24:	2304      	movs	r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e38:	f000 fffc 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e50:	f000 fff0 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8b4 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ec6:	f000 fe81 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001d8 	.word	0x200001d8

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f002 fbba 	bl	800367c <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20005000 	.word	0x20005000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	200002ac 	.word	0x200002ac
 8000f3c:	20000400 	.word	0x20000400

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff fff8 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f52:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f54:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f68:	4c09      	ldr	r4, [pc, #36]	@ (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fb87 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fcb1 	bl	80008e0 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f88:	0800401c 	.word	0x0800401c
  ldr r2, =_sbss
 8000f8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f90:	200003fc 	.word	0x200003fc

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fd13 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe56 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fd2b 	bl	8001a3e <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fcf3 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	@ (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000008 	.word	0x20000008
 8001044:	200002b0 	.word	0x200002b0

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	@ (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	200002b0 	.word	0x200002b0

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffe0 	bl	8001048 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0be      	b.n	8001244 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fdf0 	bl	8000cc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 faff 	bl	80016ec <ADC_ConversionStop_Disable>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 8099 	bne.w	8001232 <HAL_ADC_Init+0x18e>
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8095 	bne.w	8001232 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001110:	f023 0302 	bic.w	r3, r3, #2
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001124:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b1b      	ldrb	r3, [r3, #12]
 800112a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800112c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4313      	orrs	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800113c:	d003      	beq.n	8001146 <HAL_ADC_Init+0xa2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <HAL_ADC_Init+0xa8>
 8001146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114a:	e000      	b.n	800114e <HAL_ADC_Init+0xaa>
 800114c:	2300      	movs	r3, #0
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7d1b      	ldrb	r3, [r3, #20]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d119      	bne.n	8001190 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b1b      	ldrb	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	3b01      	subs	r3, #1
 800116a:	035a      	lsls	r2, r3, #13
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	e00b      	b.n	8001190 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	f043 0220 	orr.w	r2, r3, #32
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <HAL_ADC_Init+0x1a8>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011c0:	d003      	beq.n	80011ca <HAL_ADC_Init+0x126>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d104      	bne.n	80011d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	051b      	lsls	r3, r3, #20
 80011d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_ADC_Init+0x1ac>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10b      	bne.n	8001210 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120e:	e018      	b.n	8001242 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001214:	f023 0312 	bic.w	r3, r3, #18
 8001218:	f043 0210 	orr.w	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001230:	e007      	b.n	8001242 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001242:	7dfb      	ldrb	r3, [r7, #23]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	ffe1f7fd 	.word	0xffe1f7fd
 8001250:	ff1f0efe 	.word	0xff1f0efe

08001254 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a64      	ldr	r2, [pc, #400]	@ (80013fc <HAL_ADC_Start_DMA+0x1a8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d004      	beq.n	8001278 <HAL_ADC_Start_DMA+0x24>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a63      	ldr	r2, [pc, #396]	@ (8001400 <HAL_ADC_Start_DMA+0x1ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d106      	bne.n	8001286 <HAL_ADC_Start_DMA+0x32>
 8001278:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <HAL_ADC_Start_DMA+0x1a8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 80b3 	bne.w	80013ec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_Start_DMA+0x40>
 8001290:	2302      	movs	r3, #2
 8001292:	e0ae      	b.n	80013f2 <HAL_ADC_Start_DMA+0x19e>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f9cb 	bl	8001638 <ADC_Enable>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 809a 	bne.w	80013e2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001400 <HAL_ADC_Start_DMA+0x1ac>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_Start_DMA+0x84>
 80012cc:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <HAL_ADC_Start_DMA+0x1a8>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d115      	bne.n	8001304 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d026      	beq.n	8001340 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001302:	e01d      	b.n	8001340 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001308:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a39      	ldr	r2, [pc, #228]	@ (80013fc <HAL_ADC_Start_DMA+0x1a8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d004      	beq.n	8001324 <HAL_ADC_Start_DMA+0xd0>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <HAL_ADC_Start_DMA+0x1ac>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d10d      	bne.n	8001340 <HAL_ADC_Start_DMA+0xec>
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <HAL_ADC_Start_DMA+0x1a8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001350:	f023 0206 	bic.w	r2, r3, #6
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <HAL_ADC_Start_DMA+0x1b0>)
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_ADC_Start_DMA+0x1b4>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a23      	ldr	r2, [pc, #140]	@ (800140c <HAL_ADC_Start_DMA+0x1b8>)
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0202 	mvn.w	r2, #2
 8001388:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001398:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a18      	ldr	r0, [r3, #32]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	334c      	adds	r3, #76	@ 0x4c
 80013a4:	4619      	mov	r1, r3
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f000 fbaf 	bl	8001b0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013b8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013bc:	d108      	bne.n	80013d0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013cc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ce:	e00f      	b.n	80013f0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013de:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013e0:	e006      	b.n	80013f0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80013ea:	e001      	b.n	80013f0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012400 	.word	0x40012400
 8001400:	40012800 	.word	0x40012800
 8001404:	0800176f 	.word	0x0800176f
 8001408:	080017eb 	.word	0x080017eb
 800140c:	08001807 	.word	0x08001807

08001410 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x20>
 8001464:	2302      	movs	r3, #2
 8001466:	e0dc      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1da>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b06      	cmp	r3, #6
 8001476:	d81c      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3b05      	subs	r3, #5
 800148a:	221f      	movs	r2, #31
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	4019      	ands	r1, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b05      	subs	r3, #5
 80014a4:	fa00 f203 	lsl.w	r2, r0, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b0:	e03c      	b.n	800152c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d81c      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b23      	subs	r3, #35	@ 0x23
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4019      	ands	r1, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b23      	subs	r3, #35	@ 0x23
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f2:	e01b      	b.n	800152c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b41      	subs	r3, #65	@ 0x41
 8001506:	221f      	movs	r2, #31
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	4019      	ands	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b41      	subs	r3, #65	@ 0x41
 8001520:	fa00 f203 	lsl.w	r2, r0, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b09      	cmp	r3, #9
 8001532:	d91c      	bls.n	800156e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68d9      	ldr	r1, [r3, #12]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4019      	ands	r1, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b1e      	subs	r3, #30
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	e019      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ae:	2b11      	cmp	r3, #17
 80015b0:	d132      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_ADC_ConfigChannel+0x1e4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d125      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d126      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d11a      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_ADC_ConfigChannel+0x1e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <HAL_ADC_ConfigChannel+0x1ec>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9a      	lsrs	r2, r3, #18
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f8:	e002      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x1b2>
 8001606:	e007      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	f043 0220 	orr.w	r2, r3, #32
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40012400 	.word	0x40012400
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83

08001638 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d040      	beq.n	80016d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <ADC_Enable+0xac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <ADC_Enable+0xb0>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001674:	e002      	b.n	800167c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b01      	subs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001682:	f7ff fce1 	bl	8001048 <HAL_GetTick>
 8001686:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001688:	e01f      	b.n	80016ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800168a:	f7ff fcdd 	bl	8001048 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d918      	bls.n	80016ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d011      	beq.n	80016ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	f043 0210 	orr.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e007      	b.n	80016da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d1d8      	bne.n	800168a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d12e      	bne.n	8001764 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001716:	f7ff fc97 	bl	8001048 <HAL_GetTick>
 800171a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800171c:	e01b      	b.n	8001756 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800171e:	f7ff fc93 	bl	8001048 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d914      	bls.n	8001756 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10d      	bne.n	8001756 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e007      	b.n	8001766 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d0dc      	beq.n	800171e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001784:	2b00      	cmp	r3, #0
 8001786:	d127      	bne.n	80017d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800179e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017a2:	d115      	bne.n	80017d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fe1d 	bl	8001410 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017d6:	e004      	b.n	80017e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fe12 	bl	8001422 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fe01 	bl	8001434 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4906      	ldr	r1, [pc, #24]	@ (80018d4 <__NVIC_EnableIRQ+0x34>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff90 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff2d 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff42 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff90 	bl	800192c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e043      	b.n	8001af6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_DMA_Init+0xa8>)
 8001a76:	4413      	add	r3, r2
 8001a78:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_DMA_Init+0xac>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	009a      	lsls	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <HAL_DMA_Init+0xb0>)
 8001a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aa2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	bffdfff8 	.word	0xbffdfff8
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	40020000 	.word	0x40020000

08001b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Start_IT+0x20>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e04b      	b.n	8001bc4 <HAL_DMA_Start_IT+0xb8>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f937 	bl	8001dd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 020e 	orr.w	r2, r2, #14
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e00f      	b.n	8001ba4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 020a 	orr.w	r2, r2, #10
 8001ba2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2204      	movs	r2, #4
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04f      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xc8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04a      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a66      	ldr	r2, [pc, #408]	@ (8001dbc <HAL_DMA_IRQHandler+0x1f0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d029      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xae>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xaa>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a63      	ldr	r2, [pc, #396]	@ (8001dc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01a      	beq.n	8001c70 <HAL_DMA_IRQHandler+0xa4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a62      	ldr	r2, [pc, #392]	@ (8001dc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x9e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a60      	ldr	r2, [pc, #384]	@ (8001dcc <HAL_DMA_IRQHandler+0x200>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x98>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5f      	ldr	r2, [pc, #380]	@ (8001dd0 <HAL_DMA_IRQHandler+0x204>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x92>
 8001c58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c5c:	e00e      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c62:	e00b      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c68:	e008      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c6e:	e005      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c74:	e002      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c76:	2340      	movs	r3, #64	@ 0x40
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_IRQHandler+0xb0>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	4a55      	ldr	r2, [pc, #340]	@ (8001dd4 <HAL_DMA_IRQHandler+0x208>)
 8001c7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8094 	beq.w	8001db2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c92:	e08e      	b.n	8001db2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	2202      	movs	r2, #2
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d056      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x186>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d051      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020a 	bic.w	r2, r2, #10
 8001cca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a38      	ldr	r2, [pc, #224]	@ (8001dbc <HAL_DMA_IRQHandler+0x1f0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d029      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x166>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a37      	ldr	r2, [pc, #220]	@ (8001dc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x162>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01a      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x15c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d012      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x156>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_DMA_IRQHandler+0x200>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00a      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x150>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <HAL_DMA_IRQHandler+0x204>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <HAL_DMA_IRQHandler+0x14a>
 8001d10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d14:	e00e      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1a:	e00b      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d20:	e008      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d26:	e005      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d2c:	e002      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d2e:	2320      	movs	r3, #32
 8001d30:	e000      	b.n	8001d34 <HAL_DMA_IRQHandler+0x168>
 8001d32:	2302      	movs	r3, #2
 8001d34:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <HAL_DMA_IRQHandler+0x208>)
 8001d36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d034      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d50:	e02f      	b.n	8001db2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	2208      	movs	r2, #8
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d028      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x1e8>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020e 	bic.w	r2, r2, #14
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
    }
  }
  return;
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
}
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40020008 	.word	0x40020008
 8001dc0:	4002001c 	.word	0x4002001c
 8001dc4:	40020030 	.word	0x40020030
 8001dc8:	40020044 	.word	0x40020044
 8001dcc:	40020058 	.word	0x40020058
 8001dd0:	4002006c 	.word	0x4002006c
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d108      	bne.n	8001e18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e16:	e007      	b.n	8001e28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b08b      	sub	sp, #44	@ 0x2c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e46:	e169      	b.n	800211c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8158 	bne.w	8002116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d05e      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e70:	4a98      	ldr	r2, [pc, #608]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d875      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e76:	4a98      	ldr	r2, [pc, #608]	@ (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d058      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e7c:	4a96      	ldr	r2, [pc, #600]	@ (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d86f      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e82:	4a96      	ldr	r2, [pc, #600]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d052      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e88:	4a94      	ldr	r2, [pc, #592]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d869      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e8e:	4a94      	ldr	r2, [pc, #592]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04c      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e94:	4a92      	ldr	r2, [pc, #584]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d863      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a92      	ldr	r2, [pc, #584]	@ (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d046      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a90      	ldr	r2, [pc, #576]	@ (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d85d      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d82a      	bhi.n	8001f00 <HAL_GPIO_Init+0xcc>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d859      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001eae:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <HAL_GPIO_Init+0x80>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f1b 	.word	0x08001f1b
 8001ec0:	08001f5d 	.word	0x08001f5d
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f63 	.word	0x08001f63
 8001ecc:	08001f63 	.word	0x08001f63
 8001ed0:	08001f63 	.word	0x08001f63
 8001ed4:	08001f63 	.word	0x08001f63
 8001ed8:	08001f63 	.word	0x08001f63
 8001edc:	08001f63 	.word	0x08001f63
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f63 	.word	0x08001f63
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f63 	.word	0x08001f63
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f63 	.word	0x08001f63
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f25 	.word	0x08001f25
 8001f00:	4a79      	ldr	r2, [pc, #484]	@ (80020e8 <HAL_GPIO_Init+0x2b4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f06:	e02c      	b.n	8001f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e029      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	3304      	adds	r3, #4
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e024      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e01f      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e01a      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f36:	2304      	movs	r3, #4
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e013      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f44:	2308      	movs	r3, #8
 8001f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	611a      	str	r2, [r3, #16]
          break;
 8001f4e:	e009      	b.n	8001f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	615a      	str	r2, [r3, #20]
          break;
 8001f5a:	e003      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          break;
 8001f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	@ 0xff
 8001f68:	d801      	bhi.n	8001f6e <HAL_GPIO_Init+0x13a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_Init+0x13e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	@ 0xff
 8001f78:	d802      	bhi.n	8001f80 <HAL_GPIO_Init+0x14c>
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x152>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	3b08      	subs	r3, #8
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80b1 	beq.w	8002116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fcc:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <HAL_GPIO_Init+0x2bc>)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a40      	ldr	r2, [pc, #256]	@ (80020f4 <HAL_GPIO_Init+0x2c0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1ec>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1e8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3e      	ldr	r2, [pc, #248]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1e4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3d      	ldr	r2, [pc, #244]	@ (8002100 <HAL_GPIO_Init+0x2cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1e0>
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002014:	2304      	movs	r3, #4
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002020:	2300      	movs	r3, #0
 8002022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002032:	492f      	ldr	r1, [pc, #188]	@ (80020f0 <HAL_GPIO_Init+0x2bc>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800204c:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	492c      	ldr	r1, [pc, #176]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4928      	ldr	r1, [pc, #160]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002074:	4b23      	ldr	r3, [pc, #140]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4922      	ldr	r1, [pc, #136]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	491e      	ldr	r1, [pc, #120]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4918      	ldr	r1, [pc, #96]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4914      	ldr	r1, [pc, #80]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d021      	beq.n	8002108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e021      	b.n	8002116 <HAL_GPIO_Init+0x2e2>
 80020d2:	bf00      	nop
 80020d4:	10320000 	.word	0x10320000
 80020d8:	10310000 	.word	0x10310000
 80020dc:	10220000 	.word	0x10220000
 80020e0:	10210000 	.word	0x10210000
 80020e4:	10120000 	.word	0x10120000
 80020e8:	10110000 	.word	0x10110000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40011000 	.word	0x40011000
 8002100:	40011400 	.word	0x40011400
 8002104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_GPIO_Init+0x304>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	43db      	mvns	r3, r3
 8002110:	4909      	ldr	r1, [pc, #36]	@ (8002138 <HAL_GPIO_Init+0x304>)
 8002112:	4013      	ands	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f ae8e 	bne.w	8001e48 <HAL_GPIO_Init+0x14>
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	372c      	adds	r7, #44	@ 0x2c
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43d9      	mvns	r1, r3
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	400b      	ands	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e272      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8087 	beq.w	80022ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b92      	ldr	r3, [pc, #584]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d00c      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021cc:	4b8f      	ldr	r3, [pc, #572]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d112      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
 80021d8:	4b8c      	ldr	r3, [pc, #560]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d10b      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e6:	4b89      	ldr	r3, [pc, #548]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d06c      	beq.n	80022cc <HAL_RCC_OscConfig+0x12c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d168      	bne.n	80022cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e24c      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x76>
 8002208:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7f      	ldr	r2, [pc, #508]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e02e      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b7b      	ldr	r3, [pc, #492]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7a      	ldr	r2, [pc, #488]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b78      	ldr	r3, [pc, #480]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a77      	ldr	r2, [pc, #476]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0xbc>
 8002242:	4b72      	ldr	r3, [pc, #456]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a71      	ldr	r2, [pc, #452]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6e      	ldr	r2, [pc, #440]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 800225c:	4b6b      	ldr	r3, [pc, #428]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6a      	ldr	r2, [pc, #424]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b68      	ldr	r3, [pc, #416]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a67      	ldr	r2, [pc, #412]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fee4 	bl	8001048 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fee0 	bl	8001048 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e200      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b5d      	ldr	r3, [pc, #372]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xe4>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fed0 	bl	8001048 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe fecc 	bl	8001048 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	@ 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1ec      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b53      	ldr	r3, [pc, #332]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x10c>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022da:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e6:	4b49      	ldr	r3, [pc, #292]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
 80022f2:	4b46      	ldr	r3, [pc, #280]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d116      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	4b43      	ldr	r3, [pc, #268]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1c0      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b3d      	ldr	r3, [pc, #244]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4939      	ldr	r1, [pc, #228]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e03a      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002334:	4b36      	ldr	r3, [pc, #216]	@ (8002410 <HAL_RCC_OscConfig+0x270>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fe85 	bl	8001048 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe fe81 	bl	8001048 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1a1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4927      	ldr	r1, [pc, #156]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_RCC_OscConfig+0x270>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fe64 	bl	8001048 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7fe fe60 	bl	8001048 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e180      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d03a      	beq.n	8002424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fe44 	bl	8001048 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe fe40 	bl	8001048 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e160      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f000 face 	bl	8002984 <RCC_Delay>
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe fe2a 	bl	8001048 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	e00f      	b.n	8002418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe fe26 	bl	8001048 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d908      	bls.n	8002418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e146      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	42420000 	.word	0x42420000
 8002414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b92      	ldr	r3, [pc, #584]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e9      	bne.n	80023f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a6 	beq.w	800257e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b8b      	ldr	r3, [pc, #556]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10d      	bne.n	800245e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b88      	ldr	r3, [pc, #544]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a87      	ldr	r2, [pc, #540]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b85      	ldr	r3, [pc, #532]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b82      	ldr	r3, [pc, #520]	@ (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246a:	4b7f      	ldr	r3, [pc, #508]	@ (8002668 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7e      	ldr	r2, [pc, #504]	@ (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002476:	f7fe fde7 	bl	8001048 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7fe fde3 	bl	8001048 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	@ 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e103      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b75      	ldr	r3, [pc, #468]	@ (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x312>
 80024a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e02d      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a69      	ldr	r2, [pc, #420]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b67      	ldr	r3, [pc, #412]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a66      	ldr	r2, [pc, #408]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e01c      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d10c      	bne.n	80024f6 <HAL_RCC_OscConfig+0x356>
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a60      	ldr	r2, [pc, #384]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	e00b      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	4b58      	ldr	r3, [pc, #352]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d015      	beq.n	8002542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fd97 	bl	8001048 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe fd93 	bl	8001048 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0b1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ee      	beq.n	800251e <HAL_RCC_OscConfig+0x37e>
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fd81 	bl	8001048 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fd7d 	bl	8001048 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e09b      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ee      	bne.n	800254a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b3c      	ldr	r3, [pc, #240]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a3b      	ldr	r2, [pc, #236]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d061      	beq.n	8002658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d146      	bne.n	800262a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b33      	ldr	r3, [pc, #204]	@ (800266c <HAL_RCC_OscConfig+0x4cc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd51 	bl	8001048 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fd4d 	bl	8001048 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e06d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d0:	d108      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4921      	ldr	r1, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a19      	ldr	r1, [r3, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	430b      	orrs	r3, r1
 80025f6:	491b      	ldr	r1, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fd21 	bl	8001048 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fd1d 	bl	8001048 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e03d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x46a>
 8002628:	e035      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_RCC_OscConfig+0x4cc>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd0a 	bl	8001048 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fd06 	bl	8001048 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x498>
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e019      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_OscConfig+0x500>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0d0      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b67      	ldr	r3, [pc, #412]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4965      	ldr	r1, [pc, #404]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800270a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d040      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e073      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	4b3d      	ldr	r3, [pc, #244]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4936      	ldr	r1, [pc, #216]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fe fc58 	bl	8001048 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fc54 	bl	8001048 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e053      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b27      	ldr	r3, [pc, #156]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d210      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4922      	ldr	r1, [pc, #136]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281e:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	@ (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1cc>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fbb6 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08003fb4 	.word	0x08003fb4
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002892:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <HAL_RCC_GetSysClockFreq+0x94>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x30>
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x36>
 80028a6:	e027      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x98>)
 80028aa:	613b      	str	r3, [r7, #16]
      break;
 80028ac:	e027      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	0c9b      	lsrs	r3, r3, #18
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d010      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_RCC_GetSysClockFreq+0x94>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0c5b      	lsrs	r3, r3, #17
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	4a11      	ldr	r2, [pc, #68]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	fb03 f202 	mul.w	r2, r3, r2
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e004      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028ec:	fb02 f303 	mul.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	613b      	str	r3, [r7, #16]
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	613b      	str	r3, [r7, #16]
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	693b      	ldr	r3, [r7, #16]
}
 8002900:	4618      	mov	r0, r3
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	007a1200 	.word	0x007a1200
 8002914:	08003fcc 	.word	0x08003fcc
 8002918:	08003fdc 	.word	0x08003fdc
 800291c:	003d0900 	.word	0x003d0900

08002920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002924:	4b02      	ldr	r3, [pc, #8]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x10>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff2 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	@ (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	08003fc4 	.word	0x08003fc4

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffde 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0adb      	lsrs	r3, r3, #11
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	@ (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	08003fc4 	.word	0x08003fc4

08002984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800298c:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <RCC_Delay+0x34>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <RCC_Delay+0x38>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a0:	bf00      	nop
  }
  while (Delay --);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <RCC_Delay+0x1c>
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000000 	.word	0x20000000
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d07d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b49      	ldr	r3, [pc, #292]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a14:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a42      	ldr	r2, [pc, #264]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a20:	f7fe fb12 	bl	8001048 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fb0e 	bl	8001048 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e06d      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a46:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02e      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d027      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a7a:	4a29      	ldr	r2, [pc, #164]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d014      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fadd 	bl	8001048 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fad9 	bl	8001048 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e036      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ee      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4917      	ldr	r1, [pc, #92]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	490b      	ldr	r1, [pc, #44]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42420440 	.word	0x42420440

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe f920 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 f940 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <HAL_TIM_Base_Start+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start+0x48>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start+0x48>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_TIM_Base_Start+0x8c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start+0x48>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	@ (8002c5c <HAL_TIM_Base_Start+0x90>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_ConfigClockSource+0x1c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0b4      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x186>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb4:	d03e      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0xd4>
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cba:	f200 8087 	bhi.w	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc2:	f000 8086 	beq.w	8002dd2 <HAL_TIM_ConfigClockSource+0x172>
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cca:	d87f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b70      	cmp	r3, #112	@ 0x70
 8002cce:	d01a      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0xa6>
 8002cd0:	2b70      	cmp	r3, #112	@ 0x70
 8002cd2:	d87b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b60      	cmp	r3, #96	@ 0x60
 8002cd6:	d050      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x11a>
 8002cd8:	2b60      	cmp	r3, #96	@ 0x60
 8002cda:	d877      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b50      	cmp	r3, #80	@ 0x50
 8002cde:	d03c      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0xfa>
 8002ce0:	2b50      	cmp	r3, #80	@ 0x50
 8002ce2:	d873      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d058      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x13a>
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d86f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b30      	cmp	r3, #48	@ 0x30
 8002cee:	d064      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002cf0:	2b30      	cmp	r3, #48	@ 0x30
 8002cf2:	d86b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d060      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d867      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05c      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d05a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	e062      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	f000 f950 	bl	8002fba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	609a      	str	r2, [r3, #8]
      break;
 8002d32:	e04f      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	f000 f939 	bl	8002fba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d56:	609a      	str	r2, [r3, #8]
      break;
 8002d58:	e03c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 f8b0 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2150      	movs	r1, #80	@ 0x50
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f907 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d78:	e02c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 f8ce 	bl	8002f28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2160      	movs	r1, #96	@ 0x60
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f8f7 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002d98:	e01c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 f890 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2140      	movs	r1, #64	@ 0x40
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f8e7 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002db8:	e00c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f000 f8de 	bl	8002f86 <TIM_ITRx_SetConfig>
      break;
 8002dca:	e003      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec0 <TIM_Base_SetConfig+0xd0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d007      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec4 <TIM_Base_SetConfig+0xd4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec8 <TIM_Base_SetConfig+0xd8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <TIM_Base_SetConfig+0xd0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <TIM_Base_SetConfig+0xd4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec8 <TIM_Base_SetConfig+0xd8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <TIM_Base_SetConfig+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 030a 	bic.w	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0210 	bic.w	r2, r3, #16
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	031b      	lsls	r3, r3, #12
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f043 0307 	orr.w	r3, r3, #7
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b087      	sub	sp, #28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e046      	b.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305c:	d009      	beq.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a10      	ldr	r2, [pc, #64]	@ (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10c      	bne.n	800308c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4313      	orrs	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fe7a 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	@ 0x24
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa09 	bl	8003510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	@ 0x28
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b20      	cmp	r3, #32
 8003172:	d175      	bne.n	8003260 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_UART_Transmit+0x2c>
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e06e      	b.n	8003262 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2221      	movs	r2, #33	@ 0x21
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003192:	f7fd ff59 	bl	8001048 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	88fa      	ldrh	r2, [r7, #6]
 80031a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ac:	d108      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e003      	b.n	80031c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c8:	e02e      	b.n	8003228 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	@ 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8df 	bl	8003398 <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03a      	b.n	8003262 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3302      	adds	r3, #2
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e007      	b.n	800321a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	3301      	adds	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1cb      	bne.n	80031ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2140      	movs	r1, #64	@ 0x40
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8ab 	bl	8003398 <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e006      	b.n	8003262 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b08a      	sub	sp, #40	@ 0x28
 800326e:	af02      	add	r7, sp, #8
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 8081 	bne.w	800338e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_UART_Receive+0x2e>
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e079      	b.n	8003390 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2222      	movs	r2, #34	@ 0x22
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032b0:	f7fd feca 	bl	8001048 <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ca:	d108      	bne.n	80032de <HAL_UART_Receive+0x74>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e003      	b.n	80032e6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032e6:	e047      	b.n	8003378 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2120      	movs	r1, #32
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f850 	bl	8003398 <UART_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e042      	b.n	8003390 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	b29a      	uxth	r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3302      	adds	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e01f      	b.n	800336a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003332:	d007      	beq.n	8003344 <HAL_UART_Receive+0xda>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_UART_Receive+0xe8>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e008      	b.n	8003364 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800335e:	b2da      	uxtb	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1b2      	bne.n	80032e8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a8:	e03b      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d037      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fd fe49 	bl	8001048 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03a      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d023      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b80      	cmp	r3, #128	@ 0x80
 80033de:	d020      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d01d      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d116      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f81d 	bl	800344a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2208      	movs	r2, #8
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d0b4      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344a:	b480      	push	{r7}
 800344c:	b095      	sub	sp, #84	@ 0x54
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003472:	643a      	str	r2, [r7, #64]	@ 0x40
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	61fb      	str	r3, [r7, #28]
   return(result);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d119      	bne.n	80034f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0310 	bic.w	r3, r3, #16
 80034d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034e2:	61ba      	str	r2, [r7, #24]
 80034e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	613b      	str	r3, [r7, #16]
   return(result);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e5      	bne.n	80034c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003504:	bf00      	nop
 8003506:	3754      	adds	r7, #84	@ 0x54
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
	...

08003510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800354a:	f023 030c 	bic.w	r3, r3, #12
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	430b      	orrs	r3, r1
 8003556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2c      	ldr	r2, [pc, #176]	@ (8003624 <UART_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003578:	f7ff f9f0 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	e002      	b.n	8003586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff f9d8 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8003584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <UART_SetConfig+0x118>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	0119      	lsls	r1, r3, #4
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <UART_SetConfig+0x118>)
 80035be:	fba3 0302 	umull	r0, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2064      	movs	r0, #100	@ 0x64
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	3332      	adds	r3, #50	@ 0x32
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <UART_SetConfig+0x118>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035dc:	4419      	add	r1, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	441a      	add	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <UART_SetConfig+0x118>)
 80035f6:	fba3 0302 	umull	r0, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2064      	movs	r0, #100	@ 0x64
 80035fe:	fb00 f303 	mul.w	r3, r0, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	3332      	adds	r3, #50	@ 0x32
 8003608:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <UART_SetConfig+0x118>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	440a      	add	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40013800 	.word	0x40013800
 8003628:	51eb851f 	.word	0x51eb851f

0800362c <siprintf>:
 800362c:	b40e      	push	{r1, r2, r3}
 800362e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003632:	b500      	push	{lr}
 8003634:	b09c      	sub	sp, #112	@ 0x70
 8003636:	ab1d      	add	r3, sp, #116	@ 0x74
 8003638:	9002      	str	r0, [sp, #8]
 800363a:	9006      	str	r0, [sp, #24]
 800363c:	9107      	str	r1, [sp, #28]
 800363e:	9104      	str	r1, [sp, #16]
 8003640:	4808      	ldr	r0, [pc, #32]	@ (8003664 <siprintf+0x38>)
 8003642:	4909      	ldr	r1, [pc, #36]	@ (8003668 <siprintf+0x3c>)
 8003644:	f853 2b04 	ldr.w	r2, [r3], #4
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	a902      	add	r1, sp, #8
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	f000 f992 	bl	8003978 <_svfiprintf_r>
 8003654:	2200      	movs	r2, #0
 8003656:	9b02      	ldr	r3, [sp, #8]
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	b01c      	add	sp, #112	@ 0x70
 800365c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003660:	b003      	add	sp, #12
 8003662:	4770      	bx	lr
 8003664:	2000000c 	.word	0x2000000c
 8003668:	ffff0208 	.word	0xffff0208

0800366c <memset>:
 800366c:	4603      	mov	r3, r0
 800366e:	4402      	add	r2, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	f803 1b01 	strb.w	r1, [r3], #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <__errno>:
 800367c:	4b01      	ldr	r3, [pc, #4]	@ (8003684 <__errno+0x8>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	2600      	movs	r6, #0
 800368c:	4d0c      	ldr	r5, [pc, #48]	@ (80036c0 <__libc_init_array+0x38>)
 800368e:	4c0d      	ldr	r4, [pc, #52]	@ (80036c4 <__libc_init_array+0x3c>)
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	42a6      	cmp	r6, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	f000 fc78 	bl	8003f8c <_init>
 800369c:	2600      	movs	r6, #0
 800369e:	4d0a      	ldr	r5, [pc, #40]	@ (80036c8 <__libc_init_array+0x40>)
 80036a0:	4c0a      	ldr	r4, [pc, #40]	@ (80036cc <__libc_init_array+0x44>)
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	42a6      	cmp	r6, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b0:	4798      	blx	r3
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ba:	4798      	blx	r3
 80036bc:	3601      	adds	r6, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	08004014 	.word	0x08004014
 80036c4:	08004014 	.word	0x08004014
 80036c8:	08004014 	.word	0x08004014
 80036cc:	08004018 	.word	0x08004018

080036d0 <__retarget_lock_acquire_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <__retarget_lock_release_recursive>:
 80036d2:	4770      	bx	lr

080036d4 <_free_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4605      	mov	r5, r0
 80036d8:	2900      	cmp	r1, #0
 80036da:	d040      	beq.n	800375e <_free_r+0x8a>
 80036dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e0:	1f0c      	subs	r4, r1, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bfb8      	it	lt
 80036e6:	18e4      	addlt	r4, r4, r3
 80036e8:	f000 f8de 	bl	80038a8 <__malloc_lock>
 80036ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <_free_r+0x8c>)
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	b933      	cbnz	r3, 8003700 <_free_r+0x2c>
 80036f2:	6063      	str	r3, [r4, #4]
 80036f4:	6014      	str	r4, [r2, #0]
 80036f6:	4628      	mov	r0, r5
 80036f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036fc:	f000 b8da 	b.w	80038b4 <__malloc_unlock>
 8003700:	42a3      	cmp	r3, r4
 8003702:	d908      	bls.n	8003716 <_free_r+0x42>
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	1821      	adds	r1, r4, r0
 8003708:	428b      	cmp	r3, r1
 800370a:	bf01      	itttt	eq
 800370c:	6819      	ldreq	r1, [r3, #0]
 800370e:	685b      	ldreq	r3, [r3, #4]
 8003710:	1809      	addeq	r1, r1, r0
 8003712:	6021      	streq	r1, [r4, #0]
 8003714:	e7ed      	b.n	80036f2 <_free_r+0x1e>
 8003716:	461a      	mov	r2, r3
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	b10b      	cbz	r3, 8003720 <_free_r+0x4c>
 800371c:	42a3      	cmp	r3, r4
 800371e:	d9fa      	bls.n	8003716 <_free_r+0x42>
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	1850      	adds	r0, r2, r1
 8003724:	42a0      	cmp	r0, r4
 8003726:	d10b      	bne.n	8003740 <_free_r+0x6c>
 8003728:	6820      	ldr	r0, [r4, #0]
 800372a:	4401      	add	r1, r0
 800372c:	1850      	adds	r0, r2, r1
 800372e:	4283      	cmp	r3, r0
 8003730:	6011      	str	r1, [r2, #0]
 8003732:	d1e0      	bne.n	80036f6 <_free_r+0x22>
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4408      	add	r0, r1
 800373a:	6010      	str	r0, [r2, #0]
 800373c:	6053      	str	r3, [r2, #4]
 800373e:	e7da      	b.n	80036f6 <_free_r+0x22>
 8003740:	d902      	bls.n	8003748 <_free_r+0x74>
 8003742:	230c      	movs	r3, #12
 8003744:	602b      	str	r3, [r5, #0]
 8003746:	e7d6      	b.n	80036f6 <_free_r+0x22>
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	1821      	adds	r1, r4, r0
 800374c:	428b      	cmp	r3, r1
 800374e:	bf01      	itttt	eq
 8003750:	6819      	ldreq	r1, [r3, #0]
 8003752:	685b      	ldreq	r3, [r3, #4]
 8003754:	1809      	addeq	r1, r1, r0
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6054      	str	r4, [r2, #4]
 800375c:	e7cb      	b.n	80036f6 <_free_r+0x22>
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	200003f8 	.word	0x200003f8

08003764 <sbrk_aligned>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4e0f      	ldr	r6, [pc, #60]	@ (80037a4 <sbrk_aligned+0x40>)
 8003768:	460c      	mov	r4, r1
 800376a:	6831      	ldr	r1, [r6, #0]
 800376c:	4605      	mov	r5, r0
 800376e:	b911      	cbnz	r1, 8003776 <sbrk_aligned+0x12>
 8003770:	f000 fbaa 	bl	8003ec8 <_sbrk_r>
 8003774:	6030      	str	r0, [r6, #0]
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	f000 fba5 	bl	8003ec8 <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d103      	bne.n	800378a <sbrk_aligned+0x26>
 8003782:	f04f 34ff 	mov.w	r4, #4294967295
 8003786:	4620      	mov	r0, r4
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	1cc4      	adds	r4, r0, #3
 800378c:	f024 0403 	bic.w	r4, r4, #3
 8003790:	42a0      	cmp	r0, r4
 8003792:	d0f8      	beq.n	8003786 <sbrk_aligned+0x22>
 8003794:	1a21      	subs	r1, r4, r0
 8003796:	4628      	mov	r0, r5
 8003798:	f000 fb96 	bl	8003ec8 <_sbrk_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d1f2      	bne.n	8003786 <sbrk_aligned+0x22>
 80037a0:	e7ef      	b.n	8003782 <sbrk_aligned+0x1e>
 80037a2:	bf00      	nop
 80037a4:	200003f4 	.word	0x200003f4

080037a8 <_malloc_r>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	1ccd      	adds	r5, r1, #3
 80037ae:	f025 0503 	bic.w	r5, r5, #3
 80037b2:	3508      	adds	r5, #8
 80037b4:	2d0c      	cmp	r5, #12
 80037b6:	bf38      	it	cc
 80037b8:	250c      	movcc	r5, #12
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	4606      	mov	r6, r0
 80037be:	db01      	blt.n	80037c4 <_malloc_r+0x1c>
 80037c0:	42a9      	cmp	r1, r5
 80037c2:	d904      	bls.n	80037ce <_malloc_r+0x26>
 80037c4:	230c      	movs	r3, #12
 80037c6:	6033      	str	r3, [r6, #0]
 80037c8:	2000      	movs	r0, #0
 80037ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038a4 <_malloc_r+0xfc>
 80037d2:	f000 f869 	bl	80038a8 <__malloc_lock>
 80037d6:	f8d8 3000 	ldr.w	r3, [r8]
 80037da:	461c      	mov	r4, r3
 80037dc:	bb44      	cbnz	r4, 8003830 <_malloc_r+0x88>
 80037de:	4629      	mov	r1, r5
 80037e0:	4630      	mov	r0, r6
 80037e2:	f7ff ffbf 	bl	8003764 <sbrk_aligned>
 80037e6:	1c43      	adds	r3, r0, #1
 80037e8:	4604      	mov	r4, r0
 80037ea:	d158      	bne.n	800389e <_malloc_r+0xf6>
 80037ec:	f8d8 4000 	ldr.w	r4, [r8]
 80037f0:	4627      	mov	r7, r4
 80037f2:	2f00      	cmp	r7, #0
 80037f4:	d143      	bne.n	800387e <_malloc_r+0xd6>
 80037f6:	2c00      	cmp	r4, #0
 80037f8:	d04b      	beq.n	8003892 <_malloc_r+0xea>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	4639      	mov	r1, r7
 80037fe:	4630      	mov	r0, r6
 8003800:	eb04 0903 	add.w	r9, r4, r3
 8003804:	f000 fb60 	bl	8003ec8 <_sbrk_r>
 8003808:	4581      	cmp	r9, r0
 800380a:	d142      	bne.n	8003892 <_malloc_r+0xea>
 800380c:	6821      	ldr	r1, [r4, #0]
 800380e:	4630      	mov	r0, r6
 8003810:	1a6d      	subs	r5, r5, r1
 8003812:	4629      	mov	r1, r5
 8003814:	f7ff ffa6 	bl	8003764 <sbrk_aligned>
 8003818:	3001      	adds	r0, #1
 800381a:	d03a      	beq.n	8003892 <_malloc_r+0xea>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	442b      	add	r3, r5
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	f8d8 3000 	ldr.w	r3, [r8]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	bb62      	cbnz	r2, 8003884 <_malloc_r+0xdc>
 800382a:	f8c8 7000 	str.w	r7, [r8]
 800382e:	e00f      	b.n	8003850 <_malloc_r+0xa8>
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	1b52      	subs	r2, r2, r5
 8003834:	d420      	bmi.n	8003878 <_malloc_r+0xd0>
 8003836:	2a0b      	cmp	r2, #11
 8003838:	d917      	bls.n	800386a <_malloc_r+0xc2>
 800383a:	1961      	adds	r1, r4, r5
 800383c:	42a3      	cmp	r3, r4
 800383e:	6025      	str	r5, [r4, #0]
 8003840:	bf18      	it	ne
 8003842:	6059      	strne	r1, [r3, #4]
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	bf08      	it	eq
 8003848:	f8c8 1000 	streq.w	r1, [r8]
 800384c:	5162      	str	r2, [r4, r5]
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	4630      	mov	r0, r6
 8003852:	f000 f82f 	bl	80038b4 <__malloc_unlock>
 8003856:	f104 000b 	add.w	r0, r4, #11
 800385a:	1d23      	adds	r3, r4, #4
 800385c:	f020 0007 	bic.w	r0, r0, #7
 8003860:	1ac2      	subs	r2, r0, r3
 8003862:	bf1c      	itt	ne
 8003864:	1a1b      	subne	r3, r3, r0
 8003866:	50a3      	strne	r3, [r4, r2]
 8003868:	e7af      	b.n	80037ca <_malloc_r+0x22>
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	42a3      	cmp	r3, r4
 800386e:	bf0c      	ite	eq
 8003870:	f8c8 2000 	streq.w	r2, [r8]
 8003874:	605a      	strne	r2, [r3, #4]
 8003876:	e7eb      	b.n	8003850 <_malloc_r+0xa8>
 8003878:	4623      	mov	r3, r4
 800387a:	6864      	ldr	r4, [r4, #4]
 800387c:	e7ae      	b.n	80037dc <_malloc_r+0x34>
 800387e:	463c      	mov	r4, r7
 8003880:	687f      	ldr	r7, [r7, #4]
 8003882:	e7b6      	b.n	80037f2 <_malloc_r+0x4a>
 8003884:	461a      	mov	r2, r3
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	42a3      	cmp	r3, r4
 800388a:	d1fb      	bne.n	8003884 <_malloc_r+0xdc>
 800388c:	2300      	movs	r3, #0
 800388e:	6053      	str	r3, [r2, #4]
 8003890:	e7de      	b.n	8003850 <_malloc_r+0xa8>
 8003892:	230c      	movs	r3, #12
 8003894:	4630      	mov	r0, r6
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	f000 f80c 	bl	80038b4 <__malloc_unlock>
 800389c:	e794      	b.n	80037c8 <_malloc_r+0x20>
 800389e:	6005      	str	r5, [r0, #0]
 80038a0:	e7d6      	b.n	8003850 <_malloc_r+0xa8>
 80038a2:	bf00      	nop
 80038a4:	200003f8 	.word	0x200003f8

080038a8 <__malloc_lock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	@ (80038b0 <__malloc_lock+0x8>)
 80038aa:	f7ff bf11 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 80038ae:	bf00      	nop
 80038b0:	200003f0 	.word	0x200003f0

080038b4 <__malloc_unlock>:
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <__malloc_unlock+0x8>)
 80038b6:	f7ff bf0c 	b.w	80036d2 <__retarget_lock_release_recursive>
 80038ba:	bf00      	nop
 80038bc:	200003f0 	.word	0x200003f0

080038c0 <__ssputs_r>:
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	461f      	mov	r7, r3
 80038c6:	688e      	ldr	r6, [r1, #8]
 80038c8:	4682      	mov	sl, r0
 80038ca:	42be      	cmp	r6, r7
 80038cc:	460c      	mov	r4, r1
 80038ce:	4690      	mov	r8, r2
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	d82d      	bhi.n	8003930 <__ssputs_r+0x70>
 80038d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038dc:	d026      	beq.n	800392c <__ssputs_r+0x6c>
 80038de:	6965      	ldr	r5, [r4, #20]
 80038e0:	6909      	ldr	r1, [r1, #16]
 80038e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038e6:	eba3 0901 	sub.w	r9, r3, r1
 80038ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038ee:	1c7b      	adds	r3, r7, #1
 80038f0:	444b      	add	r3, r9
 80038f2:	106d      	asrs	r5, r5, #1
 80038f4:	429d      	cmp	r5, r3
 80038f6:	bf38      	it	cc
 80038f8:	461d      	movcc	r5, r3
 80038fa:	0553      	lsls	r3, r2, #21
 80038fc:	d527      	bpl.n	800394e <__ssputs_r+0x8e>
 80038fe:	4629      	mov	r1, r5
 8003900:	f7ff ff52 	bl	80037a8 <_malloc_r>
 8003904:	4606      	mov	r6, r0
 8003906:	b360      	cbz	r0, 8003962 <__ssputs_r+0xa2>
 8003908:	464a      	mov	r2, r9
 800390a:	6921      	ldr	r1, [r4, #16]
 800390c:	f000 fafa 	bl	8003f04 <memcpy>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	6126      	str	r6, [r4, #16]
 800391e:	444e      	add	r6, r9
 8003920:	6026      	str	r6, [r4, #0]
 8003922:	463e      	mov	r6, r7
 8003924:	6165      	str	r5, [r4, #20]
 8003926:	eba5 0509 	sub.w	r5, r5, r9
 800392a:	60a5      	str	r5, [r4, #8]
 800392c:	42be      	cmp	r6, r7
 800392e:	d900      	bls.n	8003932 <__ssputs_r+0x72>
 8003930:	463e      	mov	r6, r7
 8003932:	4632      	mov	r2, r6
 8003934:	4641      	mov	r1, r8
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	f000 faac 	bl	8003e94 <memmove>
 800393c:	2000      	movs	r0, #0
 800393e:	68a3      	ldr	r3, [r4, #8]
 8003940:	1b9b      	subs	r3, r3, r6
 8003942:	60a3      	str	r3, [r4, #8]
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	4433      	add	r3, r6
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394e:	462a      	mov	r2, r5
 8003950:	f000 fae6 	bl	8003f20 <_realloc_r>
 8003954:	4606      	mov	r6, r0
 8003956:	2800      	cmp	r0, #0
 8003958:	d1e0      	bne.n	800391c <__ssputs_r+0x5c>
 800395a:	4650      	mov	r0, sl
 800395c:	6921      	ldr	r1, [r4, #16]
 800395e:	f7ff feb9 	bl	80036d4 <_free_r>
 8003962:	230c      	movs	r3, #12
 8003964:	f8ca 3000 	str.w	r3, [sl]
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f04f 30ff 	mov.w	r0, #4294967295
 800396e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	e7e9      	b.n	800394a <__ssputs_r+0x8a>
	...

08003978 <_svfiprintf_r>:
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	4698      	mov	r8, r3
 800397e:	898b      	ldrh	r3, [r1, #12]
 8003980:	4607      	mov	r7, r0
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	460d      	mov	r5, r1
 8003986:	4614      	mov	r4, r2
 8003988:	b09d      	sub	sp, #116	@ 0x74
 800398a:	d510      	bpl.n	80039ae <_svfiprintf_r+0x36>
 800398c:	690b      	ldr	r3, [r1, #16]
 800398e:	b973      	cbnz	r3, 80039ae <_svfiprintf_r+0x36>
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	f7ff ff09 	bl	80037a8 <_malloc_r>
 8003996:	6028      	str	r0, [r5, #0]
 8003998:	6128      	str	r0, [r5, #16]
 800399a:	b930      	cbnz	r0, 80039aa <_svfiprintf_r+0x32>
 800399c:	230c      	movs	r3, #12
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	b01d      	add	sp, #116	@ 0x74
 80039a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039aa:	2340      	movs	r3, #64	@ 0x40
 80039ac:	616b      	str	r3, [r5, #20]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80039b2:	2320      	movs	r3, #32
 80039b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039b8:	2330      	movs	r3, #48	@ 0x30
 80039ba:	f04f 0901 	mov.w	r9, #1
 80039be:	f8cd 800c 	str.w	r8, [sp, #12]
 80039c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003b5c <_svfiprintf_r+0x1e4>
 80039c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039ca:	4623      	mov	r3, r4
 80039cc:	469a      	mov	sl, r3
 80039ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d2:	b10a      	cbz	r2, 80039d8 <_svfiprintf_r+0x60>
 80039d4:	2a25      	cmp	r2, #37	@ 0x25
 80039d6:	d1f9      	bne.n	80039cc <_svfiprintf_r+0x54>
 80039d8:	ebba 0b04 	subs.w	fp, sl, r4
 80039dc:	d00b      	beq.n	80039f6 <_svfiprintf_r+0x7e>
 80039de:	465b      	mov	r3, fp
 80039e0:	4622      	mov	r2, r4
 80039e2:	4629      	mov	r1, r5
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff ff6b 	bl	80038c0 <__ssputs_r>
 80039ea:	3001      	adds	r0, #1
 80039ec:	f000 80a7 	beq.w	8003b3e <_svfiprintf_r+0x1c6>
 80039f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039f2:	445a      	add	r2, fp
 80039f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80039f6:	f89a 3000 	ldrb.w	r3, [sl]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 809f 	beq.w	8003b3e <_svfiprintf_r+0x1c6>
 8003a00:	2300      	movs	r3, #0
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0a:	f10a 0a01 	add.w	sl, sl, #1
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	9307      	str	r3, [sp, #28]
 8003a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a18:	4654      	mov	r4, sl
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a20:	484e      	ldr	r0, [pc, #312]	@ (8003b5c <_svfiprintf_r+0x1e4>)
 8003a22:	f000 fa61 	bl	8003ee8 <memchr>
 8003a26:	9a04      	ldr	r2, [sp, #16]
 8003a28:	b9d8      	cbnz	r0, 8003a62 <_svfiprintf_r+0xea>
 8003a2a:	06d0      	lsls	r0, r2, #27
 8003a2c:	bf44      	itt	mi
 8003a2e:	2320      	movmi	r3, #32
 8003a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a34:	0711      	lsls	r1, r2, #28
 8003a36:	bf44      	itt	mi
 8003a38:	232b      	movmi	r3, #43	@ 0x2b
 8003a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a44:	d015      	beq.n	8003a72 <_svfiprintf_r+0xfa>
 8003a46:	4654      	mov	r4, sl
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	9a07      	ldr	r2, [sp, #28]
 8003a50:	4621      	mov	r1, r4
 8003a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a56:	3b30      	subs	r3, #48	@ 0x30
 8003a58:	2b09      	cmp	r3, #9
 8003a5a:	d94b      	bls.n	8003af4 <_svfiprintf_r+0x17c>
 8003a5c:	b1b0      	cbz	r0, 8003a8c <_svfiprintf_r+0x114>
 8003a5e:	9207      	str	r2, [sp, #28]
 8003a60:	e014      	b.n	8003a8c <_svfiprintf_r+0x114>
 8003a62:	eba0 0308 	sub.w	r3, r0, r8
 8003a66:	fa09 f303 	lsl.w	r3, r9, r3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	46a2      	mov	sl, r4
 8003a6e:	9304      	str	r3, [sp, #16]
 8003a70:	e7d2      	b.n	8003a18 <_svfiprintf_r+0xa0>
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	1d19      	adds	r1, r3, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	9103      	str	r1, [sp, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bfbb      	ittet	lt
 8003a7e:	425b      	neglt	r3, r3
 8003a80:	f042 0202 	orrlt.w	r2, r2, #2
 8003a84:	9307      	strge	r3, [sp, #28]
 8003a86:	9307      	strlt	r3, [sp, #28]
 8003a88:	bfb8      	it	lt
 8003a8a:	9204      	strlt	r2, [sp, #16]
 8003a8c:	7823      	ldrb	r3, [r4, #0]
 8003a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a90:	d10a      	bne.n	8003aa8 <_svfiprintf_r+0x130>
 8003a92:	7863      	ldrb	r3, [r4, #1]
 8003a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a96:	d132      	bne.n	8003afe <_svfiprintf_r+0x186>
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	3402      	adds	r4, #2
 8003a9c:	1d1a      	adds	r2, r3, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	9203      	str	r2, [sp, #12]
 8003aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b60 <_svfiprintf_r+0x1e8>
 8003aac:	2203      	movs	r2, #3
 8003aae:	4650      	mov	r0, sl
 8003ab0:	7821      	ldrb	r1, [r4, #0]
 8003ab2:	f000 fa19 	bl	8003ee8 <memchr>
 8003ab6:	b138      	cbz	r0, 8003ac8 <_svfiprintf_r+0x150>
 8003ab8:	2240      	movs	r2, #64	@ 0x40
 8003aba:	9b04      	ldr	r3, [sp, #16]
 8003abc:	eba0 000a 	sub.w	r0, r0, sl
 8003ac0:	4082      	lsls	r2, r0
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	3401      	adds	r4, #1
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003acc:	2206      	movs	r2, #6
 8003ace:	4825      	ldr	r0, [pc, #148]	@ (8003b64 <_svfiprintf_r+0x1ec>)
 8003ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ad4:	f000 fa08 	bl	8003ee8 <memchr>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d036      	beq.n	8003b4a <_svfiprintf_r+0x1d2>
 8003adc:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <_svfiprintf_r+0x1f0>)
 8003ade:	bb1b      	cbnz	r3, 8003b28 <_svfiprintf_r+0x1b0>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	3307      	adds	r3, #7
 8003ae4:	f023 0307 	bic.w	r3, r3, #7
 8003ae8:	3308      	adds	r3, #8
 8003aea:	9303      	str	r3, [sp, #12]
 8003aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aee:	4433      	add	r3, r6
 8003af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003af2:	e76a      	b.n	80039ca <_svfiprintf_r+0x52>
 8003af4:	460c      	mov	r4, r1
 8003af6:	2001      	movs	r0, #1
 8003af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003afc:	e7a8      	b.n	8003a50 <_svfiprintf_r+0xd8>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f04f 0c0a 	mov.w	ip, #10
 8003b04:	4619      	mov	r1, r3
 8003b06:	3401      	adds	r4, #1
 8003b08:	9305      	str	r3, [sp, #20]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b10:	3a30      	subs	r2, #48	@ 0x30
 8003b12:	2a09      	cmp	r2, #9
 8003b14:	d903      	bls.n	8003b1e <_svfiprintf_r+0x1a6>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0c6      	beq.n	8003aa8 <_svfiprintf_r+0x130>
 8003b1a:	9105      	str	r1, [sp, #20]
 8003b1c:	e7c4      	b.n	8003aa8 <_svfiprintf_r+0x130>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2301      	movs	r3, #1
 8003b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b26:	e7f0      	b.n	8003b0a <_svfiprintf_r+0x192>
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	462a      	mov	r2, r5
 8003b2e:	4638      	mov	r0, r7
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <_svfiprintf_r+0x1f4>)
 8003b32:	a904      	add	r1, sp, #16
 8003b34:	f3af 8000 	nop.w
 8003b38:	1c42      	adds	r2, r0, #1
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	d1d6      	bne.n	8003aec <_svfiprintf_r+0x174>
 8003b3e:	89ab      	ldrh	r3, [r5, #12]
 8003b40:	065b      	lsls	r3, r3, #25
 8003b42:	f53f af2d 	bmi.w	80039a0 <_svfiprintf_r+0x28>
 8003b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b48:	e72c      	b.n	80039a4 <_svfiprintf_r+0x2c>
 8003b4a:	ab03      	add	r3, sp, #12
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4638      	mov	r0, r7
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <_svfiprintf_r+0x1f4>)
 8003b54:	a904      	add	r1, sp, #16
 8003b56:	f000 f87d 	bl	8003c54 <_printf_i>
 8003b5a:	e7ed      	b.n	8003b38 <_svfiprintf_r+0x1c0>
 8003b5c:	08003fde 	.word	0x08003fde
 8003b60:	08003fe4 	.word	0x08003fe4
 8003b64:	08003fe8 	.word	0x08003fe8
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	080038c1 	.word	0x080038c1

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4616      	mov	r6, r2
 8003b76:	4698      	mov	r8, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	bfb8      	it	lt
 8003b82:	4613      	movlt	r3, r2
 8003b84:	6033      	str	r3, [r6, #0]
 8003b86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b90:	b10a      	cbz	r2, 8003b96 <_printf_common+0x26>
 8003b92:	3301      	adds	r3, #1
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	0699      	lsls	r1, r3, #26
 8003b9a:	bf42      	ittt	mi
 8003b9c:	6833      	ldrmi	r3, [r6, #0]
 8003b9e:	3302      	addmi	r3, #2
 8003ba0:	6033      	strmi	r3, [r6, #0]
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	f015 0506 	ands.w	r5, r5, #6
 8003ba8:	d106      	bne.n	8003bb8 <_printf_common+0x48>
 8003baa:	f104 0a19 	add.w	sl, r4, #25
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	6832      	ldr	r2, [r6, #0]
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	dc2b      	bgt.n	8003c10 <_printf_common+0xa0>
 8003bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	3b00      	subs	r3, #0
 8003bc0:	bf18      	it	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	0692      	lsls	r2, r2, #26
 8003bc6:	d430      	bmi.n	8003c2a <_printf_common+0xba>
 8003bc8:	4641      	mov	r1, r8
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bd0:	47c8      	blx	r9
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d023      	beq.n	8003c1e <_printf_common+0xae>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf14      	ite	ne
 8003be2:	2500      	movne	r5, #0
 8003be4:	6833      	ldreq	r3, [r6, #0]
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	bf08      	it	eq
 8003bec:	68e5      	ldreq	r5, [r4, #12]
 8003bee:	f104 041a 	add.w	r4, r4, #26
 8003bf2:	bf08      	it	eq
 8003bf4:	1aed      	subeq	r5, r5, r3
 8003bf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bfa:	bf08      	it	eq
 8003bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bfc4      	itt	gt
 8003c04:	1a9b      	subgt	r3, r3, r2
 8003c06:	18ed      	addgt	r5, r5, r3
 8003c08:	42b5      	cmp	r5, r6
 8003c0a:	d11a      	bne.n	8003c42 <_printf_common+0xd2>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e008      	b.n	8003c22 <_printf_common+0xb2>
 8003c10:	2301      	movs	r3, #1
 8003c12:	4652      	mov	r2, sl
 8003c14:	4641      	mov	r1, r8
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c8      	blx	r9
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d103      	bne.n	8003c26 <_printf_common+0xb6>
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c26:	3501      	adds	r5, #1
 8003c28:	e7c1      	b.n	8003bae <_printf_common+0x3e>
 8003c2a:	2030      	movs	r0, #48	@ 0x30
 8003c2c:	18e1      	adds	r1, r4, r3
 8003c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c38:	4422      	add	r2, r4
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c40:	e7c2      	b.n	8003bc8 <_printf_common+0x58>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4622      	mov	r2, r4
 8003c46:	4641      	mov	r1, r8
 8003c48:	4638      	mov	r0, r7
 8003c4a:	47c8      	blx	r9
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d0e6      	beq.n	8003c1e <_printf_common+0xae>
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7d9      	b.n	8003c08 <_printf_common+0x98>

08003c54 <_printf_i>:
 8003c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	7e0f      	ldrb	r7, [r1, #24]
 8003c5a:	4691      	mov	r9, r2
 8003c5c:	2f78      	cmp	r7, #120	@ 0x78
 8003c5e:	4680      	mov	r8, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	469a      	mov	sl, r3
 8003c64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c6a:	d807      	bhi.n	8003c7c <_printf_i+0x28>
 8003c6c:	2f62      	cmp	r7, #98	@ 0x62
 8003c6e:	d80a      	bhi.n	8003c86 <_printf_i+0x32>
 8003c70:	2f00      	cmp	r7, #0
 8003c72:	f000 80d3 	beq.w	8003e1c <_printf_i+0x1c8>
 8003c76:	2f58      	cmp	r7, #88	@ 0x58
 8003c78:	f000 80ba 	beq.w	8003df0 <_printf_i+0x19c>
 8003c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c84:	e03a      	b.n	8003cfc <_printf_i+0xa8>
 8003c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c8a:	2b15      	cmp	r3, #21
 8003c8c:	d8f6      	bhi.n	8003c7c <_printf_i+0x28>
 8003c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c94 <_printf_i+0x40>)
 8003c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003c7d 	.word	0x08003c7d
 8003ca0:	08003c7d 	.word	0x08003c7d
 8003ca4:	08003c7d 	.word	0x08003c7d
 8003ca8:	08003c7d 	.word	0x08003c7d
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003c7d 	.word	0x08003c7d
 8003cb4:	08003c7d 	.word	0x08003c7d
 8003cb8:	08003c7d 	.word	0x08003c7d
 8003cbc:	08003c7d 	.word	0x08003c7d
 8003cc0:	08003e03 	.word	0x08003e03
 8003cc4:	08003d2b 	.word	0x08003d2b
 8003cc8:	08003dbd 	.word	0x08003dbd
 8003ccc:	08003c7d 	.word	0x08003c7d
 8003cd0:	08003c7d 	.word	0x08003c7d
 8003cd4:	08003e25 	.word	0x08003e25
 8003cd8:	08003c7d 	.word	0x08003c7d
 8003cdc:	08003d2b 	.word	0x08003d2b
 8003ce0:	08003c7d 	.word	0x08003c7d
 8003ce4:	08003c7d 	.word	0x08003c7d
 8003ce8:	08003dc5 	.word	0x08003dc5
 8003cec:	6833      	ldr	r3, [r6, #0]
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6032      	str	r2, [r6, #0]
 8003cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e09e      	b.n	8003e3e <_printf_i+0x1ea>
 8003d00:	6833      	ldr	r3, [r6, #0]
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	1d19      	adds	r1, r3, #4
 8003d06:	6031      	str	r1, [r6, #0]
 8003d08:	0606      	lsls	r6, r0, #24
 8003d0a:	d501      	bpl.n	8003d10 <_printf_i+0xbc>
 8003d0c:	681d      	ldr	r5, [r3, #0]
 8003d0e:	e003      	b.n	8003d18 <_printf_i+0xc4>
 8003d10:	0645      	lsls	r5, r0, #25
 8003d12:	d5fb      	bpl.n	8003d0c <_printf_i+0xb8>
 8003d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	da03      	bge.n	8003d24 <_printf_i+0xd0>
 8003d1c:	232d      	movs	r3, #45	@ 0x2d
 8003d1e:	426d      	negs	r5, r5
 8003d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d24:	230a      	movs	r3, #10
 8003d26:	4859      	ldr	r0, [pc, #356]	@ (8003e8c <_printf_i+0x238>)
 8003d28:	e011      	b.n	8003d4e <_printf_i+0xfa>
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	0608      	lsls	r0, r1, #24
 8003d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d34:	d402      	bmi.n	8003d3c <_printf_i+0xe8>
 8003d36:	0649      	lsls	r1, r1, #25
 8003d38:	bf48      	it	mi
 8003d3a:	b2ad      	uxthmi	r5, r5
 8003d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d3e:	6033      	str	r3, [r6, #0]
 8003d40:	bf14      	ite	ne
 8003d42:	230a      	movne	r3, #10
 8003d44:	2308      	moveq	r3, #8
 8003d46:	4851      	ldr	r0, [pc, #324]	@ (8003e8c <_printf_i+0x238>)
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d4e:	6866      	ldr	r6, [r4, #4]
 8003d50:	2e00      	cmp	r6, #0
 8003d52:	bfa8      	it	ge
 8003d54:	6821      	ldrge	r1, [r4, #0]
 8003d56:	60a6      	str	r6, [r4, #8]
 8003d58:	bfa4      	itt	ge
 8003d5a:	f021 0104 	bicge.w	r1, r1, #4
 8003d5e:	6021      	strge	r1, [r4, #0]
 8003d60:	b90d      	cbnz	r5, 8003d66 <_printf_i+0x112>
 8003d62:	2e00      	cmp	r6, #0
 8003d64:	d04b      	beq.n	8003dfe <_printf_i+0x1aa>
 8003d66:	4616      	mov	r6, r2
 8003d68:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d6c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d70:	5dc7      	ldrb	r7, [r0, r7]
 8003d72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d76:	462f      	mov	r7, r5
 8003d78:	42bb      	cmp	r3, r7
 8003d7a:	460d      	mov	r5, r1
 8003d7c:	d9f4      	bls.n	8003d68 <_printf_i+0x114>
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d10b      	bne.n	8003d9a <_printf_i+0x146>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	07df      	lsls	r7, r3, #31
 8003d86:	d508      	bpl.n	8003d9a <_printf_i+0x146>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	6861      	ldr	r1, [r4, #4]
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	bfde      	ittt	le
 8003d90:	2330      	movle	r3, #48	@ 0x30
 8003d92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d9a:	1b92      	subs	r2, r2, r6
 8003d9c:	6122      	str	r2, [r4, #16]
 8003d9e:	464b      	mov	r3, r9
 8003da0:	4621      	mov	r1, r4
 8003da2:	4640      	mov	r0, r8
 8003da4:	f8cd a000 	str.w	sl, [sp]
 8003da8:	aa03      	add	r2, sp, #12
 8003daa:	f7ff fee1 	bl	8003b70 <_printf_common>
 8003dae:	3001      	adds	r0, #1
 8003db0:	d14a      	bne.n	8003e48 <_printf_i+0x1f4>
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	b004      	add	sp, #16
 8003db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	f043 0320 	orr.w	r3, r3, #32
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	2778      	movs	r7, #120	@ 0x78
 8003dc6:	4832      	ldr	r0, [pc, #200]	@ (8003e90 <_printf_i+0x23c>)
 8003dc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	6831      	ldr	r1, [r6, #0]
 8003dd0:	061f      	lsls	r7, r3, #24
 8003dd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dd6:	d402      	bmi.n	8003dde <_printf_i+0x18a>
 8003dd8:	065f      	lsls	r7, r3, #25
 8003dda:	bf48      	it	mi
 8003ddc:	b2ad      	uxthmi	r5, r5
 8003dde:	6031      	str	r1, [r6, #0]
 8003de0:	07d9      	lsls	r1, r3, #31
 8003de2:	bf44      	itt	mi
 8003de4:	f043 0320 	orrmi.w	r3, r3, #32
 8003de8:	6023      	strmi	r3, [r4, #0]
 8003dea:	b11d      	cbz	r5, 8003df4 <_printf_i+0x1a0>
 8003dec:	2310      	movs	r3, #16
 8003dee:	e7ab      	b.n	8003d48 <_printf_i+0xf4>
 8003df0:	4826      	ldr	r0, [pc, #152]	@ (8003e8c <_printf_i+0x238>)
 8003df2:	e7e9      	b.n	8003dc8 <_printf_i+0x174>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f023 0320 	bic.w	r3, r3, #32
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	e7f6      	b.n	8003dec <_printf_i+0x198>
 8003dfe:	4616      	mov	r6, r2
 8003e00:	e7bd      	b.n	8003d7e <_printf_i+0x12a>
 8003e02:	6833      	ldr	r3, [r6, #0]
 8003e04:	6825      	ldr	r5, [r4, #0]
 8003e06:	1d18      	adds	r0, r3, #4
 8003e08:	6961      	ldr	r1, [r4, #20]
 8003e0a:	6030      	str	r0, [r6, #0]
 8003e0c:	062e      	lsls	r6, r5, #24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	d501      	bpl.n	8003e16 <_printf_i+0x1c2>
 8003e12:	6019      	str	r1, [r3, #0]
 8003e14:	e002      	b.n	8003e1c <_printf_i+0x1c8>
 8003e16:	0668      	lsls	r0, r5, #25
 8003e18:	d5fb      	bpl.n	8003e12 <_printf_i+0x1be>
 8003e1a:	8019      	strh	r1, [r3, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4616      	mov	r6, r2
 8003e20:	6123      	str	r3, [r4, #16]
 8003e22:	e7bc      	b.n	8003d9e <_printf_i+0x14a>
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	1d1a      	adds	r2, r3, #4
 8003e2a:	6032      	str	r2, [r6, #0]
 8003e2c:	681e      	ldr	r6, [r3, #0]
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 f859 	bl	8003ee8 <memchr>
 8003e36:	b108      	cbz	r0, 8003e3c <_printf_i+0x1e8>
 8003e38:	1b80      	subs	r0, r0, r6
 8003e3a:	6060      	str	r0, [r4, #4]
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	2300      	movs	r3, #0
 8003e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e46:	e7aa      	b.n	8003d9e <_printf_i+0x14a>
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	47d0      	blx	sl
 8003e52:	3001      	adds	r0, #1
 8003e54:	d0ad      	beq.n	8003db2 <_printf_i+0x15e>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	079b      	lsls	r3, r3, #30
 8003e5a:	d413      	bmi.n	8003e84 <_printf_i+0x230>
 8003e5c:	68e0      	ldr	r0, [r4, #12]
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	4298      	cmp	r0, r3
 8003e62:	bfb8      	it	lt
 8003e64:	4618      	movlt	r0, r3
 8003e66:	e7a6      	b.n	8003db6 <_printf_i+0x162>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	4640      	mov	r0, r8
 8003e70:	47d0      	blx	sl
 8003e72:	3001      	adds	r0, #1
 8003e74:	d09d      	beq.n	8003db2 <_printf_i+0x15e>
 8003e76:	3501      	adds	r5, #1
 8003e78:	68e3      	ldr	r3, [r4, #12]
 8003e7a:	9903      	ldr	r1, [sp, #12]
 8003e7c:	1a5b      	subs	r3, r3, r1
 8003e7e:	42ab      	cmp	r3, r5
 8003e80:	dcf2      	bgt.n	8003e68 <_printf_i+0x214>
 8003e82:	e7eb      	b.n	8003e5c <_printf_i+0x208>
 8003e84:	2500      	movs	r5, #0
 8003e86:	f104 0619 	add.w	r6, r4, #25
 8003e8a:	e7f5      	b.n	8003e78 <_printf_i+0x224>
 8003e8c:	08003fef 	.word	0x08003fef
 8003e90:	08004000 	.word	0x08004000

08003e94 <memmove>:
 8003e94:	4288      	cmp	r0, r1
 8003e96:	b510      	push	{r4, lr}
 8003e98:	eb01 0402 	add.w	r4, r1, r2
 8003e9c:	d902      	bls.n	8003ea4 <memmove+0x10>
 8003e9e:	4284      	cmp	r4, r0
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	d807      	bhi.n	8003eb4 <memmove+0x20>
 8003ea4:	1e43      	subs	r3, r0, #1
 8003ea6:	42a1      	cmp	r1, r4
 8003ea8:	d008      	beq.n	8003ebc <memmove+0x28>
 8003eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eb2:	e7f8      	b.n	8003ea6 <memmove+0x12>
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	4402      	add	r2, r0
 8003eb8:	428a      	cmp	r2, r1
 8003eba:	d100      	bne.n	8003ebe <memmove+0x2a>
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ec6:	e7f7      	b.n	8003eb8 <memmove+0x24>

08003ec8 <_sbrk_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4d05      	ldr	r5, [pc, #20]	@ (8003ee4 <_sbrk_r+0x1c>)
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fc fffe 	bl	8000ed4 <_sbrk>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_sbrk_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_sbrk_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200003ec 	.word	0x200003ec

08003ee8 <memchr>:
 8003ee8:	4603      	mov	r3, r0
 8003eea:	b510      	push	{r4, lr}
 8003eec:	b2c9      	uxtb	r1, r1
 8003eee:	4402      	add	r2, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	d101      	bne.n	8003efa <memchr+0x12>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e003      	b.n	8003f02 <memchr+0x1a>
 8003efa:	7804      	ldrb	r4, [r0, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	428c      	cmp	r4, r1
 8003f00:	d1f6      	bne.n	8003ef0 <memchr+0x8>
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <memcpy>:
 8003f04:	440a      	add	r2, r1
 8003f06:	4291      	cmp	r1, r2
 8003f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f0c:	d100      	bne.n	8003f10 <memcpy+0xc>
 8003f0e:	4770      	bx	lr
 8003f10:	b510      	push	{r4, lr}
 8003f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f16:	4291      	cmp	r1, r2
 8003f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f1c:	d1f9      	bne.n	8003f12 <memcpy+0xe>
 8003f1e:	bd10      	pop	{r4, pc}

08003f20 <_realloc_r>:
 8003f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f24:	4680      	mov	r8, r0
 8003f26:	4615      	mov	r5, r2
 8003f28:	460c      	mov	r4, r1
 8003f2a:	b921      	cbnz	r1, 8003f36 <_realloc_r+0x16>
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	f7ff bc39 	b.w	80037a8 <_malloc_r>
 8003f36:	b92a      	cbnz	r2, 8003f44 <_realloc_r+0x24>
 8003f38:	f7ff fbcc 	bl	80036d4 <_free_r>
 8003f3c:	2400      	movs	r4, #0
 8003f3e:	4620      	mov	r0, r4
 8003f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f44:	f000 f81a 	bl	8003f7c <_malloc_usable_size_r>
 8003f48:	4285      	cmp	r5, r0
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	d802      	bhi.n	8003f54 <_realloc_r+0x34>
 8003f4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f52:	d8f4      	bhi.n	8003f3e <_realloc_r+0x1e>
 8003f54:	4629      	mov	r1, r5
 8003f56:	4640      	mov	r0, r8
 8003f58:	f7ff fc26 	bl	80037a8 <_malloc_r>
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0ec      	beq.n	8003f3c <_realloc_r+0x1c>
 8003f62:	42b5      	cmp	r5, r6
 8003f64:	462a      	mov	r2, r5
 8003f66:	4621      	mov	r1, r4
 8003f68:	bf28      	it	cs
 8003f6a:	4632      	movcs	r2, r6
 8003f6c:	f7ff ffca 	bl	8003f04 <memcpy>
 8003f70:	4621      	mov	r1, r4
 8003f72:	4640      	mov	r0, r8
 8003f74:	f7ff fbae 	bl	80036d4 <_free_r>
 8003f78:	463c      	mov	r4, r7
 8003f7a:	e7e0      	b.n	8003f3e <_realloc_r+0x1e>

08003f7c <_malloc_usable_size_r>:
 8003f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f80:	1f18      	subs	r0, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfbc      	itt	lt
 8003f86:	580b      	ldrlt	r3, [r1, r0]
 8003f88:	18c0      	addlt	r0, r0, r3
 8003f8a:	4770      	bx	lr

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
