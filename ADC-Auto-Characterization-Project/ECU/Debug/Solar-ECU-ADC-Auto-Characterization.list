
Solar-ECU-ADC-Auto-Characterization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076fc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080078e8  080078e8  000088e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d60  08007d60  00008d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d68  08007d68  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d68  08007d68  00008d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d6c  08007d6c  00008d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001d4  08007f44  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007f44  000093bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083d6  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c0  00000000  00000000  000115d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00012e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000605  00000000  00000000  00013688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a483  00000000  00000000  00013c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e90  00000000  00000000  0002e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098054  00000000  00000000  00037fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d0  00000000  00000000  000d0038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000d3408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080078cc 	.word	0x080078cc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080078cc 	.word	0x080078cc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	2200      	movs	r2, #0
 8000c44:	2300      	movs	r3, #0
 8000c46:	4604      	mov	r4, r0
 8000c48:	460d      	mov	r5, r1
 8000c4a:	f7ff ff23 	bl	8000a94 <__aeabi_dcmplt>
 8000c4e:	b928      	cbnz	r0, 8000c5c <__aeabi_d2lz+0x1c>
 8000c50:	4620      	mov	r0, r4
 8000c52:	4629      	mov	r1, r5
 8000c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c58:	f000 b80a 	b.w	8000c70 <__aeabi_d2ulz>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c62:	f000 f805 	bl	8000c70 <__aeabi_d2ulz>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	bd38      	pop	{r3, r4, r5, pc}
 8000c6e:	bf00      	nop

08000c70 <__aeabi_d2ulz>:
 8000c70:	b5d0      	push	{r4, r6, r7, lr}
 8000c72:	2200      	movs	r2, #0
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <__aeabi_d2ulz+0x34>)
 8000c76:	4606      	mov	r6, r0
 8000c78:	460f      	mov	r7, r1
 8000c7a:	f7ff fc99 	bl	80005b0 <__aeabi_dmul>
 8000c7e:	f7ff ff6f 	bl	8000b60 <__aeabi_d2uiz>
 8000c82:	4604      	mov	r4, r0
 8000c84:	f7ff fc1a 	bl	80004bc <__aeabi_ui2d>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <__aeabi_d2ulz+0x38>)
 8000c8c:	f7ff fc90 	bl	80005b0 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4630      	mov	r0, r6
 8000c96:	4639      	mov	r1, r7
 8000c98:	f7ff fad2 	bl	8000240 <__aeabi_dsub>
 8000c9c:	f7ff ff60 	bl	8000b60 <__aeabi_d2uiz>
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca4:	3df00000 	.word	0x3df00000
 8000ca8:	41f00000 	.word	0x41f00000
 8000cac:	00000000 	.word	0x00000000

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fb7f 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f891 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 f949 	bl	8000f54 <MX_GPIO_Init>
  MX_UART5_Init();
 8000cc2:	f000 f91d 	bl	8000f00 <MX_UART5_Init>
  MX_ADC1_Init();
 8000cc6:	f000 f8dd 	bl	8000e84 <MX_ADC1_Init>
	  /*memset(rx_buff, 0, sizeof(rx_buff));
	  HAL_UART_Receive(&huart5, (uint8_t*)rx_buff, sizeof(rx_buff), 1000);

	  if (rx_buff[0] != 's') continue; // If we haven't received the start command, continue to the next iteration of the while loop
*/
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4840      	ldr	r0, [pc, #256]	@ (8000dd0 <main+0x120>)
 8000cce:	f001 fac7 	bl	8002260 <HAL_GPIO_TogglePin>

	  int adcValuesSum = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

	  int numSamples = 50;
 8000cd8:	2332      	movs	r3, #50	@ 0x32
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	  HAL_ADC_Start(&hadc1);
 8000cde:	483d      	ldr	r0, [pc, #244]	@ (8000dd4 <main+0x124>)
 8000ce0:	f000 fcda 	bl	8001698 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	483b      	ldr	r0, [pc, #236]	@ (8000dd4 <main+0x124>)
 8000ce8:	f000 fd84 	bl	80017f4 <HAL_ADC_PollForConversion>

	  // Get 10 spaced out ADC values
	  for (int i = 0; i < numSamples; i++){
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000cf2:	e014      	b.n	8000d1e <main+0x6e>
		  int out = HAL_ADC_GetValue(&hadc1);
 8000cf4:	4837      	ldr	r0, [pc, #220]	@ (8000dd4 <main+0x124>)
 8000cf6:	f000 fe83 	bl	8001a00 <HAL_ADC_GetValue>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		  adcValuesSum += out;
 8000d00:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d08:	4413      	add	r3, r2
 8000d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		  HAL_Delay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fbb4 	bl	800147c <HAL_Delay>
	  for (int i = 0; i < numSamples; i++){
 8000d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000d1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbe4      	blt.n	8000cf4 <main+0x44>
	  }

	  int adcValuesAveraged = adcValuesSum / numSamples;
 8000d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  int ogADC = adcValuesAveraged;
 8000d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    int adcError = -72.5 + 0.0133*adcValuesAveraged;
 8000d42:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000d46:	f7ff fbc9 	bl	80004dc <__aeabi_i2d>
 8000d4a:	a31d      	add	r3, pc, #116	@ (adr r3, 8000dc0 <main+0x110>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fc2e 	bl	80005b0 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	a31a      	add	r3, pc, #104	@ (adr r3, 8000dc8 <main+0x118>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fa6d 	bl	8000240 <__aeabi_dsub>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff fecf 	bl	8000b10 <__aeabi_d2iz>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    adcValuesAveraged = adcValuesAveraged - adcError;
 8000d78:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000d7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    // Gove adc error as a google sheets function: on D3, D3
    // =-61 + -0.0995*D3 + 5.34E-04*D3^2 + -1.07E-06*D3^3 + 1.06E-09*D3^4 + -5.65E-13*D3^5 + 1.63E-16*D3^6 + -2.41E-20*D3^7 + 1.41E-24*D3^8

	  memset(tx_buff, 0, sizeof(tx_buff));
 8000d86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000d8a:	2264      	movs	r2, #100	@ 0x64
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 f9d3 	bl	800413a <memset>
	  sprintf(tx_buff, "%d, %d\n\r", ogADC, adcValuesAveraged);
 8000d94:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000d9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000da0:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <main+0x128>)
 8000da2:	f003 f967 	bl	8004074 <siprintf>

	  HAL_UART_Transmit(&huart5, (uint8_t*)tx_buff, sizeof(tx_buff), 1000);
 8000da6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dae:	2264      	movs	r2, #100	@ 0x64
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <main+0x12c>)
 8000db2:	f002 f85d 	bl	8002e70 <HAL_UART_Transmit>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000db6:	2104      	movs	r1, #4
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <main+0x120>)
 8000dba:	f001 fa51 	bl	8002260 <HAL_GPIO_TogglePin>
	{
 8000dbe:	e784      	b.n	8000cca <main+0x1a>
 8000dc0:	c84b5dcc 	.word	0xc84b5dcc
 8000dc4:	3f8b3d07 	.word	0x3f8b3d07
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	40522000 	.word	0x40522000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	200001f0 	.word	0x200001f0
 8000dd8:	080078e8 	.word	0x080078e8
 8000ddc:	20000220 	.word	0x20000220

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b096      	sub	sp, #88	@ 0x58
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dea:	2228      	movs	r2, #40	@ 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f9a3 	bl	800413a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fa33 	bl	8002294 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e34:	f000 f8d8 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fca0 	bl	8002798 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e5e:	f000 f8c3 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e62:	2302      	movs	r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fe21 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e78:	f000 f8b6 	bl	8000fe8 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3758      	adds	r7, #88	@ 0x58
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000e96:	4a19      	ldr	r2, [pc, #100]	@ (8000efc <MX_ADC1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000eae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000eb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec0:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000ec2:	f000 faff 	bl	80014c4 <HAL_ADC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 f88c 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_ADC1_Init+0x74>)
 8000ee2:	f000 fd99 	bl	8001a18 <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000eec:	f000 f87c 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200001f0 	.word	0x200001f0
 8000efc:	40012400 	.word	0x40012400

08000f00 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <MX_UART5_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_UART5_Init+0x4c>)
 8000f38:	f001 ff4a 	bl	8002dd0 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 f851 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000220 	.word	0x20000220
 8000f50:	40005000 	.word	0x40005000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_GPIO_Init+0x8c>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0x90>)
 8000fb6:	f001 f93b 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_GPIO_Init+0x90>)
 8000fd2:	f000 ff99 	bl	8001f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <Error_Handler+0x8>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <HAL_MspInit+0x5c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_MspInit+0x5c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_MspInit+0x60>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_MspInit+0x60>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000

08001058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_ADC_MspInit+0x6c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d121      	bne.n	80010bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a8:	2310      	movs	r3, #16
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_ADC_MspInit+0x74>)
 80010b8:	f000 ff26 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012400 	.word	0x40012400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40011000 	.word	0x40011000

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <HAL_UART_MspInit+0xa4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d13c      	bne.n	800116a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a20      	ldr	r2, [pc, #128]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 80010f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a1a      	ldr	r2, [pc, #104]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_UART_MspInit+0xa8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <HAL_UART_MspInit+0xac>)
 800114e:	f000 fedb 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001152:	2304      	movs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4619      	mov	r1, r3
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <HAL_UART_MspInit+0xb0>)
 8001166:	f000 fecf 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40005000 	.word	0x40005000
 8001178:	40021000 	.word	0x40021000
 800117c:	40011000 	.word	0x40011000
 8001180:	40011400 	.word	0x40011400

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f936 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <_getpid>:
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
 80011e0:	2301      	movs	r3, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <_kill>:
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
 80011f4:	f002 fff4 	bl	80041e0 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2216      	movs	r2, #22
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_exit>:
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffe7 	bl	80011ea <_kill>
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <_exit+0x12>

08001220 <_read>:
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f3af 8000 	nop.w
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <_fstat>:
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	2300      	movs	r3, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	2301      	movs	r3, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_lseek>:
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	2300      	movs	r3, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <_sbrk>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
 8001324:	f002 ff5c 	bl	80041e0 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000c000 	.word	0x2000c000
 8001354:	00000400 	.word	0x00000400
 8001358:	20000268 	.word	0x20000268
 800135c:	200003c0 	.word	0x200003c0

08001360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <Reset_Handler>:
 800136c:	f7ff fff8 	bl	8001360 <SystemInit>
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <LoopFillZerobss+0xe>)
 8001372:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <LoopFillZerobss+0x12>)
 8001374:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x16>)
 8001376:	2300      	movs	r3, #0
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:
 800137a:	58d4      	ldr	r4, [r2, r3]
 800137c:	50c4      	str	r4, [r0, r3]
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:
 8001380:	18c4      	adds	r4, r0, r3
 8001382:	428c      	cmp	r4, r1
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <LoopFillZerobss+0x1a>)
 8001388:	4c09      	ldr	r4, [pc, #36]	@ (80013b0 <LoopFillZerobss+0x1e>)
 800138a:	2300      	movs	r3, #0
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:
 8001392:	42a2      	cmp	r2, r4
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>
 8001396:	f002 ff29 	bl	80041ec <__libc_init_array>
 800139a:	f7ff fc89 	bl	8000cb0 <main>
 800139e:	4770      	bx	lr
 80013a0:	20000000 	.word	0x20000000
 80013a4:	200001d4 	.word	0x200001d4
 80013a8:	08007d70 	.word	0x08007d70
 80013ac:	200001d4 	.word	0x200001d4
 80013b0:	200003bc 	.word	0x200003bc

080013b4 <ADC1_2_IRQHandler>:
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 fd69 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fe0e 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fd73 	bl	8001eee <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 fd49 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a03      	ldr	r2, [pc, #12]	@ (8001464 <HAL_IncTick+0x20>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000008 	.word	0x20000008
 8001464:	2000026c 	.word	0x2000026c

08001468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	@ (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	2000026c 	.word	0x2000026c

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff fff0 	bl	8001468 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffe0 	bl	8001468 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0ce      	b.n	8001684 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fda8 	bl	8001058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fbd7 	bl	8001cbc <ADC_ConversionStop_Disable>
 800150e:	4603      	mov	r3, r0
 8001510:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 80a9 	bne.w	8001672 <HAL_ADC_Init+0x1ae>
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80a5 	bne.w	8001672 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001530:	f023 0302 	bic.w	r3, r3, #2
 8001534:	f043 0202 	orr.w	r2, r3, #2
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4951      	ldr	r1, [pc, #324]	@ (800168c <HAL_ADC_Init+0x1c8>)
 8001546:	428b      	cmp	r3, r1
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_Init+0x9c>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001552:	d002      	beq.n	800155a <HAL_ADC_Init+0x96>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	e004      	b.n	8001564 <HAL_ADC_Init+0xa0>
 800155a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800155e:	e001      	b.n	8001564 <HAL_ADC_Init+0xa0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001564:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7b1b      	ldrb	r3, [r3, #12]
 800156a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800156c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	4313      	orrs	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157c:	d003      	beq.n	8001586 <HAL_ADC_Init+0xc2>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d102      	bne.n	800158c <HAL_ADC_Init+0xc8>
 8001586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158a:	e000      	b.n	800158e <HAL_ADC_Init+0xca>
 800158c:	2300      	movs	r3, #0
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7d1b      	ldrb	r3, [r3, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d119      	bne.n	80015d0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7b1b      	ldrb	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	035a      	lsls	r2, r3, #13
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	e00b      	b.n	80015d0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	f043 0220 	orr.w	r2, r3, #32
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <HAL_ADC_Init+0x1cc>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001600:	d003      	beq.n	800160a <HAL_ADC_Init+0x146>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d104      	bne.n	8001614 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	3b01      	subs	r3, #1
 8001610:	051b      	lsls	r3, r3, #20
 8001612:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	430a      	orrs	r2, r1
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_ADC_Init+0x1d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800164e:	e018      	b.n	8001682 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	f023 0312 	bic.w	r3, r3, #18
 8001658:	f043 0210 	orr.w	r2, r3, #16
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001670:	e007      	b.n	8001682 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001682:	7dfb      	ldrb	r3, [r7, #23]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013c00 	.word	0x40013c00
 8001690:	ffe1f7fd 	.word	0xffe1f7fd
 8001694:	ff1f0efe 	.word	0xff1f0efe

08001698 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Start+0x1a>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e098      	b.n	80017e4 <HAL_ADC_Start+0x14c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 faa4 	bl	8001c08 <ADC_Enable>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 8087 	bne.w	80017da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a41      	ldr	r2, [pc, #260]	@ (80017ec <HAL_ADC_Start+0x154>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_Start+0x5e>
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_ADC_Start+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d026      	beq.n	800175e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001714:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001718:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001720:	e01d      	b.n	800175e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2f      	ldr	r2, [pc, #188]	@ (80017f0 <HAL_ADC_Start+0x158>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Start+0xaa>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2b      	ldr	r2, [pc, #172]	@ (80017ec <HAL_ADC_Start+0x154>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10d      	bne.n	800175e <HAL_ADC_Start+0xc6>
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_ADC_Start+0x158>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001756:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	f023 0206 	bic.w	r2, r3, #6
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001776:	e002      	b.n	800177e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0202 	mvn.w	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800179a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800179e:	d113      	bne.n	80017c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017a4:	4a11      	ldr	r2, [pc, #68]	@ (80017ec <HAL_ADC_Start+0x154>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d105      	bne.n	80017b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_ADC_Start+0x158>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	e00c      	b.n	80017e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e003      	b.n	80017e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40012800 	.word	0x40012800
 80017f0:	40012400 	.word	0x40012400

080017f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800180a:	f7ff fe2d 	bl	8001468 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	f043 0220 	orr.w	r2, r3, #32
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0d3      	b.n	80019de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d131      	bne.n	80018a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	d12a      	bne.n	80018a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001852:	e021      	b.n	8001898 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185a:	d01d      	beq.n	8001898 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_ADC_PollForConversion+0x7e>
 8001862:	f7ff fe01 	bl	8001468 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d212      	bcs.n	8001898 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10b      	bne.n	8001898 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f043 0204 	orr.w	r2, r3, #4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0a2      	b.n	80019de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0d6      	beq.n	8001854 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018a6:	e070      	b.n	800198a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018a8:	4b4f      	ldr	r3, [pc, #316]	@ (80019e8 <HAL_ADC_PollForConversion+0x1f4>)
 80018aa:	681c      	ldr	r4, [r3, #0]
 80018ac:	2002      	movs	r0, #2
 80018ae:	f001 f9b7 	bl	8002c20 <HAL_RCCEx_GetPeriphCLKFreq>
 80018b2:	4603      	mov	r3, r0
 80018b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6919      	ldr	r1, [r3, #16]
 80018be:	4b4b      	ldr	r3, [pc, #300]	@ (80019ec <HAL_ADC_PollForConversion+0x1f8>)
 80018c0:	400b      	ands	r3, r1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x104>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68d9      	ldr	r1, [r3, #12]
 80018cc:	4b48      	ldr	r3, [pc, #288]	@ (80019f0 <HAL_ADC_PollForConversion+0x1fc>)
 80018ce:	400b      	ands	r3, r1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x104>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6919      	ldr	r1, [r3, #16]
 80018da:	4b46      	ldr	r3, [pc, #280]	@ (80019f4 <HAL_ADC_PollForConversion+0x200>)
 80018dc:	400b      	ands	r3, r1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x100>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <HAL_ADC_PollForConversion+0x204>)
 80018ea:	400b      	ands	r3, r1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x100>
 80018f0:	2314      	movs	r3, #20
 80018f2:	e020      	b.n	8001936 <HAL_ADC_PollForConversion+0x142>
 80018f4:	2329      	movs	r3, #41	@ 0x29
 80018f6:	e01e      	b.n	8001936 <HAL_ADC_PollForConversion+0x142>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	4b3d      	ldr	r3, [pc, #244]	@ (80019f4 <HAL_ADC_PollForConversion+0x200>)
 8001900:	400b      	ands	r3, r1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_ADC_PollForConversion+0x120>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68d9      	ldr	r1, [r3, #12]
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <HAL_ADC_PollForConversion+0x204>)
 800190e:	400b      	ands	r3, r1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <HAL_ADC_PollForConversion+0x13c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_ADC_PollForConversion+0x208>)
 800191c:	400b      	ands	r3, r1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_ADC_PollForConversion+0x140>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68d9      	ldr	r1, [r3, #12]
 8001928:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <HAL_ADC_PollForConversion+0x208>)
 800192a:	400b      	ands	r3, r1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_ADC_PollForConversion+0x140>
 8001930:	2354      	movs	r3, #84	@ 0x54
 8001932:	e000      	b.n	8001936 <HAL_ADC_PollForConversion+0x142>
 8001934:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800193c:	e021      	b.n	8001982 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d01a      	beq.n	800197c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_ADC_PollForConversion+0x168>
 800194c:	f7ff fd8c 	bl	8001468 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d20f      	bcs.n	800197c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d90b      	bls.n	800197c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	f043 0204 	orr.w	r2, r3, #4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e030      	b.n	80019de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	429a      	cmp	r2, r3
 8001988:	d8d9      	bhi.n	800193e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 0212 	mvn.w	r2, #18
 8001992:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019ae:	d115      	bne.n	80019dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d111      	bne.n	80019dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000
 80019ec:	24924924 	.word	0x24924924
 80019f0:	00924924 	.word	0x00924924
 80019f4:	12492492 	.word	0x12492492
 80019f8:	00492492 	.word	0x00492492
 80019fc:	00249249 	.word	0x00249249

08001a00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x20>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e0dc      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x1da>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d81c      	bhi.n	8001a82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b05      	subs	r3, #5
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4019      	ands	r1, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b05      	subs	r3, #5
 8001a74:	fa00 f203 	lsl.w	r2, r0, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a80:	e03c      	b.n	8001afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d81c      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b23      	subs	r3, #35	@ 0x23
 8001a9c:	221f      	movs	r2, #31
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4019      	ands	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b23      	subs	r3, #35	@ 0x23
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac2:	e01b      	b.n	8001afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b41      	subs	r3, #65	@ 0x41
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b41      	subs	r3, #65	@ 0x41
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d91c      	bls.n	8001b3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3b1e      	subs	r3, #30
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	e019      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6919      	ldr	r1, [r3, #16]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6898      	ldr	r0, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d003      	beq.n	8001b82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7e:	2b11      	cmp	r3, #17
 8001b80:	d132      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_ADC_ConfigChannel+0x1e4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d125      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d126      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ba8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d11a      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x1b2>
 8001bd6:	e007      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40012400 	.word	0x40012400
 8001c00:	20000000 	.word	0x20000000
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d040      	beq.n	8001ca8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c36:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <ADC_Enable+0xac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb8 <ADC_Enable+0xb0>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c44:	e002      	b.n	8001c4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c52:	f7ff fc09 	bl	8001468 <HAL_GetTick>
 8001c56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c58:	e01f      	b.n	8001c9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c5a:	f7ff fc05 	bl	8001468 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d918      	bls.n	8001c9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d011      	beq.n	8001c9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e007      	b.n	8001caa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d1d8      	bne.n	8001c5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d12e      	bne.n	8001d34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ce6:	f7ff fbbf 	bl	8001468 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cec:	e01b      	b.n	8001d26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cee:	f7ff fbbb 	bl	8001468 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d914      	bls.n	8001d26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d10d      	bne.n	8001d26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e007      	b.n	8001d36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d0dc      	beq.n	8001cee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff90 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff49 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5e 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	@ 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e179      	b.n	8002210 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8168 	bne.w	800220a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a96      	ldr	r2, [pc, #600]	@ (8002198 <HAL_GPIO_Init+0x290>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4a94      	ldr	r2, [pc, #592]	@ (8002198 <HAL_GPIO_Init+0x290>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a94      	ldr	r2, [pc, #592]	@ (800219c <HAL_GPIO_Init+0x294>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a92      	ldr	r2, [pc, #584]	@ (800219c <HAL_GPIO_Init+0x294>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_GPIO_Init+0x298>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a90      	ldr	r2, [pc, #576]	@ (80021a0 <HAL_GPIO_Init+0x298>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a90      	ldr	r2, [pc, #576]	@ (80021a4 <HAL_GPIO_Init+0x29c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a8e      	ldr	r2, [pc, #568]	@ (80021a4 <HAL_GPIO_Init+0x29c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a8e      	ldr	r2, [pc, #568]	@ (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a8c      	ldr	r2, [pc, #560]	@ (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	@ (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a75      	ldr	r2, [pc, #468]	@ (80021ac <HAL_GPIO_Init+0x2a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	@ 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	@ 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80c1 	beq.w	800220a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <HAL_GPIO_Init+0x2a8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_GPIO_Init+0x2a8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <HAL_GPIO_Init+0x2a8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <HAL_GPIO_Init+0x2ac>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3c      	ldr	r2, [pc, #240]	@ (80021b8 <HAL_GPIO_Init+0x2b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01f      	beq.n	800210c <HAL_GPIO_Init+0x204>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3b      	ldr	r2, [pc, #236]	@ (80021bc <HAL_GPIO_Init+0x2b4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d019      	beq.n	8002108 <HAL_GPIO_Init+0x200>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3a      	ldr	r2, [pc, #232]	@ (80021c0 <HAL_GPIO_Init+0x2b8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <HAL_GPIO_Init+0x1fc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a39      	ldr	r2, [pc, #228]	@ (80021c4 <HAL_GPIO_Init+0x2bc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00d      	beq.n	8002100 <HAL_GPIO_Init+0x1f8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_GPIO_Init+0x2c0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1f4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a37      	ldr	r2, [pc, #220]	@ (80021cc <HAL_GPIO_Init+0x2c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_GPIO_Init+0x1f0>
 80020f4:	2305      	movs	r3, #5
 80020f6:	e00a      	b.n	800210e <HAL_GPIO_Init+0x206>
 80020f8:	2306      	movs	r3, #6
 80020fa:	e008      	b.n	800210e <HAL_GPIO_Init+0x206>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e006      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002100:	2303      	movs	r3, #3
 8002102:	e004      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002104:	2302      	movs	r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_GPIO_Init+0x206>
 800210c:	2300      	movs	r3, #0
 800210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	4093      	lsls	r3, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211e:	4925      	ldr	r1, [pc, #148]	@ (80021b4 <HAL_GPIO_Init+0x2ac>)
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4924      	ldr	r1, [pc, #144]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002146:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	43db      	mvns	r3, r3
 800214e:	4920      	ldr	r1, [pc, #128]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002150:	4013      	ands	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	491a      	ldr	r1, [pc, #104]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216e:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 8002178:	4013      	ands	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d025      	beq.n	80021d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4910      	ldr	r1, [pc, #64]	@ (80021d0 <HAL_GPIO_Init+0x2c8>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e025      	b.n	80021e2 <HAL_GPIO_Init+0x2da>
 8002196:	bf00      	nop
 8002198:	10320000 	.word	0x10320000
 800219c:	10310000 	.word	0x10310000
 80021a0:	10220000 	.word	0x10220000
 80021a4:	10210000 	.word	0x10210000
 80021a8:	10120000 	.word	0x10120000
 80021ac:	10110000 	.word	0x10110000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010800 	.word	0x40010800
 80021bc:	40010c00 	.word	0x40010c00
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40011400 	.word	0x40011400
 80021c8:	40011800 	.word	0x40011800
 80021cc:	40011c00 	.word	0x40011c00
 80021d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	43db      	mvns	r3, r3
 80021dc:	4913      	ldr	r1, [pc, #76]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021de:	4013      	ands	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ee:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	490e      	ldr	r1, [pc, #56]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	43db      	mvns	r3, r3
 8002204:	4909      	ldr	r1, [pc, #36]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002206:	4013      	ands	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	3301      	adds	r3, #1
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	f47f ae7e 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	372c      	adds	r7, #44	@ 0x2c
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43d9      	mvns	r1, r3
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e272      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8087 	beq.w	80023c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b4:	4b92      	ldr	r3, [pc, #584]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d00c      	beq.n	80022da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d112      	bne.n	80022f2 <HAL_RCC_OscConfig+0x5e>
 80022cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d8:	d10b      	bne.n	80022f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022da:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d06c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x12c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d168      	bne.n	80023c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e24c      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x76>
 80022fc:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a7f      	ldr	r2, [pc, #508]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e02e      	b.n	8002368 <HAL_RCC_OscConfig+0xd4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x98>
 8002312:	4b7b      	ldr	r3, [pc, #492]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7a      	ldr	r2, [pc, #488]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b78      	ldr	r3, [pc, #480]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a77      	ldr	r2, [pc, #476]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e01d      	b.n	8002368 <HAL_RCC_OscConfig+0xd4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0xbc>
 8002336:	4b72      	ldr	r3, [pc, #456]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a71      	ldr	r2, [pc, #452]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0xd4>
 8002350:	4b6b      	ldr	r3, [pc, #428]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a6a      	ldr	r2, [pc, #424]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a67      	ldr	r2, [pc, #412]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff f87a 	bl	8001468 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f876 	bl	8001468 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e200      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b5d      	ldr	r3, [pc, #372]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xe4>
 8002396:	e014      	b.n	80023c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff f866 	bl	8001468 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff f862 	bl	8001468 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1ec      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x10c>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d063      	beq.n	8002496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d11c      	bne.n	8002420 <HAL_RCC_OscConfig+0x18c>
 80023e6:	4b46      	ldr	r3, [pc, #280]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d116      	bne.n	8002420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x176>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1c0      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4939      	ldr	r1, [pc, #228]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	e03a      	b.n	8002496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff f81b 	bl	8001468 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff f817 	bl	8001468 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1a1      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4927      	ldr	r1, [pc, #156]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_RCC_OscConfig+0x270>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fffa 	bl	8001468 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fff6 	bl	8001468 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e180      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03a      	beq.n	8002518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d019      	beq.n	80024de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7fe ffda 	bl	8001468 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b8:	f7fe ffd6 	bl	8001468 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e160      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f000 face 	bl	8002a78 <RCC_Delay>
 80024dc:	e01c      	b.n	8002518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7fe ffc0 	bl	8001468 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ea:	e00f      	b.n	800250c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe ffbc 	bl	8001468 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d908      	bls.n	800250c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e146      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	42420000 	.word	0x42420000
 8002508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b92      	ldr	r3, [pc, #584]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e9      	bne.n	80024ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a6 	beq.w	8002672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b8b      	ldr	r3, [pc, #556]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a87      	ldr	r2, [pc, #540]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b82      	ldr	r3, [pc, #520]	@ (800275c <HAL_RCC_OscConfig+0x4c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x4c8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x4c8>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7fe ff7d 	bl	8001468 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7fe ff79 	bl	8001468 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b64      	cmp	r3, #100	@ 0x64
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e103      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b75      	ldr	r3, [pc, #468]	@ (800275c <HAL_RCC_OscConfig+0x4c8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x312>
 8002598:	4b6f      	ldr	r3, [pc, #444]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a6e      	ldr	r2, [pc, #440]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	e02d      	b.n	8002602 <HAL_RCC_OscConfig+0x36e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x334>
 80025ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a69      	ldr	r2, [pc, #420]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a66      	ldr	r2, [pc, #408]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	e01c      	b.n	8002602 <HAL_RCC_OscConfig+0x36e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d10c      	bne.n	80025ea <HAL_RCC_OscConfig+0x356>
 80025d0:	4b61      	ldr	r3, [pc, #388]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a60      	ldr	r2, [pc, #384]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0x36e>
 80025ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a57      	ldr	r2, [pc, #348]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d015      	beq.n	8002636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe ff2d 	bl	8001468 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe ff29 	bl	8001468 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0b1      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	4b4b      	ldr	r3, [pc, #300]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ee      	beq.n	8002612 <HAL_RCC_OscConfig+0x37e>
 8002634:	e014      	b.n	8002660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe ff17 	bl	8001468 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe ff13 	bl	8001468 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e09b      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	4b40      	ldr	r3, [pc, #256]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ee      	bne.n	800263e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002666:	4b3c      	ldr	r3, [pc, #240]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a3b      	ldr	r2, [pc, #236]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8087 	beq.w	800278a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d061      	beq.n	800274c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d146      	bne.n	800271e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fee7 	bl	8001468 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fee3 	bl	8001468 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e06d      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b0:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4921      	ldr	r1, [pc, #132]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a19      	ldr	r1, [r3, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	430b      	orrs	r3, r1
 80026ea:	491b      	ldr	r1, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe feb7 	bl	8001468 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe feb3 	bl	8001468 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e03d      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x46a>
 800271c:	e035      	b.n	800278a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fea0 	bl	8001468 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fe9c 	bl	8001468 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e026      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x498>
 800274a:	e01e      	b.n	800278a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e019      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x500>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0d0      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b67      	ldr	r3, [pc, #412]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	4965      	ldr	r1, [pc, #404]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a58      	ldr	r2, [pc, #352]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002816:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	494d      	ldr	r1, [pc, #308]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d040      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d115      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07f      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b41      	ldr	r3, [pc, #260]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e073      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b3d      	ldr	r3, [pc, #244]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06b      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b39      	ldr	r3, [pc, #228]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4936      	ldr	r1, [pc, #216]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7fe fdee 	bl	8001468 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7fe fdea 	bl	8001468 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e053      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d210      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0207 	bic.w	r2, r3, #7
 80028ce:	4922      	ldr	r1, [pc, #136]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e032      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4916      	ldr	r1, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002926:	f000 f821 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1cc>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1d0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fd4c 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	080078f4 	.word	0x080078f4
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x30>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x36>
 800299a:	e027      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x98>)
 800299e:	613b      	str	r3, [r7, #16]
      break;
 80029a0:	e027      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0c9b      	lsrs	r3, r3, #18
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x94>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0c5b      	lsrs	r3, r3, #17
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	fb03 f202 	mul.w	r2, r3, r2
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e004      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	613b      	str	r3, [r7, #16]
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ee:	613b      	str	r3, [r7, #16]
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	693b      	ldr	r3, [r7, #16]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	0800790c 	.word	0x0800790c
 8002a0c:	0800791c 	.word	0x0800791c
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b02      	ldr	r3, [pc, #8]	@ (8002a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a2c:	f7ff fff2 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08007904 	.word	0x08007904

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a54:	f7ff ffde 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0adb      	lsrs	r3, r3, #11
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	@ (8002a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08007904 	.word	0x08007904

08002a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <RCC_Delay+0x34>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <RCC_Delay+0x38>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a94:	bf00      	nop
  }
  while (Delay --);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	60fa      	str	r2, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <RCC_Delay+0x1c>
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d07d      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10d      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	61d3      	str	r3, [r2, #28]
 8002aec:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b46      	ldr	r3, [pc, #280]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d118      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b08:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a42      	ldr	r2, [pc, #264]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b14:	f7fe fca8 	bl	8001468 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	e008      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7fe fca4 	bl	8001468 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e06d      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3a:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02e      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d027      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b58:	4b2e      	ldr	r3, [pc, #184]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b62:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b68:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b6e:	4a29      	ldr	r2, [pc, #164]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d014      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fc73 	bl	8001468 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fc6f 	bl	8001468 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e036      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4917      	ldr	r1, [pc, #92]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc0:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4904      	ldr	r1, [pc, #16]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42420440 	.word	0x42420440

08002c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	f200 80af 	bhi.w	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002c46:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002d23 	.word	0x08002d23
 8002c50:	08002d89 	.word	0x08002d89
 8002c54:	08002da5 	.word	0x08002da5
 8002c58:	08002d13 	.word	0x08002d13
 8002c5c:	08002da5 	.word	0x08002da5
 8002c60:	08002da5 	.word	0x08002da5
 8002c64:	08002da5 	.word	0x08002da5
 8002c68:	08002d1b 	.word	0x08002d1b
 8002c6c:	08002da5 	.word	0x08002da5
 8002c70:	08002da5 	.word	0x08002da5
 8002c74:	08002da5 	.word	0x08002da5
 8002c78:	08002da5 	.word	0x08002da5
 8002c7c:	08002da5 	.word	0x08002da5
 8002c80:	08002da5 	.word	0x08002da5
 8002c84:	08002da5 	.word	0x08002da5
 8002c88:	08002c8d 	.word	0x08002c8d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c92:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8084 	beq.w	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	0c9b      	lsrs	r3, r3, #18
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	4a44      	ldr	r2, [pc, #272]	@ (8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0c5b      	lsrs	r3, r3, #17
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4a38      	ldr	r2, [pc, #224]	@ (8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002cee:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002d00:	e052      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]
      break;
 8002d10:	e04a      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002d12:	f7ff fe2b 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002d16:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002d18:	e049      	b.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff fe27 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002d1e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002d20:	e045      	b.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002d22:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d32:	d108      	bne.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e01f      	b.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d50:	d109      	bne.n	8002d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d52:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002d5e:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e00f      	b.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d70:	d11c      	bne.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002d7e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002d82:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002d84:	e012      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002d86:	e011      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d88:	f7ff fe62 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0b9b      	lsrs	r3, r3, #14
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	61bb      	str	r3, [r7, #24]
      break;
 8002da2:	e004      	b.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002da4:	bf00      	nop
 8002da6:	e002      	b.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002dac:	bf00      	nop
    }
  }
  return (frequency);
 8002dae:	69bb      	ldr	r3, [r7, #24]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08007920 	.word	0x08007920
 8002dc0:	08007930 	.word	0x08007930
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	003d0900 	.word	0x003d0900
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e042      	b.n	8002e68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f96a 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f971 	bl	80030fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d175      	bne.n	8002f7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Transmit+0x2c>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e06e      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eae:	f7fe fadb 	bl	8001468 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec8:	d108      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e003      	b.n	8002ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee4:	e02e      	b.n	8002f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	@ 0x80
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f848 	bl	8002f86 <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03a      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3302      	adds	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e007      	b.n	8002f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1cb      	bne.n	8002ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2140      	movs	r1, #64	@ 0x40
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f814 	bl	8002f86 <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f96:	e03b      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d037      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	f7fe fa62 	bl	8001468 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	6a3a      	ldr	r2, [r7, #32]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e03a      	b.n	8003030 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b80      	cmp	r3, #128	@ 0x80
 8002fcc:	d020      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d01d      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d116      	bne.n	8003010 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f81d 	bl	8003038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2208      	movs	r2, #8
 8003002:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e00f      	b.n	8003030 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	429a      	cmp	r2, r3
 800302c:	d0b4      	beq.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003038:	b480      	push	{r7}
 800303a:	b095      	sub	sp, #84	@ 0x54
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003060:	643a      	str	r2, [r7, #64]	@ 0x40
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	61fb      	str	r3, [r7, #28]
   return(result);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d119      	bne.n	80030e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d0:	61ba      	str	r2, [r7, #24]
 80030d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6979      	ldr	r1, [r7, #20]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	613b      	str	r3, [r7, #16]
   return(result);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030f2:	bf00      	nop
 80030f4:	3754      	adds	r7, #84	@ 0x54
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003136:	f023 030c 	bic.w	r3, r3, #12
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	430b      	orrs	r3, r1
 8003142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2c      	ldr	r2, [pc, #176]	@ (8003210 <UART_SetConfig+0x114>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff fc74 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	e002      	b.n	8003172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff fc5c 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <UART_SetConfig+0x118>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	0119      	lsls	r1, r3, #4
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <UART_SetConfig+0x118>)
 80031aa:	fba3 0302 	umull	r0, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2064      	movs	r0, #100	@ 0x64
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	@ 0x32
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <UART_SetConfig+0x118>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031c8:	4419      	add	r1, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009a      	lsls	r2, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <UART_SetConfig+0x118>)
 80031e2:	fba3 0302 	umull	r0, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2064      	movs	r0, #100	@ 0x64
 80031ea:	fb00 f303 	mul.w	r3, r0, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	@ 0x32
 80031f4:	4a07      	ldr	r2, [pc, #28]	@ (8003214 <UART_SetConfig+0x118>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	440a      	add	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40013800 	.word	0x40013800
 8003214:	51eb851f 	.word	0x51eb851f

08003218 <__cvt>:
 8003218:	2b00      	cmp	r3, #0
 800321a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800321e:	461d      	mov	r5, r3
 8003220:	bfbb      	ittet	lt
 8003222:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003226:	461d      	movlt	r5, r3
 8003228:	2300      	movge	r3, #0
 800322a:	232d      	movlt	r3, #45	@ 0x2d
 800322c:	b088      	sub	sp, #32
 800322e:	4614      	mov	r4, r2
 8003230:	bfb8      	it	lt
 8003232:	4614      	movlt	r4, r2
 8003234:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003236:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003238:	7013      	strb	r3, [r2, #0]
 800323a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800323c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003240:	f023 0820 	bic.w	r8, r3, #32
 8003244:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003248:	d005      	beq.n	8003256 <__cvt+0x3e>
 800324a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800324e:	d100      	bne.n	8003252 <__cvt+0x3a>
 8003250:	3601      	adds	r6, #1
 8003252:	2302      	movs	r3, #2
 8003254:	e000      	b.n	8003258 <__cvt+0x40>
 8003256:	2303      	movs	r3, #3
 8003258:	aa07      	add	r2, sp, #28
 800325a:	9204      	str	r2, [sp, #16]
 800325c:	aa06      	add	r2, sp, #24
 800325e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003262:	e9cd 3600 	strd	r3, r6, [sp]
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f001 f881 	bl	8004370 <_dtoa_r>
 800326e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003272:	4607      	mov	r7, r0
 8003274:	d119      	bne.n	80032aa <__cvt+0x92>
 8003276:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003278:	07db      	lsls	r3, r3, #31
 800327a:	d50e      	bpl.n	800329a <__cvt+0x82>
 800327c:	eb00 0906 	add.w	r9, r0, r6
 8003280:	2200      	movs	r2, #0
 8003282:	2300      	movs	r3, #0
 8003284:	4620      	mov	r0, r4
 8003286:	4629      	mov	r1, r5
 8003288:	f7fd fbfa 	bl	8000a80 <__aeabi_dcmpeq>
 800328c:	b108      	cbz	r0, 8003292 <__cvt+0x7a>
 800328e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003292:	2230      	movs	r2, #48	@ 0x30
 8003294:	9b07      	ldr	r3, [sp, #28]
 8003296:	454b      	cmp	r3, r9
 8003298:	d31e      	bcc.n	80032d8 <__cvt+0xc0>
 800329a:	4638      	mov	r0, r7
 800329c:	9b07      	ldr	r3, [sp, #28]
 800329e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80032a0:	1bdb      	subs	r3, r3, r7
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	b008      	add	sp, #32
 80032a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032ae:	eb00 0906 	add.w	r9, r0, r6
 80032b2:	d1e5      	bne.n	8003280 <__cvt+0x68>
 80032b4:	7803      	ldrb	r3, [r0, #0]
 80032b6:	2b30      	cmp	r3, #48	@ 0x30
 80032b8:	d10a      	bne.n	80032d0 <__cvt+0xb8>
 80032ba:	2200      	movs	r2, #0
 80032bc:	2300      	movs	r3, #0
 80032be:	4620      	mov	r0, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	f7fd fbdd 	bl	8000a80 <__aeabi_dcmpeq>
 80032c6:	b918      	cbnz	r0, 80032d0 <__cvt+0xb8>
 80032c8:	f1c6 0601 	rsb	r6, r6, #1
 80032cc:	f8ca 6000 	str.w	r6, [sl]
 80032d0:	f8da 3000 	ldr.w	r3, [sl]
 80032d4:	4499      	add	r9, r3
 80032d6:	e7d3      	b.n	8003280 <__cvt+0x68>
 80032d8:	1c59      	adds	r1, r3, #1
 80032da:	9107      	str	r1, [sp, #28]
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e7d9      	b.n	8003294 <__cvt+0x7c>

080032e0 <__exponent>:
 80032e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032e2:	2900      	cmp	r1, #0
 80032e4:	bfb6      	itet	lt
 80032e6:	232d      	movlt	r3, #45	@ 0x2d
 80032e8:	232b      	movge	r3, #43	@ 0x2b
 80032ea:	4249      	neglt	r1, r1
 80032ec:	2909      	cmp	r1, #9
 80032ee:	7002      	strb	r2, [r0, #0]
 80032f0:	7043      	strb	r3, [r0, #1]
 80032f2:	dd29      	ble.n	8003348 <__exponent+0x68>
 80032f4:	f10d 0307 	add.w	r3, sp, #7
 80032f8:	461d      	mov	r5, r3
 80032fa:	270a      	movs	r7, #10
 80032fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003300:	461a      	mov	r2, r3
 8003302:	fb07 1416 	mls	r4, r7, r6, r1
 8003306:	3430      	adds	r4, #48	@ 0x30
 8003308:	f802 4c01 	strb.w	r4, [r2, #-1]
 800330c:	460c      	mov	r4, r1
 800330e:	2c63      	cmp	r4, #99	@ 0x63
 8003310:	4631      	mov	r1, r6
 8003312:	f103 33ff 	add.w	r3, r3, #4294967295
 8003316:	dcf1      	bgt.n	80032fc <__exponent+0x1c>
 8003318:	3130      	adds	r1, #48	@ 0x30
 800331a:	1e94      	subs	r4, r2, #2
 800331c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003320:	4623      	mov	r3, r4
 8003322:	1c41      	adds	r1, r0, #1
 8003324:	42ab      	cmp	r3, r5
 8003326:	d30a      	bcc.n	800333e <__exponent+0x5e>
 8003328:	f10d 0309 	add.w	r3, sp, #9
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	42ac      	cmp	r4, r5
 8003330:	bf88      	it	hi
 8003332:	2300      	movhi	r3, #0
 8003334:	3302      	adds	r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	1a18      	subs	r0, r3, r0
 800333a:	b003      	add	sp, #12
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003342:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003346:	e7ed      	b.n	8003324 <__exponent+0x44>
 8003348:	2330      	movs	r3, #48	@ 0x30
 800334a:	3130      	adds	r1, #48	@ 0x30
 800334c:	7083      	strb	r3, [r0, #2]
 800334e:	70c1      	strb	r1, [r0, #3]
 8003350:	1d03      	adds	r3, r0, #4
 8003352:	e7f1      	b.n	8003338 <__exponent+0x58>

08003354 <_printf_float>:
 8003354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003358:	b091      	sub	sp, #68	@ 0x44
 800335a:	460c      	mov	r4, r1
 800335c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003360:	4616      	mov	r6, r2
 8003362:	461f      	mov	r7, r3
 8003364:	4605      	mov	r5, r0
 8003366:	f000 fef1 	bl	800414c <_localeconv_r>
 800336a:	6803      	ldr	r3, [r0, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	9308      	str	r3, [sp, #32]
 8003370:	f7fc ff5a 	bl	8000228 <strlen>
 8003374:	2300      	movs	r3, #0
 8003376:	930e      	str	r3, [sp, #56]	@ 0x38
 8003378:	f8d8 3000 	ldr.w	r3, [r8]
 800337c:	9009      	str	r0, [sp, #36]	@ 0x24
 800337e:	3307      	adds	r3, #7
 8003380:	f023 0307 	bic.w	r3, r3, #7
 8003384:	f103 0208 	add.w	r2, r3, #8
 8003388:	f894 a018 	ldrb.w	sl, [r4, #24]
 800338c:	f8d4 b000 	ldr.w	fp, [r4]
 8003390:	f8c8 2000 	str.w	r2, [r8]
 8003394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003398:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800339c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800339e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003620 <_printf_float+0x2cc>)
 80033b0:	f7fd fb98 	bl	8000ae4 <__aeabi_dcmpun>
 80033b4:	bb70      	cbnz	r0, 8003414 <_printf_float+0xc0>
 80033b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	4b98      	ldr	r3, [pc, #608]	@ (8003620 <_printf_float+0x2cc>)
 80033c0:	f7fd fb72 	bl	8000aa8 <__aeabi_dcmple>
 80033c4:	bb30      	cbnz	r0, 8003414 <_printf_float+0xc0>
 80033c6:	2200      	movs	r2, #0
 80033c8:	2300      	movs	r3, #0
 80033ca:	4640      	mov	r0, r8
 80033cc:	4649      	mov	r1, r9
 80033ce:	f7fd fb61 	bl	8000a94 <__aeabi_dcmplt>
 80033d2:	b110      	cbz	r0, 80033da <_printf_float+0x86>
 80033d4:	232d      	movs	r3, #45	@ 0x2d
 80033d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033da:	4a92      	ldr	r2, [pc, #584]	@ (8003624 <_printf_float+0x2d0>)
 80033dc:	4b92      	ldr	r3, [pc, #584]	@ (8003628 <_printf_float+0x2d4>)
 80033de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80033e2:	bf94      	ite	ls
 80033e4:	4690      	movls	r8, r2
 80033e6:	4698      	movhi	r8, r3
 80033e8:	2303      	movs	r3, #3
 80033ea:	f04f 0900 	mov.w	r9, #0
 80033ee:	6123      	str	r3, [r4, #16]
 80033f0:	f02b 0304 	bic.w	r3, fp, #4
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	4633      	mov	r3, r6
 80033f8:	4621      	mov	r1, r4
 80033fa:	4628      	mov	r0, r5
 80033fc:	9700      	str	r7, [sp, #0]
 80033fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003400:	f000 f9d4 	bl	80037ac <_printf_common>
 8003404:	3001      	adds	r0, #1
 8003406:	f040 8090 	bne.w	800352a <_printf_float+0x1d6>
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	b011      	add	sp, #68	@ 0x44
 8003410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	4640      	mov	r0, r8
 800341a:	4649      	mov	r1, r9
 800341c:	f7fd fb62 	bl	8000ae4 <__aeabi_dcmpun>
 8003420:	b148      	cbz	r0, 8003436 <_printf_float+0xe2>
 8003422:	464b      	mov	r3, r9
 8003424:	2b00      	cmp	r3, #0
 8003426:	bfb8      	it	lt
 8003428:	232d      	movlt	r3, #45	@ 0x2d
 800342a:	4a80      	ldr	r2, [pc, #512]	@ (800362c <_printf_float+0x2d8>)
 800342c:	bfb8      	it	lt
 800342e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003432:	4b7f      	ldr	r3, [pc, #508]	@ (8003630 <_printf_float+0x2dc>)
 8003434:	e7d3      	b.n	80033de <_printf_float+0x8a>
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	d13f      	bne.n	80034c0 <_printf_float+0x16c>
 8003440:	2306      	movs	r3, #6
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	9206      	str	r2, [sp, #24]
 800344e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003450:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003454:	aa0d      	add	r2, sp, #52	@ 0x34
 8003456:	9203      	str	r2, [sp, #12]
 8003458:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800345c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	4642      	mov	r2, r8
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4628      	mov	r0, r5
 8003468:	464b      	mov	r3, r9
 800346a:	910a      	str	r1, [sp, #40]	@ 0x28
 800346c:	f7ff fed4 	bl	8003218 <__cvt>
 8003470:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003472:	4680      	mov	r8, r0
 8003474:	2947      	cmp	r1, #71	@ 0x47
 8003476:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003478:	d128      	bne.n	80034cc <_printf_float+0x178>
 800347a:	1cc8      	adds	r0, r1, #3
 800347c:	db02      	blt.n	8003484 <_printf_float+0x130>
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	4299      	cmp	r1, r3
 8003482:	dd40      	ble.n	8003506 <_printf_float+0x1b2>
 8003484:	f1aa 0a02 	sub.w	sl, sl, #2
 8003488:	fa5f fa8a 	uxtb.w	sl, sl
 800348c:	4652      	mov	r2, sl
 800348e:	3901      	subs	r1, #1
 8003490:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003494:	910d      	str	r1, [sp, #52]	@ 0x34
 8003496:	f7ff ff23 	bl	80032e0 <__exponent>
 800349a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800349c:	4681      	mov	r9, r0
 800349e:	1813      	adds	r3, r2, r0
 80034a0:	2a01      	cmp	r2, #1
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	dc02      	bgt.n	80034ac <_printf_float+0x158>
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	07d2      	lsls	r2, r2, #31
 80034aa:	d501      	bpl.n	80034b0 <_printf_float+0x15c>
 80034ac:	3301      	adds	r3, #1
 80034ae:	6123      	str	r3, [r4, #16]
 80034b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d09e      	beq.n	80033f6 <_printf_float+0xa2>
 80034b8:	232d      	movs	r3, #45	@ 0x2d
 80034ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034be:	e79a      	b.n	80033f6 <_printf_float+0xa2>
 80034c0:	2947      	cmp	r1, #71	@ 0x47
 80034c2:	d1bf      	bne.n	8003444 <_printf_float+0xf0>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1bd      	bne.n	8003444 <_printf_float+0xf0>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7ba      	b.n	8003442 <_printf_float+0xee>
 80034cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034d0:	d9dc      	bls.n	800348c <_printf_float+0x138>
 80034d2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80034d6:	d118      	bne.n	800350a <_printf_float+0x1b6>
 80034d8:	2900      	cmp	r1, #0
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	dd0b      	ble.n	80034f6 <_printf_float+0x1a2>
 80034de:	6121      	str	r1, [r4, #16]
 80034e0:	b913      	cbnz	r3, 80034e8 <_printf_float+0x194>
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	07d0      	lsls	r0, r2, #31
 80034e6:	d502      	bpl.n	80034ee <_printf_float+0x19a>
 80034e8:	3301      	adds	r3, #1
 80034ea:	440b      	add	r3, r1
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	f04f 0900 	mov.w	r9, #0
 80034f2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80034f4:	e7dc      	b.n	80034b0 <_printf_float+0x15c>
 80034f6:	b913      	cbnz	r3, 80034fe <_printf_float+0x1aa>
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	07d2      	lsls	r2, r2, #31
 80034fc:	d501      	bpl.n	8003502 <_printf_float+0x1ae>
 80034fe:	3302      	adds	r3, #2
 8003500:	e7f4      	b.n	80034ec <_printf_float+0x198>
 8003502:	2301      	movs	r3, #1
 8003504:	e7f2      	b.n	80034ec <_printf_float+0x198>
 8003506:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800350a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800350c:	4299      	cmp	r1, r3
 800350e:	db05      	blt.n	800351c <_printf_float+0x1c8>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	6121      	str	r1, [r4, #16]
 8003514:	07d8      	lsls	r0, r3, #31
 8003516:	d5ea      	bpl.n	80034ee <_printf_float+0x19a>
 8003518:	1c4b      	adds	r3, r1, #1
 800351a:	e7e7      	b.n	80034ec <_printf_float+0x198>
 800351c:	2900      	cmp	r1, #0
 800351e:	bfcc      	ite	gt
 8003520:	2201      	movgt	r2, #1
 8003522:	f1c1 0202 	rsble	r2, r1, #2
 8003526:	4413      	add	r3, r2
 8003528:	e7e0      	b.n	80034ec <_printf_float+0x198>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	055a      	lsls	r2, r3, #21
 800352e:	d407      	bmi.n	8003540 <_printf_float+0x1ec>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	4642      	mov	r2, r8
 8003534:	4631      	mov	r1, r6
 8003536:	4628      	mov	r0, r5
 8003538:	47b8      	blx	r7
 800353a:	3001      	adds	r0, #1
 800353c:	d12b      	bne.n	8003596 <_printf_float+0x242>
 800353e:	e764      	b.n	800340a <_printf_float+0xb6>
 8003540:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003544:	f240 80dc 	bls.w	8003700 <_printf_float+0x3ac>
 8003548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800354c:	2200      	movs	r2, #0
 800354e:	2300      	movs	r3, #0
 8003550:	f7fd fa96 	bl	8000a80 <__aeabi_dcmpeq>
 8003554:	2800      	cmp	r0, #0
 8003556:	d033      	beq.n	80035c0 <_printf_float+0x26c>
 8003558:	2301      	movs	r3, #1
 800355a:	4631      	mov	r1, r6
 800355c:	4628      	mov	r0, r5
 800355e:	4a35      	ldr	r2, [pc, #212]	@ (8003634 <_printf_float+0x2e0>)
 8003560:	47b8      	blx	r7
 8003562:	3001      	adds	r0, #1
 8003564:	f43f af51 	beq.w	800340a <_printf_float+0xb6>
 8003568:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800356c:	4543      	cmp	r3, r8
 800356e:	db02      	blt.n	8003576 <_printf_float+0x222>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	07d8      	lsls	r0, r3, #31
 8003574:	d50f      	bpl.n	8003596 <_printf_float+0x242>
 8003576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800357a:	4631      	mov	r1, r6
 800357c:	4628      	mov	r0, r5
 800357e:	47b8      	blx	r7
 8003580:	3001      	adds	r0, #1
 8003582:	f43f af42 	beq.w	800340a <_printf_float+0xb6>
 8003586:	f04f 0900 	mov.w	r9, #0
 800358a:	f108 38ff 	add.w	r8, r8, #4294967295
 800358e:	f104 0a1a 	add.w	sl, r4, #26
 8003592:	45c8      	cmp	r8, r9
 8003594:	dc09      	bgt.n	80035aa <_printf_float+0x256>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	079b      	lsls	r3, r3, #30
 800359a:	f100 8102 	bmi.w	80037a2 <_printf_float+0x44e>
 800359e:	68e0      	ldr	r0, [r4, #12]
 80035a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035a2:	4298      	cmp	r0, r3
 80035a4:	bfb8      	it	lt
 80035a6:	4618      	movlt	r0, r3
 80035a8:	e731      	b.n	800340e <_printf_float+0xba>
 80035aa:	2301      	movs	r3, #1
 80035ac:	4652      	mov	r2, sl
 80035ae:	4631      	mov	r1, r6
 80035b0:	4628      	mov	r0, r5
 80035b2:	47b8      	blx	r7
 80035b4:	3001      	adds	r0, #1
 80035b6:	f43f af28 	beq.w	800340a <_printf_float+0xb6>
 80035ba:	f109 0901 	add.w	r9, r9, #1
 80035be:	e7e8      	b.n	8003592 <_printf_float+0x23e>
 80035c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dc38      	bgt.n	8003638 <_printf_float+0x2e4>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <_printf_float+0x2e0>)
 80035ce:	47b8      	blx	r7
 80035d0:	3001      	adds	r0, #1
 80035d2:	f43f af1a 	beq.w	800340a <_printf_float+0xb6>
 80035d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80035da:	ea59 0303 	orrs.w	r3, r9, r3
 80035de:	d102      	bne.n	80035e6 <_printf_float+0x292>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	07d9      	lsls	r1, r3, #31
 80035e4:	d5d7      	bpl.n	8003596 <_printf_float+0x242>
 80035e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035ea:	4631      	mov	r1, r6
 80035ec:	4628      	mov	r0, r5
 80035ee:	47b8      	blx	r7
 80035f0:	3001      	adds	r0, #1
 80035f2:	f43f af0a 	beq.w	800340a <_printf_float+0xb6>
 80035f6:	f04f 0a00 	mov.w	sl, #0
 80035fa:	f104 0b1a 	add.w	fp, r4, #26
 80035fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003600:	425b      	negs	r3, r3
 8003602:	4553      	cmp	r3, sl
 8003604:	dc01      	bgt.n	800360a <_printf_float+0x2b6>
 8003606:	464b      	mov	r3, r9
 8003608:	e793      	b.n	8003532 <_printf_float+0x1de>
 800360a:	2301      	movs	r3, #1
 800360c:	465a      	mov	r2, fp
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	f43f aef8 	beq.w	800340a <_printf_float+0xb6>
 800361a:	f10a 0a01 	add.w	sl, sl, #1
 800361e:	e7ee      	b.n	80035fe <_printf_float+0x2aa>
 8003620:	7fefffff 	.word	0x7fefffff
 8003624:	08007932 	.word	0x08007932
 8003628:	08007936 	.word	0x08007936
 800362c:	0800793a 	.word	0x0800793a
 8003630:	0800793e 	.word	0x0800793e
 8003634:	08007942 	.word	0x08007942
 8003638:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800363a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800363e:	4553      	cmp	r3, sl
 8003640:	bfa8      	it	ge
 8003642:	4653      	movge	r3, sl
 8003644:	2b00      	cmp	r3, #0
 8003646:	4699      	mov	r9, r3
 8003648:	dc36      	bgt.n	80036b8 <_printf_float+0x364>
 800364a:	f04f 0b00 	mov.w	fp, #0
 800364e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003652:	f104 021a 	add.w	r2, r4, #26
 8003656:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003658:	930a      	str	r3, [sp, #40]	@ 0x28
 800365a:	eba3 0309 	sub.w	r3, r3, r9
 800365e:	455b      	cmp	r3, fp
 8003660:	dc31      	bgt.n	80036c6 <_printf_float+0x372>
 8003662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003664:	459a      	cmp	sl, r3
 8003666:	dc3a      	bgt.n	80036de <_printf_float+0x38a>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	07da      	lsls	r2, r3, #31
 800366c:	d437      	bmi.n	80036de <_printf_float+0x38a>
 800366e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003670:	ebaa 0903 	sub.w	r9, sl, r3
 8003674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003676:	ebaa 0303 	sub.w	r3, sl, r3
 800367a:	4599      	cmp	r9, r3
 800367c:	bfa8      	it	ge
 800367e:	4699      	movge	r9, r3
 8003680:	f1b9 0f00 	cmp.w	r9, #0
 8003684:	dc33      	bgt.n	80036ee <_printf_float+0x39a>
 8003686:	f04f 0800 	mov.w	r8, #0
 800368a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800368e:	f104 0b1a 	add.w	fp, r4, #26
 8003692:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003694:	ebaa 0303 	sub.w	r3, sl, r3
 8003698:	eba3 0309 	sub.w	r3, r3, r9
 800369c:	4543      	cmp	r3, r8
 800369e:	f77f af7a 	ble.w	8003596 <_printf_float+0x242>
 80036a2:	2301      	movs	r3, #1
 80036a4:	465a      	mov	r2, fp
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	47b8      	blx	r7
 80036ac:	3001      	adds	r0, #1
 80036ae:	f43f aeac 	beq.w	800340a <_printf_float+0xb6>
 80036b2:	f108 0801 	add.w	r8, r8, #1
 80036b6:	e7ec      	b.n	8003692 <_printf_float+0x33e>
 80036b8:	4642      	mov	r2, r8
 80036ba:	4631      	mov	r1, r6
 80036bc:	4628      	mov	r0, r5
 80036be:	47b8      	blx	r7
 80036c0:	3001      	adds	r0, #1
 80036c2:	d1c2      	bne.n	800364a <_printf_float+0x2f6>
 80036c4:	e6a1      	b.n	800340a <_printf_float+0xb6>
 80036c6:	2301      	movs	r3, #1
 80036c8:	4631      	mov	r1, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	f43f ae9a 	beq.w	800340a <_printf_float+0xb6>
 80036d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036d8:	f10b 0b01 	add.w	fp, fp, #1
 80036dc:	e7bb      	b.n	8003656 <_printf_float+0x302>
 80036de:	4631      	mov	r1, r6
 80036e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	d1c0      	bne.n	800366e <_printf_float+0x31a>
 80036ec:	e68d      	b.n	800340a <_printf_float+0xb6>
 80036ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036f0:	464b      	mov	r3, r9
 80036f2:	4631      	mov	r1, r6
 80036f4:	4628      	mov	r0, r5
 80036f6:	4442      	add	r2, r8
 80036f8:	47b8      	blx	r7
 80036fa:	3001      	adds	r0, #1
 80036fc:	d1c3      	bne.n	8003686 <_printf_float+0x332>
 80036fe:	e684      	b.n	800340a <_printf_float+0xb6>
 8003700:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003704:	f1ba 0f01 	cmp.w	sl, #1
 8003708:	dc01      	bgt.n	800370e <_printf_float+0x3ba>
 800370a:	07db      	lsls	r3, r3, #31
 800370c:	d536      	bpl.n	800377c <_printf_float+0x428>
 800370e:	2301      	movs	r3, #1
 8003710:	4642      	mov	r2, r8
 8003712:	4631      	mov	r1, r6
 8003714:	4628      	mov	r0, r5
 8003716:	47b8      	blx	r7
 8003718:	3001      	adds	r0, #1
 800371a:	f43f ae76 	beq.w	800340a <_printf_float+0xb6>
 800371e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003722:	4631      	mov	r1, r6
 8003724:	4628      	mov	r0, r5
 8003726:	47b8      	blx	r7
 8003728:	3001      	adds	r0, #1
 800372a:	f43f ae6e 	beq.w	800340a <_printf_float+0xb6>
 800372e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003732:	2200      	movs	r2, #0
 8003734:	2300      	movs	r3, #0
 8003736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800373a:	f7fd f9a1 	bl	8000a80 <__aeabi_dcmpeq>
 800373e:	b9c0      	cbnz	r0, 8003772 <_printf_float+0x41e>
 8003740:	4653      	mov	r3, sl
 8003742:	f108 0201 	add.w	r2, r8, #1
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	d10c      	bne.n	800376a <_printf_float+0x416>
 8003750:	e65b      	b.n	800340a <_printf_float+0xb6>
 8003752:	2301      	movs	r3, #1
 8003754:	465a      	mov	r2, fp
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	f43f ae54 	beq.w	800340a <_printf_float+0xb6>
 8003762:	f108 0801 	add.w	r8, r8, #1
 8003766:	45d0      	cmp	r8, sl
 8003768:	dbf3      	blt.n	8003752 <_printf_float+0x3fe>
 800376a:	464b      	mov	r3, r9
 800376c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003770:	e6e0      	b.n	8003534 <_printf_float+0x1e0>
 8003772:	f04f 0800 	mov.w	r8, #0
 8003776:	f104 0b1a 	add.w	fp, r4, #26
 800377a:	e7f4      	b.n	8003766 <_printf_float+0x412>
 800377c:	2301      	movs	r3, #1
 800377e:	4642      	mov	r2, r8
 8003780:	e7e1      	b.n	8003746 <_printf_float+0x3f2>
 8003782:	2301      	movs	r3, #1
 8003784:	464a      	mov	r2, r9
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	f43f ae3c 	beq.w	800340a <_printf_float+0xb6>
 8003792:	f108 0801 	add.w	r8, r8, #1
 8003796:	68e3      	ldr	r3, [r4, #12]
 8003798:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800379a:	1a5b      	subs	r3, r3, r1
 800379c:	4543      	cmp	r3, r8
 800379e:	dcf0      	bgt.n	8003782 <_printf_float+0x42e>
 80037a0:	e6fd      	b.n	800359e <_printf_float+0x24a>
 80037a2:	f04f 0800 	mov.w	r8, #0
 80037a6:	f104 0919 	add.w	r9, r4, #25
 80037aa:	e7f4      	b.n	8003796 <_printf_float+0x442>

080037ac <_printf_common>:
 80037ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	4616      	mov	r6, r2
 80037b2:	4698      	mov	r8, r3
 80037b4:	688a      	ldr	r2, [r1, #8]
 80037b6:	690b      	ldr	r3, [r1, #16]
 80037b8:	4607      	mov	r7, r0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bfb8      	it	lt
 80037be:	4613      	movlt	r3, r2
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037c6:	460c      	mov	r4, r1
 80037c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037cc:	b10a      	cbz	r2, 80037d2 <_printf_common+0x26>
 80037ce:	3301      	adds	r3, #1
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	0699      	lsls	r1, r3, #26
 80037d6:	bf42      	ittt	mi
 80037d8:	6833      	ldrmi	r3, [r6, #0]
 80037da:	3302      	addmi	r3, #2
 80037dc:	6033      	strmi	r3, [r6, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	f015 0506 	ands.w	r5, r5, #6
 80037e4:	d106      	bne.n	80037f4 <_printf_common+0x48>
 80037e6:	f104 0a19 	add.w	sl, r4, #25
 80037ea:	68e3      	ldr	r3, [r4, #12]
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	42ab      	cmp	r3, r5
 80037f2:	dc2b      	bgt.n	800384c <_printf_common+0xa0>
 80037f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	3b00      	subs	r3, #0
 80037fc:	bf18      	it	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	0692      	lsls	r2, r2, #26
 8003802:	d430      	bmi.n	8003866 <_printf_common+0xba>
 8003804:	4641      	mov	r1, r8
 8003806:	4638      	mov	r0, r7
 8003808:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800380c:	47c8      	blx	r9
 800380e:	3001      	adds	r0, #1
 8003810:	d023      	beq.n	800385a <_printf_common+0xae>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	2b04      	cmp	r3, #4
 800381c:	bf14      	ite	ne
 800381e:	2500      	movne	r5, #0
 8003820:	6833      	ldreq	r3, [r6, #0]
 8003822:	f04f 0600 	mov.w	r6, #0
 8003826:	bf08      	it	eq
 8003828:	68e5      	ldreq	r5, [r4, #12]
 800382a:	f104 041a 	add.w	r4, r4, #26
 800382e:	bf08      	it	eq
 8003830:	1aed      	subeq	r5, r5, r3
 8003832:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003836:	bf08      	it	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	4293      	cmp	r3, r2
 800383e:	bfc4      	itt	gt
 8003840:	1a9b      	subgt	r3, r3, r2
 8003842:	18ed      	addgt	r5, r5, r3
 8003844:	42b5      	cmp	r5, r6
 8003846:	d11a      	bne.n	800387e <_printf_common+0xd2>
 8003848:	2000      	movs	r0, #0
 800384a:	e008      	b.n	800385e <_printf_common+0xb2>
 800384c:	2301      	movs	r3, #1
 800384e:	4652      	mov	r2, sl
 8003850:	4641      	mov	r1, r8
 8003852:	4638      	mov	r0, r7
 8003854:	47c8      	blx	r9
 8003856:	3001      	adds	r0, #1
 8003858:	d103      	bne.n	8003862 <_printf_common+0xb6>
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003862:	3501      	adds	r5, #1
 8003864:	e7c1      	b.n	80037ea <_printf_common+0x3e>
 8003866:	2030      	movs	r0, #48	@ 0x30
 8003868:	18e1      	adds	r1, r4, r3
 800386a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003874:	4422      	add	r2, r4
 8003876:	3302      	adds	r3, #2
 8003878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800387c:	e7c2      	b.n	8003804 <_printf_common+0x58>
 800387e:	2301      	movs	r3, #1
 8003880:	4622      	mov	r2, r4
 8003882:	4641      	mov	r1, r8
 8003884:	4638      	mov	r0, r7
 8003886:	47c8      	blx	r9
 8003888:	3001      	adds	r0, #1
 800388a:	d0e6      	beq.n	800385a <_printf_common+0xae>
 800388c:	3601      	adds	r6, #1
 800388e:	e7d9      	b.n	8003844 <_printf_common+0x98>

08003890 <_printf_i>:
 8003890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	7e0f      	ldrb	r7, [r1, #24]
 8003896:	4691      	mov	r9, r2
 8003898:	2f78      	cmp	r7, #120	@ 0x78
 800389a:	4680      	mov	r8, r0
 800389c:	460c      	mov	r4, r1
 800389e:	469a      	mov	sl, r3
 80038a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038a6:	d807      	bhi.n	80038b8 <_printf_i+0x28>
 80038a8:	2f62      	cmp	r7, #98	@ 0x62
 80038aa:	d80a      	bhi.n	80038c2 <_printf_i+0x32>
 80038ac:	2f00      	cmp	r7, #0
 80038ae:	f000 80d3 	beq.w	8003a58 <_printf_i+0x1c8>
 80038b2:	2f58      	cmp	r7, #88	@ 0x58
 80038b4:	f000 80ba 	beq.w	8003a2c <_printf_i+0x19c>
 80038b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038c0:	e03a      	b.n	8003938 <_printf_i+0xa8>
 80038c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038c6:	2b15      	cmp	r3, #21
 80038c8:	d8f6      	bhi.n	80038b8 <_printf_i+0x28>
 80038ca:	a101      	add	r1, pc, #4	@ (adr r1, 80038d0 <_printf_i+0x40>)
 80038cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d0:	08003929 	.word	0x08003929
 80038d4:	0800393d 	.word	0x0800393d
 80038d8:	080038b9 	.word	0x080038b9
 80038dc:	080038b9 	.word	0x080038b9
 80038e0:	080038b9 	.word	0x080038b9
 80038e4:	080038b9 	.word	0x080038b9
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	080038b9 	.word	0x080038b9
 80038f0:	080038b9 	.word	0x080038b9
 80038f4:	080038b9 	.word	0x080038b9
 80038f8:	080038b9 	.word	0x080038b9
 80038fc:	08003a3f 	.word	0x08003a3f
 8003900:	08003967 	.word	0x08003967
 8003904:	080039f9 	.word	0x080039f9
 8003908:	080038b9 	.word	0x080038b9
 800390c:	080038b9 	.word	0x080038b9
 8003910:	08003a61 	.word	0x08003a61
 8003914:	080038b9 	.word	0x080038b9
 8003918:	08003967 	.word	0x08003967
 800391c:	080038b9 	.word	0x080038b9
 8003920:	080038b9 	.word	0x080038b9
 8003924:	08003a01 	.word	0x08003a01
 8003928:	6833      	ldr	r3, [r6, #0]
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6032      	str	r2, [r6, #0]
 8003930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003938:	2301      	movs	r3, #1
 800393a:	e09e      	b.n	8003a7a <_printf_i+0x1ea>
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	6031      	str	r1, [r6, #0]
 8003944:	0606      	lsls	r6, r0, #24
 8003946:	d501      	bpl.n	800394c <_printf_i+0xbc>
 8003948:	681d      	ldr	r5, [r3, #0]
 800394a:	e003      	b.n	8003954 <_printf_i+0xc4>
 800394c:	0645      	lsls	r5, r0, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0xb8>
 8003950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003954:	2d00      	cmp	r5, #0
 8003956:	da03      	bge.n	8003960 <_printf_i+0xd0>
 8003958:	232d      	movs	r3, #45	@ 0x2d
 800395a:	426d      	negs	r5, r5
 800395c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003960:	230a      	movs	r3, #10
 8003962:	4859      	ldr	r0, [pc, #356]	@ (8003ac8 <_printf_i+0x238>)
 8003964:	e011      	b.n	800398a <_printf_i+0xfa>
 8003966:	6821      	ldr	r1, [r4, #0]
 8003968:	6833      	ldr	r3, [r6, #0]
 800396a:	0608      	lsls	r0, r1, #24
 800396c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003970:	d402      	bmi.n	8003978 <_printf_i+0xe8>
 8003972:	0649      	lsls	r1, r1, #25
 8003974:	bf48      	it	mi
 8003976:	b2ad      	uxthmi	r5, r5
 8003978:	2f6f      	cmp	r7, #111	@ 0x6f
 800397a:	6033      	str	r3, [r6, #0]
 800397c:	bf14      	ite	ne
 800397e:	230a      	movne	r3, #10
 8003980:	2308      	moveq	r3, #8
 8003982:	4851      	ldr	r0, [pc, #324]	@ (8003ac8 <_printf_i+0x238>)
 8003984:	2100      	movs	r1, #0
 8003986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800398a:	6866      	ldr	r6, [r4, #4]
 800398c:	2e00      	cmp	r6, #0
 800398e:	bfa8      	it	ge
 8003990:	6821      	ldrge	r1, [r4, #0]
 8003992:	60a6      	str	r6, [r4, #8]
 8003994:	bfa4      	itt	ge
 8003996:	f021 0104 	bicge.w	r1, r1, #4
 800399a:	6021      	strge	r1, [r4, #0]
 800399c:	b90d      	cbnz	r5, 80039a2 <_printf_i+0x112>
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d04b      	beq.n	8003a3a <_printf_i+0x1aa>
 80039a2:	4616      	mov	r6, r2
 80039a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80039a8:	fb03 5711 	mls	r7, r3, r1, r5
 80039ac:	5dc7      	ldrb	r7, [r0, r7]
 80039ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039b2:	462f      	mov	r7, r5
 80039b4:	42bb      	cmp	r3, r7
 80039b6:	460d      	mov	r5, r1
 80039b8:	d9f4      	bls.n	80039a4 <_printf_i+0x114>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d10b      	bne.n	80039d6 <_printf_i+0x146>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	07df      	lsls	r7, r3, #31
 80039c2:	d508      	bpl.n	80039d6 <_printf_i+0x146>
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	6861      	ldr	r1, [r4, #4]
 80039c8:	4299      	cmp	r1, r3
 80039ca:	bfde      	ittt	le
 80039cc:	2330      	movle	r3, #48	@ 0x30
 80039ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039d6:	1b92      	subs	r2, r2, r6
 80039d8:	6122      	str	r2, [r4, #16]
 80039da:	464b      	mov	r3, r9
 80039dc:	4621      	mov	r1, r4
 80039de:	4640      	mov	r0, r8
 80039e0:	f8cd a000 	str.w	sl, [sp]
 80039e4:	aa03      	add	r2, sp, #12
 80039e6:	f7ff fee1 	bl	80037ac <_printf_common>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d14a      	bne.n	8003a84 <_printf_i+0x1f4>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	b004      	add	sp, #16
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f043 0320 	orr.w	r3, r3, #32
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	2778      	movs	r7, #120	@ 0x78
 8003a02:	4832      	ldr	r0, [pc, #200]	@ (8003acc <_printf_i+0x23c>)
 8003a04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	6831      	ldr	r1, [r6, #0]
 8003a0c:	061f      	lsls	r7, r3, #24
 8003a0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a12:	d402      	bmi.n	8003a1a <_printf_i+0x18a>
 8003a14:	065f      	lsls	r7, r3, #25
 8003a16:	bf48      	it	mi
 8003a18:	b2ad      	uxthmi	r5, r5
 8003a1a:	6031      	str	r1, [r6, #0]
 8003a1c:	07d9      	lsls	r1, r3, #31
 8003a1e:	bf44      	itt	mi
 8003a20:	f043 0320 	orrmi.w	r3, r3, #32
 8003a24:	6023      	strmi	r3, [r4, #0]
 8003a26:	b11d      	cbz	r5, 8003a30 <_printf_i+0x1a0>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	e7ab      	b.n	8003984 <_printf_i+0xf4>
 8003a2c:	4826      	ldr	r0, [pc, #152]	@ (8003ac8 <_printf_i+0x238>)
 8003a2e:	e7e9      	b.n	8003a04 <_printf_i+0x174>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f023 0320 	bic.w	r3, r3, #32
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	e7f6      	b.n	8003a28 <_printf_i+0x198>
 8003a3a:	4616      	mov	r6, r2
 8003a3c:	e7bd      	b.n	80039ba <_printf_i+0x12a>
 8003a3e:	6833      	ldr	r3, [r6, #0]
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1d18      	adds	r0, r3, #4
 8003a44:	6961      	ldr	r1, [r4, #20]
 8003a46:	6030      	str	r0, [r6, #0]
 8003a48:	062e      	lsls	r6, r5, #24
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	d501      	bpl.n	8003a52 <_printf_i+0x1c2>
 8003a4e:	6019      	str	r1, [r3, #0]
 8003a50:	e002      	b.n	8003a58 <_printf_i+0x1c8>
 8003a52:	0668      	lsls	r0, r5, #25
 8003a54:	d5fb      	bpl.n	8003a4e <_printf_i+0x1be>
 8003a56:	8019      	strh	r1, [r3, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4616      	mov	r6, r2
 8003a5c:	6123      	str	r3, [r4, #16]
 8003a5e:	e7bc      	b.n	80039da <_printf_i+0x14a>
 8003a60:	6833      	ldr	r3, [r6, #0]
 8003a62:	2100      	movs	r1, #0
 8003a64:	1d1a      	adds	r2, r3, #4
 8003a66:	6032      	str	r2, [r6, #0]
 8003a68:	681e      	ldr	r6, [r3, #0]
 8003a6a:	6862      	ldr	r2, [r4, #4]
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 fbe4 	bl	800423a <memchr>
 8003a72:	b108      	cbz	r0, 8003a78 <_printf_i+0x1e8>
 8003a74:	1b80      	subs	r0, r0, r6
 8003a76:	6060      	str	r0, [r4, #4]
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	6123      	str	r3, [r4, #16]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a82:	e7aa      	b.n	80039da <_printf_i+0x14a>
 8003a84:	4632      	mov	r2, r6
 8003a86:	4649      	mov	r1, r9
 8003a88:	4640      	mov	r0, r8
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	47d0      	blx	sl
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d0ad      	beq.n	80039ee <_printf_i+0x15e>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	079b      	lsls	r3, r3, #30
 8003a96:	d413      	bmi.n	8003ac0 <_printf_i+0x230>
 8003a98:	68e0      	ldr	r0, [r4, #12]
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	4298      	cmp	r0, r3
 8003a9e:	bfb8      	it	lt
 8003aa0:	4618      	movlt	r0, r3
 8003aa2:	e7a6      	b.n	80039f2 <_printf_i+0x162>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	4640      	mov	r0, r8
 8003aac:	47d0      	blx	sl
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d09d      	beq.n	80039ee <_printf_i+0x15e>
 8003ab2:	3501      	adds	r5, #1
 8003ab4:	68e3      	ldr	r3, [r4, #12]
 8003ab6:	9903      	ldr	r1, [sp, #12]
 8003ab8:	1a5b      	subs	r3, r3, r1
 8003aba:	42ab      	cmp	r3, r5
 8003abc:	dcf2      	bgt.n	8003aa4 <_printf_i+0x214>
 8003abe:	e7eb      	b.n	8003a98 <_printf_i+0x208>
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	f104 0619 	add.w	r6, r4, #25
 8003ac6:	e7f5      	b.n	8003ab4 <_printf_i+0x224>
 8003ac8:	08007944 	.word	0x08007944
 8003acc:	08007955 	.word	0x08007955

08003ad0 <_scanf_float>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	688b      	ldr	r3, [r1, #8]
 8003ada:	4617      	mov	r7, r2
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003ae2:	bf82      	ittt	hi
 8003ae4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003ae8:	eb03 0b05 	addhi.w	fp, r3, r5
 8003aec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003af0:	460a      	mov	r2, r1
 8003af2:	f04f 0500 	mov.w	r5, #0
 8003af6:	bf88      	it	hi
 8003af8:	608b      	strhi	r3, [r1, #8]
 8003afa:	680b      	ldr	r3, [r1, #0]
 8003afc:	4680      	mov	r8, r0
 8003afe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003b02:	f842 3b1c 	str.w	r3, [r2], #28
 8003b06:	460c      	mov	r4, r1
 8003b08:	bf98      	it	ls
 8003b0a:	f04f 0b00 	movls.w	fp, #0
 8003b0e:	4616      	mov	r6, r2
 8003b10:	46aa      	mov	sl, r5
 8003b12:	46a9      	mov	r9, r5
 8003b14:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	9502      	str	r5, [sp, #8]
 8003b1c:	68a2      	ldr	r2, [r4, #8]
 8003b1e:	b152      	cbz	r2, 8003b36 <_scanf_float+0x66>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b26:	d865      	bhi.n	8003bf4 <_scanf_float+0x124>
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d83d      	bhi.n	8003ba8 <_scanf_float+0xd8>
 8003b2c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003b30:	b2c8      	uxtb	r0, r1
 8003b32:	280e      	cmp	r0, #14
 8003b34:	d93b      	bls.n	8003bae <_scanf_float+0xde>
 8003b36:	f1b9 0f00 	cmp.w	r9, #0
 8003b3a:	d003      	beq.n	8003b44 <_scanf_float+0x74>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b48:	f1ba 0f01 	cmp.w	sl, #1
 8003b4c:	f200 8118 	bhi.w	8003d80 <_scanf_float+0x2b0>
 8003b50:	9b01      	ldr	r3, [sp, #4]
 8003b52:	429e      	cmp	r6, r3
 8003b54:	f200 8109 	bhi.w	8003d6a <_scanf_float+0x29a>
 8003b58:	2001      	movs	r0, #1
 8003b5a:	b007      	add	sp, #28
 8003b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b60:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003b64:	2a0d      	cmp	r2, #13
 8003b66:	d8e6      	bhi.n	8003b36 <_scanf_float+0x66>
 8003b68:	a101      	add	r1, pc, #4	@ (adr r1, 8003b70 <_scanf_float+0xa0>)
 8003b6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003cb7 	.word	0x08003cb7
 8003b74:	08003b37 	.word	0x08003b37
 8003b78:	08003b37 	.word	0x08003b37
 8003b7c:	08003b37 	.word	0x08003b37
 8003b80:	08003d17 	.word	0x08003d17
 8003b84:	08003cef 	.word	0x08003cef
 8003b88:	08003b37 	.word	0x08003b37
 8003b8c:	08003b37 	.word	0x08003b37
 8003b90:	08003cc5 	.word	0x08003cc5
 8003b94:	08003b37 	.word	0x08003b37
 8003b98:	08003b37 	.word	0x08003b37
 8003b9c:	08003b37 	.word	0x08003b37
 8003ba0:	08003b37 	.word	0x08003b37
 8003ba4:	08003c7d 	.word	0x08003c7d
 8003ba8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003bac:	e7da      	b.n	8003b64 <_scanf_float+0x94>
 8003bae:	290e      	cmp	r1, #14
 8003bb0:	d8c1      	bhi.n	8003b36 <_scanf_float+0x66>
 8003bb2:	a001      	add	r0, pc, #4	@ (adr r0, 8003bb8 <_scanf_float+0xe8>)
 8003bb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bb8:	08003c6d 	.word	0x08003c6d
 8003bbc:	08003b37 	.word	0x08003b37
 8003bc0:	08003c6d 	.word	0x08003c6d
 8003bc4:	08003d03 	.word	0x08003d03
 8003bc8:	08003b37 	.word	0x08003b37
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c53 	.word	0x08003c53
 8003bd4:	08003c53 	.word	0x08003c53
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c53 	.word	0x08003c53
 8003be0:	08003c53 	.word	0x08003c53
 8003be4:	08003c53 	.word	0x08003c53
 8003be8:	08003c53 	.word	0x08003c53
 8003bec:	08003c53 	.word	0x08003c53
 8003bf0:	08003c53 	.word	0x08003c53
 8003bf4:	2b6e      	cmp	r3, #110	@ 0x6e
 8003bf6:	d809      	bhi.n	8003c0c <_scanf_float+0x13c>
 8003bf8:	2b60      	cmp	r3, #96	@ 0x60
 8003bfa:	d8b1      	bhi.n	8003b60 <_scanf_float+0x90>
 8003bfc:	2b54      	cmp	r3, #84	@ 0x54
 8003bfe:	d07b      	beq.n	8003cf8 <_scanf_float+0x228>
 8003c00:	2b59      	cmp	r3, #89	@ 0x59
 8003c02:	d198      	bne.n	8003b36 <_scanf_float+0x66>
 8003c04:	2d07      	cmp	r5, #7
 8003c06:	d196      	bne.n	8003b36 <_scanf_float+0x66>
 8003c08:	2508      	movs	r5, #8
 8003c0a:	e02c      	b.n	8003c66 <_scanf_float+0x196>
 8003c0c:	2b74      	cmp	r3, #116	@ 0x74
 8003c0e:	d073      	beq.n	8003cf8 <_scanf_float+0x228>
 8003c10:	2b79      	cmp	r3, #121	@ 0x79
 8003c12:	e7f6      	b.n	8003c02 <_scanf_float+0x132>
 8003c14:	6821      	ldr	r1, [r4, #0]
 8003c16:	05c8      	lsls	r0, r1, #23
 8003c18:	d51b      	bpl.n	8003c52 <_scanf_float+0x182>
 8003c1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003c1e:	6021      	str	r1, [r4, #0]
 8003c20:	f109 0901 	add.w	r9, r9, #1
 8003c24:	f1bb 0f00 	cmp.w	fp, #0
 8003c28:	d003      	beq.n	8003c32 <_scanf_float+0x162>
 8003c2a:	3201      	adds	r2, #1
 8003c2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c30:	60a2      	str	r2, [r4, #8]
 8003c32:	68a3      	ldr	r3, [r4, #8]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60a3      	str	r3, [r4, #8]
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f340 8087 	ble.w	8003d58 <_scanf_float+0x288>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	e764      	b.n	8003b1c <_scanf_float+0x4c>
 8003c52:	eb1a 0105 	adds.w	r1, sl, r5
 8003c56:	f47f af6e 	bne.w	8003b36 <_scanf_float+0x66>
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	468a      	mov	sl, r1
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003c64:	6022      	str	r2, [r4, #0]
 8003c66:	f806 3b01 	strb.w	r3, [r6], #1
 8003c6a:	e7e2      	b.n	8003c32 <_scanf_float+0x162>
 8003c6c:	6822      	ldr	r2, [r4, #0]
 8003c6e:	0610      	lsls	r0, r2, #24
 8003c70:	f57f af61 	bpl.w	8003b36 <_scanf_float+0x66>
 8003c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c78:	6022      	str	r2, [r4, #0]
 8003c7a:	e7f4      	b.n	8003c66 <_scanf_float+0x196>
 8003c7c:	f1ba 0f00 	cmp.w	sl, #0
 8003c80:	d10e      	bne.n	8003ca0 <_scanf_float+0x1d0>
 8003c82:	f1b9 0f00 	cmp.w	r9, #0
 8003c86:	d10e      	bne.n	8003ca6 <_scanf_float+0x1d6>
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c92:	d108      	bne.n	8003ca6 <_scanf_float+0x1d6>
 8003c94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c98:	f04f 0a01 	mov.w	sl, #1
 8003c9c:	6022      	str	r2, [r4, #0]
 8003c9e:	e7e2      	b.n	8003c66 <_scanf_float+0x196>
 8003ca0:	f1ba 0f02 	cmp.w	sl, #2
 8003ca4:	d055      	beq.n	8003d52 <_scanf_float+0x282>
 8003ca6:	2d01      	cmp	r5, #1
 8003ca8:	d002      	beq.n	8003cb0 <_scanf_float+0x1e0>
 8003caa:	2d04      	cmp	r5, #4
 8003cac:	f47f af43 	bne.w	8003b36 <_scanf_float+0x66>
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	b2ed      	uxtb	r5, r5
 8003cb4:	e7d7      	b.n	8003c66 <_scanf_float+0x196>
 8003cb6:	f1ba 0f01 	cmp.w	sl, #1
 8003cba:	f47f af3c 	bne.w	8003b36 <_scanf_float+0x66>
 8003cbe:	f04f 0a02 	mov.w	sl, #2
 8003cc2:	e7d0      	b.n	8003c66 <_scanf_float+0x196>
 8003cc4:	b97d      	cbnz	r5, 8003ce6 <_scanf_float+0x216>
 8003cc6:	f1b9 0f00 	cmp.w	r9, #0
 8003cca:	f47f af37 	bne.w	8003b3c <_scanf_float+0x6c>
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003cd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003cd8:	f040 8103 	bne.w	8003ee2 <_scanf_float+0x412>
 8003cdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ce0:	2501      	movs	r5, #1
 8003ce2:	6022      	str	r2, [r4, #0]
 8003ce4:	e7bf      	b.n	8003c66 <_scanf_float+0x196>
 8003ce6:	2d03      	cmp	r5, #3
 8003ce8:	d0e2      	beq.n	8003cb0 <_scanf_float+0x1e0>
 8003cea:	2d05      	cmp	r5, #5
 8003cec:	e7de      	b.n	8003cac <_scanf_float+0x1dc>
 8003cee:	2d02      	cmp	r5, #2
 8003cf0:	f47f af21 	bne.w	8003b36 <_scanf_float+0x66>
 8003cf4:	2503      	movs	r5, #3
 8003cf6:	e7b6      	b.n	8003c66 <_scanf_float+0x196>
 8003cf8:	2d06      	cmp	r5, #6
 8003cfa:	f47f af1c 	bne.w	8003b36 <_scanf_float+0x66>
 8003cfe:	2507      	movs	r5, #7
 8003d00:	e7b1      	b.n	8003c66 <_scanf_float+0x196>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	0591      	lsls	r1, r2, #22
 8003d06:	f57f af16 	bpl.w	8003b36 <_scanf_float+0x66>
 8003d0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d14:	e7a7      	b.n	8003c66 <_scanf_float+0x196>
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003d1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d20:	d006      	beq.n	8003d30 <_scanf_float+0x260>
 8003d22:	0550      	lsls	r0, r2, #21
 8003d24:	f57f af07 	bpl.w	8003b36 <_scanf_float+0x66>
 8003d28:	f1b9 0f00 	cmp.w	r9, #0
 8003d2c:	f000 80d9 	beq.w	8003ee2 <_scanf_float+0x412>
 8003d30:	0591      	lsls	r1, r2, #22
 8003d32:	bf58      	it	pl
 8003d34:	9902      	ldrpl	r1, [sp, #8]
 8003d36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d3a:	bf58      	it	pl
 8003d3c:	eba9 0101 	subpl.w	r1, r9, r1
 8003d40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003d44:	f04f 0900 	mov.w	r9, #0
 8003d48:	bf58      	it	pl
 8003d4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d4e:	6022      	str	r2, [r4, #0]
 8003d50:	e789      	b.n	8003c66 <_scanf_float+0x196>
 8003d52:	f04f 0a03 	mov.w	sl, #3
 8003d56:	e786      	b.n	8003c66 <_scanf_float+0x196>
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d60:	4798      	blx	r3
 8003d62:	2800      	cmp	r0, #0
 8003d64:	f43f aeda 	beq.w	8003b1c <_scanf_float+0x4c>
 8003d68:	e6e5      	b.n	8003b36 <_scanf_float+0x66>
 8003d6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d6e:	463a      	mov	r2, r7
 8003d70:	4640      	mov	r0, r8
 8003d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d76:	4798      	blx	r3
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	e6e7      	b.n	8003b50 <_scanf_float+0x80>
 8003d80:	1e6b      	subs	r3, r5, #1
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d824      	bhi.n	8003dd0 <_scanf_float+0x300>
 8003d86:	2d02      	cmp	r5, #2
 8003d88:	d836      	bhi.n	8003df8 <_scanf_float+0x328>
 8003d8a:	9b01      	ldr	r3, [sp, #4]
 8003d8c:	429e      	cmp	r6, r3
 8003d8e:	f67f aee3 	bls.w	8003b58 <_scanf_float+0x88>
 8003d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d96:	463a      	mov	r2, r7
 8003d98:	4640      	mov	r0, r8
 8003d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d9e:	4798      	blx	r3
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	e7f0      	b.n	8003d8a <_scanf_float+0x2ba>
 8003da8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dac:	463a      	mov	r2, r7
 8003dae:	4640      	mov	r0, r8
 8003db0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003db4:	4798      	blx	r3
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dc0:	fa5f fa8a 	uxtb.w	sl, sl
 8003dc4:	f1ba 0f02 	cmp.w	sl, #2
 8003dc8:	d1ee      	bne.n	8003da8 <_scanf_float+0x2d8>
 8003dca:	3d03      	subs	r5, #3
 8003dcc:	b2ed      	uxtb	r5, r5
 8003dce:	1b76      	subs	r6, r6, r5
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	05da      	lsls	r2, r3, #23
 8003dd4:	d530      	bpl.n	8003e38 <_scanf_float+0x368>
 8003dd6:	055b      	lsls	r3, r3, #21
 8003dd8:	d511      	bpl.n	8003dfe <_scanf_float+0x32e>
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	429e      	cmp	r6, r3
 8003dde:	f67f aebb 	bls.w	8003b58 <_scanf_float+0x88>
 8003de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003de6:	463a      	mov	r2, r7
 8003de8:	4640      	mov	r0, r8
 8003dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dee:	4798      	blx	r3
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	e7f0      	b.n	8003dda <_scanf_float+0x30a>
 8003df8:	46aa      	mov	sl, r5
 8003dfa:	46b3      	mov	fp, r6
 8003dfc:	e7de      	b.n	8003dbc <_scanf_float+0x2ec>
 8003dfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	2965      	cmp	r1, #101	@ 0x65
 8003e06:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e0e:	6123      	str	r3, [r4, #16]
 8003e10:	d00c      	beq.n	8003e2c <_scanf_float+0x35c>
 8003e12:	2945      	cmp	r1, #69	@ 0x45
 8003e14:	d00a      	beq.n	8003e2c <_scanf_float+0x35c>
 8003e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	4798      	blx	r3
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	1eb5      	subs	r5, r6, #2
 8003e2a:	6123      	str	r3, [r4, #16]
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e34:	4798      	blx	r3
 8003e36:	462e      	mov	r6, r5
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	f012 0210 	ands.w	r2, r2, #16
 8003e3e:	d001      	beq.n	8003e44 <_scanf_float+0x374>
 8003e40:	2000      	movs	r0, #0
 8003e42:	e68a      	b.n	8003b5a <_scanf_float+0x8a>
 8003e44:	7032      	strb	r2, [r6, #0]
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e50:	d11c      	bne.n	8003e8c <_scanf_float+0x3bc>
 8003e52:	9b02      	ldr	r3, [sp, #8]
 8003e54:	454b      	cmp	r3, r9
 8003e56:	eba3 0209 	sub.w	r2, r3, r9
 8003e5a:	d123      	bne.n	8003ea4 <_scanf_float+0x3d4>
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4640      	mov	r0, r8
 8003e60:	9901      	ldr	r1, [sp, #4]
 8003e62:	f002 fbed 	bl	8006640 <_strtod_r>
 8003e66:	9b03      	ldr	r3, [sp, #12]
 8003e68:	6825      	ldr	r5, [r4, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f015 0f02 	tst.w	r5, #2
 8003e70:	4606      	mov	r6, r0
 8003e72:	460f      	mov	r7, r1
 8003e74:	f103 0204 	add.w	r2, r3, #4
 8003e78:	d01f      	beq.n	8003eba <_scanf_float+0x3ea>
 8003e7a:	9903      	ldr	r1, [sp, #12]
 8003e7c:	600a      	str	r2, [r1, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	e9c3 6700 	strd	r6, r7, [r3]
 8003e84:	68e3      	ldr	r3, [r4, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60e3      	str	r3, [r4, #12]
 8003e8a:	e7d9      	b.n	8003e40 <_scanf_float+0x370>
 8003e8c:	9b04      	ldr	r3, [sp, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0e4      	beq.n	8003e5c <_scanf_float+0x38c>
 8003e92:	9905      	ldr	r1, [sp, #20]
 8003e94:	230a      	movs	r3, #10
 8003e96:	4640      	mov	r0, r8
 8003e98:	3101      	adds	r1, #1
 8003e9a:	f002 fc51 	bl	8006740 <_strtol_r>
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	9e05      	ldr	r6, [sp, #20]
 8003ea2:	1ac2      	subs	r2, r0, r3
 8003ea4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003ea8:	429e      	cmp	r6, r3
 8003eaa:	bf28      	it	cs
 8003eac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <_scanf_float+0x418>)
 8003eb4:	f000 f8de 	bl	8004074 <siprintf>
 8003eb8:	e7d0      	b.n	8003e5c <_scanf_float+0x38c>
 8003eba:	076d      	lsls	r5, r5, #29
 8003ebc:	d4dd      	bmi.n	8003e7a <_scanf_float+0x3aa>
 8003ebe:	9d03      	ldr	r5, [sp, #12]
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	681d      	ldr	r5, [r3, #0]
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	f7fc fe0c 	bl	8000ae4 <__aeabi_dcmpun>
 8003ecc:	b120      	cbz	r0, 8003ed8 <_scanf_float+0x408>
 8003ece:	4807      	ldr	r0, [pc, #28]	@ (8003eec <_scanf_float+0x41c>)
 8003ed0:	f000 f9c2 	bl	8004258 <nanf>
 8003ed4:	6028      	str	r0, [r5, #0]
 8003ed6:	e7d5      	b.n	8003e84 <_scanf_float+0x3b4>
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fe60 	bl	8000ba0 <__aeabi_d2f>
 8003ee0:	e7f8      	b.n	8003ed4 <_scanf_float+0x404>
 8003ee2:	f04f 0900 	mov.w	r9, #0
 8003ee6:	e62d      	b.n	8003b44 <_scanf_float+0x74>
 8003ee8:	08007966 	.word	0x08007966
 8003eec:	08007cfd 	.word	0x08007cfd

08003ef0 <std>:
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8003efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003efe:	6083      	str	r3, [r0, #8]
 8003f00:	8181      	strh	r1, [r0, #12]
 8003f02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f04:	81c2      	strh	r2, [r0, #14]
 8003f06:	6183      	str	r3, [r0, #24]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	305c      	adds	r0, #92	@ 0x5c
 8003f0e:	f000 f914 	bl	800413a <memset>
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <std+0x58>)
 8003f14:	6224      	str	r4, [r4, #32]
 8003f16:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <std+0x5c>)
 8003f1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <std+0x60>)
 8003f1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <std+0x64>)
 8003f22:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f24:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <std+0x68>)
 8003f26:	429c      	cmp	r4, r3
 8003f28:	d006      	beq.n	8003f38 <std+0x48>
 8003f2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f2e:	4294      	cmp	r4, r2
 8003f30:	d002      	beq.n	8003f38 <std+0x48>
 8003f32:	33d0      	adds	r3, #208	@ 0xd0
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d105      	bne.n	8003f44 <std+0x54>
 8003f38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f40:	f000 b978 	b.w	8004234 <__retarget_lock_init_recursive>
 8003f44:	bd10      	pop	{r4, pc}
 8003f46:	bf00      	nop
 8003f48:	080040b5 	.word	0x080040b5
 8003f4c:	080040d7 	.word	0x080040d7
 8003f50:	0800410f 	.word	0x0800410f
 8003f54:	08004133 	.word	0x08004133
 8003f58:	20000270 	.word	0x20000270

08003f5c <stdio_exit_handler>:
 8003f5c:	4a02      	ldr	r2, [pc, #8]	@ (8003f68 <stdio_exit_handler+0xc>)
 8003f5e:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <stdio_exit_handler+0x10>)
 8003f60:	4803      	ldr	r0, [pc, #12]	@ (8003f70 <stdio_exit_handler+0x14>)
 8003f62:	f000 b869 	b.w	8004038 <_fwalk_sglue>
 8003f66:	bf00      	nop
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	08006af5 	.word	0x08006af5
 8003f70:	2000001c 	.word	0x2000001c

08003f74 <cleanup_stdio>:
 8003f74:	6841      	ldr	r1, [r0, #4]
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <cleanup_stdio+0x34>)
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	d001      	beq.n	8003f84 <cleanup_stdio+0x10>
 8003f80:	f002 fdb8 	bl	8006af4 <_fflush_r>
 8003f84:	68a1      	ldr	r1, [r4, #8]
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <cleanup_stdio+0x38>)
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d002      	beq.n	8003f92 <cleanup_stdio+0x1e>
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f002 fdb1 	bl	8006af4 <_fflush_r>
 8003f92:	68e1      	ldr	r1, [r4, #12]
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <cleanup_stdio+0x3c>)
 8003f96:	4299      	cmp	r1, r3
 8003f98:	d004      	beq.n	8003fa4 <cleanup_stdio+0x30>
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa0:	f002 bda8 	b.w	8006af4 <_fflush_r>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000270 	.word	0x20000270
 8003fac:	200002d8 	.word	0x200002d8
 8003fb0:	20000340 	.word	0x20000340

08003fb4 <global_stdio_init.part.0>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <global_stdio_init.part.0+0x30>)
 8003fb8:	4c0b      	ldr	r4, [pc, #44]	@ (8003fe8 <global_stdio_init.part.0+0x34>)
 8003fba:	4a0c      	ldr	r2, [pc, #48]	@ (8003fec <global_stdio_init.part.0+0x38>)
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f7ff ff94 	bl	8003ef0 <std>
 8003fc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2109      	movs	r1, #9
 8003fd0:	f7ff ff8e 	bl	8003ef0 <std>
 8003fd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fd8:	2202      	movs	r2, #2
 8003fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fde:	2112      	movs	r1, #18
 8003fe0:	f7ff bf86 	b.w	8003ef0 <std>
 8003fe4:	200003a8 	.word	0x200003a8
 8003fe8:	20000270 	.word	0x20000270
 8003fec:	08003f5d 	.word	0x08003f5d

08003ff0 <__sfp_lock_acquire>:
 8003ff0:	4801      	ldr	r0, [pc, #4]	@ (8003ff8 <__sfp_lock_acquire+0x8>)
 8003ff2:	f000 b920 	b.w	8004236 <__retarget_lock_acquire_recursive>
 8003ff6:	bf00      	nop
 8003ff8:	200003b1 	.word	0x200003b1

08003ffc <__sfp_lock_release>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	@ (8004004 <__sfp_lock_release+0x8>)
 8003ffe:	f000 b91b 	b.w	8004238 <__retarget_lock_release_recursive>
 8004002:	bf00      	nop
 8004004:	200003b1 	.word	0x200003b1

08004008 <__sinit>:
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
 800400c:	f7ff fff0 	bl	8003ff0 <__sfp_lock_acquire>
 8004010:	6a23      	ldr	r3, [r4, #32]
 8004012:	b11b      	cbz	r3, 800401c <__sinit+0x14>
 8004014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004018:	f7ff bff0 	b.w	8003ffc <__sfp_lock_release>
 800401c:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <__sinit+0x28>)
 800401e:	6223      	str	r3, [r4, #32]
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <__sinit+0x2c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f5      	bne.n	8004014 <__sinit+0xc>
 8004028:	f7ff ffc4 	bl	8003fb4 <global_stdio_init.part.0>
 800402c:	e7f2      	b.n	8004014 <__sinit+0xc>
 800402e:	bf00      	nop
 8004030:	08003f75 	.word	0x08003f75
 8004034:	200003a8 	.word	0x200003a8

08004038 <_fwalk_sglue>:
 8004038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800403c:	4607      	mov	r7, r0
 800403e:	4688      	mov	r8, r1
 8004040:	4614      	mov	r4, r2
 8004042:	2600      	movs	r6, #0
 8004044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004048:	f1b9 0901 	subs.w	r9, r9, #1
 800404c:	d505      	bpl.n	800405a <_fwalk_sglue+0x22>
 800404e:	6824      	ldr	r4, [r4, #0]
 8004050:	2c00      	cmp	r4, #0
 8004052:	d1f7      	bne.n	8004044 <_fwalk_sglue+0xc>
 8004054:	4630      	mov	r0, r6
 8004056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800405a:	89ab      	ldrh	r3, [r5, #12]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d907      	bls.n	8004070 <_fwalk_sglue+0x38>
 8004060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004064:	3301      	adds	r3, #1
 8004066:	d003      	beq.n	8004070 <_fwalk_sglue+0x38>
 8004068:	4629      	mov	r1, r5
 800406a:	4638      	mov	r0, r7
 800406c:	47c0      	blx	r8
 800406e:	4306      	orrs	r6, r0
 8004070:	3568      	adds	r5, #104	@ 0x68
 8004072:	e7e9      	b.n	8004048 <_fwalk_sglue+0x10>

08004074 <siprintf>:
 8004074:	b40e      	push	{r1, r2, r3}
 8004076:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800407a:	b500      	push	{lr}
 800407c:	b09c      	sub	sp, #112	@ 0x70
 800407e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004080:	9002      	str	r0, [sp, #8]
 8004082:	9006      	str	r0, [sp, #24]
 8004084:	9107      	str	r1, [sp, #28]
 8004086:	9104      	str	r1, [sp, #16]
 8004088:	4808      	ldr	r0, [pc, #32]	@ (80040ac <siprintf+0x38>)
 800408a:	4909      	ldr	r1, [pc, #36]	@ (80040b0 <siprintf+0x3c>)
 800408c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004090:	9105      	str	r1, [sp, #20]
 8004092:	6800      	ldr	r0, [r0, #0]
 8004094:	a902      	add	r1, sp, #8
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	f002 fbb0 	bl	80067fc <_svfiprintf_r>
 800409c:	2200      	movs	r2, #0
 800409e:	9b02      	ldr	r3, [sp, #8]
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	b01c      	add	sp, #112	@ 0x70
 80040a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a8:	b003      	add	sp, #12
 80040aa:	4770      	bx	lr
 80040ac:	20000018 	.word	0x20000018
 80040b0:	ffff0208 	.word	0xffff0208

080040b4 <__sread>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	460c      	mov	r4, r1
 80040b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040bc:	f000 f86c 	bl	8004198 <_read_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	bfab      	itete	ge
 80040c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040c6:	89a3      	ldrhlt	r3, [r4, #12]
 80040c8:	181b      	addge	r3, r3, r0
 80040ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040ce:	bfac      	ite	ge
 80040d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040d2:	81a3      	strhlt	r3, [r4, #12]
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <__swrite>:
 80040d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040da:	461f      	mov	r7, r3
 80040dc:	898b      	ldrh	r3, [r1, #12]
 80040de:	4605      	mov	r5, r0
 80040e0:	05db      	lsls	r3, r3, #23
 80040e2:	460c      	mov	r4, r1
 80040e4:	4616      	mov	r6, r2
 80040e6:	d505      	bpl.n	80040f4 <__swrite+0x1e>
 80040e8:	2302      	movs	r3, #2
 80040ea:	2200      	movs	r2, #0
 80040ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f0:	f000 f840 	bl	8004174 <_lseek_r>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	4632      	mov	r2, r6
 80040f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	4628      	mov	r0, r5
 8004100:	463b      	mov	r3, r7
 8004102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800410a:	f000 b857 	b.w	80041bc <_write_r>

0800410e <__sseek>:
 800410e:	b510      	push	{r4, lr}
 8004110:	460c      	mov	r4, r1
 8004112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004116:	f000 f82d 	bl	8004174 <_lseek_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	bf15      	itete	ne
 8004120:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800412a:	81a3      	strheq	r3, [r4, #12]
 800412c:	bf18      	it	ne
 800412e:	81a3      	strhne	r3, [r4, #12]
 8004130:	bd10      	pop	{r4, pc}

08004132 <__sclose>:
 8004132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004136:	f000 b80d 	b.w	8004154 <_close_r>

0800413a <memset>:
 800413a:	4603      	mov	r3, r0
 800413c:	4402      	add	r2, r0
 800413e:	4293      	cmp	r3, r2
 8004140:	d100      	bne.n	8004144 <memset+0xa>
 8004142:	4770      	bx	lr
 8004144:	f803 1b01 	strb.w	r1, [r3], #1
 8004148:	e7f9      	b.n	800413e <memset+0x4>
	...

0800414c <_localeconv_r>:
 800414c:	4800      	ldr	r0, [pc, #0]	@ (8004150 <_localeconv_r+0x4>)
 800414e:	4770      	bx	lr
 8004150:	20000158 	.word	0x20000158

08004154 <_close_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	2300      	movs	r3, #0
 8004158:	4d05      	ldr	r5, [pc, #20]	@ (8004170 <_close_r+0x1c>)
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fd f897 	bl	8001292 <_close>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_close_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_close_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	200003ac 	.word	0x200003ac

08004174 <_lseek_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	2200      	movs	r2, #0
 800417e:	4d05      	ldr	r5, [pc, #20]	@ (8004194 <_lseek_r+0x20>)
 8004180:	602a      	str	r2, [r5, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f7fd f8a9 	bl	80012da <_lseek>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_lseek_r+0x1e>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	b103      	cbz	r3, 8004192 <_lseek_r+0x1e>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	200003ac 	.word	0x200003ac

08004198 <_read_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	2200      	movs	r2, #0
 80041a2:	4d05      	ldr	r5, [pc, #20]	@ (80041b8 <_read_r+0x20>)
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7fd f83a 	bl	8001220 <_read>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_read_r+0x1e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_read_r+0x1e>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	200003ac 	.word	0x200003ac

080041bc <_write_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	2200      	movs	r2, #0
 80041c6:	4d05      	ldr	r5, [pc, #20]	@ (80041dc <_write_r+0x20>)
 80041c8:	602a      	str	r2, [r5, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7fd f845 	bl	800125a <_write>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_write_r+0x1e>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	b103      	cbz	r3, 80041da <_write_r+0x1e>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	200003ac 	.word	0x200003ac

080041e0 <__errno>:
 80041e0:	4b01      	ldr	r3, [pc, #4]	@ (80041e8 <__errno+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000018 	.word	0x20000018

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	2600      	movs	r6, #0
 80041f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004224 <__libc_init_array+0x38>)
 80041f2:	4c0d      	ldr	r4, [pc, #52]	@ (8004228 <__libc_init_array+0x3c>)
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	f003 fb66 	bl	80078cc <_init>
 8004200:	2600      	movs	r6, #0
 8004202:	4d0a      	ldr	r5, [pc, #40]	@ (800422c <__libc_init_array+0x40>)
 8004204:	4c0a      	ldr	r4, [pc, #40]	@ (8004230 <__libc_init_array+0x44>)
 8004206:	1b64      	subs	r4, r4, r5
 8004208:	10a4      	asrs	r4, r4, #2
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	08007d68 	.word	0x08007d68
 8004228:	08007d68 	.word	0x08007d68
 800422c:	08007d68 	.word	0x08007d68
 8004230:	08007d6c 	.word	0x08007d6c

08004234 <__retarget_lock_init_recursive>:
 8004234:	4770      	bx	lr

08004236 <__retarget_lock_acquire_recursive>:
 8004236:	4770      	bx	lr

08004238 <__retarget_lock_release_recursive>:
 8004238:	4770      	bx	lr

0800423a <memchr>:
 800423a:	4603      	mov	r3, r0
 800423c:	b510      	push	{r4, lr}
 800423e:	b2c9      	uxtb	r1, r1
 8004240:	4402      	add	r2, r0
 8004242:	4293      	cmp	r3, r2
 8004244:	4618      	mov	r0, r3
 8004246:	d101      	bne.n	800424c <memchr+0x12>
 8004248:	2000      	movs	r0, #0
 800424a:	e003      	b.n	8004254 <memchr+0x1a>
 800424c:	7804      	ldrb	r4, [r0, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	428c      	cmp	r4, r1
 8004252:	d1f6      	bne.n	8004242 <memchr+0x8>
 8004254:	bd10      	pop	{r4, pc}
	...

08004258 <nanf>:
 8004258:	4800      	ldr	r0, [pc, #0]	@ (800425c <nanf+0x4>)
 800425a:	4770      	bx	lr
 800425c:	7fc00000 	.word	0x7fc00000

08004260 <quorem>:
 8004260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	6903      	ldr	r3, [r0, #16]
 8004266:	690c      	ldr	r4, [r1, #16]
 8004268:	4607      	mov	r7, r0
 800426a:	42a3      	cmp	r3, r4
 800426c:	db7e      	blt.n	800436c <quorem+0x10c>
 800426e:	3c01      	subs	r4, #1
 8004270:	00a3      	lsls	r3, r4, #2
 8004272:	f100 0514 	add.w	r5, r0, #20
 8004276:	f101 0814 	add.w	r8, r1, #20
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800428a:	3301      	adds	r3, #1
 800428c:	429a      	cmp	r2, r3
 800428e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004292:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004296:	d32e      	bcc.n	80042f6 <quorem+0x96>
 8004298:	f04f 0a00 	mov.w	sl, #0
 800429c:	46c4      	mov	ip, r8
 800429e:	46ae      	mov	lr, r5
 80042a0:	46d3      	mov	fp, sl
 80042a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042a6:	b298      	uxth	r0, r3
 80042a8:	fb06 a000 	mla	r0, r6, r0, sl
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	0c02      	lsrs	r2, r0, #16
 80042b0:	fb06 2303 	mla	r3, r6, r3, r2
 80042b4:	f8de 2000 	ldr.w	r2, [lr]
 80042b8:	b280      	uxth	r0, r0
 80042ba:	b292      	uxth	r2, r2
 80042bc:	1a12      	subs	r2, r2, r0
 80042be:	445a      	add	r2, fp
 80042c0:	f8de 0000 	ldr.w	r0, [lr]
 80042c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80042ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80042d2:	b292      	uxth	r2, r2
 80042d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80042d8:	45e1      	cmp	r9, ip
 80042da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80042de:	f84e 2b04 	str.w	r2, [lr], #4
 80042e2:	d2de      	bcs.n	80042a2 <quorem+0x42>
 80042e4:	9b00      	ldr	r3, [sp, #0]
 80042e6:	58eb      	ldr	r3, [r5, r3]
 80042e8:	b92b      	cbnz	r3, 80042f6 <quorem+0x96>
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	3b04      	subs	r3, #4
 80042ee:	429d      	cmp	r5, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	d32f      	bcc.n	8004354 <quorem+0xf4>
 80042f4:	613c      	str	r4, [r7, #16]
 80042f6:	4638      	mov	r0, r7
 80042f8:	f001 f9c2 	bl	8005680 <__mcmp>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	db25      	blt.n	800434c <quorem+0xec>
 8004300:	4629      	mov	r1, r5
 8004302:	2000      	movs	r0, #0
 8004304:	f858 2b04 	ldr.w	r2, [r8], #4
 8004308:	f8d1 c000 	ldr.w	ip, [r1]
 800430c:	fa1f fe82 	uxth.w	lr, r2
 8004310:	fa1f f38c 	uxth.w	r3, ip
 8004314:	eba3 030e 	sub.w	r3, r3, lr
 8004318:	4403      	add	r3, r0
 800431a:	0c12      	lsrs	r2, r2, #16
 800431c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004320:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004324:	b29b      	uxth	r3, r3
 8004326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800432a:	45c1      	cmp	r9, r8
 800432c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004330:	f841 3b04 	str.w	r3, [r1], #4
 8004334:	d2e6      	bcs.n	8004304 <quorem+0xa4>
 8004336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800433a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800433e:	b922      	cbnz	r2, 800434a <quorem+0xea>
 8004340:	3b04      	subs	r3, #4
 8004342:	429d      	cmp	r5, r3
 8004344:	461a      	mov	r2, r3
 8004346:	d30b      	bcc.n	8004360 <quorem+0x100>
 8004348:	613c      	str	r4, [r7, #16]
 800434a:	3601      	adds	r6, #1
 800434c:	4630      	mov	r0, r6
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	3b04      	subs	r3, #4
 8004358:	2a00      	cmp	r2, #0
 800435a:	d1cb      	bne.n	80042f4 <quorem+0x94>
 800435c:	3c01      	subs	r4, #1
 800435e:	e7c6      	b.n	80042ee <quorem+0x8e>
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	3b04      	subs	r3, #4
 8004364:	2a00      	cmp	r2, #0
 8004366:	d1ef      	bne.n	8004348 <quorem+0xe8>
 8004368:	3c01      	subs	r4, #1
 800436a:	e7ea      	b.n	8004342 <quorem+0xe2>
 800436c:	2000      	movs	r0, #0
 800436e:	e7ee      	b.n	800434e <quorem+0xee>

08004370 <_dtoa_r>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	69c7      	ldr	r7, [r0, #28]
 800437a:	b097      	sub	sp, #92	@ 0x5c
 800437c:	4683      	mov	fp, r0
 800437e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004382:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004384:	b97f      	cbnz	r7, 80043a6 <_dtoa_r+0x36>
 8004386:	2010      	movs	r0, #16
 8004388:	f000 fe02 	bl	8004f90 <malloc>
 800438c:	4602      	mov	r2, r0
 800438e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004392:	b920      	cbnz	r0, 800439e <_dtoa_r+0x2e>
 8004394:	21ef      	movs	r1, #239	@ 0xef
 8004396:	4ba8      	ldr	r3, [pc, #672]	@ (8004638 <_dtoa_r+0x2c8>)
 8004398:	48a8      	ldr	r0, [pc, #672]	@ (800463c <_dtoa_r+0x2cc>)
 800439a:	f002 fc23 	bl	8006be4 <__assert_func>
 800439e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80043a2:	6007      	str	r7, [r0, #0]
 80043a4:	60c7      	str	r7, [r0, #12]
 80043a6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	b159      	cbz	r1, 80043c6 <_dtoa_r+0x56>
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	2301      	movs	r3, #1
 80043b2:	4093      	lsls	r3, r2
 80043b4:	604a      	str	r2, [r1, #4]
 80043b6:	608b      	str	r3, [r1, #8]
 80043b8:	4658      	mov	r0, fp
 80043ba:	f000 fedf 	bl	800517c <_Bfree>
 80043be:	2200      	movs	r2, #0
 80043c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	1e2b      	subs	r3, r5, #0
 80043c8:	bfaf      	iteee	ge
 80043ca:	2300      	movge	r3, #0
 80043cc:	2201      	movlt	r2, #1
 80043ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80043d2:	9303      	strlt	r3, [sp, #12]
 80043d4:	bfa8      	it	ge
 80043d6:	6033      	strge	r3, [r6, #0]
 80043d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043dc:	4b98      	ldr	r3, [pc, #608]	@ (8004640 <_dtoa_r+0x2d0>)
 80043de:	bfb8      	it	lt
 80043e0:	6032      	strlt	r2, [r6, #0]
 80043e2:	ea33 0308 	bics.w	r3, r3, r8
 80043e6:	d112      	bne.n	800440e <_dtoa_r+0x9e>
 80043e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80043ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80043f4:	4323      	orrs	r3, r4
 80043f6:	f000 8550 	beq.w	8004e9a <_dtoa_r+0xb2a>
 80043fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043fc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004644 <_dtoa_r+0x2d4>
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8552 	beq.w	8004eaa <_dtoa_r+0xb3a>
 8004406:	f10a 0303 	add.w	r3, sl, #3
 800440a:	f000 bd4c 	b.w	8004ea6 <_dtoa_r+0xb36>
 800440e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004412:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	2300      	movs	r3, #0
 800441e:	f7fc fb2f 	bl	8000a80 <__aeabi_dcmpeq>
 8004422:	4607      	mov	r7, r0
 8004424:	b158      	cbz	r0, 800443e <_dtoa_r+0xce>
 8004426:	2301      	movs	r3, #1
 8004428:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800442e:	b113      	cbz	r3, 8004436 <_dtoa_r+0xc6>
 8004430:	4b85      	ldr	r3, [pc, #532]	@ (8004648 <_dtoa_r+0x2d8>)
 8004432:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800464c <_dtoa_r+0x2dc>
 800443a:	f000 bd36 	b.w	8004eaa <_dtoa_r+0xb3a>
 800443e:	ab14      	add	r3, sp, #80	@ 0x50
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	ab15      	add	r3, sp, #84	@ 0x54
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4658      	mov	r0, fp
 8004448:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800444c:	f001 fa30 	bl	80058b0 <__d2b>
 8004450:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004454:	4681      	mov	r9, r0
 8004456:	2e00      	cmp	r6, #0
 8004458:	d077      	beq.n	800454a <_dtoa_r+0x1da>
 800445a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800445e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004460:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004468:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800446c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004470:	9712      	str	r7, [sp, #72]	@ 0x48
 8004472:	4619      	mov	r1, r3
 8004474:	2200      	movs	r2, #0
 8004476:	4b76      	ldr	r3, [pc, #472]	@ (8004650 <_dtoa_r+0x2e0>)
 8004478:	f7fb fee2 	bl	8000240 <__aeabi_dsub>
 800447c:	a368      	add	r3, pc, #416	@ (adr r3, 8004620 <_dtoa_r+0x2b0>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fc f895 	bl	80005b0 <__aeabi_dmul>
 8004486:	a368      	add	r3, pc, #416	@ (adr r3, 8004628 <_dtoa_r+0x2b8>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fb feda 	bl	8000244 <__adddf3>
 8004490:	4604      	mov	r4, r0
 8004492:	4630      	mov	r0, r6
 8004494:	460d      	mov	r5, r1
 8004496:	f7fc f821 	bl	80004dc <__aeabi_i2d>
 800449a:	a365      	add	r3, pc, #404	@ (adr r3, 8004630 <_dtoa_r+0x2c0>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fc f886 	bl	80005b0 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4620      	mov	r0, r4
 80044aa:	4629      	mov	r1, r5
 80044ac:	f7fb feca 	bl	8000244 <__adddf3>
 80044b0:	4604      	mov	r4, r0
 80044b2:	460d      	mov	r5, r1
 80044b4:	f7fc fb2c 	bl	8000b10 <__aeabi_d2iz>
 80044b8:	2200      	movs	r2, #0
 80044ba:	4607      	mov	r7, r0
 80044bc:	2300      	movs	r3, #0
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fc fae7 	bl	8000a94 <__aeabi_dcmplt>
 80044c6:	b140      	cbz	r0, 80044da <_dtoa_r+0x16a>
 80044c8:	4638      	mov	r0, r7
 80044ca:	f7fc f807 	bl	80004dc <__aeabi_i2d>
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f7fc fad5 	bl	8000a80 <__aeabi_dcmpeq>
 80044d6:	b900      	cbnz	r0, 80044da <_dtoa_r+0x16a>
 80044d8:	3f01      	subs	r7, #1
 80044da:	2f16      	cmp	r7, #22
 80044dc:	d853      	bhi.n	8004586 <_dtoa_r+0x216>
 80044de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004654 <_dtoa_r+0x2e4>)
 80044e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f7fc fad2 	bl	8000a94 <__aeabi_dcmplt>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d04a      	beq.n	800458a <_dtoa_r+0x21a>
 80044f4:	2300      	movs	r3, #0
 80044f6:	3f01      	subs	r7, #1
 80044f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044fc:	1b9b      	subs	r3, r3, r6
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	bf46      	itte	mi
 8004502:	f1c3 0801 	rsbmi	r8, r3, #1
 8004506:	2300      	movmi	r3, #0
 8004508:	f04f 0800 	movpl.w	r8, #0
 800450c:	9209      	str	r2, [sp, #36]	@ 0x24
 800450e:	bf48      	it	mi
 8004510:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004512:	2f00      	cmp	r7, #0
 8004514:	db3b      	blt.n	800458e <_dtoa_r+0x21e>
 8004516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004518:	970e      	str	r7, [sp, #56]	@ 0x38
 800451a:	443b      	add	r3, r7
 800451c:	9309      	str	r3, [sp, #36]	@ 0x24
 800451e:	2300      	movs	r3, #0
 8004520:	930a      	str	r3, [sp, #40]	@ 0x28
 8004522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004524:	2b09      	cmp	r3, #9
 8004526:	d866      	bhi.n	80045f6 <_dtoa_r+0x286>
 8004528:	2b05      	cmp	r3, #5
 800452a:	bfc4      	itt	gt
 800452c:	3b04      	subgt	r3, #4
 800452e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004530:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004532:	bfc8      	it	gt
 8004534:	2400      	movgt	r4, #0
 8004536:	f1a3 0302 	sub.w	r3, r3, #2
 800453a:	bfd8      	it	le
 800453c:	2401      	movle	r4, #1
 800453e:	2b03      	cmp	r3, #3
 8004540:	d864      	bhi.n	800460c <_dtoa_r+0x29c>
 8004542:	e8df f003 	tbb	[pc, r3]
 8004546:	382b      	.short	0x382b
 8004548:	5636      	.short	0x5636
 800454a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800454e:	441e      	add	r6, r3
 8004550:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004554:	2b20      	cmp	r3, #32
 8004556:	bfc1      	itttt	gt
 8004558:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800455c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004560:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004564:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004568:	bfd6      	itet	le
 800456a:	f1c3 0320 	rsble	r3, r3, #32
 800456e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004572:	fa04 f003 	lslle.w	r0, r4, r3
 8004576:	f7fb ffa1 	bl	80004bc <__aeabi_ui2d>
 800457a:	2201      	movs	r2, #1
 800457c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004580:	3e01      	subs	r6, #1
 8004582:	9212      	str	r2, [sp, #72]	@ 0x48
 8004584:	e775      	b.n	8004472 <_dtoa_r+0x102>
 8004586:	2301      	movs	r3, #1
 8004588:	e7b6      	b.n	80044f8 <_dtoa_r+0x188>
 800458a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800458c:	e7b5      	b.n	80044fa <_dtoa_r+0x18a>
 800458e:	427b      	negs	r3, r7
 8004590:	930a      	str	r3, [sp, #40]	@ 0x28
 8004592:	2300      	movs	r3, #0
 8004594:	eba8 0807 	sub.w	r8, r8, r7
 8004598:	930e      	str	r3, [sp, #56]	@ 0x38
 800459a:	e7c2      	b.n	8004522 <_dtoa_r+0x1b2>
 800459c:	2300      	movs	r3, #0
 800459e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dc35      	bgt.n	8004612 <_dtoa_r+0x2a2>
 80045a6:	2301      	movs	r3, #1
 80045a8:	461a      	mov	r2, r3
 80045aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80045b0:	e00b      	b.n	80045ca <_dtoa_r+0x25a>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e7f3      	b.n	800459e <_dtoa_r+0x22e>
 80045b6:	2300      	movs	r3, #0
 80045b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	9308      	str	r3, [sp, #32]
 80045c0:	3301      	adds	r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	9307      	str	r3, [sp, #28]
 80045c6:	bfb8      	it	lt
 80045c8:	2301      	movlt	r3, #1
 80045ca:	2100      	movs	r1, #0
 80045cc:	2204      	movs	r2, #4
 80045ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 80045d2:	f102 0514 	add.w	r5, r2, #20
 80045d6:	429d      	cmp	r5, r3
 80045d8:	d91f      	bls.n	800461a <_dtoa_r+0x2aa>
 80045da:	6041      	str	r1, [r0, #4]
 80045dc:	4658      	mov	r0, fp
 80045de:	f000 fd8d 	bl	80050fc <_Balloc>
 80045e2:	4682      	mov	sl, r0
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d139      	bne.n	800465c <_dtoa_r+0x2ec>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80045ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004658 <_dtoa_r+0x2e8>)
 80045f0:	e6d2      	b.n	8004398 <_dtoa_r+0x28>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7e0      	b.n	80045b8 <_dtoa_r+0x248>
 80045f6:	2401      	movs	r4, #1
 80045f8:	2300      	movs	r3, #0
 80045fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80045fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	2200      	movs	r2, #0
 8004604:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004608:	2312      	movs	r3, #18
 800460a:	e7d0      	b.n	80045ae <_dtoa_r+0x23e>
 800460c:	2301      	movs	r3, #1
 800460e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004610:	e7f5      	b.n	80045fe <_dtoa_r+0x28e>
 8004612:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004614:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004618:	e7d7      	b.n	80045ca <_dtoa_r+0x25a>
 800461a:	3101      	adds	r1, #1
 800461c:	0052      	lsls	r2, r2, #1
 800461e:	e7d8      	b.n	80045d2 <_dtoa_r+0x262>
 8004620:	636f4361 	.word	0x636f4361
 8004624:	3fd287a7 	.word	0x3fd287a7
 8004628:	8b60c8b3 	.word	0x8b60c8b3
 800462c:	3fc68a28 	.word	0x3fc68a28
 8004630:	509f79fb 	.word	0x509f79fb
 8004634:	3fd34413 	.word	0x3fd34413
 8004638:	08007978 	.word	0x08007978
 800463c:	0800798f 	.word	0x0800798f
 8004640:	7ff00000 	.word	0x7ff00000
 8004644:	08007974 	.word	0x08007974
 8004648:	08007943 	.word	0x08007943
 800464c:	08007942 	.word	0x08007942
 8004650:	3ff80000 	.word	0x3ff80000
 8004654:	08007a88 	.word	0x08007a88
 8004658:	080079e7 	.word	0x080079e7
 800465c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	9b07      	ldr	r3, [sp, #28]
 8004664:	2b0e      	cmp	r3, #14
 8004666:	f200 80a4 	bhi.w	80047b2 <_dtoa_r+0x442>
 800466a:	2c00      	cmp	r4, #0
 800466c:	f000 80a1 	beq.w	80047b2 <_dtoa_r+0x442>
 8004670:	2f00      	cmp	r7, #0
 8004672:	dd33      	ble.n	80046dc <_dtoa_r+0x36c>
 8004674:	4b86      	ldr	r3, [pc, #536]	@ (8004890 <_dtoa_r+0x520>)
 8004676:	f007 020f 	and.w	r2, r7, #15
 800467a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800467e:	05f8      	lsls	r0, r7, #23
 8004680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004684:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800468c:	d516      	bpl.n	80046bc <_dtoa_r+0x34c>
 800468e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004692:	4b80      	ldr	r3, [pc, #512]	@ (8004894 <_dtoa_r+0x524>)
 8004694:	2603      	movs	r6, #3
 8004696:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800469a:	f7fc f8b3 	bl	8000804 <__aeabi_ddiv>
 800469e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046a2:	f004 040f 	and.w	r4, r4, #15
 80046a6:	4d7b      	ldr	r5, [pc, #492]	@ (8004894 <_dtoa_r+0x524>)
 80046a8:	b954      	cbnz	r4, 80046c0 <_dtoa_r+0x350>
 80046aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046b2:	f7fc f8a7 	bl	8000804 <__aeabi_ddiv>
 80046b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ba:	e028      	b.n	800470e <_dtoa_r+0x39e>
 80046bc:	2602      	movs	r6, #2
 80046be:	e7f2      	b.n	80046a6 <_dtoa_r+0x336>
 80046c0:	07e1      	lsls	r1, r4, #31
 80046c2:	d508      	bpl.n	80046d6 <_dtoa_r+0x366>
 80046c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046cc:	f7fb ff70 	bl	80005b0 <__aeabi_dmul>
 80046d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d4:	3601      	adds	r6, #1
 80046d6:	1064      	asrs	r4, r4, #1
 80046d8:	3508      	adds	r5, #8
 80046da:	e7e5      	b.n	80046a8 <_dtoa_r+0x338>
 80046dc:	f000 80d2 	beq.w	8004884 <_dtoa_r+0x514>
 80046e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046e4:	427c      	negs	r4, r7
 80046e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <_dtoa_r+0x520>)
 80046e8:	f004 020f 	and.w	r2, r4, #15
 80046ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb ff5c 	bl	80005b0 <__aeabi_dmul>
 80046f8:	2602      	movs	r6, #2
 80046fa:	2300      	movs	r3, #0
 80046fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004700:	4d64      	ldr	r5, [pc, #400]	@ (8004894 <_dtoa_r+0x524>)
 8004702:	1124      	asrs	r4, r4, #4
 8004704:	2c00      	cmp	r4, #0
 8004706:	f040 80b2 	bne.w	800486e <_dtoa_r+0x4fe>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1d3      	bne.n	80046b6 <_dtoa_r+0x346>
 800470e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80b7 	beq.w	8004888 <_dtoa_r+0x518>
 800471a:	2200      	movs	r2, #0
 800471c:	4620      	mov	r0, r4
 800471e:	4629      	mov	r1, r5
 8004720:	4b5d      	ldr	r3, [pc, #372]	@ (8004898 <_dtoa_r+0x528>)
 8004722:	f7fc f9b7 	bl	8000a94 <__aeabi_dcmplt>
 8004726:	2800      	cmp	r0, #0
 8004728:	f000 80ae 	beq.w	8004888 <_dtoa_r+0x518>
 800472c:	9b07      	ldr	r3, [sp, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80aa 	beq.w	8004888 <_dtoa_r+0x518>
 8004734:	9b08      	ldr	r3, [sp, #32]
 8004736:	2b00      	cmp	r3, #0
 8004738:	dd37      	ble.n	80047aa <_dtoa_r+0x43a>
 800473a:	1e7b      	subs	r3, r7, #1
 800473c:	4620      	mov	r0, r4
 800473e:	9304      	str	r3, [sp, #16]
 8004740:	2200      	movs	r2, #0
 8004742:	4629      	mov	r1, r5
 8004744:	4b55      	ldr	r3, [pc, #340]	@ (800489c <_dtoa_r+0x52c>)
 8004746:	f7fb ff33 	bl	80005b0 <__aeabi_dmul>
 800474a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800474e:	9c08      	ldr	r4, [sp, #32]
 8004750:	3601      	adds	r6, #1
 8004752:	4630      	mov	r0, r6
 8004754:	f7fb fec2 	bl	80004dc <__aeabi_i2d>
 8004758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800475c:	f7fb ff28 	bl	80005b0 <__aeabi_dmul>
 8004760:	2200      	movs	r2, #0
 8004762:	4b4f      	ldr	r3, [pc, #316]	@ (80048a0 <_dtoa_r+0x530>)
 8004764:	f7fb fd6e 	bl	8000244 <__adddf3>
 8004768:	4605      	mov	r5, r0
 800476a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800476e:	2c00      	cmp	r4, #0
 8004770:	f040 809a 	bne.w	80048a8 <_dtoa_r+0x538>
 8004774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	4b4a      	ldr	r3, [pc, #296]	@ (80048a4 <_dtoa_r+0x534>)
 800477c:	f7fb fd60 	bl	8000240 <__aeabi_dsub>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004788:	462a      	mov	r2, r5
 800478a:	4633      	mov	r3, r6
 800478c:	f7fc f9a0 	bl	8000ad0 <__aeabi_dcmpgt>
 8004790:	2800      	cmp	r0, #0
 8004792:	f040 828e 	bne.w	8004cb2 <_dtoa_r+0x942>
 8004796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800479a:	462a      	mov	r2, r5
 800479c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047a0:	f7fc f978 	bl	8000a94 <__aeabi_dcmplt>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	f040 8127 	bne.w	80049f8 <_dtoa_r+0x688>
 80047aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80047ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f2c0 8163 	blt.w	8004a80 <_dtoa_r+0x710>
 80047ba:	2f0e      	cmp	r7, #14
 80047bc:	f300 8160 	bgt.w	8004a80 <_dtoa_r+0x710>
 80047c0:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <_dtoa_r+0x520>)
 80047c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da03      	bge.n	80047dc <_dtoa_r+0x46c>
 80047d4:	9b07      	ldr	r3, [sp, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f340 8100 	ble.w	80049dc <_dtoa_r+0x66c>
 80047dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80047e0:	4656      	mov	r6, sl
 80047e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fc f80b 	bl	8000804 <__aeabi_ddiv>
 80047ee:	f7fc f98f 	bl	8000b10 <__aeabi_d2iz>
 80047f2:	4680      	mov	r8, r0
 80047f4:	f7fb fe72 	bl	80004dc <__aeabi_i2d>
 80047f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047fc:	f7fb fed8 	bl	80005b0 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fd1a 	bl	8000240 <__aeabi_dsub>
 800480c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004810:	9d07      	ldr	r5, [sp, #28]
 8004812:	f806 4b01 	strb.w	r4, [r6], #1
 8004816:	eba6 040a 	sub.w	r4, r6, sl
 800481a:	42a5      	cmp	r5, r4
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	f040 8116 	bne.w	8004a50 <_dtoa_r+0x6e0>
 8004824:	f7fb fd0e 	bl	8000244 <__adddf3>
 8004828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800482c:	4604      	mov	r4, r0
 800482e:	460d      	mov	r5, r1
 8004830:	f7fc f94e 	bl	8000ad0 <__aeabi_dcmpgt>
 8004834:	2800      	cmp	r0, #0
 8004836:	f040 80f8 	bne.w	8004a2a <_dtoa_r+0x6ba>
 800483a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800483e:	4620      	mov	r0, r4
 8004840:	4629      	mov	r1, r5
 8004842:	f7fc f91d 	bl	8000a80 <__aeabi_dcmpeq>
 8004846:	b118      	cbz	r0, 8004850 <_dtoa_r+0x4e0>
 8004848:	f018 0f01 	tst.w	r8, #1
 800484c:	f040 80ed 	bne.w	8004a2a <_dtoa_r+0x6ba>
 8004850:	4649      	mov	r1, r9
 8004852:	4658      	mov	r0, fp
 8004854:	f000 fc92 	bl	800517c <_Bfree>
 8004858:	2300      	movs	r3, #0
 800485a:	7033      	strb	r3, [r6, #0]
 800485c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800485e:	3701      	adds	r7, #1
 8004860:	601f      	str	r7, [r3, #0]
 8004862:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8320 	beq.w	8004eaa <_dtoa_r+0xb3a>
 800486a:	601e      	str	r6, [r3, #0]
 800486c:	e31d      	b.n	8004eaa <_dtoa_r+0xb3a>
 800486e:	07e2      	lsls	r2, r4, #31
 8004870:	d505      	bpl.n	800487e <_dtoa_r+0x50e>
 8004872:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004876:	f7fb fe9b 	bl	80005b0 <__aeabi_dmul>
 800487a:	2301      	movs	r3, #1
 800487c:	3601      	adds	r6, #1
 800487e:	1064      	asrs	r4, r4, #1
 8004880:	3508      	adds	r5, #8
 8004882:	e73f      	b.n	8004704 <_dtoa_r+0x394>
 8004884:	2602      	movs	r6, #2
 8004886:	e742      	b.n	800470e <_dtoa_r+0x39e>
 8004888:	9c07      	ldr	r4, [sp, #28]
 800488a:	9704      	str	r7, [sp, #16]
 800488c:	e761      	b.n	8004752 <_dtoa_r+0x3e2>
 800488e:	bf00      	nop
 8004890:	08007a88 	.word	0x08007a88
 8004894:	08007a60 	.word	0x08007a60
 8004898:	3ff00000 	.word	0x3ff00000
 800489c:	40240000 	.word	0x40240000
 80048a0:	401c0000 	.word	0x401c0000
 80048a4:	40140000 	.word	0x40140000
 80048a8:	4b70      	ldr	r3, [pc, #448]	@ (8004a6c <_dtoa_r+0x6fc>)
 80048aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048b4:	4454      	add	r4, sl
 80048b6:	2900      	cmp	r1, #0
 80048b8:	d045      	beq.n	8004946 <_dtoa_r+0x5d6>
 80048ba:	2000      	movs	r0, #0
 80048bc:	496c      	ldr	r1, [pc, #432]	@ (8004a70 <_dtoa_r+0x700>)
 80048be:	f7fb ffa1 	bl	8000804 <__aeabi_ddiv>
 80048c2:	4633      	mov	r3, r6
 80048c4:	462a      	mov	r2, r5
 80048c6:	f7fb fcbb 	bl	8000240 <__aeabi_dsub>
 80048ca:	4656      	mov	r6, sl
 80048cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d4:	f7fc f91c 	bl	8000b10 <__aeabi_d2iz>
 80048d8:	4605      	mov	r5, r0
 80048da:	f7fb fdff 	bl	80004dc <__aeabi_i2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e6:	f7fb fcab 	bl	8000240 <__aeabi_dsub>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	3530      	adds	r5, #48	@ 0x30
 80048f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048f8:	f806 5b01 	strb.w	r5, [r6], #1
 80048fc:	f7fc f8ca 	bl	8000a94 <__aeabi_dcmplt>
 8004900:	2800      	cmp	r0, #0
 8004902:	d163      	bne.n	80049cc <_dtoa_r+0x65c>
 8004904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004908:	2000      	movs	r0, #0
 800490a:	495a      	ldr	r1, [pc, #360]	@ (8004a74 <_dtoa_r+0x704>)
 800490c:	f7fb fc98 	bl	8000240 <__aeabi_dsub>
 8004910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004914:	f7fc f8be 	bl	8000a94 <__aeabi_dcmplt>
 8004918:	2800      	cmp	r0, #0
 800491a:	f040 8087 	bne.w	8004a2c <_dtoa_r+0x6bc>
 800491e:	42a6      	cmp	r6, r4
 8004920:	f43f af43 	beq.w	80047aa <_dtoa_r+0x43a>
 8004924:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004928:	2200      	movs	r2, #0
 800492a:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <_dtoa_r+0x708>)
 800492c:	f7fb fe40 	bl	80005b0 <__aeabi_dmul>
 8004930:	2200      	movs	r2, #0
 8004932:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800493a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <_dtoa_r+0x708>)
 800493c:	f7fb fe38 	bl	80005b0 <__aeabi_dmul>
 8004940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004944:	e7c4      	b.n	80048d0 <_dtoa_r+0x560>
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	f7fb fe31 	bl	80005b0 <__aeabi_dmul>
 800494e:	4656      	mov	r6, sl
 8004950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004954:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800495a:	f7fc f8d9 	bl	8000b10 <__aeabi_d2iz>
 800495e:	4605      	mov	r5, r0
 8004960:	f7fb fdbc 	bl	80004dc <__aeabi_i2d>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800496c:	f7fb fc68 	bl	8000240 <__aeabi_dsub>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	3530      	adds	r5, #48	@ 0x30
 8004976:	f806 5b01 	strb.w	r5, [r6], #1
 800497a:	42a6      	cmp	r6, r4
 800497c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	d124      	bne.n	80049d0 <_dtoa_r+0x660>
 8004986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800498a:	4b39      	ldr	r3, [pc, #228]	@ (8004a70 <_dtoa_r+0x700>)
 800498c:	f7fb fc5a 	bl	8000244 <__adddf3>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004998:	f7fc f89a 	bl	8000ad0 <__aeabi_dcmpgt>
 800499c:	2800      	cmp	r0, #0
 800499e:	d145      	bne.n	8004a2c <_dtoa_r+0x6bc>
 80049a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049a4:	2000      	movs	r0, #0
 80049a6:	4932      	ldr	r1, [pc, #200]	@ (8004a70 <_dtoa_r+0x700>)
 80049a8:	f7fb fc4a 	bl	8000240 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b4:	f7fc f86e 	bl	8000a94 <__aeabi_dcmplt>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f43f aef6 	beq.w	80047aa <_dtoa_r+0x43a>
 80049be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80049c0:	1e73      	subs	r3, r6, #1
 80049c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80049c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80049c8:	2b30      	cmp	r3, #48	@ 0x30
 80049ca:	d0f8      	beq.n	80049be <_dtoa_r+0x64e>
 80049cc:	9f04      	ldr	r7, [sp, #16]
 80049ce:	e73f      	b.n	8004850 <_dtoa_r+0x4e0>
 80049d0:	4b29      	ldr	r3, [pc, #164]	@ (8004a78 <_dtoa_r+0x708>)
 80049d2:	f7fb fded 	bl	80005b0 <__aeabi_dmul>
 80049d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049da:	e7bc      	b.n	8004956 <_dtoa_r+0x5e6>
 80049dc:	d10c      	bne.n	80049f8 <_dtoa_r+0x688>
 80049de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049e2:	2200      	movs	r2, #0
 80049e4:	4b25      	ldr	r3, [pc, #148]	@ (8004a7c <_dtoa_r+0x70c>)
 80049e6:	f7fb fde3 	bl	80005b0 <__aeabi_dmul>
 80049ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049ee:	f7fc f865 	bl	8000abc <__aeabi_dcmpge>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	f000 815b 	beq.w	8004cae <_dtoa_r+0x93e>
 80049f8:	2400      	movs	r4, #0
 80049fa:	4625      	mov	r5, r4
 80049fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049fe:	4656      	mov	r6, sl
 8004a00:	43db      	mvns	r3, r3
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	2700      	movs	r7, #0
 8004a06:	4621      	mov	r1, r4
 8004a08:	4658      	mov	r0, fp
 8004a0a:	f000 fbb7 	bl	800517c <_Bfree>
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	d0dc      	beq.n	80049cc <_dtoa_r+0x65c>
 8004a12:	b12f      	cbz	r7, 8004a20 <_dtoa_r+0x6b0>
 8004a14:	42af      	cmp	r7, r5
 8004a16:	d003      	beq.n	8004a20 <_dtoa_r+0x6b0>
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4658      	mov	r0, fp
 8004a1c:	f000 fbae 	bl	800517c <_Bfree>
 8004a20:	4629      	mov	r1, r5
 8004a22:	4658      	mov	r0, fp
 8004a24:	f000 fbaa 	bl	800517c <_Bfree>
 8004a28:	e7d0      	b.n	80049cc <_dtoa_r+0x65c>
 8004a2a:	9704      	str	r7, [sp, #16]
 8004a2c:	4633      	mov	r3, r6
 8004a2e:	461e      	mov	r6, r3
 8004a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a34:	2a39      	cmp	r2, #57	@ 0x39
 8004a36:	d107      	bne.n	8004a48 <_dtoa_r+0x6d8>
 8004a38:	459a      	cmp	sl, r3
 8004a3a:	d1f8      	bne.n	8004a2e <_dtoa_r+0x6be>
 8004a3c:	9a04      	ldr	r2, [sp, #16]
 8004a3e:	3201      	adds	r2, #1
 8004a40:	9204      	str	r2, [sp, #16]
 8004a42:	2230      	movs	r2, #48	@ 0x30
 8004a44:	f88a 2000 	strb.w	r2, [sl]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e7bd      	b.n	80049cc <_dtoa_r+0x65c>
 8004a50:	2200      	movs	r2, #0
 8004a52:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <_dtoa_r+0x708>)
 8004a54:	f7fb fdac 	bl	80005b0 <__aeabi_dmul>
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	460d      	mov	r5, r1
 8004a60:	f7fc f80e 	bl	8000a80 <__aeabi_dcmpeq>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f43f aebc 	beq.w	80047e2 <_dtoa_r+0x472>
 8004a6a:	e6f1      	b.n	8004850 <_dtoa_r+0x4e0>
 8004a6c:	08007a88 	.word	0x08007a88
 8004a70:	3fe00000 	.word	0x3fe00000
 8004a74:	3ff00000 	.word	0x3ff00000
 8004a78:	40240000 	.word	0x40240000
 8004a7c:	40140000 	.word	0x40140000
 8004a80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	f000 80db 	beq.w	8004c3e <_dtoa_r+0x8ce>
 8004a88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	f300 80bf 	bgt.w	8004c0e <_dtoa_r+0x89e>
 8004a90:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80b7 	beq.w	8004c06 <_dtoa_r+0x896>
 8004a98:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004a9c:	4646      	mov	r6, r8
 8004a9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	4658      	mov	r0, fp
 8004aa8:	4498      	add	r8, r3
 8004aaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aac:	f000 fc64 	bl	8005378 <__i2b>
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b15e      	cbz	r6, 8004acc <_dtoa_r+0x75c>
 8004ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dd08      	ble.n	8004acc <_dtoa_r+0x75c>
 8004aba:	42b3      	cmp	r3, r6
 8004abc:	bfa8      	it	ge
 8004abe:	4633      	movge	r3, r6
 8004ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ac2:	eba8 0803 	sub.w	r8, r8, r3
 8004ac6:	1af6      	subs	r6, r6, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ace:	b1f3      	cbz	r3, 8004b0e <_dtoa_r+0x79e>
 8004ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80b7 	beq.w	8004c46 <_dtoa_r+0x8d6>
 8004ad8:	b18c      	cbz	r4, 8004afe <_dtoa_r+0x78e>
 8004ada:	4629      	mov	r1, r5
 8004adc:	4622      	mov	r2, r4
 8004ade:	4658      	mov	r0, fp
 8004ae0:	f000 fd08 	bl	80054f4 <__pow5mult>
 8004ae4:	464a      	mov	r2, r9
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	4605      	mov	r5, r0
 8004aea:	4658      	mov	r0, fp
 8004aec:	f000 fc5a 	bl	80053a4 <__multiply>
 8004af0:	4649      	mov	r1, r9
 8004af2:	9004      	str	r0, [sp, #16]
 8004af4:	4658      	mov	r0, fp
 8004af6:	f000 fb41 	bl	800517c <_Bfree>
 8004afa:	9b04      	ldr	r3, [sp, #16]
 8004afc:	4699      	mov	r9, r3
 8004afe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b00:	1b1a      	subs	r2, r3, r4
 8004b02:	d004      	beq.n	8004b0e <_dtoa_r+0x79e>
 8004b04:	4649      	mov	r1, r9
 8004b06:	4658      	mov	r0, fp
 8004b08:	f000 fcf4 	bl	80054f4 <__pow5mult>
 8004b0c:	4681      	mov	r9, r0
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4658      	mov	r0, fp
 8004b12:	f000 fc31 	bl	8005378 <__i2b>
 8004b16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b18:	4604      	mov	r4, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 81c9 	beq.w	8004eb2 <_dtoa_r+0xb42>
 8004b20:	461a      	mov	r2, r3
 8004b22:	4601      	mov	r1, r0
 8004b24:	4658      	mov	r0, fp
 8004b26:	f000 fce5 	bl	80054f4 <__pow5mult>
 8004b2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	f300 808f 	bgt.w	8004c52 <_dtoa_r+0x8e2>
 8004b34:	9b02      	ldr	r3, [sp, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 8087 	bne.w	8004c4a <_dtoa_r+0x8da>
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f040 8083 	bne.w	8004c4e <_dtoa_r+0x8de>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b4e:	0d1b      	lsrs	r3, r3, #20
 8004b50:	051b      	lsls	r3, r3, #20
 8004b52:	b12b      	cbz	r3, 8004b60 <_dtoa_r+0x7f0>
 8004b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b56:	f108 0801 	add.w	r8, r8, #1
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5e:	2301      	movs	r3, #1
 8004b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 81aa 	beq.w	8004ebe <_dtoa_r+0xb4e>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b70:	6918      	ldr	r0, [r3, #16]
 8004b72:	f000 fbb5 	bl	80052e0 <__hi0bits>
 8004b76:	f1c0 0020 	rsb	r0, r0, #32
 8004b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b7c:	4418      	add	r0, r3
 8004b7e:	f010 001f 	ands.w	r0, r0, #31
 8004b82:	d071      	beq.n	8004c68 <_dtoa_r+0x8f8>
 8004b84:	f1c0 0320 	rsb	r3, r0, #32
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	dd65      	ble.n	8004c58 <_dtoa_r+0x8e8>
 8004b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b8e:	f1c0 001c 	rsb	r0, r0, #28
 8004b92:	4403      	add	r3, r0
 8004b94:	4480      	add	r8, r0
 8004b96:	4406      	add	r6, r0
 8004b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b9a:	f1b8 0f00 	cmp.w	r8, #0
 8004b9e:	dd05      	ble.n	8004bac <_dtoa_r+0x83c>
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	f000 fcff 	bl	80055a8 <__lshift>
 8004baa:	4681      	mov	r9, r0
 8004bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	dd05      	ble.n	8004bbe <_dtoa_r+0x84e>
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4658      	mov	r0, fp
 8004bb8:	f000 fcf6 	bl	80055a8 <__lshift>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d053      	beq.n	8004c6c <_dtoa_r+0x8fc>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f000 fd5a 	bl	8005680 <__mcmp>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	da4d      	bge.n	8004c6c <_dtoa_r+0x8fc>
 8004bd0:	1e7b      	subs	r3, r7, #1
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	220a      	movs	r2, #10
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4658      	mov	r0, fp
 8004bdc:	f000 faf0 	bl	80051c0 <__multadd>
 8004be0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004be2:	4681      	mov	r9, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 816c 	beq.w	8004ec2 <_dtoa_r+0xb52>
 8004bea:	2300      	movs	r3, #0
 8004bec:	4629      	mov	r1, r5
 8004bee:	220a      	movs	r2, #10
 8004bf0:	4658      	mov	r0, fp
 8004bf2:	f000 fae5 	bl	80051c0 <__multadd>
 8004bf6:	9b08      	ldr	r3, [sp, #32]
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dc61      	bgt.n	8004cc2 <_dtoa_r+0x952>
 8004bfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	dc3b      	bgt.n	8004c7c <_dtoa_r+0x90c>
 8004c04:	e05d      	b.n	8004cc2 <_dtoa_r+0x952>
 8004c06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c08:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c0c:	e746      	b.n	8004a9c <_dtoa_r+0x72c>
 8004c0e:	9b07      	ldr	r3, [sp, #28]
 8004c10:	1e5c      	subs	r4, r3, #1
 8004c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	bfbf      	itttt	lt
 8004c18:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004c1a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004c1c:	1ae3      	sublt	r3, r4, r3
 8004c1e:	18d2      	addlt	r2, r2, r3
 8004c20:	bfa8      	it	ge
 8004c22:	1b1c      	subge	r4, r3, r4
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	bfbe      	ittt	lt
 8004c28:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004c2a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004c2c:	2400      	movlt	r4, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb5      	itete	lt
 8004c32:	eba8 0603 	sublt.w	r6, r8, r3
 8004c36:	4646      	movge	r6, r8
 8004c38:	2300      	movlt	r3, #0
 8004c3a:	9b07      	ldrge	r3, [sp, #28]
 8004c3c:	e730      	b.n	8004aa0 <_dtoa_r+0x730>
 8004c3e:	4646      	mov	r6, r8
 8004c40:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004c44:	e735      	b.n	8004ab2 <_dtoa_r+0x742>
 8004c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c48:	e75c      	b.n	8004b04 <_dtoa_r+0x794>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e788      	b.n	8004b60 <_dtoa_r+0x7f0>
 8004c4e:	9b02      	ldr	r3, [sp, #8]
 8004c50:	e786      	b.n	8004b60 <_dtoa_r+0x7f0>
 8004c52:	2300      	movs	r3, #0
 8004c54:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c56:	e788      	b.n	8004b6a <_dtoa_r+0x7fa>
 8004c58:	d09f      	beq.n	8004b9a <_dtoa_r+0x82a>
 8004c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c5c:	331c      	adds	r3, #28
 8004c5e:	441a      	add	r2, r3
 8004c60:	4498      	add	r8, r3
 8004c62:	441e      	add	r6, r3
 8004c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c66:	e798      	b.n	8004b9a <_dtoa_r+0x82a>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	e7f6      	b.n	8004c5a <_dtoa_r+0x8ea>
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	9704      	str	r7, [sp, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dc20      	bgt.n	8004cb6 <_dtoa_r+0x946>
 8004c74:	9308      	str	r3, [sp, #32]
 8004c76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	dd1e      	ble.n	8004cba <_dtoa_r+0x94a>
 8004c7c:	9b08      	ldr	r3, [sp, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f aebc 	bne.w	80049fc <_dtoa_r+0x68c>
 8004c84:	4621      	mov	r1, r4
 8004c86:	2205      	movs	r2, #5
 8004c88:	4658      	mov	r0, fp
 8004c8a:	f000 fa99 	bl	80051c0 <__multadd>
 8004c8e:	4601      	mov	r1, r0
 8004c90:	4604      	mov	r4, r0
 8004c92:	4648      	mov	r0, r9
 8004c94:	f000 fcf4 	bl	8005680 <__mcmp>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f77f aeaf 	ble.w	80049fc <_dtoa_r+0x68c>
 8004c9e:	2331      	movs	r3, #49	@ 0x31
 8004ca0:	4656      	mov	r6, sl
 8004ca2:	f806 3b01 	strb.w	r3, [r6], #1
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	e6aa      	b.n	8004a04 <_dtoa_r+0x694>
 8004cae:	9c07      	ldr	r4, [sp, #28]
 8004cb0:	9704      	str	r7, [sp, #16]
 8004cb2:	4625      	mov	r5, r4
 8004cb4:	e7f3      	b.n	8004c9e <_dtoa_r+0x92e>
 8004cb6:	9b07      	ldr	r3, [sp, #28]
 8004cb8:	9308      	str	r3, [sp, #32]
 8004cba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8104 	beq.w	8004eca <_dtoa_r+0xb5a>
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	dd05      	ble.n	8004cd2 <_dtoa_r+0x962>
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4658      	mov	r0, fp
 8004ccc:	f000 fc6c 	bl	80055a8 <__lshift>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05a      	beq.n	8004d8e <_dtoa_r+0xa1e>
 8004cd8:	4658      	mov	r0, fp
 8004cda:	6869      	ldr	r1, [r5, #4]
 8004cdc:	f000 fa0e 	bl	80050fc <_Balloc>
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	b928      	cbnz	r0, 8004cf0 <_dtoa_r+0x980>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004cea:	4b83      	ldr	r3, [pc, #524]	@ (8004ef8 <_dtoa_r+0xb88>)
 8004cec:	f7ff bb54 	b.w	8004398 <_dtoa_r+0x28>
 8004cf0:	692a      	ldr	r2, [r5, #16]
 8004cf2:	f105 010c 	add.w	r1, r5, #12
 8004cf6:	3202      	adds	r2, #2
 8004cf8:	0092      	lsls	r2, r2, #2
 8004cfa:	300c      	adds	r0, #12
 8004cfc:	f001 ff5e 	bl	8006bbc <memcpy>
 8004d00:	2201      	movs	r2, #1
 8004d02:	4631      	mov	r1, r6
 8004d04:	4658      	mov	r0, fp
 8004d06:	f000 fc4f 	bl	80055a8 <__lshift>
 8004d0a:	462f      	mov	r7, r5
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	f10a 0301 	add.w	r3, sl, #1
 8004d12:	9307      	str	r3, [sp, #28]
 8004d14:	9b08      	ldr	r3, [sp, #32]
 8004d16:	4453      	add	r3, sl
 8004d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d22:	9b07      	ldr	r3, [sp, #28]
 8004d24:	4621      	mov	r1, r4
 8004d26:	3b01      	subs	r3, #1
 8004d28:	4648      	mov	r0, r9
 8004d2a:	9302      	str	r3, [sp, #8]
 8004d2c:	f7ff fa98 	bl	8004260 <quorem>
 8004d30:	4639      	mov	r1, r7
 8004d32:	9008      	str	r0, [sp, #32]
 8004d34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d38:	4648      	mov	r0, r9
 8004d3a:	f000 fca1 	bl	8005680 <__mcmp>
 8004d3e:	462a      	mov	r2, r5
 8004d40:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d42:	4621      	mov	r1, r4
 8004d44:	4658      	mov	r0, fp
 8004d46:	f000 fcb7 	bl	80056b8 <__mdiff>
 8004d4a:	68c2      	ldr	r2, [r0, #12]
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	bb02      	cbnz	r2, 8004d92 <_dtoa_r+0xa22>
 8004d50:	4601      	mov	r1, r0
 8004d52:	4648      	mov	r0, r9
 8004d54:	f000 fc94 	bl	8005680 <__mcmp>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4658      	mov	r0, fp
 8004d5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d60:	f000 fa0c 	bl	800517c <_Bfree>
 8004d64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d68:	9e07      	ldr	r6, [sp, #28]
 8004d6a:	ea43 0102 	orr.w	r1, r3, r2
 8004d6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d70:	4319      	orrs	r1, r3
 8004d72:	d110      	bne.n	8004d96 <_dtoa_r+0xa26>
 8004d74:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d78:	d029      	beq.n	8004dce <_dtoa_r+0xa5e>
 8004d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd02      	ble.n	8004d86 <_dtoa_r+0xa16>
 8004d80:	9b08      	ldr	r3, [sp, #32]
 8004d82:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d86:	9b02      	ldr	r3, [sp, #8]
 8004d88:	f883 8000 	strb.w	r8, [r3]
 8004d8c:	e63b      	b.n	8004a06 <_dtoa_r+0x696>
 8004d8e:	4628      	mov	r0, r5
 8004d90:	e7bb      	b.n	8004d0a <_dtoa_r+0x99a>
 8004d92:	2201      	movs	r2, #1
 8004d94:	e7e1      	b.n	8004d5a <_dtoa_r+0x9ea>
 8004d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db04      	blt.n	8004da6 <_dtoa_r+0xa36>
 8004d9c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004da2:	430b      	orrs	r3, r1
 8004da4:	d120      	bne.n	8004de8 <_dtoa_r+0xa78>
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	dded      	ble.n	8004d86 <_dtoa_r+0xa16>
 8004daa:	4649      	mov	r1, r9
 8004dac:	2201      	movs	r2, #1
 8004dae:	4658      	mov	r0, fp
 8004db0:	f000 fbfa 	bl	80055a8 <__lshift>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4681      	mov	r9, r0
 8004db8:	f000 fc62 	bl	8005680 <__mcmp>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	dc03      	bgt.n	8004dc8 <_dtoa_r+0xa58>
 8004dc0:	d1e1      	bne.n	8004d86 <_dtoa_r+0xa16>
 8004dc2:	f018 0f01 	tst.w	r8, #1
 8004dc6:	d0de      	beq.n	8004d86 <_dtoa_r+0xa16>
 8004dc8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004dcc:	d1d8      	bne.n	8004d80 <_dtoa_r+0xa10>
 8004dce:	2339      	movs	r3, #57	@ 0x39
 8004dd0:	9a02      	ldr	r2, [sp, #8]
 8004dd2:	7013      	strb	r3, [r2, #0]
 8004dd4:	4633      	mov	r3, r6
 8004dd6:	461e      	mov	r6, r3
 8004dd8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	2a39      	cmp	r2, #57	@ 0x39
 8004de0:	d052      	beq.n	8004e88 <_dtoa_r+0xb18>
 8004de2:	3201      	adds	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e60e      	b.n	8004a06 <_dtoa_r+0x696>
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	dd07      	ble.n	8004dfc <_dtoa_r+0xa8c>
 8004dec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004df0:	d0ed      	beq.n	8004dce <_dtoa_r+0xa5e>
 8004df2:	9a02      	ldr	r2, [sp, #8]
 8004df4:	f108 0301 	add.w	r3, r8, #1
 8004df8:	7013      	strb	r3, [r2, #0]
 8004dfa:	e604      	b.n	8004a06 <_dtoa_r+0x696>
 8004dfc:	9b07      	ldr	r3, [sp, #28]
 8004dfe:	9a07      	ldr	r2, [sp, #28]
 8004e00:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d028      	beq.n	8004e5c <_dtoa_r+0xaec>
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	220a      	movs	r2, #10
 8004e10:	4658      	mov	r0, fp
 8004e12:	f000 f9d5 	bl	80051c0 <__multadd>
 8004e16:	42af      	cmp	r7, r5
 8004e18:	4681      	mov	r9, r0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f04f 020a 	mov.w	r2, #10
 8004e22:	4639      	mov	r1, r7
 8004e24:	4658      	mov	r0, fp
 8004e26:	d107      	bne.n	8004e38 <_dtoa_r+0xac8>
 8004e28:	f000 f9ca 	bl	80051c0 <__multadd>
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	4605      	mov	r5, r0
 8004e30:	9b07      	ldr	r3, [sp, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	9307      	str	r3, [sp, #28]
 8004e36:	e774      	b.n	8004d22 <_dtoa_r+0x9b2>
 8004e38:	f000 f9c2 	bl	80051c0 <__multadd>
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4607      	mov	r7, r0
 8004e40:	2300      	movs	r3, #0
 8004e42:	220a      	movs	r2, #10
 8004e44:	4658      	mov	r0, fp
 8004e46:	f000 f9bb 	bl	80051c0 <__multadd>
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	e7f0      	b.n	8004e30 <_dtoa_r+0xac0>
 8004e4e:	9b08      	ldr	r3, [sp, #32]
 8004e50:	2700      	movs	r7, #0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfcc      	ite	gt
 8004e56:	461e      	movgt	r6, r3
 8004e58:	2601      	movle	r6, #1
 8004e5a:	4456      	add	r6, sl
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4658      	mov	r0, fp
 8004e62:	f000 fba1 	bl	80055a8 <__lshift>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4681      	mov	r9, r0
 8004e6a:	f000 fc09 	bl	8005680 <__mcmp>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	dcb0      	bgt.n	8004dd4 <_dtoa_r+0xa64>
 8004e72:	d102      	bne.n	8004e7a <_dtoa_r+0xb0a>
 8004e74:	f018 0f01 	tst.w	r8, #1
 8004e78:	d1ac      	bne.n	8004dd4 <_dtoa_r+0xa64>
 8004e7a:	4633      	mov	r3, r6
 8004e7c:	461e      	mov	r6, r3
 8004e7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e82:	2a30      	cmp	r2, #48	@ 0x30
 8004e84:	d0fa      	beq.n	8004e7c <_dtoa_r+0xb0c>
 8004e86:	e5be      	b.n	8004a06 <_dtoa_r+0x696>
 8004e88:	459a      	cmp	sl, r3
 8004e8a:	d1a4      	bne.n	8004dd6 <_dtoa_r+0xa66>
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	2331      	movs	r3, #49	@ 0x31
 8004e94:	f88a 3000 	strb.w	r3, [sl]
 8004e98:	e5b5      	b.n	8004a06 <_dtoa_r+0x696>
 8004e9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e9c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004efc <_dtoa_r+0xb8c>
 8004ea0:	b11b      	cbz	r3, 8004eaa <_dtoa_r+0xb3a>
 8004ea2:	f10a 0308 	add.w	r3, sl, #8
 8004ea6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4650      	mov	r0, sl
 8004eac:	b017      	add	sp, #92	@ 0x5c
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f77f ae3d 	ble.w	8004b34 <_dtoa_r+0x7c4>
 8004eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ebc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	e65b      	b.n	8004b7a <_dtoa_r+0x80a>
 8004ec2:	9b08      	ldr	r3, [sp, #32]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f77f aed6 	ble.w	8004c76 <_dtoa_r+0x906>
 8004eca:	4656      	mov	r6, sl
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4648      	mov	r0, r9
 8004ed0:	f7ff f9c6 	bl	8004260 <quorem>
 8004ed4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ed8:	9b08      	ldr	r3, [sp, #32]
 8004eda:	f806 8b01 	strb.w	r8, [r6], #1
 8004ede:	eba6 020a 	sub.w	r2, r6, sl
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	ddb3      	ble.n	8004e4e <_dtoa_r+0xade>
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	2300      	movs	r3, #0
 8004eea:	220a      	movs	r2, #10
 8004eec:	4658      	mov	r0, fp
 8004eee:	f000 f967 	bl	80051c0 <__multadd>
 8004ef2:	4681      	mov	r9, r0
 8004ef4:	e7ea      	b.n	8004ecc <_dtoa_r+0xb5c>
 8004ef6:	bf00      	nop
 8004ef8:	080079e7 	.word	0x080079e7
 8004efc:	0800796b 	.word	0x0800796b

08004f00 <_free_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d040      	beq.n	8004f8a <_free_r+0x8a>
 8004f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0c:	1f0c      	subs	r4, r1, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bfb8      	it	lt
 8004f12:	18e4      	addlt	r4, r4, r3
 8004f14:	f000 f8e6 	bl	80050e4 <__malloc_lock>
 8004f18:	4a1c      	ldr	r2, [pc, #112]	@ (8004f8c <_free_r+0x8c>)
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	b933      	cbnz	r3, 8004f2c <_free_r+0x2c>
 8004f1e:	6063      	str	r3, [r4, #4]
 8004f20:	6014      	str	r4, [r2, #0]
 8004f22:	4628      	mov	r0, r5
 8004f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f28:	f000 b8e2 	b.w	80050f0 <__malloc_unlock>
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	d908      	bls.n	8004f42 <_free_r+0x42>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	1821      	adds	r1, r4, r0
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf01      	itttt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	1809      	addeq	r1, r1, r0
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	e7ed      	b.n	8004f1e <_free_r+0x1e>
 8004f42:	461a      	mov	r2, r3
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b10b      	cbz	r3, 8004f4c <_free_r+0x4c>
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d9fa      	bls.n	8004f42 <_free_r+0x42>
 8004f4c:	6811      	ldr	r1, [r2, #0]
 8004f4e:	1850      	adds	r0, r2, r1
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d10b      	bne.n	8004f6c <_free_r+0x6c>
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	4401      	add	r1, r0
 8004f58:	1850      	adds	r0, r2, r1
 8004f5a:	4283      	cmp	r3, r0
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	d1e0      	bne.n	8004f22 <_free_r+0x22>
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4408      	add	r0, r1
 8004f66:	6010      	str	r0, [r2, #0]
 8004f68:	6053      	str	r3, [r2, #4]
 8004f6a:	e7da      	b.n	8004f22 <_free_r+0x22>
 8004f6c:	d902      	bls.n	8004f74 <_free_r+0x74>
 8004f6e:	230c      	movs	r3, #12
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	e7d6      	b.n	8004f22 <_free_r+0x22>
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	1821      	adds	r1, r4, r0
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	bf01      	itttt	eq
 8004f7c:	6819      	ldreq	r1, [r3, #0]
 8004f7e:	685b      	ldreq	r3, [r3, #4]
 8004f80:	1809      	addeq	r1, r1, r0
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	6054      	str	r4, [r2, #4]
 8004f88:	e7cb      	b.n	8004f22 <_free_r+0x22>
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200003b8 	.word	0x200003b8

08004f90 <malloc>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	@ (8004f9c <malloc+0xc>)
 8004f92:	4601      	mov	r1, r0
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f000 b825 	b.w	8004fe4 <_malloc_r>
 8004f9a:	bf00      	nop
 8004f9c:	20000018 	.word	0x20000018

08004fa0 <sbrk_aligned>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8004fe0 <sbrk_aligned+0x40>)
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	6831      	ldr	r1, [r6, #0]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	b911      	cbnz	r1, 8004fb2 <sbrk_aligned+0x12>
 8004fac:	f001 fdf6 	bl	8006b9c <_sbrk_r>
 8004fb0:	6030      	str	r0, [r6, #0]
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f001 fdf1 	bl	8006b9c <_sbrk_r>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	d103      	bne.n	8004fc6 <sbrk_aligned+0x26>
 8004fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	1cc4      	adds	r4, r0, #3
 8004fc8:	f024 0403 	bic.w	r4, r4, #3
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d0f8      	beq.n	8004fc2 <sbrk_aligned+0x22>
 8004fd0:	1a21      	subs	r1, r4, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f001 fde2 	bl	8006b9c <_sbrk_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d1f2      	bne.n	8004fc2 <sbrk_aligned+0x22>
 8004fdc:	e7ef      	b.n	8004fbe <sbrk_aligned+0x1e>
 8004fde:	bf00      	nop
 8004fe0:	200003b4 	.word	0x200003b4

08004fe4 <_malloc_r>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	1ccd      	adds	r5, r1, #3
 8004fea:	f025 0503 	bic.w	r5, r5, #3
 8004fee:	3508      	adds	r5, #8
 8004ff0:	2d0c      	cmp	r5, #12
 8004ff2:	bf38      	it	cc
 8004ff4:	250c      	movcc	r5, #12
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	db01      	blt.n	8005000 <_malloc_r+0x1c>
 8004ffc:	42a9      	cmp	r1, r5
 8004ffe:	d904      	bls.n	800500a <_malloc_r+0x26>
 8005000:	230c      	movs	r3, #12
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	2000      	movs	r0, #0
 8005006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800500a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050e0 <_malloc_r+0xfc>
 800500e:	f000 f869 	bl	80050e4 <__malloc_lock>
 8005012:	f8d8 3000 	ldr.w	r3, [r8]
 8005016:	461c      	mov	r4, r3
 8005018:	bb44      	cbnz	r4, 800506c <_malloc_r+0x88>
 800501a:	4629      	mov	r1, r5
 800501c:	4630      	mov	r0, r6
 800501e:	f7ff ffbf 	bl	8004fa0 <sbrk_aligned>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	4604      	mov	r4, r0
 8005026:	d158      	bne.n	80050da <_malloc_r+0xf6>
 8005028:	f8d8 4000 	ldr.w	r4, [r8]
 800502c:	4627      	mov	r7, r4
 800502e:	2f00      	cmp	r7, #0
 8005030:	d143      	bne.n	80050ba <_malloc_r+0xd6>
 8005032:	2c00      	cmp	r4, #0
 8005034:	d04b      	beq.n	80050ce <_malloc_r+0xea>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	eb04 0903 	add.w	r9, r4, r3
 8005040:	f001 fdac 	bl	8006b9c <_sbrk_r>
 8005044:	4581      	cmp	r9, r0
 8005046:	d142      	bne.n	80050ce <_malloc_r+0xea>
 8005048:	6821      	ldr	r1, [r4, #0]
 800504a:	4630      	mov	r0, r6
 800504c:	1a6d      	subs	r5, r5, r1
 800504e:	4629      	mov	r1, r5
 8005050:	f7ff ffa6 	bl	8004fa0 <sbrk_aligned>
 8005054:	3001      	adds	r0, #1
 8005056:	d03a      	beq.n	80050ce <_malloc_r+0xea>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	442b      	add	r3, r5
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	f8d8 3000 	ldr.w	r3, [r8]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	bb62      	cbnz	r2, 80050c0 <_malloc_r+0xdc>
 8005066:	f8c8 7000 	str.w	r7, [r8]
 800506a:	e00f      	b.n	800508c <_malloc_r+0xa8>
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	1b52      	subs	r2, r2, r5
 8005070:	d420      	bmi.n	80050b4 <_malloc_r+0xd0>
 8005072:	2a0b      	cmp	r2, #11
 8005074:	d917      	bls.n	80050a6 <_malloc_r+0xc2>
 8005076:	1961      	adds	r1, r4, r5
 8005078:	42a3      	cmp	r3, r4
 800507a:	6025      	str	r5, [r4, #0]
 800507c:	bf18      	it	ne
 800507e:	6059      	strne	r1, [r3, #4]
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	bf08      	it	eq
 8005084:	f8c8 1000 	streq.w	r1, [r8]
 8005088:	5162      	str	r2, [r4, r5]
 800508a:	604b      	str	r3, [r1, #4]
 800508c:	4630      	mov	r0, r6
 800508e:	f000 f82f 	bl	80050f0 <__malloc_unlock>
 8005092:	f104 000b 	add.w	r0, r4, #11
 8005096:	1d23      	adds	r3, r4, #4
 8005098:	f020 0007 	bic.w	r0, r0, #7
 800509c:	1ac2      	subs	r2, r0, r3
 800509e:	bf1c      	itt	ne
 80050a0:	1a1b      	subne	r3, r3, r0
 80050a2:	50a3      	strne	r3, [r4, r2]
 80050a4:	e7af      	b.n	8005006 <_malloc_r+0x22>
 80050a6:	6862      	ldr	r2, [r4, #4]
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	bf0c      	ite	eq
 80050ac:	f8c8 2000 	streq.w	r2, [r8]
 80050b0:	605a      	strne	r2, [r3, #4]
 80050b2:	e7eb      	b.n	800508c <_malloc_r+0xa8>
 80050b4:	4623      	mov	r3, r4
 80050b6:	6864      	ldr	r4, [r4, #4]
 80050b8:	e7ae      	b.n	8005018 <_malloc_r+0x34>
 80050ba:	463c      	mov	r4, r7
 80050bc:	687f      	ldr	r7, [r7, #4]
 80050be:	e7b6      	b.n	800502e <_malloc_r+0x4a>
 80050c0:	461a      	mov	r2, r3
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d1fb      	bne.n	80050c0 <_malloc_r+0xdc>
 80050c8:	2300      	movs	r3, #0
 80050ca:	6053      	str	r3, [r2, #4]
 80050cc:	e7de      	b.n	800508c <_malloc_r+0xa8>
 80050ce:	230c      	movs	r3, #12
 80050d0:	4630      	mov	r0, r6
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f000 f80c 	bl	80050f0 <__malloc_unlock>
 80050d8:	e794      	b.n	8005004 <_malloc_r+0x20>
 80050da:	6005      	str	r5, [r0, #0]
 80050dc:	e7d6      	b.n	800508c <_malloc_r+0xa8>
 80050de:	bf00      	nop
 80050e0:	200003b8 	.word	0x200003b8

080050e4 <__malloc_lock>:
 80050e4:	4801      	ldr	r0, [pc, #4]	@ (80050ec <__malloc_lock+0x8>)
 80050e6:	f7ff b8a6 	b.w	8004236 <__retarget_lock_acquire_recursive>
 80050ea:	bf00      	nop
 80050ec:	200003b0 	.word	0x200003b0

080050f0 <__malloc_unlock>:
 80050f0:	4801      	ldr	r0, [pc, #4]	@ (80050f8 <__malloc_unlock+0x8>)
 80050f2:	f7ff b8a1 	b.w	8004238 <__retarget_lock_release_recursive>
 80050f6:	bf00      	nop
 80050f8:	200003b0 	.word	0x200003b0

080050fc <_Balloc>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	69c6      	ldr	r6, [r0, #28]
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	b976      	cbnz	r6, 8005124 <_Balloc+0x28>
 8005106:	2010      	movs	r0, #16
 8005108:	f7ff ff42 	bl	8004f90 <malloc>
 800510c:	4602      	mov	r2, r0
 800510e:	61e0      	str	r0, [r4, #28]
 8005110:	b920      	cbnz	r0, 800511c <_Balloc+0x20>
 8005112:	216b      	movs	r1, #107	@ 0x6b
 8005114:	4b17      	ldr	r3, [pc, #92]	@ (8005174 <_Balloc+0x78>)
 8005116:	4818      	ldr	r0, [pc, #96]	@ (8005178 <_Balloc+0x7c>)
 8005118:	f001 fd64 	bl	8006be4 <__assert_func>
 800511c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005120:	6006      	str	r6, [r0, #0]
 8005122:	60c6      	str	r6, [r0, #12]
 8005124:	69e6      	ldr	r6, [r4, #28]
 8005126:	68f3      	ldr	r3, [r6, #12]
 8005128:	b183      	cbz	r3, 800514c <_Balloc+0x50>
 800512a:	69e3      	ldr	r3, [r4, #28]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005132:	b9b8      	cbnz	r0, 8005164 <_Balloc+0x68>
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f605 	lsl.w	r6, r1, r5
 800513a:	1d72      	adds	r2, r6, #5
 800513c:	4620      	mov	r0, r4
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	f001 fd6e 	bl	8006c20 <_calloc_r>
 8005144:	b160      	cbz	r0, 8005160 <_Balloc+0x64>
 8005146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800514a:	e00e      	b.n	800516a <_Balloc+0x6e>
 800514c:	2221      	movs	r2, #33	@ 0x21
 800514e:	2104      	movs	r1, #4
 8005150:	4620      	mov	r0, r4
 8005152:	f001 fd65 	bl	8006c20 <_calloc_r>
 8005156:	69e3      	ldr	r3, [r4, #28]
 8005158:	60f0      	str	r0, [r6, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e4      	bne.n	800512a <_Balloc+0x2e>
 8005160:	2000      	movs	r0, #0
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	6802      	ldr	r2, [r0, #0]
 8005166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800516a:	2300      	movs	r3, #0
 800516c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005170:	e7f7      	b.n	8005162 <_Balloc+0x66>
 8005172:	bf00      	nop
 8005174:	08007978 	.word	0x08007978
 8005178:	080079f8 	.word	0x080079f8

0800517c <_Bfree>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	69c6      	ldr	r6, [r0, #28]
 8005180:	4605      	mov	r5, r0
 8005182:	460c      	mov	r4, r1
 8005184:	b976      	cbnz	r6, 80051a4 <_Bfree+0x28>
 8005186:	2010      	movs	r0, #16
 8005188:	f7ff ff02 	bl	8004f90 <malloc>
 800518c:	4602      	mov	r2, r0
 800518e:	61e8      	str	r0, [r5, #28]
 8005190:	b920      	cbnz	r0, 800519c <_Bfree+0x20>
 8005192:	218f      	movs	r1, #143	@ 0x8f
 8005194:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <_Bfree+0x3c>)
 8005196:	4809      	ldr	r0, [pc, #36]	@ (80051bc <_Bfree+0x40>)
 8005198:	f001 fd24 	bl	8006be4 <__assert_func>
 800519c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051a0:	6006      	str	r6, [r0, #0]
 80051a2:	60c6      	str	r6, [r0, #12]
 80051a4:	b13c      	cbz	r4, 80051b6 <_Bfree+0x3a>
 80051a6:	69eb      	ldr	r3, [r5, #28]
 80051a8:	6862      	ldr	r2, [r4, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051b0:	6021      	str	r1, [r4, #0]
 80051b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	08007978 	.word	0x08007978
 80051bc:	080079f8 	.word	0x080079f8

080051c0 <__multadd>:
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	4607      	mov	r7, r0
 80051c6:	460c      	mov	r4, r1
 80051c8:	461e      	mov	r6, r3
 80051ca:	2000      	movs	r0, #0
 80051cc:	690d      	ldr	r5, [r1, #16]
 80051ce:	f101 0c14 	add.w	ip, r1, #20
 80051d2:	f8dc 3000 	ldr.w	r3, [ip]
 80051d6:	3001      	adds	r0, #1
 80051d8:	b299      	uxth	r1, r3
 80051da:	fb02 6101 	mla	r1, r2, r1, r6
 80051de:	0c1e      	lsrs	r6, r3, #16
 80051e0:	0c0b      	lsrs	r3, r1, #16
 80051e2:	fb02 3306 	mla	r3, r2, r6, r3
 80051e6:	b289      	uxth	r1, r1
 80051e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051ec:	4285      	cmp	r5, r0
 80051ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051f2:	f84c 1b04 	str.w	r1, [ip], #4
 80051f6:	dcec      	bgt.n	80051d2 <__multadd+0x12>
 80051f8:	b30e      	cbz	r6, 800523e <__multadd+0x7e>
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dc19      	bgt.n	8005234 <__multadd+0x74>
 8005200:	6861      	ldr	r1, [r4, #4]
 8005202:	4638      	mov	r0, r7
 8005204:	3101      	adds	r1, #1
 8005206:	f7ff ff79 	bl	80050fc <_Balloc>
 800520a:	4680      	mov	r8, r0
 800520c:	b928      	cbnz	r0, 800521a <__multadd+0x5a>
 800520e:	4602      	mov	r2, r0
 8005210:	21ba      	movs	r1, #186	@ 0xba
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <__multadd+0x84>)
 8005214:	480c      	ldr	r0, [pc, #48]	@ (8005248 <__multadd+0x88>)
 8005216:	f001 fce5 	bl	8006be4 <__assert_func>
 800521a:	6922      	ldr	r2, [r4, #16]
 800521c:	f104 010c 	add.w	r1, r4, #12
 8005220:	3202      	adds	r2, #2
 8005222:	0092      	lsls	r2, r2, #2
 8005224:	300c      	adds	r0, #12
 8005226:	f001 fcc9 	bl	8006bbc <memcpy>
 800522a:	4621      	mov	r1, r4
 800522c:	4638      	mov	r0, r7
 800522e:	f7ff ffa5 	bl	800517c <_Bfree>
 8005232:	4644      	mov	r4, r8
 8005234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005238:	3501      	adds	r5, #1
 800523a:	615e      	str	r6, [r3, #20]
 800523c:	6125      	str	r5, [r4, #16]
 800523e:	4620      	mov	r0, r4
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	080079e7 	.word	0x080079e7
 8005248:	080079f8 	.word	0x080079f8

0800524c <__s2b>:
 800524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005250:	4615      	mov	r5, r2
 8005252:	2209      	movs	r2, #9
 8005254:	461f      	mov	r7, r3
 8005256:	3308      	adds	r3, #8
 8005258:	460c      	mov	r4, r1
 800525a:	fb93 f3f2 	sdiv	r3, r3, r2
 800525e:	4606      	mov	r6, r0
 8005260:	2201      	movs	r2, #1
 8005262:	2100      	movs	r1, #0
 8005264:	429a      	cmp	r2, r3
 8005266:	db09      	blt.n	800527c <__s2b+0x30>
 8005268:	4630      	mov	r0, r6
 800526a:	f7ff ff47 	bl	80050fc <_Balloc>
 800526e:	b940      	cbnz	r0, 8005282 <__s2b+0x36>
 8005270:	4602      	mov	r2, r0
 8005272:	21d3      	movs	r1, #211	@ 0xd3
 8005274:	4b18      	ldr	r3, [pc, #96]	@ (80052d8 <__s2b+0x8c>)
 8005276:	4819      	ldr	r0, [pc, #100]	@ (80052dc <__s2b+0x90>)
 8005278:	f001 fcb4 	bl	8006be4 <__assert_func>
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	3101      	adds	r1, #1
 8005280:	e7f0      	b.n	8005264 <__s2b+0x18>
 8005282:	9b08      	ldr	r3, [sp, #32]
 8005284:	2d09      	cmp	r5, #9
 8005286:	6143      	str	r3, [r0, #20]
 8005288:	f04f 0301 	mov.w	r3, #1
 800528c:	6103      	str	r3, [r0, #16]
 800528e:	dd16      	ble.n	80052be <__s2b+0x72>
 8005290:	f104 0909 	add.w	r9, r4, #9
 8005294:	46c8      	mov	r8, r9
 8005296:	442c      	add	r4, r5
 8005298:	f818 3b01 	ldrb.w	r3, [r8], #1
 800529c:	4601      	mov	r1, r0
 800529e:	220a      	movs	r2, #10
 80052a0:	4630      	mov	r0, r6
 80052a2:	3b30      	subs	r3, #48	@ 0x30
 80052a4:	f7ff ff8c 	bl	80051c0 <__multadd>
 80052a8:	45a0      	cmp	r8, r4
 80052aa:	d1f5      	bne.n	8005298 <__s2b+0x4c>
 80052ac:	f1a5 0408 	sub.w	r4, r5, #8
 80052b0:	444c      	add	r4, r9
 80052b2:	1b2d      	subs	r5, r5, r4
 80052b4:	1963      	adds	r3, r4, r5
 80052b6:	42bb      	cmp	r3, r7
 80052b8:	db04      	blt.n	80052c4 <__s2b+0x78>
 80052ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052be:	2509      	movs	r5, #9
 80052c0:	340a      	adds	r4, #10
 80052c2:	e7f6      	b.n	80052b2 <__s2b+0x66>
 80052c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052c8:	4601      	mov	r1, r0
 80052ca:	220a      	movs	r2, #10
 80052cc:	4630      	mov	r0, r6
 80052ce:	3b30      	subs	r3, #48	@ 0x30
 80052d0:	f7ff ff76 	bl	80051c0 <__multadd>
 80052d4:	e7ee      	b.n	80052b4 <__s2b+0x68>
 80052d6:	bf00      	nop
 80052d8:	080079e7 	.word	0x080079e7
 80052dc:	080079f8 	.word	0x080079f8

080052e0 <__hi0bits>:
 80052e0:	4603      	mov	r3, r0
 80052e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80052e6:	bf3a      	itte	cc
 80052e8:	0403      	lslcc	r3, r0, #16
 80052ea:	2010      	movcc	r0, #16
 80052ec:	2000      	movcs	r0, #0
 80052ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052f2:	bf3c      	itt	cc
 80052f4:	021b      	lslcc	r3, r3, #8
 80052f6:	3008      	addcc	r0, #8
 80052f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052fc:	bf3c      	itt	cc
 80052fe:	011b      	lslcc	r3, r3, #4
 8005300:	3004      	addcc	r0, #4
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	bf3c      	itt	cc
 8005308:	009b      	lslcc	r3, r3, #2
 800530a:	3002      	addcc	r0, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	db05      	blt.n	800531c <__hi0bits+0x3c>
 8005310:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005314:	f100 0001 	add.w	r0, r0, #1
 8005318:	bf08      	it	eq
 800531a:	2020      	moveq	r0, #32
 800531c:	4770      	bx	lr

0800531e <__lo0bits>:
 800531e:	6803      	ldr	r3, [r0, #0]
 8005320:	4602      	mov	r2, r0
 8005322:	f013 0007 	ands.w	r0, r3, #7
 8005326:	d00b      	beq.n	8005340 <__lo0bits+0x22>
 8005328:	07d9      	lsls	r1, r3, #31
 800532a:	d421      	bmi.n	8005370 <__lo0bits+0x52>
 800532c:	0798      	lsls	r0, r3, #30
 800532e:	bf49      	itett	mi
 8005330:	085b      	lsrmi	r3, r3, #1
 8005332:	089b      	lsrpl	r3, r3, #2
 8005334:	2001      	movmi	r0, #1
 8005336:	6013      	strmi	r3, [r2, #0]
 8005338:	bf5c      	itt	pl
 800533a:	2002      	movpl	r0, #2
 800533c:	6013      	strpl	r3, [r2, #0]
 800533e:	4770      	bx	lr
 8005340:	b299      	uxth	r1, r3
 8005342:	b909      	cbnz	r1, 8005348 <__lo0bits+0x2a>
 8005344:	2010      	movs	r0, #16
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	b2d9      	uxtb	r1, r3
 800534a:	b909      	cbnz	r1, 8005350 <__lo0bits+0x32>
 800534c:	3008      	adds	r0, #8
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	0719      	lsls	r1, r3, #28
 8005352:	bf04      	itt	eq
 8005354:	091b      	lsreq	r3, r3, #4
 8005356:	3004      	addeq	r0, #4
 8005358:	0799      	lsls	r1, r3, #30
 800535a:	bf04      	itt	eq
 800535c:	089b      	lsreq	r3, r3, #2
 800535e:	3002      	addeq	r0, #2
 8005360:	07d9      	lsls	r1, r3, #31
 8005362:	d403      	bmi.n	800536c <__lo0bits+0x4e>
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	f100 0001 	add.w	r0, r0, #1
 800536a:	d003      	beq.n	8005374 <__lo0bits+0x56>
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4770      	bx	lr
 8005370:	2000      	movs	r0, #0
 8005372:	4770      	bx	lr
 8005374:	2020      	movs	r0, #32
 8005376:	4770      	bx	lr

08005378 <__i2b>:
 8005378:	b510      	push	{r4, lr}
 800537a:	460c      	mov	r4, r1
 800537c:	2101      	movs	r1, #1
 800537e:	f7ff febd 	bl	80050fc <_Balloc>
 8005382:	4602      	mov	r2, r0
 8005384:	b928      	cbnz	r0, 8005392 <__i2b+0x1a>
 8005386:	f240 1145 	movw	r1, #325	@ 0x145
 800538a:	4b04      	ldr	r3, [pc, #16]	@ (800539c <__i2b+0x24>)
 800538c:	4804      	ldr	r0, [pc, #16]	@ (80053a0 <__i2b+0x28>)
 800538e:	f001 fc29 	bl	8006be4 <__assert_func>
 8005392:	2301      	movs	r3, #1
 8005394:	6144      	str	r4, [r0, #20]
 8005396:	6103      	str	r3, [r0, #16]
 8005398:	bd10      	pop	{r4, pc}
 800539a:	bf00      	nop
 800539c:	080079e7 	.word	0x080079e7
 80053a0:	080079f8 	.word	0x080079f8

080053a4 <__multiply>:
 80053a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a8:	4614      	mov	r4, r2
 80053aa:	690a      	ldr	r2, [r1, #16]
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	460f      	mov	r7, r1
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bfa2      	ittt	ge
 80053b4:	4623      	movge	r3, r4
 80053b6:	460c      	movge	r4, r1
 80053b8:	461f      	movge	r7, r3
 80053ba:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053be:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	6861      	ldr	r1, [r4, #4]
 80053c6:	eb0a 0609 	add.w	r6, sl, r9
 80053ca:	42b3      	cmp	r3, r6
 80053cc:	b085      	sub	sp, #20
 80053ce:	bfb8      	it	lt
 80053d0:	3101      	addlt	r1, #1
 80053d2:	f7ff fe93 	bl	80050fc <_Balloc>
 80053d6:	b930      	cbnz	r0, 80053e6 <__multiply+0x42>
 80053d8:	4602      	mov	r2, r0
 80053da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80053de:	4b43      	ldr	r3, [pc, #268]	@ (80054ec <__multiply+0x148>)
 80053e0:	4843      	ldr	r0, [pc, #268]	@ (80054f0 <__multiply+0x14c>)
 80053e2:	f001 fbff 	bl	8006be4 <__assert_func>
 80053e6:	f100 0514 	add.w	r5, r0, #20
 80053ea:	462b      	mov	r3, r5
 80053ec:	2200      	movs	r2, #0
 80053ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053f2:	4543      	cmp	r3, r8
 80053f4:	d321      	bcc.n	800543a <__multiply+0x96>
 80053f6:	f107 0114 	add.w	r1, r7, #20
 80053fa:	f104 0214 	add.w	r2, r4, #20
 80053fe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005402:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	1b13      	subs	r3, r2, r4
 800540a:	3b15      	subs	r3, #21
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	3304      	adds	r3, #4
 8005412:	f104 0715 	add.w	r7, r4, #21
 8005416:	42ba      	cmp	r2, r7
 8005418:	bf38      	it	cc
 800541a:	2304      	movcc	r3, #4
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	9b02      	ldr	r3, [sp, #8]
 8005420:	9103      	str	r1, [sp, #12]
 8005422:	428b      	cmp	r3, r1
 8005424:	d80c      	bhi.n	8005440 <__multiply+0x9c>
 8005426:	2e00      	cmp	r6, #0
 8005428:	dd03      	ble.n	8005432 <__multiply+0x8e>
 800542a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800542e:	2b00      	cmp	r3, #0
 8005430:	d05a      	beq.n	80054e8 <__multiply+0x144>
 8005432:	6106      	str	r6, [r0, #16]
 8005434:	b005      	add	sp, #20
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	f843 2b04 	str.w	r2, [r3], #4
 800543e:	e7d8      	b.n	80053f2 <__multiply+0x4e>
 8005440:	f8b1 a000 	ldrh.w	sl, [r1]
 8005444:	f1ba 0f00 	cmp.w	sl, #0
 8005448:	d023      	beq.n	8005492 <__multiply+0xee>
 800544a:	46a9      	mov	r9, r5
 800544c:	f04f 0c00 	mov.w	ip, #0
 8005450:	f104 0e14 	add.w	lr, r4, #20
 8005454:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005458:	f8d9 3000 	ldr.w	r3, [r9]
 800545c:	fa1f fb87 	uxth.w	fp, r7
 8005460:	b29b      	uxth	r3, r3
 8005462:	fb0a 330b 	mla	r3, sl, fp, r3
 8005466:	4463      	add	r3, ip
 8005468:	f8d9 c000 	ldr.w	ip, [r9]
 800546c:	0c3f      	lsrs	r7, r7, #16
 800546e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005472:	fb0a c707 	mla	r7, sl, r7, ip
 8005476:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005480:	4572      	cmp	r2, lr
 8005482:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005486:	f849 3b04 	str.w	r3, [r9], #4
 800548a:	d8e3      	bhi.n	8005454 <__multiply+0xb0>
 800548c:	9b01      	ldr	r3, [sp, #4]
 800548e:	f845 c003 	str.w	ip, [r5, r3]
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	3104      	adds	r1, #4
 8005496:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800549a:	f1b9 0f00 	cmp.w	r9, #0
 800549e:	d021      	beq.n	80054e4 <__multiply+0x140>
 80054a0:	46ae      	mov	lr, r5
 80054a2:	f04f 0a00 	mov.w	sl, #0
 80054a6:	682b      	ldr	r3, [r5, #0]
 80054a8:	f104 0c14 	add.w	ip, r4, #20
 80054ac:	f8bc b000 	ldrh.w	fp, [ip]
 80054b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	fb09 770b 	mla	r7, r9, fp, r7
 80054ba:	4457      	add	r7, sl
 80054bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054c0:	f84e 3b04 	str.w	r3, [lr], #4
 80054c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054cc:	f8be 3000 	ldrh.w	r3, [lr]
 80054d0:	4562      	cmp	r2, ip
 80054d2:	fb09 330a 	mla	r3, r9, sl, r3
 80054d6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80054da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054de:	d8e5      	bhi.n	80054ac <__multiply+0x108>
 80054e0:	9f01      	ldr	r7, [sp, #4]
 80054e2:	51eb      	str	r3, [r5, r7]
 80054e4:	3504      	adds	r5, #4
 80054e6:	e79a      	b.n	800541e <__multiply+0x7a>
 80054e8:	3e01      	subs	r6, #1
 80054ea:	e79c      	b.n	8005426 <__multiply+0x82>
 80054ec:	080079e7 	.word	0x080079e7
 80054f0:	080079f8 	.word	0x080079f8

080054f4 <__pow5mult>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	4615      	mov	r5, r2
 80054fa:	f012 0203 	ands.w	r2, r2, #3
 80054fe:	4607      	mov	r7, r0
 8005500:	460e      	mov	r6, r1
 8005502:	d007      	beq.n	8005514 <__pow5mult+0x20>
 8005504:	4c25      	ldr	r4, [pc, #148]	@ (800559c <__pow5mult+0xa8>)
 8005506:	3a01      	subs	r2, #1
 8005508:	2300      	movs	r3, #0
 800550a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800550e:	f7ff fe57 	bl	80051c0 <__multadd>
 8005512:	4606      	mov	r6, r0
 8005514:	10ad      	asrs	r5, r5, #2
 8005516:	d03d      	beq.n	8005594 <__pow5mult+0xa0>
 8005518:	69fc      	ldr	r4, [r7, #28]
 800551a:	b97c      	cbnz	r4, 800553c <__pow5mult+0x48>
 800551c:	2010      	movs	r0, #16
 800551e:	f7ff fd37 	bl	8004f90 <malloc>
 8005522:	4602      	mov	r2, r0
 8005524:	61f8      	str	r0, [r7, #28]
 8005526:	b928      	cbnz	r0, 8005534 <__pow5mult+0x40>
 8005528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800552c:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <__pow5mult+0xac>)
 800552e:	481d      	ldr	r0, [pc, #116]	@ (80055a4 <__pow5mult+0xb0>)
 8005530:	f001 fb58 	bl	8006be4 <__assert_func>
 8005534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005538:	6004      	str	r4, [r0, #0]
 800553a:	60c4      	str	r4, [r0, #12]
 800553c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005544:	b94c      	cbnz	r4, 800555a <__pow5mult+0x66>
 8005546:	f240 2171 	movw	r1, #625	@ 0x271
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ff14 	bl	8005378 <__i2b>
 8005550:	2300      	movs	r3, #0
 8005552:	4604      	mov	r4, r0
 8005554:	f8c8 0008 	str.w	r0, [r8, #8]
 8005558:	6003      	str	r3, [r0, #0]
 800555a:	f04f 0900 	mov.w	r9, #0
 800555e:	07eb      	lsls	r3, r5, #31
 8005560:	d50a      	bpl.n	8005578 <__pow5mult+0x84>
 8005562:	4631      	mov	r1, r6
 8005564:	4622      	mov	r2, r4
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff ff1c 	bl	80053a4 <__multiply>
 800556c:	4680      	mov	r8, r0
 800556e:	4631      	mov	r1, r6
 8005570:	4638      	mov	r0, r7
 8005572:	f7ff fe03 	bl	800517c <_Bfree>
 8005576:	4646      	mov	r6, r8
 8005578:	106d      	asrs	r5, r5, #1
 800557a:	d00b      	beq.n	8005594 <__pow5mult+0xa0>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	b938      	cbnz	r0, 8005590 <__pow5mult+0x9c>
 8005580:	4622      	mov	r2, r4
 8005582:	4621      	mov	r1, r4
 8005584:	4638      	mov	r0, r7
 8005586:	f7ff ff0d 	bl	80053a4 <__multiply>
 800558a:	6020      	str	r0, [r4, #0]
 800558c:	f8c0 9000 	str.w	r9, [r0]
 8005590:	4604      	mov	r4, r0
 8005592:	e7e4      	b.n	800555e <__pow5mult+0x6a>
 8005594:	4630      	mov	r0, r6
 8005596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559a:	bf00      	nop
 800559c:	08007a54 	.word	0x08007a54
 80055a0:	08007978 	.word	0x08007978
 80055a4:	080079f8 	.word	0x080079f8

080055a8 <__lshift>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	460c      	mov	r4, r1
 80055ae:	4607      	mov	r7, r0
 80055b0:	4691      	mov	r9, r2
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6849      	ldr	r1, [r1, #4]
 80055b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055c0:	f108 0601 	add.w	r6, r8, #1
 80055c4:	42b3      	cmp	r3, r6
 80055c6:	db0b      	blt.n	80055e0 <__lshift+0x38>
 80055c8:	4638      	mov	r0, r7
 80055ca:	f7ff fd97 	bl	80050fc <_Balloc>
 80055ce:	4605      	mov	r5, r0
 80055d0:	b948      	cbnz	r0, 80055e6 <__lshift+0x3e>
 80055d2:	4602      	mov	r2, r0
 80055d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80055d8:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <__lshift+0xd0>)
 80055da:	4828      	ldr	r0, [pc, #160]	@ (800567c <__lshift+0xd4>)
 80055dc:	f001 fb02 	bl	8006be4 <__assert_func>
 80055e0:	3101      	adds	r1, #1
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	e7ee      	b.n	80055c4 <__lshift+0x1c>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f100 0114 	add.w	r1, r0, #20
 80055ec:	f100 0210 	add.w	r2, r0, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	4553      	cmp	r3, sl
 80055f4:	db33      	blt.n	800565e <__lshift+0xb6>
 80055f6:	6920      	ldr	r0, [r4, #16]
 80055f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055fc:	f104 0314 	add.w	r3, r4, #20
 8005600:	f019 091f 	ands.w	r9, r9, #31
 8005604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800560c:	d02b      	beq.n	8005666 <__lshift+0xbe>
 800560e:	468a      	mov	sl, r1
 8005610:	2200      	movs	r2, #0
 8005612:	f1c9 0e20 	rsb	lr, r9, #32
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	fa00 f009 	lsl.w	r0, r0, r9
 800561c:	4310      	orrs	r0, r2
 800561e:	f84a 0b04 	str.w	r0, [sl], #4
 8005622:	f853 2b04 	ldr.w	r2, [r3], #4
 8005626:	459c      	cmp	ip, r3
 8005628:	fa22 f20e 	lsr.w	r2, r2, lr
 800562c:	d8f3      	bhi.n	8005616 <__lshift+0x6e>
 800562e:	ebac 0304 	sub.w	r3, ip, r4
 8005632:	3b15      	subs	r3, #21
 8005634:	f023 0303 	bic.w	r3, r3, #3
 8005638:	3304      	adds	r3, #4
 800563a:	f104 0015 	add.w	r0, r4, #21
 800563e:	4584      	cmp	ip, r0
 8005640:	bf38      	it	cc
 8005642:	2304      	movcc	r3, #4
 8005644:	50ca      	str	r2, [r1, r3]
 8005646:	b10a      	cbz	r2, 800564c <__lshift+0xa4>
 8005648:	f108 0602 	add.w	r6, r8, #2
 800564c:	3e01      	subs	r6, #1
 800564e:	4638      	mov	r0, r7
 8005650:	4621      	mov	r1, r4
 8005652:	612e      	str	r6, [r5, #16]
 8005654:	f7ff fd92 	bl	800517c <_Bfree>
 8005658:	4628      	mov	r0, r5
 800565a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005662:	3301      	adds	r3, #1
 8005664:	e7c5      	b.n	80055f2 <__lshift+0x4a>
 8005666:	3904      	subs	r1, #4
 8005668:	f853 2b04 	ldr.w	r2, [r3], #4
 800566c:	459c      	cmp	ip, r3
 800566e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005672:	d8f9      	bhi.n	8005668 <__lshift+0xc0>
 8005674:	e7ea      	b.n	800564c <__lshift+0xa4>
 8005676:	bf00      	nop
 8005678:	080079e7 	.word	0x080079e7
 800567c:	080079f8 	.word	0x080079f8

08005680 <__mcmp>:
 8005680:	4603      	mov	r3, r0
 8005682:	690a      	ldr	r2, [r1, #16]
 8005684:	6900      	ldr	r0, [r0, #16]
 8005686:	b530      	push	{r4, r5, lr}
 8005688:	1a80      	subs	r0, r0, r2
 800568a:	d10e      	bne.n	80056aa <__mcmp+0x2a>
 800568c:	3314      	adds	r3, #20
 800568e:	3114      	adds	r1, #20
 8005690:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005694:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800569c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056a0:	4295      	cmp	r5, r2
 80056a2:	d003      	beq.n	80056ac <__mcmp+0x2c>
 80056a4:	d205      	bcs.n	80056b2 <__mcmp+0x32>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	bd30      	pop	{r4, r5, pc}
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d3f3      	bcc.n	8005698 <__mcmp+0x18>
 80056b0:	e7fb      	b.n	80056aa <__mcmp+0x2a>
 80056b2:	2001      	movs	r0, #1
 80056b4:	e7f9      	b.n	80056aa <__mcmp+0x2a>
	...

080056b8 <__mdiff>:
 80056b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	4689      	mov	r9, r1
 80056be:	4606      	mov	r6, r0
 80056c0:	4611      	mov	r1, r2
 80056c2:	4648      	mov	r0, r9
 80056c4:	4614      	mov	r4, r2
 80056c6:	f7ff ffdb 	bl	8005680 <__mcmp>
 80056ca:	1e05      	subs	r5, r0, #0
 80056cc:	d112      	bne.n	80056f4 <__mdiff+0x3c>
 80056ce:	4629      	mov	r1, r5
 80056d0:	4630      	mov	r0, r6
 80056d2:	f7ff fd13 	bl	80050fc <_Balloc>
 80056d6:	4602      	mov	r2, r0
 80056d8:	b928      	cbnz	r0, 80056e6 <__mdiff+0x2e>
 80056da:	f240 2137 	movw	r1, #567	@ 0x237
 80056de:	4b3e      	ldr	r3, [pc, #248]	@ (80057d8 <__mdiff+0x120>)
 80056e0:	483e      	ldr	r0, [pc, #248]	@ (80057dc <__mdiff+0x124>)
 80056e2:	f001 fa7f 	bl	8006be4 <__assert_func>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056ec:	4610      	mov	r0, r2
 80056ee:	b003      	add	sp, #12
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	bfbc      	itt	lt
 80056f6:	464b      	movlt	r3, r9
 80056f8:	46a1      	movlt	r9, r4
 80056fa:	4630      	mov	r0, r6
 80056fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005700:	bfba      	itte	lt
 8005702:	461c      	movlt	r4, r3
 8005704:	2501      	movlt	r5, #1
 8005706:	2500      	movge	r5, #0
 8005708:	f7ff fcf8 	bl	80050fc <_Balloc>
 800570c:	4602      	mov	r2, r0
 800570e:	b918      	cbnz	r0, 8005718 <__mdiff+0x60>
 8005710:	f240 2145 	movw	r1, #581	@ 0x245
 8005714:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <__mdiff+0x120>)
 8005716:	e7e3      	b.n	80056e0 <__mdiff+0x28>
 8005718:	f100 0b14 	add.w	fp, r0, #20
 800571c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005720:	f109 0310 	add.w	r3, r9, #16
 8005724:	60c5      	str	r5, [r0, #12]
 8005726:	f04f 0c00 	mov.w	ip, #0
 800572a:	f109 0514 	add.w	r5, r9, #20
 800572e:	46d9      	mov	r9, fp
 8005730:	6926      	ldr	r6, [r4, #16]
 8005732:	f104 0e14 	add.w	lr, r4, #20
 8005736:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800573a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005746:	f853 af04 	ldr.w	sl, [r3, #4]!
 800574a:	b281      	uxth	r1, r0
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	fa1f f38a 	uxth.w	r3, sl
 8005752:	1a5b      	subs	r3, r3, r1
 8005754:	0c00      	lsrs	r0, r0, #16
 8005756:	4463      	add	r3, ip
 8005758:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800575c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005760:	b29b      	uxth	r3, r3
 8005762:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005766:	4576      	cmp	r6, lr
 8005768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800576c:	f849 3b04 	str.w	r3, [r9], #4
 8005770:	d8e6      	bhi.n	8005740 <__mdiff+0x88>
 8005772:	1b33      	subs	r3, r6, r4
 8005774:	3b15      	subs	r3, #21
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	3415      	adds	r4, #21
 800577c:	3304      	adds	r3, #4
 800577e:	42a6      	cmp	r6, r4
 8005780:	bf38      	it	cc
 8005782:	2304      	movcc	r3, #4
 8005784:	441d      	add	r5, r3
 8005786:	445b      	add	r3, fp
 8005788:	461e      	mov	r6, r3
 800578a:	462c      	mov	r4, r5
 800578c:	4544      	cmp	r4, r8
 800578e:	d30e      	bcc.n	80057ae <__mdiff+0xf6>
 8005790:	f108 0103 	add.w	r1, r8, #3
 8005794:	1b49      	subs	r1, r1, r5
 8005796:	f021 0103 	bic.w	r1, r1, #3
 800579a:	3d03      	subs	r5, #3
 800579c:	45a8      	cmp	r8, r5
 800579e:	bf38      	it	cc
 80057a0:	2100      	movcc	r1, #0
 80057a2:	440b      	add	r3, r1
 80057a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057a8:	b199      	cbz	r1, 80057d2 <__mdiff+0x11a>
 80057aa:	6117      	str	r7, [r2, #16]
 80057ac:	e79e      	b.n	80056ec <__mdiff+0x34>
 80057ae:	46e6      	mov	lr, ip
 80057b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80057b4:	fa1f fc81 	uxth.w	ip, r1
 80057b8:	44f4      	add	ip, lr
 80057ba:	0c08      	lsrs	r0, r1, #16
 80057bc:	4471      	add	r1, lr
 80057be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057c2:	b289      	uxth	r1, r1
 80057c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057cc:	f846 1b04 	str.w	r1, [r6], #4
 80057d0:	e7dc      	b.n	800578c <__mdiff+0xd4>
 80057d2:	3f01      	subs	r7, #1
 80057d4:	e7e6      	b.n	80057a4 <__mdiff+0xec>
 80057d6:	bf00      	nop
 80057d8:	080079e7 	.word	0x080079e7
 80057dc:	080079f8 	.word	0x080079f8

080057e0 <__ulp>:
 80057e0:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <__ulp+0x3c>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc08      	bgt.n	80057fe <__ulp+0x1e>
 80057ec:	425b      	negs	r3, r3
 80057ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80057f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057f6:	da04      	bge.n	8005802 <__ulp+0x22>
 80057f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80057fc:	4113      	asrs	r3, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	e008      	b.n	8005814 <__ulp+0x34>
 8005802:	f1a2 0314 	sub.w	r3, r2, #20
 8005806:	2b1e      	cmp	r3, #30
 8005808:	bfd6      	itet	le
 800580a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800580e:	2201      	movgt	r2, #1
 8005810:	40da      	lsrle	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	7ff00000 	.word	0x7ff00000

08005820 <__b2d>:
 8005820:	6902      	ldr	r2, [r0, #16]
 8005822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005824:	f100 0614 	add.w	r6, r0, #20
 8005828:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800582c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005830:	4f1e      	ldr	r7, [pc, #120]	@ (80058ac <__b2d+0x8c>)
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fd54 	bl	80052e0 <__hi0bits>
 8005838:	4603      	mov	r3, r0
 800583a:	f1c0 0020 	rsb	r0, r0, #32
 800583e:	2b0a      	cmp	r3, #10
 8005840:	f1a2 0504 	sub.w	r5, r2, #4
 8005844:	6008      	str	r0, [r1, #0]
 8005846:	dc12      	bgt.n	800586e <__b2d+0x4e>
 8005848:	42ae      	cmp	r6, r5
 800584a:	bf2c      	ite	cs
 800584c:	2200      	movcs	r2, #0
 800584e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005852:	f1c3 0c0b 	rsb	ip, r3, #11
 8005856:	3315      	adds	r3, #21
 8005858:	fa24 fe0c 	lsr.w	lr, r4, ip
 800585c:	fa04 f303 	lsl.w	r3, r4, r3
 8005860:	fa22 f20c 	lsr.w	r2, r2, ip
 8005864:	ea4e 0107 	orr.w	r1, lr, r7
 8005868:	431a      	orrs	r2, r3
 800586a:	4610      	mov	r0, r2
 800586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800586e:	42ae      	cmp	r6, r5
 8005870:	bf36      	itet	cc
 8005872:	f1a2 0508 	subcc.w	r5, r2, #8
 8005876:	2200      	movcs	r2, #0
 8005878:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800587c:	3b0b      	subs	r3, #11
 800587e:	d012      	beq.n	80058a6 <__b2d+0x86>
 8005880:	f1c3 0720 	rsb	r7, r3, #32
 8005884:	fa22 f107 	lsr.w	r1, r2, r7
 8005888:	409c      	lsls	r4, r3
 800588a:	430c      	orrs	r4, r1
 800588c:	42b5      	cmp	r5, r6
 800588e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005892:	bf94      	ite	ls
 8005894:	2400      	movls	r4, #0
 8005896:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800589a:	409a      	lsls	r2, r3
 800589c:	40fc      	lsrs	r4, r7
 800589e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058a2:	4322      	orrs	r2, r4
 80058a4:	e7e1      	b.n	800586a <__b2d+0x4a>
 80058a6:	ea44 0107 	orr.w	r1, r4, r7
 80058aa:	e7de      	b.n	800586a <__b2d+0x4a>
 80058ac:	3ff00000 	.word	0x3ff00000

080058b0 <__d2b>:
 80058b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80058b4:	2101      	movs	r1, #1
 80058b6:	4690      	mov	r8, r2
 80058b8:	4699      	mov	r9, r3
 80058ba:	9e08      	ldr	r6, [sp, #32]
 80058bc:	f7ff fc1e 	bl	80050fc <_Balloc>
 80058c0:	4604      	mov	r4, r0
 80058c2:	b930      	cbnz	r0, 80058d2 <__d2b+0x22>
 80058c4:	4602      	mov	r2, r0
 80058c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80058ca:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <__d2b+0xa8>)
 80058cc:	4823      	ldr	r0, [pc, #140]	@ (800595c <__d2b+0xac>)
 80058ce:	f001 f989 	bl	8006be4 <__assert_func>
 80058d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058da:	b10d      	cbz	r5, 80058e0 <__d2b+0x30>
 80058dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	f1b8 0300 	subs.w	r3, r8, #0
 80058e6:	d024      	beq.n	8005932 <__d2b+0x82>
 80058e8:	4668      	mov	r0, sp
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	f7ff fd17 	bl	800531e <__lo0bits>
 80058f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058f4:	b1d8      	cbz	r0, 800592e <__d2b+0x7e>
 80058f6:	f1c0 0320 	rsb	r3, r0, #32
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	430b      	orrs	r3, r1
 8005900:	40c2      	lsrs	r2, r0
 8005902:	6163      	str	r3, [r4, #20]
 8005904:	9201      	str	r2, [sp, #4]
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf0c      	ite	eq
 800590c:	2201      	moveq	r2, #1
 800590e:	2202      	movne	r2, #2
 8005910:	61a3      	str	r3, [r4, #24]
 8005912:	6122      	str	r2, [r4, #16]
 8005914:	b1ad      	cbz	r5, 8005942 <__d2b+0x92>
 8005916:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800591a:	4405      	add	r5, r0
 800591c:	6035      	str	r5, [r6, #0]
 800591e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	6018      	str	r0, [r3, #0]
 8005926:	4620      	mov	r0, r4
 8005928:	b002      	add	sp, #8
 800592a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800592e:	6161      	str	r1, [r4, #20]
 8005930:	e7e9      	b.n	8005906 <__d2b+0x56>
 8005932:	a801      	add	r0, sp, #4
 8005934:	f7ff fcf3 	bl	800531e <__lo0bits>
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	6163      	str	r3, [r4, #20]
 800593e:	3020      	adds	r0, #32
 8005940:	e7e7      	b.n	8005912 <__d2b+0x62>
 8005942:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800594a:	6030      	str	r0, [r6, #0]
 800594c:	6918      	ldr	r0, [r3, #16]
 800594e:	f7ff fcc7 	bl	80052e0 <__hi0bits>
 8005952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005956:	e7e4      	b.n	8005922 <__d2b+0x72>
 8005958:	080079e7 	.word	0x080079e7
 800595c:	080079f8 	.word	0x080079f8

08005960 <__ratio>:
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	b085      	sub	sp, #20
 8005966:	e9cd 1000 	strd	r1, r0, [sp]
 800596a:	a902      	add	r1, sp, #8
 800596c:	f7ff ff58 	bl	8005820 <__b2d>
 8005970:	468b      	mov	fp, r1
 8005972:	4606      	mov	r6, r0
 8005974:	460f      	mov	r7, r1
 8005976:	9800      	ldr	r0, [sp, #0]
 8005978:	a903      	add	r1, sp, #12
 800597a:	f7ff ff51 	bl	8005820 <__b2d>
 800597e:	460d      	mov	r5, r1
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	4689      	mov	r9, r1
 8005984:	6919      	ldr	r1, [r3, #16]
 8005986:	9b00      	ldr	r3, [sp, #0]
 8005988:	4604      	mov	r4, r0
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	4630      	mov	r0, r6
 800598e:	1ac9      	subs	r1, r1, r3
 8005990:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfcd      	iteet	gt
 800599e:	463a      	movgt	r2, r7
 80059a0:	462a      	movle	r2, r5
 80059a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80059a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80059aa:	bfd8      	it	le
 80059ac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80059b0:	464b      	mov	r3, r9
 80059b2:	4622      	mov	r2, r4
 80059b4:	4659      	mov	r1, fp
 80059b6:	f7fa ff25 	bl	8000804 <__aeabi_ddiv>
 80059ba:	b005      	add	sp, #20
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059c0 <__copybits>:
 80059c0:	3901      	subs	r1, #1
 80059c2:	b570      	push	{r4, r5, r6, lr}
 80059c4:	1149      	asrs	r1, r1, #5
 80059c6:	6914      	ldr	r4, [r2, #16]
 80059c8:	3101      	adds	r1, #1
 80059ca:	f102 0314 	add.w	r3, r2, #20
 80059ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059d6:	1f05      	subs	r5, r0, #4
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d30c      	bcc.n	80059f6 <__copybits+0x36>
 80059dc:	1aa3      	subs	r3, r4, r2
 80059de:	3b11      	subs	r3, #17
 80059e0:	f023 0303 	bic.w	r3, r3, #3
 80059e4:	3211      	adds	r2, #17
 80059e6:	42a2      	cmp	r2, r4
 80059e8:	bf88      	it	hi
 80059ea:	2300      	movhi	r3, #0
 80059ec:	4418      	add	r0, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	4288      	cmp	r0, r1
 80059f2:	d305      	bcc.n	8005a00 <__copybits+0x40>
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80059fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80059fe:	e7eb      	b.n	80059d8 <__copybits+0x18>
 8005a00:	f840 3b04 	str.w	r3, [r0], #4
 8005a04:	e7f4      	b.n	80059f0 <__copybits+0x30>

08005a06 <__any_on>:
 8005a06:	f100 0214 	add.w	r2, r0, #20
 8005a0a:	6900      	ldr	r0, [r0, #16]
 8005a0c:	114b      	asrs	r3, r1, #5
 8005a0e:	4298      	cmp	r0, r3
 8005a10:	b510      	push	{r4, lr}
 8005a12:	db11      	blt.n	8005a38 <__any_on+0x32>
 8005a14:	dd0a      	ble.n	8005a2c <__any_on+0x26>
 8005a16:	f011 011f 	ands.w	r1, r1, #31
 8005a1a:	d007      	beq.n	8005a2c <__any_on+0x26>
 8005a1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a20:	fa24 f001 	lsr.w	r0, r4, r1
 8005a24:	fa00 f101 	lsl.w	r1, r0, r1
 8005a28:	428c      	cmp	r4, r1
 8005a2a:	d10b      	bne.n	8005a44 <__any_on+0x3e>
 8005a2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d803      	bhi.n	8005a3c <__any_on+0x36>
 8005a34:	2000      	movs	r0, #0
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e7f7      	b.n	8005a2c <__any_on+0x26>
 8005a3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a40:	2900      	cmp	r1, #0
 8005a42:	d0f5      	beq.n	8005a30 <__any_on+0x2a>
 8005a44:	2001      	movs	r0, #1
 8005a46:	e7f6      	b.n	8005a36 <__any_on+0x30>

08005a48 <sulp>:
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	4690      	mov	r8, r2
 8005a50:	f7ff fec6 	bl	80057e0 <__ulp>
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	f1b8 0f00 	cmp.w	r8, #0
 8005a5c:	d011      	beq.n	8005a82 <sulp+0x3a>
 8005a5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dd0b      	ble.n	8005a82 <sulp+0x3a>
 8005a6a:	2400      	movs	r4, #0
 8005a6c:	051b      	lsls	r3, r3, #20
 8005a6e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	f7fa fd99 	bl	80005b0 <__aeabi_dmul>
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8a:	0000      	movs	r0, r0
 8005a8c:	0000      	movs	r0, r0
	...

08005a90 <_strtod_l>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	b09f      	sub	sp, #124	@ 0x7c
 8005a96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a9e:	f04f 0a00 	mov.w	sl, #0
 8005aa2:	f04f 0b00 	mov.w	fp, #0
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	9005      	str	r0, [sp, #20]
 8005aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8005aac:	7811      	ldrb	r1, [r2, #0]
 8005aae:	292b      	cmp	r1, #43	@ 0x2b
 8005ab0:	d048      	beq.n	8005b44 <_strtod_l+0xb4>
 8005ab2:	d836      	bhi.n	8005b22 <_strtod_l+0x92>
 8005ab4:	290d      	cmp	r1, #13
 8005ab6:	d830      	bhi.n	8005b1a <_strtod_l+0x8a>
 8005ab8:	2908      	cmp	r1, #8
 8005aba:	d830      	bhi.n	8005b1e <_strtod_l+0x8e>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d039      	beq.n	8005b34 <_strtod_l+0xa4>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005ac6:	782a      	ldrb	r2, [r5, #0]
 8005ac8:	2a30      	cmp	r2, #48	@ 0x30
 8005aca:	f040 80b1 	bne.w	8005c30 <_strtod_l+0x1a0>
 8005ace:	786a      	ldrb	r2, [r5, #1]
 8005ad0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ad4:	2a58      	cmp	r2, #88	@ 0x58
 8005ad6:	d16c      	bne.n	8005bb2 <_strtod_l+0x122>
 8005ad8:	9302      	str	r3, [sp, #8]
 8005ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005adc:	4a8e      	ldr	r2, [pc, #568]	@ (8005d18 <_strtod_l+0x288>)
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	ab1a      	add	r3, sp, #104	@ 0x68
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	9805      	ldr	r0, [sp, #20]
 8005ae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005ae8:	a919      	add	r1, sp, #100	@ 0x64
 8005aea:	f001 f915 	bl	8006d18 <__gethex>
 8005aee:	f010 060f 	ands.w	r6, r0, #15
 8005af2:	4604      	mov	r4, r0
 8005af4:	d005      	beq.n	8005b02 <_strtod_l+0x72>
 8005af6:	2e06      	cmp	r6, #6
 8005af8:	d126      	bne.n	8005b48 <_strtod_l+0xb8>
 8005afa:	2300      	movs	r3, #0
 8005afc:	3501      	adds	r5, #1
 8005afe:	9519      	str	r5, [sp, #100]	@ 0x64
 8005b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 8584 	bne.w	8006612 <_strtod_l+0xb82>
 8005b0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b0c:	b1bb      	cbz	r3, 8005b3e <_strtod_l+0xae>
 8005b0e:	4650      	mov	r0, sl
 8005b10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005b14:	b01f      	add	sp, #124	@ 0x7c
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1a:	2920      	cmp	r1, #32
 8005b1c:	d1d0      	bne.n	8005ac0 <_strtod_l+0x30>
 8005b1e:	3201      	adds	r2, #1
 8005b20:	e7c3      	b.n	8005aaa <_strtod_l+0x1a>
 8005b22:	292d      	cmp	r1, #45	@ 0x2d
 8005b24:	d1cc      	bne.n	8005ac0 <_strtod_l+0x30>
 8005b26:	2101      	movs	r1, #1
 8005b28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b2a:	1c51      	adds	r1, r2, #1
 8005b2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b2e:	7852      	ldrb	r2, [r2, #1]
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d1c7      	bne.n	8005ac4 <_strtod_l+0x34>
 8005b34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b36:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 8568 	bne.w	800660e <_strtod_l+0xb7e>
 8005b3e:	4650      	mov	r0, sl
 8005b40:	4659      	mov	r1, fp
 8005b42:	e7e7      	b.n	8005b14 <_strtod_l+0x84>
 8005b44:	2100      	movs	r1, #0
 8005b46:	e7ef      	b.n	8005b28 <_strtod_l+0x98>
 8005b48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b4a:	b13a      	cbz	r2, 8005b5c <_strtod_l+0xcc>
 8005b4c:	2135      	movs	r1, #53	@ 0x35
 8005b4e:	a81c      	add	r0, sp, #112	@ 0x70
 8005b50:	f7ff ff36 	bl	80059c0 <__copybits>
 8005b54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b56:	9805      	ldr	r0, [sp, #20]
 8005b58:	f7ff fb10 	bl	800517c <_Bfree>
 8005b5c:	3e01      	subs	r6, #1
 8005b5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b60:	2e04      	cmp	r6, #4
 8005b62:	d806      	bhi.n	8005b72 <_strtod_l+0xe2>
 8005b64:	e8df f006 	tbb	[pc, r6]
 8005b68:	201d0314 	.word	0x201d0314
 8005b6c:	14          	.byte	0x14
 8005b6d:	00          	.byte	0x00
 8005b6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b72:	05e1      	lsls	r1, r4, #23
 8005b74:	bf48      	it	mi
 8005b76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b7e:	0d1b      	lsrs	r3, r3, #20
 8005b80:	051b      	lsls	r3, r3, #20
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1bd      	bne.n	8005b02 <_strtod_l+0x72>
 8005b86:	f7fe fb2b 	bl	80041e0 <__errno>
 8005b8a:	2322      	movs	r3, #34	@ 0x22
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	e7b8      	b.n	8005b02 <_strtod_l+0x72>
 8005b90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ba0:	e7e7      	b.n	8005b72 <_strtod_l+0xe2>
 8005ba2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005d1c <_strtod_l+0x28c>
 8005ba6:	e7e4      	b.n	8005b72 <_strtod_l+0xe2>
 8005ba8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005bac:	f04f 3aff 	mov.w	sl, #4294967295
 8005bb0:	e7df      	b.n	8005b72 <_strtod_l+0xe2>
 8005bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b30      	cmp	r3, #48	@ 0x30
 8005bbc:	d0f9      	beq.n	8005bb2 <_strtod_l+0x122>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d09f      	beq.n	8005b02 <_strtod_l+0x72>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bc8:	220a      	movs	r2, #10
 8005bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bcc:	2300      	movs	r3, #0
 8005bce:	461f      	mov	r7, r3
 8005bd0:	9308      	str	r3, [sp, #32]
 8005bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bd6:	7805      	ldrb	r5, [r0, #0]
 8005bd8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005bdc:	b2d9      	uxtb	r1, r3
 8005bde:	2909      	cmp	r1, #9
 8005be0:	d928      	bls.n	8005c34 <_strtod_l+0x1a4>
 8005be2:	2201      	movs	r2, #1
 8005be4:	494e      	ldr	r1, [pc, #312]	@ (8005d20 <_strtod_l+0x290>)
 8005be6:	f000 ffc7 	bl	8006b78 <strncmp>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d032      	beq.n	8005c54 <_strtod_l+0x1c4>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4681      	mov	r9, r0
 8005bf4:	463d      	mov	r5, r7
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2a65      	cmp	r2, #101	@ 0x65
 8005bfa:	d001      	beq.n	8005c00 <_strtod_l+0x170>
 8005bfc:	2a45      	cmp	r2, #69	@ 0x45
 8005bfe:	d114      	bne.n	8005c2a <_strtod_l+0x19a>
 8005c00:	b91d      	cbnz	r5, 8005c0a <_strtod_l+0x17a>
 8005c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c04:	4302      	orrs	r2, r0
 8005c06:	d095      	beq.n	8005b34 <_strtod_l+0xa4>
 8005c08:	2500      	movs	r5, #0
 8005c0a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005c0c:	1c62      	adds	r2, r4, #1
 8005c0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c10:	7862      	ldrb	r2, [r4, #1]
 8005c12:	2a2b      	cmp	r2, #43	@ 0x2b
 8005c14:	d077      	beq.n	8005d06 <_strtod_l+0x276>
 8005c16:	2a2d      	cmp	r2, #45	@ 0x2d
 8005c18:	d07b      	beq.n	8005d12 <_strtod_l+0x282>
 8005c1a:	f04f 0c00 	mov.w	ip, #0
 8005c1e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005c22:	2909      	cmp	r1, #9
 8005c24:	f240 8082 	bls.w	8005d2c <_strtod_l+0x29c>
 8005c28:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	e0a2      	b.n	8005d76 <_strtod_l+0x2e6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e7c7      	b.n	8005bc4 <_strtod_l+0x134>
 8005c34:	2f08      	cmp	r7, #8
 8005c36:	bfd5      	itete	le
 8005c38:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005c3a:	9908      	ldrgt	r1, [sp, #32]
 8005c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c40:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c44:	f100 0001 	add.w	r0, r0, #1
 8005c48:	bfd4      	ite	le
 8005c4a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c4c:	9308      	strgt	r3, [sp, #32]
 8005c4e:	3701      	adds	r7, #1
 8005c50:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c52:	e7bf      	b.n	8005bd4 <_strtod_l+0x144>
 8005c54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c5a:	785a      	ldrb	r2, [r3, #1]
 8005c5c:	b37f      	cbz	r7, 8005cbe <_strtod_l+0x22e>
 8005c5e:	4681      	mov	r9, r0
 8005c60:	463d      	mov	r5, r7
 8005c62:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d912      	bls.n	8005c90 <_strtod_l+0x200>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e7c4      	b.n	8005bf8 <_strtod_l+0x168>
 8005c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c70:	3001      	adds	r0, #1
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c76:	785a      	ldrb	r2, [r3, #1]
 8005c78:	2a30      	cmp	r2, #48	@ 0x30
 8005c7a:	d0f8      	beq.n	8005c6e <_strtod_l+0x1de>
 8005c7c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	f200 84cb 	bhi.w	800661c <_strtod_l+0xb8c>
 8005c86:	4681      	mov	r9, r0
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c90:	3a30      	subs	r2, #48	@ 0x30
 8005c92:	f100 0301 	add.w	r3, r0, #1
 8005c96:	d02a      	beq.n	8005cee <_strtod_l+0x25e>
 8005c98:	4499      	add	r9, r3
 8005c9a:	210a      	movs	r1, #10
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	eb00 0c05 	add.w	ip, r0, r5
 8005ca2:	4563      	cmp	r3, ip
 8005ca4:	d10d      	bne.n	8005cc2 <_strtod_l+0x232>
 8005ca6:	1c69      	adds	r1, r5, #1
 8005ca8:	4401      	add	r1, r0
 8005caa:	4428      	add	r0, r5
 8005cac:	2808      	cmp	r0, #8
 8005cae:	dc16      	bgt.n	8005cde <_strtod_l+0x24e>
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005cb4:	fb03 2300 	mla	r3, r3, r0, r2
 8005cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e018      	b.n	8005cf0 <_strtod_l+0x260>
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	e7da      	b.n	8005c78 <_strtod_l+0x1e8>
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	f103 0301 	add.w	r3, r3, #1
 8005cc8:	dc03      	bgt.n	8005cd2 <_strtod_l+0x242>
 8005cca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ccc:	434e      	muls	r6, r1
 8005cce:	960a      	str	r6, [sp, #40]	@ 0x28
 8005cd0:	e7e7      	b.n	8005ca2 <_strtod_l+0x212>
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	bfde      	ittt	le
 8005cd6:	9e08      	ldrle	r6, [sp, #32]
 8005cd8:	434e      	mulle	r6, r1
 8005cda:	9608      	strle	r6, [sp, #32]
 8005cdc:	e7e1      	b.n	8005ca2 <_strtod_l+0x212>
 8005cde:	280f      	cmp	r0, #15
 8005ce0:	dceb      	bgt.n	8005cba <_strtod_l+0x22a>
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	9808      	ldr	r0, [sp, #32]
 8005ce6:	fb03 2300 	mla	r3, r3, r0, r2
 8005cea:	9308      	str	r3, [sp, #32]
 8005cec:	e7e5      	b.n	8005cba <_strtod_l+0x22a>
 8005cee:	4629      	mov	r1, r5
 8005cf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	1c50      	adds	r0, r2, #1
 8005cf6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005cf8:	7852      	ldrb	r2, [r2, #1]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	e7b1      	b.n	8005c62 <_strtod_l+0x1d2>
 8005cfe:	f04f 0900 	mov.w	r9, #0
 8005d02:	2301      	movs	r3, #1
 8005d04:	e77d      	b.n	8005c02 <_strtod_l+0x172>
 8005d06:	f04f 0c00 	mov.w	ip, #0
 8005d0a:	1ca2      	adds	r2, r4, #2
 8005d0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d0e:	78a2      	ldrb	r2, [r4, #2]
 8005d10:	e785      	b.n	8005c1e <_strtod_l+0x18e>
 8005d12:	f04f 0c01 	mov.w	ip, #1
 8005d16:	e7f8      	b.n	8005d0a <_strtod_l+0x27a>
 8005d18:	08007b68 	.word	0x08007b68
 8005d1c:	7ff00000 	.word	0x7ff00000
 8005d20:	08007b50 	.word	0x08007b50
 8005d24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d26:	1c51      	adds	r1, r2, #1
 8005d28:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d2a:	7852      	ldrb	r2, [r2, #1]
 8005d2c:	2a30      	cmp	r2, #48	@ 0x30
 8005d2e:	d0f9      	beq.n	8005d24 <_strtod_l+0x294>
 8005d30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005d34:	2908      	cmp	r1, #8
 8005d36:	f63f af78 	bhi.w	8005c2a <_strtod_l+0x19a>
 8005d3a:	f04f 080a 	mov.w	r8, #10
 8005d3e:	3a30      	subs	r2, #48	@ 0x30
 8005d40:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005d46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d48:	1c56      	adds	r6, r2, #1
 8005d4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d4c:	7852      	ldrb	r2, [r2, #1]
 8005d4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d52:	f1be 0f09 	cmp.w	lr, #9
 8005d56:	d939      	bls.n	8005dcc <_strtod_l+0x33c>
 8005d58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d5e:	1a76      	subs	r6, r6, r1
 8005d60:	2e08      	cmp	r6, #8
 8005d62:	dc03      	bgt.n	8005d6c <_strtod_l+0x2dc>
 8005d64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d66:	4588      	cmp	r8, r1
 8005d68:	bfa8      	it	ge
 8005d6a:	4688      	movge	r8, r1
 8005d6c:	f1bc 0f00 	cmp.w	ip, #0
 8005d70:	d001      	beq.n	8005d76 <_strtod_l+0x2e6>
 8005d72:	f1c8 0800 	rsb	r8, r8, #0
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	d14e      	bne.n	8005e18 <_strtod_l+0x388>
 8005d7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d7c:	4308      	orrs	r0, r1
 8005d7e:	f47f aec0 	bne.w	8005b02 <_strtod_l+0x72>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f47f aed6 	bne.w	8005b34 <_strtod_l+0xa4>
 8005d88:	2a69      	cmp	r2, #105	@ 0x69
 8005d8a:	d028      	beq.n	8005dde <_strtod_l+0x34e>
 8005d8c:	dc25      	bgt.n	8005dda <_strtod_l+0x34a>
 8005d8e:	2a49      	cmp	r2, #73	@ 0x49
 8005d90:	d025      	beq.n	8005dde <_strtod_l+0x34e>
 8005d92:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d94:	f47f aece 	bne.w	8005b34 <_strtod_l+0xa4>
 8005d98:	499a      	ldr	r1, [pc, #616]	@ (8006004 <_strtod_l+0x574>)
 8005d9a:	a819      	add	r0, sp, #100	@ 0x64
 8005d9c:	f001 f9de 	bl	800715c <__match>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f43f aec7 	beq.w	8005b34 <_strtod_l+0xa4>
 8005da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b28      	cmp	r3, #40	@ 0x28
 8005dac:	d12e      	bne.n	8005e0c <_strtod_l+0x37c>
 8005dae:	4996      	ldr	r1, [pc, #600]	@ (8006008 <_strtod_l+0x578>)
 8005db0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005db2:	a819      	add	r0, sp, #100	@ 0x64
 8005db4:	f001 f9e6 	bl	8007184 <__hexnan>
 8005db8:	2805      	cmp	r0, #5
 8005dba:	d127      	bne.n	8005e0c <_strtod_l+0x37c>
 8005dbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005dbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005dc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005dc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005dca:	e69a      	b.n	8005b02 <_strtod_l+0x72>
 8005dcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005dce:	fb08 2101 	mla	r1, r8, r1, r2
 8005dd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005dd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dd8:	e7b5      	b.n	8005d46 <_strtod_l+0x2b6>
 8005dda:	2a6e      	cmp	r2, #110	@ 0x6e
 8005ddc:	e7da      	b.n	8005d94 <_strtod_l+0x304>
 8005dde:	498b      	ldr	r1, [pc, #556]	@ (800600c <_strtod_l+0x57c>)
 8005de0:	a819      	add	r0, sp, #100	@ 0x64
 8005de2:	f001 f9bb 	bl	800715c <__match>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f43f aea4 	beq.w	8005b34 <_strtod_l+0xa4>
 8005dec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dee:	4988      	ldr	r1, [pc, #544]	@ (8006010 <_strtod_l+0x580>)
 8005df0:	3b01      	subs	r3, #1
 8005df2:	a819      	add	r0, sp, #100	@ 0x64
 8005df4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005df6:	f001 f9b1 	bl	800715c <__match>
 8005dfa:	b910      	cbnz	r0, 8005e02 <_strtod_l+0x372>
 8005dfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e02:	f04f 0a00 	mov.w	sl, #0
 8005e06:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006014 <_strtod_l+0x584>
 8005e0a:	e67a      	b.n	8005b02 <_strtod_l+0x72>
 8005e0c:	4882      	ldr	r0, [pc, #520]	@ (8006018 <_strtod_l+0x588>)
 8005e0e:	f000 fee3 	bl	8006bd8 <nan>
 8005e12:	4682      	mov	sl, r0
 8005e14:	468b      	mov	fp, r1
 8005e16:	e674      	b.n	8005b02 <_strtod_l+0x72>
 8005e18:	eba8 0309 	sub.w	r3, r8, r9
 8005e1c:	2f00      	cmp	r7, #0
 8005e1e:	bf08      	it	eq
 8005e20:	462f      	moveq	r7, r5
 8005e22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e24:	2d10      	cmp	r5, #16
 8005e26:	462c      	mov	r4, r5
 8005e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e2a:	bfa8      	it	ge
 8005e2c:	2410      	movge	r4, #16
 8005e2e:	f7fa fb45 	bl	80004bc <__aeabi_ui2d>
 8005e32:	2d09      	cmp	r5, #9
 8005e34:	4682      	mov	sl, r0
 8005e36:	468b      	mov	fp, r1
 8005e38:	dc11      	bgt.n	8005e5e <_strtod_l+0x3ce>
 8005e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f43f ae60 	beq.w	8005b02 <_strtod_l+0x72>
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	dd76      	ble.n	8005f34 <_strtod_l+0x4a4>
 8005e46:	2b16      	cmp	r3, #22
 8005e48:	dc5d      	bgt.n	8005f06 <_strtod_l+0x476>
 8005e4a:	4974      	ldr	r1, [pc, #464]	@ (800601c <_strtod_l+0x58c>)
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e52:	465b      	mov	r3, fp
 8005e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e58:	f7fa fbaa 	bl	80005b0 <__aeabi_dmul>
 8005e5c:	e7d9      	b.n	8005e12 <_strtod_l+0x382>
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800601c <_strtod_l+0x58c>)
 8005e60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e68:	f7fa fba2 	bl	80005b0 <__aeabi_dmul>
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	9808      	ldr	r0, [sp, #32]
 8005e70:	468b      	mov	fp, r1
 8005e72:	f7fa fb23 	bl	80004bc <__aeabi_ui2d>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	f7fa f9e1 	bl	8000244 <__adddf3>
 8005e82:	2d0f      	cmp	r5, #15
 8005e84:	4682      	mov	sl, r0
 8005e86:	468b      	mov	fp, r1
 8005e88:	ddd7      	ble.n	8005e3a <_strtod_l+0x3aa>
 8005e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8c:	1b2c      	subs	r4, r5, r4
 8005e8e:	441c      	add	r4, r3
 8005e90:	2c00      	cmp	r4, #0
 8005e92:	f340 8096 	ble.w	8005fc2 <_strtod_l+0x532>
 8005e96:	f014 030f 	ands.w	r3, r4, #15
 8005e9a:	d00a      	beq.n	8005eb2 <_strtod_l+0x422>
 8005e9c:	495f      	ldr	r1, [pc, #380]	@ (800601c <_strtod_l+0x58c>)
 8005e9e:	4652      	mov	r2, sl
 8005ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea8:	465b      	mov	r3, fp
 8005eaa:	f7fa fb81 	bl	80005b0 <__aeabi_dmul>
 8005eae:	4682      	mov	sl, r0
 8005eb0:	468b      	mov	fp, r1
 8005eb2:	f034 040f 	bics.w	r4, r4, #15
 8005eb6:	d073      	beq.n	8005fa0 <_strtod_l+0x510>
 8005eb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005ebc:	dd48      	ble.n	8005f50 <_strtod_l+0x4c0>
 8005ebe:	2400      	movs	r4, #0
 8005ec0:	46a0      	mov	r8, r4
 8005ec2:	46a1      	mov	r9, r4
 8005ec4:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ec6:	2322      	movs	r3, #34	@ 0x22
 8005ec8:	f04f 0a00 	mov.w	sl, #0
 8005ecc:	9a05      	ldr	r2, [sp, #20]
 8005ece:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006014 <_strtod_l+0x584>
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f43f ae13 	beq.w	8005b02 <_strtod_l+0x72>
 8005edc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ede:	9805      	ldr	r0, [sp, #20]
 8005ee0:	f7ff f94c 	bl	800517c <_Bfree>
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	9805      	ldr	r0, [sp, #20]
 8005ee8:	f7ff f948 	bl	800517c <_Bfree>
 8005eec:	4641      	mov	r1, r8
 8005eee:	9805      	ldr	r0, [sp, #20]
 8005ef0:	f7ff f944 	bl	800517c <_Bfree>
 8005ef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ef6:	9805      	ldr	r0, [sp, #20]
 8005ef8:	f7ff f940 	bl	800517c <_Bfree>
 8005efc:	4621      	mov	r1, r4
 8005efe:	9805      	ldr	r0, [sp, #20]
 8005f00:	f7ff f93c 	bl	800517c <_Bfree>
 8005f04:	e5fd      	b.n	8005b02 <_strtod_l+0x72>
 8005f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	dbbc      	blt.n	8005e8a <_strtod_l+0x3fa>
 8005f10:	4c42      	ldr	r4, [pc, #264]	@ (800601c <_strtod_l+0x58c>)
 8005f12:	f1c5 050f 	rsb	r5, r5, #15
 8005f16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f20:	465b      	mov	r3, fp
 8005f22:	f7fa fb45 	bl	80005b0 <__aeabi_dmul>
 8005f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f28:	1b5d      	subs	r5, r3, r5
 8005f2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f32:	e791      	b.n	8005e58 <_strtod_l+0x3c8>
 8005f34:	3316      	adds	r3, #22
 8005f36:	dba8      	blt.n	8005e8a <_strtod_l+0x3fa>
 8005f38:	4b38      	ldr	r3, [pc, #224]	@ (800601c <_strtod_l+0x58c>)
 8005f3a:	eba9 0808 	sub.w	r8, r9, r8
 8005f3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005f42:	4650      	mov	r0, sl
 8005f44:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f48:	4659      	mov	r1, fp
 8005f4a:	f7fa fc5b 	bl	8000804 <__aeabi_ddiv>
 8005f4e:	e760      	b.n	8005e12 <_strtod_l+0x382>
 8005f50:	4b33      	ldr	r3, [pc, #204]	@ (8006020 <_strtod_l+0x590>)
 8005f52:	4650      	mov	r0, sl
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	2300      	movs	r3, #0
 8005f58:	4659      	mov	r1, fp
 8005f5a:	461e      	mov	r6, r3
 8005f5c:	1124      	asrs	r4, r4, #4
 8005f5e:	2c01      	cmp	r4, #1
 8005f60:	dc21      	bgt.n	8005fa6 <_strtod_l+0x516>
 8005f62:	b10b      	cbz	r3, 8005f68 <_strtod_l+0x4d8>
 8005f64:	4682      	mov	sl, r0
 8005f66:	468b      	mov	fp, r1
 8005f68:	492d      	ldr	r1, [pc, #180]	@ (8006020 <_strtod_l+0x590>)
 8005f6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f72:	4652      	mov	r2, sl
 8005f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f78:	465b      	mov	r3, fp
 8005f7a:	f7fa fb19 	bl	80005b0 <__aeabi_dmul>
 8005f7e:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <_strtod_l+0x584>)
 8005f80:	460a      	mov	r2, r1
 8005f82:	400b      	ands	r3, r1
 8005f84:	4927      	ldr	r1, [pc, #156]	@ (8006024 <_strtod_l+0x594>)
 8005f86:	4682      	mov	sl, r0
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	d898      	bhi.n	8005ebe <_strtod_l+0x42e>
 8005f8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f90:	428b      	cmp	r3, r1
 8005f92:	bf86      	itte	hi
 8005f94:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f98:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006028 <_strtod_l+0x598>
 8005f9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9308      	str	r3, [sp, #32]
 8005fa4:	e07a      	b.n	800609c <_strtod_l+0x60c>
 8005fa6:	07e2      	lsls	r2, r4, #31
 8005fa8:	d505      	bpl.n	8005fb6 <_strtod_l+0x526>
 8005faa:	9b08      	ldr	r3, [sp, #32]
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fafe 	bl	80005b0 <__aeabi_dmul>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9a08      	ldr	r2, [sp, #32]
 8005fb8:	3601      	adds	r6, #1
 8005fba:	3208      	adds	r2, #8
 8005fbc:	1064      	asrs	r4, r4, #1
 8005fbe:	9208      	str	r2, [sp, #32]
 8005fc0:	e7cd      	b.n	8005f5e <_strtod_l+0x4ce>
 8005fc2:	d0ed      	beq.n	8005fa0 <_strtod_l+0x510>
 8005fc4:	4264      	negs	r4, r4
 8005fc6:	f014 020f 	ands.w	r2, r4, #15
 8005fca:	d00a      	beq.n	8005fe2 <_strtod_l+0x552>
 8005fcc:	4b13      	ldr	r3, [pc, #76]	@ (800601c <_strtod_l+0x58c>)
 8005fce:	4650      	mov	r0, sl
 8005fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa fc13 	bl	8000804 <__aeabi_ddiv>
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	1124      	asrs	r4, r4, #4
 8005fe4:	d0dc      	beq.n	8005fa0 <_strtod_l+0x510>
 8005fe6:	2c1f      	cmp	r4, #31
 8005fe8:	dd20      	ble.n	800602c <_strtod_l+0x59c>
 8005fea:	2400      	movs	r4, #0
 8005fec:	46a0      	mov	r8, r4
 8005fee:	46a1      	mov	r9, r4
 8005ff0:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ff2:	2322      	movs	r3, #34	@ 0x22
 8005ff4:	9a05      	ldr	r2, [sp, #20]
 8005ff6:	f04f 0a00 	mov.w	sl, #0
 8005ffa:	f04f 0b00 	mov.w	fp, #0
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e768      	b.n	8005ed4 <_strtod_l+0x444>
 8006002:	bf00      	nop
 8006004:	0800793f 	.word	0x0800793f
 8006008:	08007b54 	.word	0x08007b54
 800600c:	08007937 	.word	0x08007937
 8006010:	0800796e 	.word	0x0800796e
 8006014:	7ff00000 	.word	0x7ff00000
 8006018:	08007cfd 	.word	0x08007cfd
 800601c:	08007a88 	.word	0x08007a88
 8006020:	08007a60 	.word	0x08007a60
 8006024:	7ca00000 	.word	0x7ca00000
 8006028:	7fefffff 	.word	0x7fefffff
 800602c:	f014 0310 	ands.w	r3, r4, #16
 8006030:	bf18      	it	ne
 8006032:	236a      	movne	r3, #106	@ 0x6a
 8006034:	4650      	mov	r0, sl
 8006036:	9308      	str	r3, [sp, #32]
 8006038:	4659      	mov	r1, fp
 800603a:	2300      	movs	r3, #0
 800603c:	4ea9      	ldr	r6, [pc, #676]	@ (80062e4 <_strtod_l+0x854>)
 800603e:	07e2      	lsls	r2, r4, #31
 8006040:	d504      	bpl.n	800604c <_strtod_l+0x5bc>
 8006042:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006046:	f7fa fab3 	bl	80005b0 <__aeabi_dmul>
 800604a:	2301      	movs	r3, #1
 800604c:	1064      	asrs	r4, r4, #1
 800604e:	f106 0608 	add.w	r6, r6, #8
 8006052:	d1f4      	bne.n	800603e <_strtod_l+0x5ae>
 8006054:	b10b      	cbz	r3, 800605a <_strtod_l+0x5ca>
 8006056:	4682      	mov	sl, r0
 8006058:	468b      	mov	fp, r1
 800605a:	9b08      	ldr	r3, [sp, #32]
 800605c:	b1b3      	cbz	r3, 800608c <_strtod_l+0x5fc>
 800605e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006062:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006066:	2b00      	cmp	r3, #0
 8006068:	4659      	mov	r1, fp
 800606a:	dd0f      	ble.n	800608c <_strtod_l+0x5fc>
 800606c:	2b1f      	cmp	r3, #31
 800606e:	dd57      	ble.n	8006120 <_strtod_l+0x690>
 8006070:	2b34      	cmp	r3, #52	@ 0x34
 8006072:	bfd8      	it	le
 8006074:	f04f 33ff 	movle.w	r3, #4294967295
 8006078:	f04f 0a00 	mov.w	sl, #0
 800607c:	bfcf      	iteee	gt
 800607e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006082:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006086:	4093      	lslle	r3, r2
 8006088:	ea03 0b01 	andle.w	fp, r3, r1
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	4650      	mov	r0, sl
 8006092:	4659      	mov	r1, fp
 8006094:	f7fa fcf4 	bl	8000a80 <__aeabi_dcmpeq>
 8006098:	2800      	cmp	r0, #0
 800609a:	d1a6      	bne.n	8005fea <_strtod_l+0x55a>
 800609c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609e:	463a      	mov	r2, r7
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060a4:	462b      	mov	r3, r5
 80060a6:	9805      	ldr	r0, [sp, #20]
 80060a8:	f7ff f8d0 	bl	800524c <__s2b>
 80060ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f af05 	beq.w	8005ebe <_strtod_l+0x42e>
 80060b4:	2400      	movs	r4, #0
 80060b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060b8:	eba9 0308 	sub.w	r3, r9, r8
 80060bc:	2a00      	cmp	r2, #0
 80060be:	bfa8      	it	ge
 80060c0:	2300      	movge	r3, #0
 80060c2:	46a0      	mov	r8, r4
 80060c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80060c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80060cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ce:	9805      	ldr	r0, [sp, #20]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	f7ff f813 	bl	80050fc <_Balloc>
 80060d6:	4681      	mov	r9, r0
 80060d8:	2800      	cmp	r0, #0
 80060da:	f43f aef4 	beq.w	8005ec6 <_strtod_l+0x436>
 80060de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e0:	300c      	adds	r0, #12
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	f103 010c 	add.w	r1, r3, #12
 80060e8:	3202      	adds	r2, #2
 80060ea:	0092      	lsls	r2, r2, #2
 80060ec:	f000 fd66 	bl	8006bbc <memcpy>
 80060f0:	ab1c      	add	r3, sp, #112	@ 0x70
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	9805      	ldr	r0, [sp, #20]
 80060fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006102:	f7ff fbd5 	bl	80058b0 <__d2b>
 8006106:	901a      	str	r0, [sp, #104]	@ 0x68
 8006108:	2800      	cmp	r0, #0
 800610a:	f43f aedc 	beq.w	8005ec6 <_strtod_l+0x436>
 800610e:	2101      	movs	r1, #1
 8006110:	9805      	ldr	r0, [sp, #20]
 8006112:	f7ff f931 	bl	8005378 <__i2b>
 8006116:	4680      	mov	r8, r0
 8006118:	b948      	cbnz	r0, 800612e <_strtod_l+0x69e>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	e6d2      	b.n	8005ec6 <_strtod_l+0x436>
 8006120:	f04f 32ff 	mov.w	r2, #4294967295
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	ea03 0a0a 	and.w	sl, r3, sl
 800612c:	e7ae      	b.n	800608c <_strtod_l+0x5fc>
 800612e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006130:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006132:	2d00      	cmp	r5, #0
 8006134:	bfab      	itete	ge
 8006136:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006138:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800613a:	18ef      	addge	r7, r5, r3
 800613c:	1b5e      	sublt	r6, r3, r5
 800613e:	9b08      	ldr	r3, [sp, #32]
 8006140:	bfa8      	it	ge
 8006142:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006144:	eba5 0503 	sub.w	r5, r5, r3
 8006148:	4415      	add	r5, r2
 800614a:	4b67      	ldr	r3, [pc, #412]	@ (80062e8 <_strtod_l+0x858>)
 800614c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006150:	bfb8      	it	lt
 8006152:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006154:	429d      	cmp	r5, r3
 8006156:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800615a:	da50      	bge.n	80061fe <_strtod_l+0x76e>
 800615c:	1b5b      	subs	r3, r3, r5
 800615e:	2b1f      	cmp	r3, #31
 8006160:	f04f 0101 	mov.w	r1, #1
 8006164:	eba2 0203 	sub.w	r2, r2, r3
 8006168:	dc3d      	bgt.n	80061e6 <_strtod_l+0x756>
 800616a:	fa01 f303 	lsl.w	r3, r1, r3
 800616e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006170:	2300      	movs	r3, #0
 8006172:	9310      	str	r3, [sp, #64]	@ 0x40
 8006174:	18bd      	adds	r5, r7, r2
 8006176:	9b08      	ldr	r3, [sp, #32]
 8006178:	42af      	cmp	r7, r5
 800617a:	4416      	add	r6, r2
 800617c:	441e      	add	r6, r3
 800617e:	463b      	mov	r3, r7
 8006180:	bfa8      	it	ge
 8006182:	462b      	movge	r3, r5
 8006184:	42b3      	cmp	r3, r6
 8006186:	bfa8      	it	ge
 8006188:	4633      	movge	r3, r6
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfc2      	ittt	gt
 800618e:	1aed      	subgt	r5, r5, r3
 8006190:	1af6      	subgt	r6, r6, r3
 8006192:	1aff      	subgt	r7, r7, r3
 8006194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd16      	ble.n	80061c8 <_strtod_l+0x738>
 800619a:	4641      	mov	r1, r8
 800619c:	461a      	mov	r2, r3
 800619e:	9805      	ldr	r0, [sp, #20]
 80061a0:	f7ff f9a8 	bl	80054f4 <__pow5mult>
 80061a4:	4680      	mov	r8, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0b7      	beq.n	800611a <_strtod_l+0x68a>
 80061aa:	4601      	mov	r1, r0
 80061ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	f7ff f8f8 	bl	80053a4 <__multiply>
 80061b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f43f ae85 	beq.w	8005ec6 <_strtod_l+0x436>
 80061bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061be:	9805      	ldr	r0, [sp, #20]
 80061c0:	f7fe ffdc 	bl	800517c <_Bfree>
 80061c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	dc1d      	bgt.n	8006208 <_strtod_l+0x778>
 80061cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd23      	ble.n	800621a <_strtod_l+0x78a>
 80061d2:	4649      	mov	r1, r9
 80061d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80061d6:	9805      	ldr	r0, [sp, #20]
 80061d8:	f7ff f98c 	bl	80054f4 <__pow5mult>
 80061dc:	4681      	mov	r9, r0
 80061de:	b9e0      	cbnz	r0, 800621a <_strtod_l+0x78a>
 80061e0:	f04f 0900 	mov.w	r9, #0
 80061e4:	e66f      	b.n	8005ec6 <_strtod_l+0x436>
 80061e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80061ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80061ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80061f2:	35e2      	adds	r5, #226	@ 0xe2
 80061f4:	fa01 f305 	lsl.w	r3, r1, r5
 80061f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80061fc:	e7ba      	b.n	8006174 <_strtod_l+0x6e4>
 80061fe:	2300      	movs	r3, #0
 8006200:	9310      	str	r3, [sp, #64]	@ 0x40
 8006202:	2301      	movs	r3, #1
 8006204:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006206:	e7b5      	b.n	8006174 <_strtod_l+0x6e4>
 8006208:	462a      	mov	r2, r5
 800620a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800620c:	9805      	ldr	r0, [sp, #20]
 800620e:	f7ff f9cb 	bl	80055a8 <__lshift>
 8006212:	901a      	str	r0, [sp, #104]	@ 0x68
 8006214:	2800      	cmp	r0, #0
 8006216:	d1d9      	bne.n	80061cc <_strtod_l+0x73c>
 8006218:	e655      	b.n	8005ec6 <_strtod_l+0x436>
 800621a:	2e00      	cmp	r6, #0
 800621c:	dd07      	ble.n	800622e <_strtod_l+0x79e>
 800621e:	4649      	mov	r1, r9
 8006220:	4632      	mov	r2, r6
 8006222:	9805      	ldr	r0, [sp, #20]
 8006224:	f7ff f9c0 	bl	80055a8 <__lshift>
 8006228:	4681      	mov	r9, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d0d8      	beq.n	80061e0 <_strtod_l+0x750>
 800622e:	2f00      	cmp	r7, #0
 8006230:	dd08      	ble.n	8006244 <_strtod_l+0x7b4>
 8006232:	4641      	mov	r1, r8
 8006234:	463a      	mov	r2, r7
 8006236:	9805      	ldr	r0, [sp, #20]
 8006238:	f7ff f9b6 	bl	80055a8 <__lshift>
 800623c:	4680      	mov	r8, r0
 800623e:	2800      	cmp	r0, #0
 8006240:	f43f ae41 	beq.w	8005ec6 <_strtod_l+0x436>
 8006244:	464a      	mov	r2, r9
 8006246:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006248:	9805      	ldr	r0, [sp, #20]
 800624a:	f7ff fa35 	bl	80056b8 <__mdiff>
 800624e:	4604      	mov	r4, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	f43f ae38 	beq.w	8005ec6 <_strtod_l+0x436>
 8006256:	68c3      	ldr	r3, [r0, #12]
 8006258:	4641      	mov	r1, r8
 800625a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800625c:	2300      	movs	r3, #0
 800625e:	60c3      	str	r3, [r0, #12]
 8006260:	f7ff fa0e 	bl	8005680 <__mcmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	da45      	bge.n	80062f4 <_strtod_l+0x864>
 8006268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800626a:	ea53 030a 	orrs.w	r3, r3, sl
 800626e:	d16b      	bne.n	8006348 <_strtod_l+0x8b8>
 8006270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006274:	2b00      	cmp	r3, #0
 8006276:	d167      	bne.n	8006348 <_strtod_l+0x8b8>
 8006278:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800627c:	0d1b      	lsrs	r3, r3, #20
 800627e:	051b      	lsls	r3, r3, #20
 8006280:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006284:	d960      	bls.n	8006348 <_strtod_l+0x8b8>
 8006286:	6963      	ldr	r3, [r4, #20]
 8006288:	b913      	cbnz	r3, 8006290 <_strtod_l+0x800>
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	2b01      	cmp	r3, #1
 800628e:	dd5b      	ble.n	8006348 <_strtod_l+0x8b8>
 8006290:	4621      	mov	r1, r4
 8006292:	2201      	movs	r2, #1
 8006294:	9805      	ldr	r0, [sp, #20]
 8006296:	f7ff f987 	bl	80055a8 <__lshift>
 800629a:	4641      	mov	r1, r8
 800629c:	4604      	mov	r4, r0
 800629e:	f7ff f9ef 	bl	8005680 <__mcmp>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	dd50      	ble.n	8006348 <_strtod_l+0x8b8>
 80062a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062aa:	9a08      	ldr	r2, [sp, #32]
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	051b      	lsls	r3, r3, #20
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	d06a      	beq.n	800638a <_strtod_l+0x8fa>
 80062b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062b8:	d867      	bhi.n	800638a <_strtod_l+0x8fa>
 80062ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80062be:	f67f ae98 	bls.w	8005ff2 <_strtod_l+0x562>
 80062c2:	4650      	mov	r0, sl
 80062c4:	4659      	mov	r1, fp
 80062c6:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <_strtod_l+0x85c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	f7fa f971 	bl	80005b0 <__aeabi_dmul>
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <_strtod_l+0x860>)
 80062d0:	4682      	mov	sl, r0
 80062d2:	400b      	ands	r3, r1
 80062d4:	468b      	mov	fp, r1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f47f ae00 	bne.w	8005edc <_strtod_l+0x44c>
 80062dc:	2322      	movs	r3, #34	@ 0x22
 80062de:	9a05      	ldr	r2, [sp, #20]
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e5fb      	b.n	8005edc <_strtod_l+0x44c>
 80062e4:	08007b80 	.word	0x08007b80
 80062e8:	fffffc02 	.word	0xfffffc02
 80062ec:	39500000 	.word	0x39500000
 80062f0:	7ff00000 	.word	0x7ff00000
 80062f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80062f8:	d165      	bne.n	80063c6 <_strtod_l+0x936>
 80062fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80062fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006300:	b35a      	cbz	r2, 800635a <_strtod_l+0x8ca>
 8006302:	4a99      	ldr	r2, [pc, #612]	@ (8006568 <_strtod_l+0xad8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d12b      	bne.n	8006360 <_strtod_l+0x8d0>
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	4651      	mov	r1, sl
 800630c:	b303      	cbz	r3, 8006350 <_strtod_l+0x8c0>
 800630e:	465a      	mov	r2, fp
 8006310:	4b96      	ldr	r3, [pc, #600]	@ (800656c <_strtod_l+0xadc>)
 8006312:	4013      	ands	r3, r2
 8006314:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	d81b      	bhi.n	8006356 <_strtod_l+0x8c6>
 800631e:	0d1b      	lsrs	r3, r3, #20
 8006320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	4299      	cmp	r1, r3
 800632a:	d119      	bne.n	8006360 <_strtod_l+0x8d0>
 800632c:	4b90      	ldr	r3, [pc, #576]	@ (8006570 <_strtod_l+0xae0>)
 800632e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006330:	429a      	cmp	r2, r3
 8006332:	d102      	bne.n	800633a <_strtod_l+0x8aa>
 8006334:	3101      	adds	r1, #1
 8006336:	f43f adc6 	beq.w	8005ec6 <_strtod_l+0x436>
 800633a:	f04f 0a00 	mov.w	sl, #0
 800633e:	4b8b      	ldr	r3, [pc, #556]	@ (800656c <_strtod_l+0xadc>)
 8006340:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006342:	401a      	ands	r2, r3
 8006344:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006348:	9b08      	ldr	r3, [sp, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1b9      	bne.n	80062c2 <_strtod_l+0x832>
 800634e:	e5c5      	b.n	8005edc <_strtod_l+0x44c>
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	e7e8      	b.n	8006328 <_strtod_l+0x898>
 8006356:	4613      	mov	r3, r2
 8006358:	e7e6      	b.n	8006328 <_strtod_l+0x898>
 800635a:	ea53 030a 	orrs.w	r3, r3, sl
 800635e:	d0a2      	beq.n	80062a6 <_strtod_l+0x816>
 8006360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006362:	b1db      	cbz	r3, 800639c <_strtod_l+0x90c>
 8006364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006366:	4213      	tst	r3, r2
 8006368:	d0ee      	beq.n	8006348 <_strtod_l+0x8b8>
 800636a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	9a08      	ldr	r2, [sp, #32]
 8006372:	b1bb      	cbz	r3, 80063a4 <_strtod_l+0x914>
 8006374:	f7ff fb68 	bl	8005a48 <sulp>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006380:	f7f9 ff60 	bl	8000244 <__adddf3>
 8006384:	4682      	mov	sl, r0
 8006386:	468b      	mov	fp, r1
 8006388:	e7de      	b.n	8006348 <_strtod_l+0x8b8>
 800638a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800638e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006392:	f04f 3aff 	mov.w	sl, #4294967295
 8006396:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800639a:	e7d5      	b.n	8006348 <_strtod_l+0x8b8>
 800639c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800639e:	ea13 0f0a 	tst.w	r3, sl
 80063a2:	e7e1      	b.n	8006368 <_strtod_l+0x8d8>
 80063a4:	f7ff fb50 	bl	8005a48 <sulp>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063b0:	f7f9 ff46 	bl	8000240 <__aeabi_dsub>
 80063b4:	2200      	movs	r2, #0
 80063b6:	2300      	movs	r3, #0
 80063b8:	4682      	mov	sl, r0
 80063ba:	468b      	mov	fp, r1
 80063bc:	f7fa fb60 	bl	8000a80 <__aeabi_dcmpeq>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d0c1      	beq.n	8006348 <_strtod_l+0x8b8>
 80063c4:	e615      	b.n	8005ff2 <_strtod_l+0x562>
 80063c6:	4641      	mov	r1, r8
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7ff fac9 	bl	8005960 <__ratio>
 80063ce:	2200      	movs	r2, #0
 80063d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063d4:	4606      	mov	r6, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	f7fa fb66 	bl	8000aa8 <__aeabi_dcmple>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d06d      	beq.n	80064bc <_strtod_l+0xa2c>
 80063e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d178      	bne.n	80064d8 <_strtod_l+0xa48>
 80063e6:	f1ba 0f00 	cmp.w	sl, #0
 80063ea:	d156      	bne.n	800649a <_strtod_l+0xa0a>
 80063ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d158      	bne.n	80064a8 <_strtod_l+0xa18>
 80063f6:	2200      	movs	r2, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006574 <_strtod_l+0xae4>)
 80063fe:	f7fa fb49 	bl	8000a94 <__aeabi_dcmplt>
 8006402:	2800      	cmp	r0, #0
 8006404:	d157      	bne.n	80064b6 <_strtod_l+0xa26>
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	2200      	movs	r2, #0
 800640c:	4b5a      	ldr	r3, [pc, #360]	@ (8006578 <_strtod_l+0xae8>)
 800640e:	f7fa f8cf 	bl	80005b0 <__aeabi_dmul>
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800641a:	9606      	str	r6, [sp, #24]
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006422:	4d52      	ldr	r5, [pc, #328]	@ (800656c <_strtod_l+0xadc>)
 8006424:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800642a:	401d      	ands	r5, r3
 800642c:	4b53      	ldr	r3, [pc, #332]	@ (800657c <_strtod_l+0xaec>)
 800642e:	429d      	cmp	r5, r3
 8006430:	f040 80aa 	bne.w	8006588 <_strtod_l+0xaf8>
 8006434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006436:	4650      	mov	r0, sl
 8006438:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800643c:	4659      	mov	r1, fp
 800643e:	f7ff f9cf 	bl	80057e0 <__ulp>
 8006442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006446:	f7fa f8b3 	bl	80005b0 <__aeabi_dmul>
 800644a:	4652      	mov	r2, sl
 800644c:	465b      	mov	r3, fp
 800644e:	f7f9 fef9 	bl	8000244 <__adddf3>
 8006452:	460b      	mov	r3, r1
 8006454:	4945      	ldr	r1, [pc, #276]	@ (800656c <_strtod_l+0xadc>)
 8006456:	4a4a      	ldr	r2, [pc, #296]	@ (8006580 <_strtod_l+0xaf0>)
 8006458:	4019      	ands	r1, r3
 800645a:	4291      	cmp	r1, r2
 800645c:	4682      	mov	sl, r0
 800645e:	d942      	bls.n	80064e6 <_strtod_l+0xa56>
 8006460:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006462:	4b43      	ldr	r3, [pc, #268]	@ (8006570 <_strtod_l+0xae0>)
 8006464:	429a      	cmp	r2, r3
 8006466:	d103      	bne.n	8006470 <_strtod_l+0x9e0>
 8006468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800646a:	3301      	adds	r3, #1
 800646c:	f43f ad2b 	beq.w	8005ec6 <_strtod_l+0x436>
 8006470:	f04f 3aff 	mov.w	sl, #4294967295
 8006474:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006570 <_strtod_l+0xae0>
 8006478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800647a:	9805      	ldr	r0, [sp, #20]
 800647c:	f7fe fe7e 	bl	800517c <_Bfree>
 8006480:	4649      	mov	r1, r9
 8006482:	9805      	ldr	r0, [sp, #20]
 8006484:	f7fe fe7a 	bl	800517c <_Bfree>
 8006488:	4641      	mov	r1, r8
 800648a:	9805      	ldr	r0, [sp, #20]
 800648c:	f7fe fe76 	bl	800517c <_Bfree>
 8006490:	4621      	mov	r1, r4
 8006492:	9805      	ldr	r0, [sp, #20]
 8006494:	f7fe fe72 	bl	800517c <_Bfree>
 8006498:	e618      	b.n	80060cc <_strtod_l+0x63c>
 800649a:	f1ba 0f01 	cmp.w	sl, #1
 800649e:	d103      	bne.n	80064a8 <_strtod_l+0xa18>
 80064a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f43f ada5 	beq.w	8005ff2 <_strtod_l+0x562>
 80064a8:	2200      	movs	r2, #0
 80064aa:	4b36      	ldr	r3, [pc, #216]	@ (8006584 <_strtod_l+0xaf4>)
 80064ac:	2600      	movs	r6, #0
 80064ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064b2:	4f30      	ldr	r7, [pc, #192]	@ (8006574 <_strtod_l+0xae4>)
 80064b4:	e7b3      	b.n	800641e <_strtod_l+0x98e>
 80064b6:	2600      	movs	r6, #0
 80064b8:	4f2f      	ldr	r7, [pc, #188]	@ (8006578 <_strtod_l+0xae8>)
 80064ba:	e7ac      	b.n	8006416 <_strtod_l+0x986>
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006578 <_strtod_l+0xae8>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	f7fa f874 	bl	80005b0 <__aeabi_dmul>
 80064c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ca:	4606      	mov	r6, r0
 80064cc:	460f      	mov	r7, r1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0a1      	beq.n	8006416 <_strtod_l+0x986>
 80064d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064d6:	e7a2      	b.n	800641e <_strtod_l+0x98e>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b26      	ldr	r3, [pc, #152]	@ (8006574 <_strtod_l+0xae4>)
 80064dc:	4616      	mov	r6, r2
 80064de:	461f      	mov	r7, r3
 80064e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064e4:	e79b      	b.n	800641e <_strtod_l+0x98e>
 80064e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1c1      	bne.n	8006478 <_strtod_l+0x9e8>
 80064f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064f8:	0d1b      	lsrs	r3, r3, #20
 80064fa:	051b      	lsls	r3, r3, #20
 80064fc:	429d      	cmp	r5, r3
 80064fe:	d1bb      	bne.n	8006478 <_strtod_l+0x9e8>
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7fa fb9c 	bl	8000c40 <__aeabi_d2lz>
 8006508:	f7fa f824 	bl	8000554 <__aeabi_l2d>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7f9 fe94 	bl	8000240 <__aeabi_dsub>
 8006518:	460b      	mov	r3, r1
 800651a:	4602      	mov	r2, r0
 800651c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006520:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006526:	ea46 060a 	orr.w	r6, r6, sl
 800652a:	431e      	orrs	r6, r3
 800652c:	d069      	beq.n	8006602 <_strtod_l+0xb72>
 800652e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006558 <_strtod_l+0xac8>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7fa faae 	bl	8000a94 <__aeabi_dcmplt>
 8006538:	2800      	cmp	r0, #0
 800653a:	f47f accf 	bne.w	8005edc <_strtod_l+0x44c>
 800653e:	a308      	add	r3, pc, #32	@ (adr r3, 8006560 <_strtod_l+0xad0>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006548:	f7fa fac2 	bl	8000ad0 <__aeabi_dcmpgt>
 800654c:	2800      	cmp	r0, #0
 800654e:	d093      	beq.n	8006478 <_strtod_l+0x9e8>
 8006550:	e4c4      	b.n	8005edc <_strtod_l+0x44c>
 8006552:	bf00      	nop
 8006554:	f3af 8000 	nop.w
 8006558:	94a03595 	.word	0x94a03595
 800655c:	3fdfffff 	.word	0x3fdfffff
 8006560:	35afe535 	.word	0x35afe535
 8006564:	3fe00000 	.word	0x3fe00000
 8006568:	000fffff 	.word	0x000fffff
 800656c:	7ff00000 	.word	0x7ff00000
 8006570:	7fefffff 	.word	0x7fefffff
 8006574:	3ff00000 	.word	0x3ff00000
 8006578:	3fe00000 	.word	0x3fe00000
 800657c:	7fe00000 	.word	0x7fe00000
 8006580:	7c9fffff 	.word	0x7c9fffff
 8006584:	bff00000 	.word	0xbff00000
 8006588:	9b08      	ldr	r3, [sp, #32]
 800658a:	b323      	cbz	r3, 80065d6 <_strtod_l+0xb46>
 800658c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006590:	d821      	bhi.n	80065d6 <_strtod_l+0xb46>
 8006592:	a327      	add	r3, pc, #156	@ (adr r3, 8006630 <_strtod_l+0xba0>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa fa84 	bl	8000aa8 <__aeabi_dcmple>
 80065a0:	b1a0      	cbz	r0, 80065cc <_strtod_l+0xb3c>
 80065a2:	4639      	mov	r1, r7
 80065a4:	4630      	mov	r0, r6
 80065a6:	f7fa fadb 	bl	8000b60 <__aeabi_d2uiz>
 80065aa:	2801      	cmp	r0, #1
 80065ac:	bf38      	it	cc
 80065ae:	2001      	movcc	r0, #1
 80065b0:	f7f9 ff84 	bl	80004bc <__aeabi_ui2d>
 80065b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	b9fb      	cbnz	r3, 80065fc <_strtod_l+0xb6c>
 80065bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80065c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80065c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80065c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80065cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80065d2:	1b5b      	subs	r3, r3, r5
 80065d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80065d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80065de:	f7ff f8ff 	bl	80057e0 <__ulp>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4650      	mov	r0, sl
 80065e8:	4659      	mov	r1, fp
 80065ea:	f7f9 ffe1 	bl	80005b0 <__aeabi_dmul>
 80065ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065f2:	f7f9 fe27 	bl	8000244 <__adddf3>
 80065f6:	4682      	mov	sl, r0
 80065f8:	468b      	mov	fp, r1
 80065fa:	e776      	b.n	80064ea <_strtod_l+0xa5a>
 80065fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006600:	e7e0      	b.n	80065c4 <_strtod_l+0xb34>
 8006602:	a30d      	add	r3, pc, #52	@ (adr r3, 8006638 <_strtod_l+0xba8>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7fa fa44 	bl	8000a94 <__aeabi_dcmplt>
 800660c:	e79e      	b.n	800654c <_strtod_l+0xabc>
 800660e:	2300      	movs	r3, #0
 8006610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006614:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	f7ff ba77 	b.w	8005b0a <_strtod_l+0x7a>
 800661c:	2a65      	cmp	r2, #101	@ 0x65
 800661e:	f43f ab6e 	beq.w	8005cfe <_strtod_l+0x26e>
 8006622:	2a45      	cmp	r2, #69	@ 0x45
 8006624:	f43f ab6b 	beq.w	8005cfe <_strtod_l+0x26e>
 8006628:	2301      	movs	r3, #1
 800662a:	f7ff bba6 	b.w	8005d7a <_strtod_l+0x2ea>
 800662e:	bf00      	nop
 8006630:	ffc00000 	.word	0xffc00000
 8006634:	41dfffff 	.word	0x41dfffff
 8006638:	94a03595 	.word	0x94a03595
 800663c:	3fcfffff 	.word	0x3fcfffff

08006640 <_strtod_r>:
 8006640:	4b01      	ldr	r3, [pc, #4]	@ (8006648 <_strtod_r+0x8>)
 8006642:	f7ff ba25 	b.w	8005a90 <_strtod_l>
 8006646:	bf00      	nop
 8006648:	20000068 	.word	0x20000068

0800664c <_strtol_l.constprop.0>:
 800664c:	2b24      	cmp	r3, #36	@ 0x24
 800664e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006652:	4686      	mov	lr, r0
 8006654:	4690      	mov	r8, r2
 8006656:	d801      	bhi.n	800665c <_strtol_l.constprop.0+0x10>
 8006658:	2b01      	cmp	r3, #1
 800665a:	d106      	bne.n	800666a <_strtol_l.constprop.0+0x1e>
 800665c:	f7fd fdc0 	bl	80041e0 <__errno>
 8006660:	2316      	movs	r3, #22
 8006662:	6003      	str	r3, [r0, #0]
 8006664:	2000      	movs	r0, #0
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	460d      	mov	r5, r1
 800666c:	4833      	ldr	r0, [pc, #204]	@ (800673c <_strtol_l.constprop.0+0xf0>)
 800666e:	462a      	mov	r2, r5
 8006670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006674:	5d06      	ldrb	r6, [r0, r4]
 8006676:	f016 0608 	ands.w	r6, r6, #8
 800667a:	d1f8      	bne.n	800666e <_strtol_l.constprop.0+0x22>
 800667c:	2c2d      	cmp	r4, #45	@ 0x2d
 800667e:	d12d      	bne.n	80066dc <_strtol_l.constprop.0+0x90>
 8006680:	2601      	movs	r6, #1
 8006682:	782c      	ldrb	r4, [r5, #0]
 8006684:	1c95      	adds	r5, r2, #2
 8006686:	f033 0210 	bics.w	r2, r3, #16
 800668a:	d109      	bne.n	80066a0 <_strtol_l.constprop.0+0x54>
 800668c:	2c30      	cmp	r4, #48	@ 0x30
 800668e:	d12a      	bne.n	80066e6 <_strtol_l.constprop.0+0x9a>
 8006690:	782a      	ldrb	r2, [r5, #0]
 8006692:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006696:	2a58      	cmp	r2, #88	@ 0x58
 8006698:	d125      	bne.n	80066e6 <_strtol_l.constprop.0+0x9a>
 800669a:	2310      	movs	r3, #16
 800669c:	786c      	ldrb	r4, [r5, #1]
 800669e:	3502      	adds	r5, #2
 80066a0:	2200      	movs	r2, #0
 80066a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80066a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066aa:	fbbc f9f3 	udiv	r9, ip, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80066b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80066b8:	2f09      	cmp	r7, #9
 80066ba:	d81b      	bhi.n	80066f4 <_strtol_l.constprop.0+0xa8>
 80066bc:	463c      	mov	r4, r7
 80066be:	42a3      	cmp	r3, r4
 80066c0:	dd27      	ble.n	8006712 <_strtol_l.constprop.0+0xc6>
 80066c2:	1c57      	adds	r7, r2, #1
 80066c4:	d007      	beq.n	80066d6 <_strtol_l.constprop.0+0x8a>
 80066c6:	4581      	cmp	r9, r0
 80066c8:	d320      	bcc.n	800670c <_strtol_l.constprop.0+0xc0>
 80066ca:	d101      	bne.n	80066d0 <_strtol_l.constprop.0+0x84>
 80066cc:	45a2      	cmp	sl, r4
 80066ce:	db1d      	blt.n	800670c <_strtol_l.constprop.0+0xc0>
 80066d0:	2201      	movs	r2, #1
 80066d2:	fb00 4003 	mla	r0, r0, r3, r4
 80066d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066da:	e7eb      	b.n	80066b4 <_strtol_l.constprop.0+0x68>
 80066dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80066de:	bf04      	itt	eq
 80066e0:	782c      	ldrbeq	r4, [r5, #0]
 80066e2:	1c95      	addeq	r5, r2, #2
 80066e4:	e7cf      	b.n	8006686 <_strtol_l.constprop.0+0x3a>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1da      	bne.n	80066a0 <_strtol_l.constprop.0+0x54>
 80066ea:	2c30      	cmp	r4, #48	@ 0x30
 80066ec:	bf0c      	ite	eq
 80066ee:	2308      	moveq	r3, #8
 80066f0:	230a      	movne	r3, #10
 80066f2:	e7d5      	b.n	80066a0 <_strtol_l.constprop.0+0x54>
 80066f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80066f8:	2f19      	cmp	r7, #25
 80066fa:	d801      	bhi.n	8006700 <_strtol_l.constprop.0+0xb4>
 80066fc:	3c37      	subs	r4, #55	@ 0x37
 80066fe:	e7de      	b.n	80066be <_strtol_l.constprop.0+0x72>
 8006700:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006704:	2f19      	cmp	r7, #25
 8006706:	d804      	bhi.n	8006712 <_strtol_l.constprop.0+0xc6>
 8006708:	3c57      	subs	r4, #87	@ 0x57
 800670a:	e7d8      	b.n	80066be <_strtol_l.constprop.0+0x72>
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	e7e1      	b.n	80066d6 <_strtol_l.constprop.0+0x8a>
 8006712:	1c53      	adds	r3, r2, #1
 8006714:	d108      	bne.n	8006728 <_strtol_l.constprop.0+0xdc>
 8006716:	2322      	movs	r3, #34	@ 0x22
 8006718:	4660      	mov	r0, ip
 800671a:	f8ce 3000 	str.w	r3, [lr]
 800671e:	f1b8 0f00 	cmp.w	r8, #0
 8006722:	d0a0      	beq.n	8006666 <_strtol_l.constprop.0+0x1a>
 8006724:	1e69      	subs	r1, r5, #1
 8006726:	e006      	b.n	8006736 <_strtol_l.constprop.0+0xea>
 8006728:	b106      	cbz	r6, 800672c <_strtol_l.constprop.0+0xe0>
 800672a:	4240      	negs	r0, r0
 800672c:	f1b8 0f00 	cmp.w	r8, #0
 8006730:	d099      	beq.n	8006666 <_strtol_l.constprop.0+0x1a>
 8006732:	2a00      	cmp	r2, #0
 8006734:	d1f6      	bne.n	8006724 <_strtol_l.constprop.0+0xd8>
 8006736:	f8c8 1000 	str.w	r1, [r8]
 800673a:	e794      	b.n	8006666 <_strtol_l.constprop.0+0x1a>
 800673c:	08007ba9 	.word	0x08007ba9

08006740 <_strtol_r>:
 8006740:	f7ff bf84 	b.w	800664c <_strtol_l.constprop.0>

08006744 <__ssputs_r>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	461f      	mov	r7, r3
 800674a:	688e      	ldr	r6, [r1, #8]
 800674c:	4682      	mov	sl, r0
 800674e:	42be      	cmp	r6, r7
 8006750:	460c      	mov	r4, r1
 8006752:	4690      	mov	r8, r2
 8006754:	680b      	ldr	r3, [r1, #0]
 8006756:	d82d      	bhi.n	80067b4 <__ssputs_r+0x70>
 8006758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800675c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006760:	d026      	beq.n	80067b0 <__ssputs_r+0x6c>
 8006762:	6965      	ldr	r5, [r4, #20]
 8006764:	6909      	ldr	r1, [r1, #16]
 8006766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800676a:	eba3 0901 	sub.w	r9, r3, r1
 800676e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006772:	1c7b      	adds	r3, r7, #1
 8006774:	444b      	add	r3, r9
 8006776:	106d      	asrs	r5, r5, #1
 8006778:	429d      	cmp	r5, r3
 800677a:	bf38      	it	cc
 800677c:	461d      	movcc	r5, r3
 800677e:	0553      	lsls	r3, r2, #21
 8006780:	d527      	bpl.n	80067d2 <__ssputs_r+0x8e>
 8006782:	4629      	mov	r1, r5
 8006784:	f7fe fc2e 	bl	8004fe4 <_malloc_r>
 8006788:	4606      	mov	r6, r0
 800678a:	b360      	cbz	r0, 80067e6 <__ssputs_r+0xa2>
 800678c:	464a      	mov	r2, r9
 800678e:	6921      	ldr	r1, [r4, #16]
 8006790:	f000 fa14 	bl	8006bbc <memcpy>
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800679a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	6126      	str	r6, [r4, #16]
 80067a2:	444e      	add	r6, r9
 80067a4:	6026      	str	r6, [r4, #0]
 80067a6:	463e      	mov	r6, r7
 80067a8:	6165      	str	r5, [r4, #20]
 80067aa:	eba5 0509 	sub.w	r5, r5, r9
 80067ae:	60a5      	str	r5, [r4, #8]
 80067b0:	42be      	cmp	r6, r7
 80067b2:	d900      	bls.n	80067b6 <__ssputs_r+0x72>
 80067b4:	463e      	mov	r6, r7
 80067b6:	4632      	mov	r2, r6
 80067b8:	4641      	mov	r1, r8
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	f000 f9c2 	bl	8006b44 <memmove>
 80067c0:	2000      	movs	r0, #0
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	1b9b      	subs	r3, r3, r6
 80067c6:	60a3      	str	r3, [r4, #8]
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	4433      	add	r3, r6
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	462a      	mov	r2, r5
 80067d4:	f000 fd83 	bl	80072de <_realloc_r>
 80067d8:	4606      	mov	r6, r0
 80067da:	2800      	cmp	r0, #0
 80067dc:	d1e0      	bne.n	80067a0 <__ssputs_r+0x5c>
 80067de:	4650      	mov	r0, sl
 80067e0:	6921      	ldr	r1, [r4, #16]
 80067e2:	f7fe fb8d 	bl	8004f00 <_free_r>
 80067e6:	230c      	movs	r3, #12
 80067e8:	f8ca 3000 	str.w	r3, [sl]
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	e7e9      	b.n	80067ce <__ssputs_r+0x8a>
	...

080067fc <_svfiprintf_r>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4698      	mov	r8, r3
 8006802:	898b      	ldrh	r3, [r1, #12]
 8006804:	4607      	mov	r7, r0
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	460d      	mov	r5, r1
 800680a:	4614      	mov	r4, r2
 800680c:	b09d      	sub	sp, #116	@ 0x74
 800680e:	d510      	bpl.n	8006832 <_svfiprintf_r+0x36>
 8006810:	690b      	ldr	r3, [r1, #16]
 8006812:	b973      	cbnz	r3, 8006832 <_svfiprintf_r+0x36>
 8006814:	2140      	movs	r1, #64	@ 0x40
 8006816:	f7fe fbe5 	bl	8004fe4 <_malloc_r>
 800681a:	6028      	str	r0, [r5, #0]
 800681c:	6128      	str	r0, [r5, #16]
 800681e:	b930      	cbnz	r0, 800682e <_svfiprintf_r+0x32>
 8006820:	230c      	movs	r3, #12
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	b01d      	add	sp, #116	@ 0x74
 800682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682e:	2340      	movs	r3, #64	@ 0x40
 8006830:	616b      	str	r3, [r5, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	9309      	str	r3, [sp, #36]	@ 0x24
 8006836:	2320      	movs	r3, #32
 8006838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800683c:	2330      	movs	r3, #48	@ 0x30
 800683e:	f04f 0901 	mov.w	r9, #1
 8006842:	f8cd 800c 	str.w	r8, [sp, #12]
 8006846:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069e0 <_svfiprintf_r+0x1e4>
 800684a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800684e:	4623      	mov	r3, r4
 8006850:	469a      	mov	sl, r3
 8006852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006856:	b10a      	cbz	r2, 800685c <_svfiprintf_r+0x60>
 8006858:	2a25      	cmp	r2, #37	@ 0x25
 800685a:	d1f9      	bne.n	8006850 <_svfiprintf_r+0x54>
 800685c:	ebba 0b04 	subs.w	fp, sl, r4
 8006860:	d00b      	beq.n	800687a <_svfiprintf_r+0x7e>
 8006862:	465b      	mov	r3, fp
 8006864:	4622      	mov	r2, r4
 8006866:	4629      	mov	r1, r5
 8006868:	4638      	mov	r0, r7
 800686a:	f7ff ff6b 	bl	8006744 <__ssputs_r>
 800686e:	3001      	adds	r0, #1
 8006870:	f000 80a7 	beq.w	80069c2 <_svfiprintf_r+0x1c6>
 8006874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006876:	445a      	add	r2, fp
 8006878:	9209      	str	r2, [sp, #36]	@ 0x24
 800687a:	f89a 3000 	ldrb.w	r3, [sl]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 809f 	beq.w	80069c2 <_svfiprintf_r+0x1c6>
 8006884:	2300      	movs	r3, #0
 8006886:	f04f 32ff 	mov.w	r2, #4294967295
 800688a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800688e:	f10a 0a01 	add.w	sl, sl, #1
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	9307      	str	r3, [sp, #28]
 8006896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800689a:	931a      	str	r3, [sp, #104]	@ 0x68
 800689c:	4654      	mov	r4, sl
 800689e:	2205      	movs	r2, #5
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	484e      	ldr	r0, [pc, #312]	@ (80069e0 <_svfiprintf_r+0x1e4>)
 80068a6:	f7fd fcc8 	bl	800423a <memchr>
 80068aa:	9a04      	ldr	r2, [sp, #16]
 80068ac:	b9d8      	cbnz	r0, 80068e6 <_svfiprintf_r+0xea>
 80068ae:	06d0      	lsls	r0, r2, #27
 80068b0:	bf44      	itt	mi
 80068b2:	2320      	movmi	r3, #32
 80068b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b8:	0711      	lsls	r1, r2, #28
 80068ba:	bf44      	itt	mi
 80068bc:	232b      	movmi	r3, #43	@ 0x2b
 80068be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c2:	f89a 3000 	ldrb.w	r3, [sl]
 80068c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c8:	d015      	beq.n	80068f6 <_svfiprintf_r+0xfa>
 80068ca:	4654      	mov	r4, sl
 80068cc:	2000      	movs	r0, #0
 80068ce:	f04f 0c0a 	mov.w	ip, #10
 80068d2:	9a07      	ldr	r2, [sp, #28]
 80068d4:	4621      	mov	r1, r4
 80068d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068da:	3b30      	subs	r3, #48	@ 0x30
 80068dc:	2b09      	cmp	r3, #9
 80068de:	d94b      	bls.n	8006978 <_svfiprintf_r+0x17c>
 80068e0:	b1b0      	cbz	r0, 8006910 <_svfiprintf_r+0x114>
 80068e2:	9207      	str	r2, [sp, #28]
 80068e4:	e014      	b.n	8006910 <_svfiprintf_r+0x114>
 80068e6:	eba0 0308 	sub.w	r3, r0, r8
 80068ea:	fa09 f303 	lsl.w	r3, r9, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	46a2      	mov	sl, r4
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	e7d2      	b.n	800689c <_svfiprintf_r+0xa0>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	1d19      	adds	r1, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	9103      	str	r1, [sp, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfbb      	ittet	lt
 8006902:	425b      	neglt	r3, r3
 8006904:	f042 0202 	orrlt.w	r2, r2, #2
 8006908:	9307      	strge	r3, [sp, #28]
 800690a:	9307      	strlt	r3, [sp, #28]
 800690c:	bfb8      	it	lt
 800690e:	9204      	strlt	r2, [sp, #16]
 8006910:	7823      	ldrb	r3, [r4, #0]
 8006912:	2b2e      	cmp	r3, #46	@ 0x2e
 8006914:	d10a      	bne.n	800692c <_svfiprintf_r+0x130>
 8006916:	7863      	ldrb	r3, [r4, #1]
 8006918:	2b2a      	cmp	r3, #42	@ 0x2a
 800691a:	d132      	bne.n	8006982 <_svfiprintf_r+0x186>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	3402      	adds	r4, #2
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9203      	str	r2, [sp, #12]
 8006926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069e4 <_svfiprintf_r+0x1e8>
 8006930:	2203      	movs	r2, #3
 8006932:	4650      	mov	r0, sl
 8006934:	7821      	ldrb	r1, [r4, #0]
 8006936:	f7fd fc80 	bl	800423a <memchr>
 800693a:	b138      	cbz	r0, 800694c <_svfiprintf_r+0x150>
 800693c:	2240      	movs	r2, #64	@ 0x40
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	eba0 000a 	sub.w	r0, r0, sl
 8006944:	4082      	lsls	r2, r0
 8006946:	4313      	orrs	r3, r2
 8006948:	3401      	adds	r4, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	2206      	movs	r2, #6
 8006952:	4825      	ldr	r0, [pc, #148]	@ (80069e8 <_svfiprintf_r+0x1ec>)
 8006954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006958:	f7fd fc6f 	bl	800423a <memchr>
 800695c:	2800      	cmp	r0, #0
 800695e:	d036      	beq.n	80069ce <_svfiprintf_r+0x1d2>
 8006960:	4b22      	ldr	r3, [pc, #136]	@ (80069ec <_svfiprintf_r+0x1f0>)
 8006962:	bb1b      	cbnz	r3, 80069ac <_svfiprintf_r+0x1b0>
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	3307      	adds	r3, #7
 8006968:	f023 0307 	bic.w	r3, r3, #7
 800696c:	3308      	adds	r3, #8
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006972:	4433      	add	r3, r6
 8006974:	9309      	str	r3, [sp, #36]	@ 0x24
 8006976:	e76a      	b.n	800684e <_svfiprintf_r+0x52>
 8006978:	460c      	mov	r4, r1
 800697a:	2001      	movs	r0, #1
 800697c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006980:	e7a8      	b.n	80068d4 <_svfiprintf_r+0xd8>
 8006982:	2300      	movs	r3, #0
 8006984:	f04f 0c0a 	mov.w	ip, #10
 8006988:	4619      	mov	r1, r3
 800698a:	3401      	adds	r4, #1
 800698c:	9305      	str	r3, [sp, #20]
 800698e:	4620      	mov	r0, r4
 8006990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006994:	3a30      	subs	r2, #48	@ 0x30
 8006996:	2a09      	cmp	r2, #9
 8006998:	d903      	bls.n	80069a2 <_svfiprintf_r+0x1a6>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0c6      	beq.n	800692c <_svfiprintf_r+0x130>
 800699e:	9105      	str	r1, [sp, #20]
 80069a0:	e7c4      	b.n	800692c <_svfiprintf_r+0x130>
 80069a2:	4604      	mov	r4, r0
 80069a4:	2301      	movs	r3, #1
 80069a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069aa:	e7f0      	b.n	800698e <_svfiprintf_r+0x192>
 80069ac:	ab03      	add	r3, sp, #12
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	462a      	mov	r2, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	4b0e      	ldr	r3, [pc, #56]	@ (80069f0 <_svfiprintf_r+0x1f4>)
 80069b6:	a904      	add	r1, sp, #16
 80069b8:	f7fc fccc 	bl	8003354 <_printf_float>
 80069bc:	1c42      	adds	r2, r0, #1
 80069be:	4606      	mov	r6, r0
 80069c0:	d1d6      	bne.n	8006970 <_svfiprintf_r+0x174>
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	065b      	lsls	r3, r3, #25
 80069c6:	f53f af2d 	bmi.w	8006824 <_svfiprintf_r+0x28>
 80069ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069cc:	e72c      	b.n	8006828 <_svfiprintf_r+0x2c>
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4638      	mov	r0, r7
 80069d6:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <_svfiprintf_r+0x1f4>)
 80069d8:	a904      	add	r1, sp, #16
 80069da:	f7fc ff59 	bl	8003890 <_printf_i>
 80069de:	e7ed      	b.n	80069bc <_svfiprintf_r+0x1c0>
 80069e0:	08007ca9 	.word	0x08007ca9
 80069e4:	08007caf 	.word	0x08007caf
 80069e8:	08007cb3 	.word	0x08007cb3
 80069ec:	08003355 	.word	0x08003355
 80069f0:	08006745 	.word	0x08006745

080069f4 <__sflush_r>:
 80069f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	0716      	lsls	r6, r2, #28
 80069fc:	4605      	mov	r5, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	d454      	bmi.n	8006aac <__sflush_r+0xb8>
 8006a02:	684b      	ldr	r3, [r1, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dc02      	bgt.n	8006a0e <__sflush_r+0x1a>
 8006a08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd48      	ble.n	8006aa0 <__sflush_r+0xac>
 8006a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	d045      	beq.n	8006aa0 <__sflush_r+0xac>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a1a:	682f      	ldr	r7, [r5, #0]
 8006a1c:	6a21      	ldr	r1, [r4, #32]
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	d030      	beq.n	8006a84 <__sflush_r+0x90>
 8006a22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	0759      	lsls	r1, r3, #29
 8006a28:	d505      	bpl.n	8006a36 <__sflush_r+0x42>
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	1ad2      	subs	r2, r2, r3
 8006a2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a30:	b10b      	cbz	r3, 8006a36 <__sflush_r+0x42>
 8006a32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	4628      	mov	r0, r5
 8006a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a3c:	6a21      	ldr	r1, [r4, #32]
 8006a3e:	47b0      	blx	r6
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	d106      	bne.n	8006a54 <__sflush_r+0x60>
 8006a46:	6829      	ldr	r1, [r5, #0]
 8006a48:	291d      	cmp	r1, #29
 8006a4a:	d82b      	bhi.n	8006aa4 <__sflush_r+0xb0>
 8006a4c:	4a28      	ldr	r2, [pc, #160]	@ (8006af0 <__sflush_r+0xfc>)
 8006a4e:	410a      	asrs	r2, r1
 8006a50:	07d6      	lsls	r6, r2, #31
 8006a52:	d427      	bmi.n	8006aa4 <__sflush_r+0xb0>
 8006a54:	2200      	movs	r2, #0
 8006a56:	6062      	str	r2, [r4, #4]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	04d9      	lsls	r1, r3, #19
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	d504      	bpl.n	8006a6a <__sflush_r+0x76>
 8006a60:	1c42      	adds	r2, r0, #1
 8006a62:	d101      	bne.n	8006a68 <__sflush_r+0x74>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b903      	cbnz	r3, 8006a6a <__sflush_r+0x76>
 8006a68:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a6c:	602f      	str	r7, [r5, #0]
 8006a6e:	b1b9      	cbz	r1, 8006aa0 <__sflush_r+0xac>
 8006a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d002      	beq.n	8006a7e <__sflush_r+0x8a>
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f7fe fa41 	bl	8004f00 <_free_r>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a82:	e00d      	b.n	8006aa0 <__sflush_r+0xac>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b0      	blx	r6
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	1c50      	adds	r0, r2, #1
 8006a8e:	d1c9      	bne.n	8006a24 <__sflush_r+0x30>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0c6      	beq.n	8006a24 <__sflush_r+0x30>
 8006a96:	2b1d      	cmp	r3, #29
 8006a98:	d001      	beq.n	8006a9e <__sflush_r+0xaa>
 8006a9a:	2b16      	cmp	r3, #22
 8006a9c:	d11d      	bne.n	8006ada <__sflush_r+0xe6>
 8006a9e:	602f      	str	r7, [r5, #0]
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e021      	b.n	8006ae8 <__sflush_r+0xf4>
 8006aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	e01a      	b.n	8006ae2 <__sflush_r+0xee>
 8006aac:	690f      	ldr	r7, [r1, #16]
 8006aae:	2f00      	cmp	r7, #0
 8006ab0:	d0f6      	beq.n	8006aa0 <__sflush_r+0xac>
 8006ab2:	0793      	lsls	r3, r2, #30
 8006ab4:	bf18      	it	ne
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	680e      	ldr	r6, [r1, #0]
 8006aba:	bf08      	it	eq
 8006abc:	694b      	ldreq	r3, [r1, #20]
 8006abe:	1bf6      	subs	r6, r6, r7
 8006ac0:	600f      	str	r7, [r1, #0]
 8006ac2:	608b      	str	r3, [r1, #8]
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	ddeb      	ble.n	8006aa0 <__sflush_r+0xac>
 8006ac8:	4633      	mov	r3, r6
 8006aca:	463a      	mov	r2, r7
 8006acc:	4628      	mov	r0, r5
 8006ace:	6a21      	ldr	r1, [r4, #32]
 8006ad0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ad4:	47e0      	blx	ip
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	dc07      	bgt.n	8006aea <__sflush_r+0xf6>
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aea:	4407      	add	r7, r0
 8006aec:	1a36      	subs	r6, r6, r0
 8006aee:	e7e9      	b.n	8006ac4 <__sflush_r+0xd0>
 8006af0:	dfbffffe 	.word	0xdfbffffe

08006af4 <_fflush_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	4605      	mov	r5, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	b913      	cbnz	r3, 8006b04 <_fflush_r+0x10>
 8006afe:	2500      	movs	r5, #0
 8006b00:	4628      	mov	r0, r5
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	b118      	cbz	r0, 8006b0e <_fflush_r+0x1a>
 8006b06:	6a03      	ldr	r3, [r0, #32]
 8006b08:	b90b      	cbnz	r3, 8006b0e <_fflush_r+0x1a>
 8006b0a:	f7fd fa7d 	bl	8004008 <__sinit>
 8006b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f3      	beq.n	8006afe <_fflush_r+0xa>
 8006b16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b18:	07d0      	lsls	r0, r2, #31
 8006b1a:	d404      	bmi.n	8006b26 <_fflush_r+0x32>
 8006b1c:	0599      	lsls	r1, r3, #22
 8006b1e:	d402      	bmi.n	8006b26 <_fflush_r+0x32>
 8006b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b22:	f7fd fb88 	bl	8004236 <__retarget_lock_acquire_recursive>
 8006b26:	4628      	mov	r0, r5
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f7ff ff63 	bl	80069f4 <__sflush_r>
 8006b2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b30:	4605      	mov	r5, r0
 8006b32:	07da      	lsls	r2, r3, #31
 8006b34:	d4e4      	bmi.n	8006b00 <_fflush_r+0xc>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	059b      	lsls	r3, r3, #22
 8006b3a:	d4e1      	bmi.n	8006b00 <_fflush_r+0xc>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b3e:	f7fd fb7b 	bl	8004238 <__retarget_lock_release_recursive>
 8006b42:	e7dd      	b.n	8006b00 <_fflush_r+0xc>

08006b44 <memmove>:
 8006b44:	4288      	cmp	r0, r1
 8006b46:	b510      	push	{r4, lr}
 8006b48:	eb01 0402 	add.w	r4, r1, r2
 8006b4c:	d902      	bls.n	8006b54 <memmove+0x10>
 8006b4e:	4284      	cmp	r4, r0
 8006b50:	4623      	mov	r3, r4
 8006b52:	d807      	bhi.n	8006b64 <memmove+0x20>
 8006b54:	1e43      	subs	r3, r0, #1
 8006b56:	42a1      	cmp	r1, r4
 8006b58:	d008      	beq.n	8006b6c <memmove+0x28>
 8006b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b62:	e7f8      	b.n	8006b56 <memmove+0x12>
 8006b64:	4601      	mov	r1, r0
 8006b66:	4402      	add	r2, r0
 8006b68:	428a      	cmp	r2, r1
 8006b6a:	d100      	bne.n	8006b6e <memmove+0x2a>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b76:	e7f7      	b.n	8006b68 <memmove+0x24>

08006b78 <strncmp>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	b16a      	cbz	r2, 8006b98 <strncmp+0x20>
 8006b7c:	3901      	subs	r1, #1
 8006b7e:	1884      	adds	r4, r0, r2
 8006b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d103      	bne.n	8006b94 <strncmp+0x1c>
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d001      	beq.n	8006b94 <strncmp+0x1c>
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d1f5      	bne.n	8006b80 <strncmp+0x8>
 8006b94:	1ad0      	subs	r0, r2, r3
 8006b96:	bd10      	pop	{r4, pc}
 8006b98:	4610      	mov	r0, r2
 8006b9a:	e7fc      	b.n	8006b96 <strncmp+0x1e>

08006b9c <_sbrk_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4d05      	ldr	r5, [pc, #20]	@ (8006bb8 <_sbrk_r+0x1c>)
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fa fba4 	bl	80012f4 <_sbrk>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_sbrk_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_sbrk_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	200003ac 	.word	0x200003ac

08006bbc <memcpy>:
 8006bbc:	440a      	add	r2, r1
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bc4:	d100      	bne.n	8006bc8 <memcpy+0xc>
 8006bc6:	4770      	bx	lr
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd4:	d1f9      	bne.n	8006bca <memcpy+0xe>
 8006bd6:	bd10      	pop	{r4, pc}

08006bd8 <nan>:
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4901      	ldr	r1, [pc, #4]	@ (8006be0 <nan+0x8>)
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	7ff80000 	.word	0x7ff80000

08006be4 <__assert_func>:
 8006be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006be6:	4614      	mov	r4, r2
 8006be8:	461a      	mov	r2, r3
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <__assert_func+0x2c>)
 8006bec:	4605      	mov	r5, r0
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68d8      	ldr	r0, [r3, #12]
 8006bf2:	b954      	cbnz	r4, 8006c0a <__assert_func+0x26>
 8006bf4:	4b07      	ldr	r3, [pc, #28]	@ (8006c14 <__assert_func+0x30>)
 8006bf6:	461c      	mov	r4, r3
 8006bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bfc:	9100      	str	r1, [sp, #0]
 8006bfe:	462b      	mov	r3, r5
 8006c00:	4905      	ldr	r1, [pc, #20]	@ (8006c18 <__assert_func+0x34>)
 8006c02:	f000 fba7 	bl	8007354 <fiprintf>
 8006c06:	f000 fbb7 	bl	8007378 <abort>
 8006c0a:	4b04      	ldr	r3, [pc, #16]	@ (8006c1c <__assert_func+0x38>)
 8006c0c:	e7f4      	b.n	8006bf8 <__assert_func+0x14>
 8006c0e:	bf00      	nop
 8006c10:	20000018 	.word	0x20000018
 8006c14:	08007cfd 	.word	0x08007cfd
 8006c18:	08007ccf 	.word	0x08007ccf
 8006c1c:	08007cc2 	.word	0x08007cc2

08006c20 <_calloc_r>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	fba1 5402 	umull	r5, r4, r1, r2
 8006c26:	b93c      	cbnz	r4, 8006c38 <_calloc_r+0x18>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7fe f9db 	bl	8004fe4 <_malloc_r>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	b928      	cbnz	r0, 8006c3e <_calloc_r+0x1e>
 8006c32:	2600      	movs	r6, #0
 8006c34:	4630      	mov	r0, r6
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	220c      	movs	r2, #12
 8006c3a:	6002      	str	r2, [r0, #0]
 8006c3c:	e7f9      	b.n	8006c32 <_calloc_r+0x12>
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7fd fa7a 	bl	800413a <memset>
 8006c46:	e7f5      	b.n	8006c34 <_calloc_r+0x14>

08006c48 <rshift>:
 8006c48:	6903      	ldr	r3, [r0, #16]
 8006c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c52:	f100 0414 	add.w	r4, r0, #20
 8006c56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c5a:	dd46      	ble.n	8006cea <rshift+0xa2>
 8006c5c:	f011 011f 	ands.w	r1, r1, #31
 8006c60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c68:	d10c      	bne.n	8006c84 <rshift+0x3c>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f100 0710 	add.w	r7, r0, #16
 8006c70:	42b1      	cmp	r1, r6
 8006c72:	d335      	bcc.n	8006ce0 <rshift+0x98>
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	1eea      	subs	r2, r5, #3
 8006c7a:	4296      	cmp	r6, r2
 8006c7c:	bf38      	it	cc
 8006c7e:	2300      	movcc	r3, #0
 8006c80:	4423      	add	r3, r4
 8006c82:	e015      	b.n	8006cb0 <rshift+0x68>
 8006c84:	46a1      	mov	r9, r4
 8006c86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c8a:	f1c1 0820 	rsb	r8, r1, #32
 8006c8e:	40cf      	lsrs	r7, r1
 8006c90:	f105 0e04 	add.w	lr, r5, #4
 8006c94:	4576      	cmp	r6, lr
 8006c96:	46f4      	mov	ip, lr
 8006c98:	d816      	bhi.n	8006cc8 <rshift+0x80>
 8006c9a:	1a9a      	subs	r2, r3, r2
 8006c9c:	0092      	lsls	r2, r2, #2
 8006c9e:	3a04      	subs	r2, #4
 8006ca0:	3501      	adds	r5, #1
 8006ca2:	42ae      	cmp	r6, r5
 8006ca4:	bf38      	it	cc
 8006ca6:	2200      	movcc	r2, #0
 8006ca8:	18a3      	adds	r3, r4, r2
 8006caa:	50a7      	str	r7, [r4, r2]
 8006cac:	b107      	cbz	r7, 8006cb0 <rshift+0x68>
 8006cae:	3304      	adds	r3, #4
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	eba3 0204 	sub.w	r2, r3, r4
 8006cb6:	bf08      	it	eq
 8006cb8:	2300      	moveq	r3, #0
 8006cba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006cbe:	6102      	str	r2, [r0, #16]
 8006cc0:	bf08      	it	eq
 8006cc2:	6143      	streq	r3, [r0, #20]
 8006cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cc8:	f8dc c000 	ldr.w	ip, [ip]
 8006ccc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006cd0:	ea4c 0707 	orr.w	r7, ip, r7
 8006cd4:	f849 7b04 	str.w	r7, [r9], #4
 8006cd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cdc:	40cf      	lsrs	r7, r1
 8006cde:	e7d9      	b.n	8006c94 <rshift+0x4c>
 8006ce0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ce4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ce8:	e7c2      	b.n	8006c70 <rshift+0x28>
 8006cea:	4623      	mov	r3, r4
 8006cec:	e7e0      	b.n	8006cb0 <rshift+0x68>

08006cee <__hexdig_fun>:
 8006cee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d802      	bhi.n	8006cfc <__hexdig_fun+0xe>
 8006cf6:	3820      	subs	r0, #32
 8006cf8:	b2c0      	uxtb	r0, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	d801      	bhi.n	8006d08 <__hexdig_fun+0x1a>
 8006d04:	3847      	subs	r0, #71	@ 0x47
 8006d06:	e7f7      	b.n	8006cf8 <__hexdig_fun+0xa>
 8006d08:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d801      	bhi.n	8006d14 <__hexdig_fun+0x26>
 8006d10:	3827      	subs	r0, #39	@ 0x27
 8006d12:	e7f1      	b.n	8006cf8 <__hexdig_fun+0xa>
 8006d14:	2000      	movs	r0, #0
 8006d16:	4770      	bx	lr

08006d18 <__gethex>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	468a      	mov	sl, r1
 8006d1e:	4690      	mov	r8, r2
 8006d20:	b085      	sub	sp, #20
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	680b      	ldr	r3, [r1, #0]
 8006d26:	9001      	str	r0, [sp, #4]
 8006d28:	1c9c      	adds	r4, r3, #2
 8006d2a:	46a1      	mov	r9, r4
 8006d2c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006d30:	2830      	cmp	r0, #48	@ 0x30
 8006d32:	d0fa      	beq.n	8006d2a <__gethex+0x12>
 8006d34:	eba9 0303 	sub.w	r3, r9, r3
 8006d38:	f1a3 0b02 	sub.w	fp, r3, #2
 8006d3c:	f7ff ffd7 	bl	8006cee <__hexdig_fun>
 8006d40:	4605      	mov	r5, r0
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d168      	bne.n	8006e18 <__gethex+0x100>
 8006d46:	2201      	movs	r2, #1
 8006d48:	4648      	mov	r0, r9
 8006d4a:	499f      	ldr	r1, [pc, #636]	@ (8006fc8 <__gethex+0x2b0>)
 8006d4c:	f7ff ff14 	bl	8006b78 <strncmp>
 8006d50:	4607      	mov	r7, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d167      	bne.n	8006e26 <__gethex+0x10e>
 8006d56:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d5a:	4626      	mov	r6, r4
 8006d5c:	f7ff ffc7 	bl	8006cee <__hexdig_fun>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d062      	beq.n	8006e2a <__gethex+0x112>
 8006d64:	4623      	mov	r3, r4
 8006d66:	7818      	ldrb	r0, [r3, #0]
 8006d68:	4699      	mov	r9, r3
 8006d6a:	2830      	cmp	r0, #48	@ 0x30
 8006d6c:	f103 0301 	add.w	r3, r3, #1
 8006d70:	d0f9      	beq.n	8006d66 <__gethex+0x4e>
 8006d72:	f7ff ffbc 	bl	8006cee <__hexdig_fun>
 8006d76:	fab0 f580 	clz	r5, r0
 8006d7a:	f04f 0b01 	mov.w	fp, #1
 8006d7e:	096d      	lsrs	r5, r5, #5
 8006d80:	464a      	mov	r2, r9
 8006d82:	4616      	mov	r6, r2
 8006d84:	7830      	ldrb	r0, [r6, #0]
 8006d86:	3201      	adds	r2, #1
 8006d88:	f7ff ffb1 	bl	8006cee <__hexdig_fun>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d1f8      	bne.n	8006d82 <__gethex+0x6a>
 8006d90:	2201      	movs	r2, #1
 8006d92:	4630      	mov	r0, r6
 8006d94:	498c      	ldr	r1, [pc, #560]	@ (8006fc8 <__gethex+0x2b0>)
 8006d96:	f7ff feef 	bl	8006b78 <strncmp>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d13f      	bne.n	8006e1e <__gethex+0x106>
 8006d9e:	b944      	cbnz	r4, 8006db2 <__gethex+0x9a>
 8006da0:	1c74      	adds	r4, r6, #1
 8006da2:	4622      	mov	r2, r4
 8006da4:	4616      	mov	r6, r2
 8006da6:	7830      	ldrb	r0, [r6, #0]
 8006da8:	3201      	adds	r2, #1
 8006daa:	f7ff ffa0 	bl	8006cee <__hexdig_fun>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1f8      	bne.n	8006da4 <__gethex+0x8c>
 8006db2:	1ba4      	subs	r4, r4, r6
 8006db4:	00a7      	lsls	r7, r4, #2
 8006db6:	7833      	ldrb	r3, [r6, #0]
 8006db8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006dbc:	2b50      	cmp	r3, #80	@ 0x50
 8006dbe:	d13e      	bne.n	8006e3e <__gethex+0x126>
 8006dc0:	7873      	ldrb	r3, [r6, #1]
 8006dc2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006dc4:	d033      	beq.n	8006e2e <__gethex+0x116>
 8006dc6:	2b2d      	cmp	r3, #45	@ 0x2d
 8006dc8:	d034      	beq.n	8006e34 <__gethex+0x11c>
 8006dca:	2400      	movs	r4, #0
 8006dcc:	1c71      	adds	r1, r6, #1
 8006dce:	7808      	ldrb	r0, [r1, #0]
 8006dd0:	f7ff ff8d 	bl	8006cee <__hexdig_fun>
 8006dd4:	1e43      	subs	r3, r0, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b18      	cmp	r3, #24
 8006dda:	d830      	bhi.n	8006e3e <__gethex+0x126>
 8006ddc:	f1a0 0210 	sub.w	r2, r0, #16
 8006de0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006de4:	f7ff ff83 	bl	8006cee <__hexdig_fun>
 8006de8:	f100 3cff 	add.w	ip, r0, #4294967295
 8006dec:	fa5f fc8c 	uxtb.w	ip, ip
 8006df0:	f1bc 0f18 	cmp.w	ip, #24
 8006df4:	f04f 030a 	mov.w	r3, #10
 8006df8:	d91e      	bls.n	8006e38 <__gethex+0x120>
 8006dfa:	b104      	cbz	r4, 8006dfe <__gethex+0xe6>
 8006dfc:	4252      	negs	r2, r2
 8006dfe:	4417      	add	r7, r2
 8006e00:	f8ca 1000 	str.w	r1, [sl]
 8006e04:	b1ed      	cbz	r5, 8006e42 <__gethex+0x12a>
 8006e06:	f1bb 0f00 	cmp.w	fp, #0
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2506      	moveq	r5, #6
 8006e0e:	2500      	movne	r5, #0
 8006e10:	4628      	mov	r0, r5
 8006e12:	b005      	add	sp, #20
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e18:	2500      	movs	r5, #0
 8006e1a:	462c      	mov	r4, r5
 8006e1c:	e7b0      	b.n	8006d80 <__gethex+0x68>
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	d1c7      	bne.n	8006db2 <__gethex+0x9a>
 8006e22:	4627      	mov	r7, r4
 8006e24:	e7c7      	b.n	8006db6 <__gethex+0x9e>
 8006e26:	464e      	mov	r6, r9
 8006e28:	462f      	mov	r7, r5
 8006e2a:	2501      	movs	r5, #1
 8006e2c:	e7c3      	b.n	8006db6 <__gethex+0x9e>
 8006e2e:	2400      	movs	r4, #0
 8006e30:	1cb1      	adds	r1, r6, #2
 8006e32:	e7cc      	b.n	8006dce <__gethex+0xb6>
 8006e34:	2401      	movs	r4, #1
 8006e36:	e7fb      	b.n	8006e30 <__gethex+0x118>
 8006e38:	fb03 0002 	mla	r0, r3, r2, r0
 8006e3c:	e7ce      	b.n	8006ddc <__gethex+0xc4>
 8006e3e:	4631      	mov	r1, r6
 8006e40:	e7de      	b.n	8006e00 <__gethex+0xe8>
 8006e42:	4629      	mov	r1, r5
 8006e44:	eba6 0309 	sub.w	r3, r6, r9
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	2b07      	cmp	r3, #7
 8006e4c:	dc0a      	bgt.n	8006e64 <__gethex+0x14c>
 8006e4e:	9801      	ldr	r0, [sp, #4]
 8006e50:	f7fe f954 	bl	80050fc <_Balloc>
 8006e54:	4604      	mov	r4, r0
 8006e56:	b940      	cbnz	r0, 8006e6a <__gethex+0x152>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	21e4      	movs	r1, #228	@ 0xe4
 8006e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8006fcc <__gethex+0x2b4>)
 8006e5e:	485c      	ldr	r0, [pc, #368]	@ (8006fd0 <__gethex+0x2b8>)
 8006e60:	f7ff fec0 	bl	8006be4 <__assert_func>
 8006e64:	3101      	adds	r1, #1
 8006e66:	105b      	asrs	r3, r3, #1
 8006e68:	e7ef      	b.n	8006e4a <__gethex+0x132>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f100 0a14 	add.w	sl, r0, #20
 8006e70:	4655      	mov	r5, sl
 8006e72:	469b      	mov	fp, r3
 8006e74:	45b1      	cmp	r9, r6
 8006e76:	d337      	bcc.n	8006ee8 <__gethex+0x1d0>
 8006e78:	f845 bb04 	str.w	fp, [r5], #4
 8006e7c:	eba5 050a 	sub.w	r5, r5, sl
 8006e80:	10ad      	asrs	r5, r5, #2
 8006e82:	6125      	str	r5, [r4, #16]
 8006e84:	4658      	mov	r0, fp
 8006e86:	f7fe fa2b 	bl	80052e0 <__hi0bits>
 8006e8a:	016d      	lsls	r5, r5, #5
 8006e8c:	f8d8 6000 	ldr.w	r6, [r8]
 8006e90:	1a2d      	subs	r5, r5, r0
 8006e92:	42b5      	cmp	r5, r6
 8006e94:	dd54      	ble.n	8006f40 <__gethex+0x228>
 8006e96:	1bad      	subs	r5, r5, r6
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7fe fdb3 	bl	8005a06 <__any_on>
 8006ea0:	4681      	mov	r9, r0
 8006ea2:	b178      	cbz	r0, 8006ec4 <__gethex+0x1ac>
 8006ea4:	f04f 0901 	mov.w	r9, #1
 8006ea8:	1e6b      	subs	r3, r5, #1
 8006eaa:	1159      	asrs	r1, r3, #5
 8006eac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006eb0:	f003 021f 	and.w	r2, r3, #31
 8006eb4:	fa09 f202 	lsl.w	r2, r9, r2
 8006eb8:	420a      	tst	r2, r1
 8006eba:	d003      	beq.n	8006ec4 <__gethex+0x1ac>
 8006ebc:	454b      	cmp	r3, r9
 8006ebe:	dc36      	bgt.n	8006f2e <__gethex+0x216>
 8006ec0:	f04f 0902 	mov.w	r9, #2
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff febe 	bl	8006c48 <rshift>
 8006ecc:	442f      	add	r7, r5
 8006ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	da42      	bge.n	8006f5c <__gethex+0x244>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	9801      	ldr	r0, [sp, #4]
 8006eda:	f7fe f94f 	bl	800517c <_Bfree>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee2:	25a3      	movs	r5, #163	@ 0xa3
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e793      	b.n	8006e10 <__gethex+0xf8>
 8006ee8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006eec:	2a2e      	cmp	r2, #46	@ 0x2e
 8006eee:	d012      	beq.n	8006f16 <__gethex+0x1fe>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d104      	bne.n	8006efe <__gethex+0x1e6>
 8006ef4:	f845 bb04 	str.w	fp, [r5], #4
 8006ef8:	f04f 0b00 	mov.w	fp, #0
 8006efc:	465b      	mov	r3, fp
 8006efe:	7830      	ldrb	r0, [r6, #0]
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	f7ff fef4 	bl	8006cee <__hexdig_fun>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	f000 000f 	and.w	r0, r0, #15
 8006f0c:	4098      	lsls	r0, r3
 8006f0e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006f12:	3304      	adds	r3, #4
 8006f14:	e7ae      	b.n	8006e74 <__gethex+0x15c>
 8006f16:	45b1      	cmp	r9, r6
 8006f18:	d8ea      	bhi.n	8006ef0 <__gethex+0x1d8>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	492a      	ldr	r1, [pc, #168]	@ (8006fc8 <__gethex+0x2b0>)
 8006f20:	9303      	str	r3, [sp, #12]
 8006f22:	f7ff fe29 	bl	8006b78 <strncmp>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1e1      	bne.n	8006ef0 <__gethex+0x1d8>
 8006f2c:	e7a2      	b.n	8006e74 <__gethex+0x15c>
 8006f2e:	4620      	mov	r0, r4
 8006f30:	1ea9      	subs	r1, r5, #2
 8006f32:	f7fe fd68 	bl	8005a06 <__any_on>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d0c2      	beq.n	8006ec0 <__gethex+0x1a8>
 8006f3a:	f04f 0903 	mov.w	r9, #3
 8006f3e:	e7c1      	b.n	8006ec4 <__gethex+0x1ac>
 8006f40:	da09      	bge.n	8006f56 <__gethex+0x23e>
 8006f42:	1b75      	subs	r5, r6, r5
 8006f44:	4621      	mov	r1, r4
 8006f46:	462a      	mov	r2, r5
 8006f48:	9801      	ldr	r0, [sp, #4]
 8006f4a:	f7fe fb2d 	bl	80055a8 <__lshift>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	1b7f      	subs	r7, r7, r5
 8006f52:	f100 0a14 	add.w	sl, r0, #20
 8006f56:	f04f 0900 	mov.w	r9, #0
 8006f5a:	e7b8      	b.n	8006ece <__gethex+0x1b6>
 8006f5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f60:	42bd      	cmp	r5, r7
 8006f62:	dd6f      	ble.n	8007044 <__gethex+0x32c>
 8006f64:	1bed      	subs	r5, r5, r7
 8006f66:	42ae      	cmp	r6, r5
 8006f68:	dc34      	bgt.n	8006fd4 <__gethex+0x2bc>
 8006f6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d022      	beq.n	8006fb8 <__gethex+0x2a0>
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d024      	beq.n	8006fc0 <__gethex+0x2a8>
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d115      	bne.n	8006fa6 <__gethex+0x28e>
 8006f7a:	42ae      	cmp	r6, r5
 8006f7c:	d113      	bne.n	8006fa6 <__gethex+0x28e>
 8006f7e:	2e01      	cmp	r6, #1
 8006f80:	d10b      	bne.n	8006f9a <__gethex+0x282>
 8006f82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f86:	9a02      	ldr	r2, [sp, #8]
 8006f88:	2562      	movs	r5, #98	@ 0x62
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	f8ca 3000 	str.w	r3, [sl]
 8006f94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f96:	601c      	str	r4, [r3, #0]
 8006f98:	e73a      	b.n	8006e10 <__gethex+0xf8>
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	1e71      	subs	r1, r6, #1
 8006f9e:	f7fe fd32 	bl	8005a06 <__any_on>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d1ed      	bne.n	8006f82 <__gethex+0x26a>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	9801      	ldr	r0, [sp, #4]
 8006faa:	f7fe f8e7 	bl	800517c <_Bfree>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fb2:	2550      	movs	r5, #80	@ 0x50
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e72b      	b.n	8006e10 <__gethex+0xf8>
 8006fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f3      	bne.n	8006fa6 <__gethex+0x28e>
 8006fbe:	e7e0      	b.n	8006f82 <__gethex+0x26a>
 8006fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1dd      	bne.n	8006f82 <__gethex+0x26a>
 8006fc6:	e7ee      	b.n	8006fa6 <__gethex+0x28e>
 8006fc8:	08007b50 	.word	0x08007b50
 8006fcc:	080079e7 	.word	0x080079e7
 8006fd0:	08007cfe 	.word	0x08007cfe
 8006fd4:	1e6f      	subs	r7, r5, #1
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	d130      	bne.n	800703e <__gethex+0x326>
 8006fdc:	b127      	cbz	r7, 8006fe8 <__gethex+0x2d0>
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7fe fd10 	bl	8005a06 <__any_on>
 8006fe6:	4681      	mov	r9, r0
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4629      	mov	r1, r5
 8006fec:	1b76      	subs	r6, r6, r5
 8006fee:	2502      	movs	r5, #2
 8006ff0:	117a      	asrs	r2, r7, #5
 8006ff2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006ff6:	f007 071f 	and.w	r7, r7, #31
 8006ffa:	40bb      	lsls	r3, r7
 8006ffc:	4213      	tst	r3, r2
 8006ffe:	4620      	mov	r0, r4
 8007000:	bf18      	it	ne
 8007002:	f049 0902 	orrne.w	r9, r9, #2
 8007006:	f7ff fe1f 	bl	8006c48 <rshift>
 800700a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800700e:	f1b9 0f00 	cmp.w	r9, #0
 8007012:	d047      	beq.n	80070a4 <__gethex+0x38c>
 8007014:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d015      	beq.n	8007048 <__gethex+0x330>
 800701c:	2b03      	cmp	r3, #3
 800701e:	d017      	beq.n	8007050 <__gethex+0x338>
 8007020:	2b01      	cmp	r3, #1
 8007022:	d109      	bne.n	8007038 <__gethex+0x320>
 8007024:	f019 0f02 	tst.w	r9, #2
 8007028:	d006      	beq.n	8007038 <__gethex+0x320>
 800702a:	f8da 3000 	ldr.w	r3, [sl]
 800702e:	ea49 0903 	orr.w	r9, r9, r3
 8007032:	f019 0f01 	tst.w	r9, #1
 8007036:	d10e      	bne.n	8007056 <__gethex+0x33e>
 8007038:	f045 0510 	orr.w	r5, r5, #16
 800703c:	e032      	b.n	80070a4 <__gethex+0x38c>
 800703e:	f04f 0901 	mov.w	r9, #1
 8007042:	e7d1      	b.n	8006fe8 <__gethex+0x2d0>
 8007044:	2501      	movs	r5, #1
 8007046:	e7e2      	b.n	800700e <__gethex+0x2f6>
 8007048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800704a:	f1c3 0301 	rsb	r3, r3, #1
 800704e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <__gethex+0x320>
 8007056:	f04f 0c00 	mov.w	ip, #0
 800705a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800705e:	f104 0314 	add.w	r3, r4, #20
 8007062:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007066:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800706a:	4618      	mov	r0, r3
 800706c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007070:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007074:	d01b      	beq.n	80070ae <__gethex+0x396>
 8007076:	3201      	adds	r2, #1
 8007078:	6002      	str	r2, [r0, #0]
 800707a:	2d02      	cmp	r5, #2
 800707c:	f104 0314 	add.w	r3, r4, #20
 8007080:	d13c      	bne.n	80070fc <__gethex+0x3e4>
 8007082:	f8d8 2000 	ldr.w	r2, [r8]
 8007086:	3a01      	subs	r2, #1
 8007088:	42b2      	cmp	r2, r6
 800708a:	d109      	bne.n	80070a0 <__gethex+0x388>
 800708c:	2201      	movs	r2, #1
 800708e:	1171      	asrs	r1, r6, #5
 8007090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007094:	f006 061f 	and.w	r6, r6, #31
 8007098:	fa02 f606 	lsl.w	r6, r2, r6
 800709c:	421e      	tst	r6, r3
 800709e:	d13a      	bne.n	8007116 <__gethex+0x3fe>
 80070a0:	f045 0520 	orr.w	r5, r5, #32
 80070a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a6:	601c      	str	r4, [r3, #0]
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	601f      	str	r7, [r3, #0]
 80070ac:	e6b0      	b.n	8006e10 <__gethex+0xf8>
 80070ae:	4299      	cmp	r1, r3
 80070b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80070b4:	d8d9      	bhi.n	800706a <__gethex+0x352>
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	459b      	cmp	fp, r3
 80070ba:	db17      	blt.n	80070ec <__gethex+0x3d4>
 80070bc:	6861      	ldr	r1, [r4, #4]
 80070be:	9801      	ldr	r0, [sp, #4]
 80070c0:	3101      	adds	r1, #1
 80070c2:	f7fe f81b 	bl	80050fc <_Balloc>
 80070c6:	4681      	mov	r9, r0
 80070c8:	b918      	cbnz	r0, 80070d2 <__gethex+0x3ba>
 80070ca:	4602      	mov	r2, r0
 80070cc:	2184      	movs	r1, #132	@ 0x84
 80070ce:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <__gethex+0x41c>)
 80070d0:	e6c5      	b.n	8006e5e <__gethex+0x146>
 80070d2:	6922      	ldr	r2, [r4, #16]
 80070d4:	f104 010c 	add.w	r1, r4, #12
 80070d8:	3202      	adds	r2, #2
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	300c      	adds	r0, #12
 80070de:	f7ff fd6d 	bl	8006bbc <memcpy>
 80070e2:	4621      	mov	r1, r4
 80070e4:	9801      	ldr	r0, [sp, #4]
 80070e6:	f7fe f849 	bl	800517c <_Bfree>
 80070ea:	464c      	mov	r4, r9
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	6122      	str	r2, [r4, #16]
 80070f2:	2201      	movs	r2, #1
 80070f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070f8:	615a      	str	r2, [r3, #20]
 80070fa:	e7be      	b.n	800707a <__gethex+0x362>
 80070fc:	6922      	ldr	r2, [r4, #16]
 80070fe:	455a      	cmp	r2, fp
 8007100:	dd0b      	ble.n	800711a <__gethex+0x402>
 8007102:	2101      	movs	r1, #1
 8007104:	4620      	mov	r0, r4
 8007106:	f7ff fd9f 	bl	8006c48 <rshift>
 800710a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800710e:	3701      	adds	r7, #1
 8007110:	42bb      	cmp	r3, r7
 8007112:	f6ff aee0 	blt.w	8006ed6 <__gethex+0x1be>
 8007116:	2501      	movs	r5, #1
 8007118:	e7c2      	b.n	80070a0 <__gethex+0x388>
 800711a:	f016 061f 	ands.w	r6, r6, #31
 800711e:	d0fa      	beq.n	8007116 <__gethex+0x3fe>
 8007120:	4453      	add	r3, sl
 8007122:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007126:	f7fe f8db 	bl	80052e0 <__hi0bits>
 800712a:	f1c6 0620 	rsb	r6, r6, #32
 800712e:	42b0      	cmp	r0, r6
 8007130:	dbe7      	blt.n	8007102 <__gethex+0x3ea>
 8007132:	e7f0      	b.n	8007116 <__gethex+0x3fe>
 8007134:	080079e7 	.word	0x080079e7

08007138 <L_shift>:
 8007138:	f1c2 0208 	rsb	r2, r2, #8
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	b570      	push	{r4, r5, r6, lr}
 8007140:	f1c2 0620 	rsb	r6, r2, #32
 8007144:	6843      	ldr	r3, [r0, #4]
 8007146:	6804      	ldr	r4, [r0, #0]
 8007148:	fa03 f506 	lsl.w	r5, r3, r6
 800714c:	432c      	orrs	r4, r5
 800714e:	40d3      	lsrs	r3, r2
 8007150:	6004      	str	r4, [r0, #0]
 8007152:	f840 3f04 	str.w	r3, [r0, #4]!
 8007156:	4288      	cmp	r0, r1
 8007158:	d3f4      	bcc.n	8007144 <L_shift+0xc>
 800715a:	bd70      	pop	{r4, r5, r6, pc}

0800715c <__match>:
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	6803      	ldr	r3, [r0, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007166:	b914      	cbnz	r4, 800716e <__match+0x12>
 8007168:	6003      	str	r3, [r0, #0]
 800716a:	2001      	movs	r0, #1
 800716c:	bd30      	pop	{r4, r5, pc}
 800716e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007172:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007176:	2d19      	cmp	r5, #25
 8007178:	bf98      	it	ls
 800717a:	3220      	addls	r2, #32
 800717c:	42a2      	cmp	r2, r4
 800717e:	d0f0      	beq.n	8007162 <__match+0x6>
 8007180:	2000      	movs	r0, #0
 8007182:	e7f3      	b.n	800716c <__match+0x10>

08007184 <__hexnan>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	2500      	movs	r5, #0
 800718a:	680b      	ldr	r3, [r1, #0]
 800718c:	4682      	mov	sl, r0
 800718e:	115e      	asrs	r6, r3, #5
 8007190:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007194:	f013 031f 	ands.w	r3, r3, #31
 8007198:	bf18      	it	ne
 800719a:	3604      	addne	r6, #4
 800719c:	1f37      	subs	r7, r6, #4
 800719e:	4690      	mov	r8, r2
 80071a0:	46b9      	mov	r9, r7
 80071a2:	463c      	mov	r4, r7
 80071a4:	46ab      	mov	fp, r5
 80071a6:	b087      	sub	sp, #28
 80071a8:	6801      	ldr	r1, [r0, #0]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	f846 5c04 	str.w	r5, [r6, #-4]
 80071b0:	9502      	str	r5, [sp, #8]
 80071b2:	784a      	ldrb	r2, [r1, #1]
 80071b4:	1c4b      	adds	r3, r1, #1
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	b342      	cbz	r2, 800720c <__hexnan+0x88>
 80071ba:	4610      	mov	r0, r2
 80071bc:	9105      	str	r1, [sp, #20]
 80071be:	9204      	str	r2, [sp, #16]
 80071c0:	f7ff fd95 	bl	8006cee <__hexdig_fun>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d151      	bne.n	800726c <__hexnan+0xe8>
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	9905      	ldr	r1, [sp, #20]
 80071cc:	2a20      	cmp	r2, #32
 80071ce:	d818      	bhi.n	8007202 <__hexnan+0x7e>
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	459b      	cmp	fp, r3
 80071d4:	dd13      	ble.n	80071fe <__hexnan+0x7a>
 80071d6:	454c      	cmp	r4, r9
 80071d8:	d206      	bcs.n	80071e8 <__hexnan+0x64>
 80071da:	2d07      	cmp	r5, #7
 80071dc:	dc04      	bgt.n	80071e8 <__hexnan+0x64>
 80071de:	462a      	mov	r2, r5
 80071e0:	4649      	mov	r1, r9
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7ff ffa8 	bl	8007138 <L_shift>
 80071e8:	4544      	cmp	r4, r8
 80071ea:	d952      	bls.n	8007292 <__hexnan+0x10e>
 80071ec:	2300      	movs	r3, #0
 80071ee:	f1a4 0904 	sub.w	r9, r4, #4
 80071f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80071f6:	461d      	mov	r5, r3
 80071f8:	464c      	mov	r4, r9
 80071fa:	f8cd b008 	str.w	fp, [sp, #8]
 80071fe:	9903      	ldr	r1, [sp, #12]
 8007200:	e7d7      	b.n	80071b2 <__hexnan+0x2e>
 8007202:	2a29      	cmp	r2, #41	@ 0x29
 8007204:	d157      	bne.n	80072b6 <__hexnan+0x132>
 8007206:	3102      	adds	r1, #2
 8007208:	f8ca 1000 	str.w	r1, [sl]
 800720c:	f1bb 0f00 	cmp.w	fp, #0
 8007210:	d051      	beq.n	80072b6 <__hexnan+0x132>
 8007212:	454c      	cmp	r4, r9
 8007214:	d206      	bcs.n	8007224 <__hexnan+0xa0>
 8007216:	2d07      	cmp	r5, #7
 8007218:	dc04      	bgt.n	8007224 <__hexnan+0xa0>
 800721a:	462a      	mov	r2, r5
 800721c:	4649      	mov	r1, r9
 800721e:	4620      	mov	r0, r4
 8007220:	f7ff ff8a 	bl	8007138 <L_shift>
 8007224:	4544      	cmp	r4, r8
 8007226:	d936      	bls.n	8007296 <__hexnan+0x112>
 8007228:	4623      	mov	r3, r4
 800722a:	f1a8 0204 	sub.w	r2, r8, #4
 800722e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007232:	429f      	cmp	r7, r3
 8007234:	f842 1f04 	str.w	r1, [r2, #4]!
 8007238:	d2f9      	bcs.n	800722e <__hexnan+0xaa>
 800723a:	1b3b      	subs	r3, r7, r4
 800723c:	f023 0303 	bic.w	r3, r3, #3
 8007240:	3304      	adds	r3, #4
 8007242:	3401      	adds	r4, #1
 8007244:	3e03      	subs	r6, #3
 8007246:	42b4      	cmp	r4, r6
 8007248:	bf88      	it	hi
 800724a:	2304      	movhi	r3, #4
 800724c:	2200      	movs	r2, #0
 800724e:	4443      	add	r3, r8
 8007250:	f843 2b04 	str.w	r2, [r3], #4
 8007254:	429f      	cmp	r7, r3
 8007256:	d2fb      	bcs.n	8007250 <__hexnan+0xcc>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	b91b      	cbnz	r3, 8007264 <__hexnan+0xe0>
 800725c:	4547      	cmp	r7, r8
 800725e:	d128      	bne.n	80072b2 <__hexnan+0x12e>
 8007260:	2301      	movs	r3, #1
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	2005      	movs	r0, #5
 8007266:	b007      	add	sp, #28
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	3501      	adds	r5, #1
 800726e:	2d08      	cmp	r5, #8
 8007270:	f10b 0b01 	add.w	fp, fp, #1
 8007274:	dd06      	ble.n	8007284 <__hexnan+0x100>
 8007276:	4544      	cmp	r4, r8
 8007278:	d9c1      	bls.n	80071fe <__hexnan+0x7a>
 800727a:	2300      	movs	r3, #0
 800727c:	2501      	movs	r5, #1
 800727e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007282:	3c04      	subs	r4, #4
 8007284:	6822      	ldr	r2, [r4, #0]
 8007286:	f000 000f 	and.w	r0, r0, #15
 800728a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800728e:	6020      	str	r0, [r4, #0]
 8007290:	e7b5      	b.n	80071fe <__hexnan+0x7a>
 8007292:	2508      	movs	r5, #8
 8007294:	e7b3      	b.n	80071fe <__hexnan+0x7a>
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0dd      	beq.n	8007258 <__hexnan+0xd4>
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	f1c3 0320 	rsb	r3, r3, #32
 80072a4:	40da      	lsrs	r2, r3
 80072a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072aa:	4013      	ands	r3, r2
 80072ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80072b0:	e7d2      	b.n	8007258 <__hexnan+0xd4>
 80072b2:	3f04      	subs	r7, #4
 80072b4:	e7d0      	b.n	8007258 <__hexnan+0xd4>
 80072b6:	2004      	movs	r0, #4
 80072b8:	e7d5      	b.n	8007266 <__hexnan+0xe2>

080072ba <__ascii_mbtowc>:
 80072ba:	b082      	sub	sp, #8
 80072bc:	b901      	cbnz	r1, 80072c0 <__ascii_mbtowc+0x6>
 80072be:	a901      	add	r1, sp, #4
 80072c0:	b142      	cbz	r2, 80072d4 <__ascii_mbtowc+0x1a>
 80072c2:	b14b      	cbz	r3, 80072d8 <__ascii_mbtowc+0x1e>
 80072c4:	7813      	ldrb	r3, [r2, #0]
 80072c6:	600b      	str	r3, [r1, #0]
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	1e10      	subs	r0, r2, #0
 80072cc:	bf18      	it	ne
 80072ce:	2001      	movne	r0, #1
 80072d0:	b002      	add	sp, #8
 80072d2:	4770      	bx	lr
 80072d4:	4610      	mov	r0, r2
 80072d6:	e7fb      	b.n	80072d0 <__ascii_mbtowc+0x16>
 80072d8:	f06f 0001 	mvn.w	r0, #1
 80072dc:	e7f8      	b.n	80072d0 <__ascii_mbtowc+0x16>

080072de <_realloc_r>:
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	4680      	mov	r8, r0
 80072e4:	4615      	mov	r5, r2
 80072e6:	460c      	mov	r4, r1
 80072e8:	b921      	cbnz	r1, 80072f4 <_realloc_r+0x16>
 80072ea:	4611      	mov	r1, r2
 80072ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072f0:	f7fd be78 	b.w	8004fe4 <_malloc_r>
 80072f4:	b92a      	cbnz	r2, 8007302 <_realloc_r+0x24>
 80072f6:	f7fd fe03 	bl	8004f00 <_free_r>
 80072fa:	2400      	movs	r4, #0
 80072fc:	4620      	mov	r0, r4
 80072fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007302:	f000 f840 	bl	8007386 <_malloc_usable_size_r>
 8007306:	4285      	cmp	r5, r0
 8007308:	4606      	mov	r6, r0
 800730a:	d802      	bhi.n	8007312 <_realloc_r+0x34>
 800730c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007310:	d8f4      	bhi.n	80072fc <_realloc_r+0x1e>
 8007312:	4629      	mov	r1, r5
 8007314:	4640      	mov	r0, r8
 8007316:	f7fd fe65 	bl	8004fe4 <_malloc_r>
 800731a:	4607      	mov	r7, r0
 800731c:	2800      	cmp	r0, #0
 800731e:	d0ec      	beq.n	80072fa <_realloc_r+0x1c>
 8007320:	42b5      	cmp	r5, r6
 8007322:	462a      	mov	r2, r5
 8007324:	4621      	mov	r1, r4
 8007326:	bf28      	it	cs
 8007328:	4632      	movcs	r2, r6
 800732a:	f7ff fc47 	bl	8006bbc <memcpy>
 800732e:	4621      	mov	r1, r4
 8007330:	4640      	mov	r0, r8
 8007332:	f7fd fde5 	bl	8004f00 <_free_r>
 8007336:	463c      	mov	r4, r7
 8007338:	e7e0      	b.n	80072fc <_realloc_r+0x1e>

0800733a <__ascii_wctomb>:
 800733a:	4603      	mov	r3, r0
 800733c:	4608      	mov	r0, r1
 800733e:	b141      	cbz	r1, 8007352 <__ascii_wctomb+0x18>
 8007340:	2aff      	cmp	r2, #255	@ 0xff
 8007342:	d904      	bls.n	800734e <__ascii_wctomb+0x14>
 8007344:	228a      	movs	r2, #138	@ 0x8a
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	4770      	bx	lr
 800734e:	2001      	movs	r0, #1
 8007350:	700a      	strb	r2, [r1, #0]
 8007352:	4770      	bx	lr

08007354 <fiprintf>:
 8007354:	b40e      	push	{r1, r2, r3}
 8007356:	b503      	push	{r0, r1, lr}
 8007358:	4601      	mov	r1, r0
 800735a:	ab03      	add	r3, sp, #12
 800735c:	4805      	ldr	r0, [pc, #20]	@ (8007374 <fiprintf+0x20>)
 800735e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007362:	6800      	ldr	r0, [r0, #0]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	f000 f83d 	bl	80073e4 <_vfiprintf_r>
 800736a:	b002      	add	sp, #8
 800736c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007370:	b003      	add	sp, #12
 8007372:	4770      	bx	lr
 8007374:	20000018 	.word	0x20000018

08007378 <abort>:
 8007378:	2006      	movs	r0, #6
 800737a:	b508      	push	{r3, lr}
 800737c:	f000 fa06 	bl	800778c <raise>
 8007380:	2001      	movs	r0, #1
 8007382:	f7f9 ff42 	bl	800120a <_exit>

08007386 <_malloc_usable_size_r>:
 8007386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800738a:	1f18      	subs	r0, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	bfbc      	itt	lt
 8007390:	580b      	ldrlt	r3, [r1, r0]
 8007392:	18c0      	addlt	r0, r0, r3
 8007394:	4770      	bx	lr

08007396 <__sfputc_r>:
 8007396:	6893      	ldr	r3, [r2, #8]
 8007398:	b410      	push	{r4}
 800739a:	3b01      	subs	r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	6093      	str	r3, [r2, #8]
 80073a0:	da07      	bge.n	80073b2 <__sfputc_r+0x1c>
 80073a2:	6994      	ldr	r4, [r2, #24]
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	db01      	blt.n	80073ac <__sfputc_r+0x16>
 80073a8:	290a      	cmp	r1, #10
 80073aa:	d102      	bne.n	80073b2 <__sfputc_r+0x1c>
 80073ac:	bc10      	pop	{r4}
 80073ae:	f000 b931 	b.w	8007614 <__swbuf_r>
 80073b2:	6813      	ldr	r3, [r2, #0]
 80073b4:	1c58      	adds	r0, r3, #1
 80073b6:	6010      	str	r0, [r2, #0]
 80073b8:	7019      	strb	r1, [r3, #0]
 80073ba:	4608      	mov	r0, r1
 80073bc:	bc10      	pop	{r4}
 80073be:	4770      	bx	lr

080073c0 <__sfputs_r>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	4606      	mov	r6, r0
 80073c4:	460f      	mov	r7, r1
 80073c6:	4614      	mov	r4, r2
 80073c8:	18d5      	adds	r5, r2, r3
 80073ca:	42ac      	cmp	r4, r5
 80073cc:	d101      	bne.n	80073d2 <__sfputs_r+0x12>
 80073ce:	2000      	movs	r0, #0
 80073d0:	e007      	b.n	80073e2 <__sfputs_r+0x22>
 80073d2:	463a      	mov	r2, r7
 80073d4:	4630      	mov	r0, r6
 80073d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073da:	f7ff ffdc 	bl	8007396 <__sfputc_r>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	d1f3      	bne.n	80073ca <__sfputs_r+0xa>
 80073e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073e4 <_vfiprintf_r>:
 80073e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	460d      	mov	r5, r1
 80073ea:	4614      	mov	r4, r2
 80073ec:	4698      	mov	r8, r3
 80073ee:	4606      	mov	r6, r0
 80073f0:	b09d      	sub	sp, #116	@ 0x74
 80073f2:	b118      	cbz	r0, 80073fc <_vfiprintf_r+0x18>
 80073f4:	6a03      	ldr	r3, [r0, #32]
 80073f6:	b90b      	cbnz	r3, 80073fc <_vfiprintf_r+0x18>
 80073f8:	f7fc fe06 	bl	8004008 <__sinit>
 80073fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073fe:	07d9      	lsls	r1, r3, #31
 8007400:	d405      	bmi.n	800740e <_vfiprintf_r+0x2a>
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	059a      	lsls	r2, r3, #22
 8007406:	d402      	bmi.n	800740e <_vfiprintf_r+0x2a>
 8007408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800740a:	f7fc ff14 	bl	8004236 <__retarget_lock_acquire_recursive>
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	071b      	lsls	r3, r3, #28
 8007412:	d501      	bpl.n	8007418 <_vfiprintf_r+0x34>
 8007414:	692b      	ldr	r3, [r5, #16]
 8007416:	b99b      	cbnz	r3, 8007440 <_vfiprintf_r+0x5c>
 8007418:	4629      	mov	r1, r5
 800741a:	4630      	mov	r0, r6
 800741c:	f000 f938 	bl	8007690 <__swsetup_r>
 8007420:	b170      	cbz	r0, 8007440 <_vfiprintf_r+0x5c>
 8007422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007424:	07dc      	lsls	r4, r3, #31
 8007426:	d504      	bpl.n	8007432 <_vfiprintf_r+0x4e>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	b01d      	add	sp, #116	@ 0x74
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	0598      	lsls	r0, r3, #22
 8007436:	d4f7      	bmi.n	8007428 <_vfiprintf_r+0x44>
 8007438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743a:	f7fc fefd 	bl	8004238 <__retarget_lock_release_recursive>
 800743e:	e7f3      	b.n	8007428 <_vfiprintf_r+0x44>
 8007440:	2300      	movs	r3, #0
 8007442:	9309      	str	r3, [sp, #36]	@ 0x24
 8007444:	2320      	movs	r3, #32
 8007446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800744a:	2330      	movs	r3, #48	@ 0x30
 800744c:	f04f 0901 	mov.w	r9, #1
 8007450:	f8cd 800c 	str.w	r8, [sp, #12]
 8007454:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007600 <_vfiprintf_r+0x21c>
 8007458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800745c:	4623      	mov	r3, r4
 800745e:	469a      	mov	sl, r3
 8007460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007464:	b10a      	cbz	r2, 800746a <_vfiprintf_r+0x86>
 8007466:	2a25      	cmp	r2, #37	@ 0x25
 8007468:	d1f9      	bne.n	800745e <_vfiprintf_r+0x7a>
 800746a:	ebba 0b04 	subs.w	fp, sl, r4
 800746e:	d00b      	beq.n	8007488 <_vfiprintf_r+0xa4>
 8007470:	465b      	mov	r3, fp
 8007472:	4622      	mov	r2, r4
 8007474:	4629      	mov	r1, r5
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ffa2 	bl	80073c0 <__sfputs_r>
 800747c:	3001      	adds	r0, #1
 800747e:	f000 80a7 	beq.w	80075d0 <_vfiprintf_r+0x1ec>
 8007482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007484:	445a      	add	r2, fp
 8007486:	9209      	str	r2, [sp, #36]	@ 0x24
 8007488:	f89a 3000 	ldrb.w	r3, [sl]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 809f 	beq.w	80075d0 <_vfiprintf_r+0x1ec>
 8007492:	2300      	movs	r3, #0
 8007494:	f04f 32ff 	mov.w	r2, #4294967295
 8007498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800749c:	f10a 0a01 	add.w	sl, sl, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	9307      	str	r3, [sp, #28]
 80074a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80074aa:	4654      	mov	r4, sl
 80074ac:	2205      	movs	r2, #5
 80074ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b2:	4853      	ldr	r0, [pc, #332]	@ (8007600 <_vfiprintf_r+0x21c>)
 80074b4:	f7fc fec1 	bl	800423a <memchr>
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	b9d8      	cbnz	r0, 80074f4 <_vfiprintf_r+0x110>
 80074bc:	06d1      	lsls	r1, r2, #27
 80074be:	bf44      	itt	mi
 80074c0:	2320      	movmi	r3, #32
 80074c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c6:	0713      	lsls	r3, r2, #28
 80074c8:	bf44      	itt	mi
 80074ca:	232b      	movmi	r3, #43	@ 0x2b
 80074cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d0:	f89a 3000 	ldrb.w	r3, [sl]
 80074d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074d6:	d015      	beq.n	8007504 <_vfiprintf_r+0x120>
 80074d8:	4654      	mov	r4, sl
 80074da:	2000      	movs	r0, #0
 80074dc:	f04f 0c0a 	mov.w	ip, #10
 80074e0:	9a07      	ldr	r2, [sp, #28]
 80074e2:	4621      	mov	r1, r4
 80074e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e8:	3b30      	subs	r3, #48	@ 0x30
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d94b      	bls.n	8007586 <_vfiprintf_r+0x1a2>
 80074ee:	b1b0      	cbz	r0, 800751e <_vfiprintf_r+0x13a>
 80074f0:	9207      	str	r2, [sp, #28]
 80074f2:	e014      	b.n	800751e <_vfiprintf_r+0x13a>
 80074f4:	eba0 0308 	sub.w	r3, r0, r8
 80074f8:	fa09 f303 	lsl.w	r3, r9, r3
 80074fc:	4313      	orrs	r3, r2
 80074fe:	46a2      	mov	sl, r4
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	e7d2      	b.n	80074aa <_vfiprintf_r+0xc6>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	1d19      	adds	r1, r3, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	9103      	str	r1, [sp, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	bfbb      	ittet	lt
 8007510:	425b      	neglt	r3, r3
 8007512:	f042 0202 	orrlt.w	r2, r2, #2
 8007516:	9307      	strge	r3, [sp, #28]
 8007518:	9307      	strlt	r3, [sp, #28]
 800751a:	bfb8      	it	lt
 800751c:	9204      	strlt	r2, [sp, #16]
 800751e:	7823      	ldrb	r3, [r4, #0]
 8007520:	2b2e      	cmp	r3, #46	@ 0x2e
 8007522:	d10a      	bne.n	800753a <_vfiprintf_r+0x156>
 8007524:	7863      	ldrb	r3, [r4, #1]
 8007526:	2b2a      	cmp	r3, #42	@ 0x2a
 8007528:	d132      	bne.n	8007590 <_vfiprintf_r+0x1ac>
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	3402      	adds	r4, #2
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	9203      	str	r2, [sp, #12]
 8007534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007538:	9305      	str	r3, [sp, #20]
 800753a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007604 <_vfiprintf_r+0x220>
 800753e:	2203      	movs	r2, #3
 8007540:	4650      	mov	r0, sl
 8007542:	7821      	ldrb	r1, [r4, #0]
 8007544:	f7fc fe79 	bl	800423a <memchr>
 8007548:	b138      	cbz	r0, 800755a <_vfiprintf_r+0x176>
 800754a:	2240      	movs	r2, #64	@ 0x40
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	eba0 000a 	sub.w	r0, r0, sl
 8007552:	4082      	lsls	r2, r0
 8007554:	4313      	orrs	r3, r2
 8007556:	3401      	adds	r4, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755e:	2206      	movs	r2, #6
 8007560:	4829      	ldr	r0, [pc, #164]	@ (8007608 <_vfiprintf_r+0x224>)
 8007562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007566:	f7fc fe68 	bl	800423a <memchr>
 800756a:	2800      	cmp	r0, #0
 800756c:	d03f      	beq.n	80075ee <_vfiprintf_r+0x20a>
 800756e:	4b27      	ldr	r3, [pc, #156]	@ (800760c <_vfiprintf_r+0x228>)
 8007570:	bb1b      	cbnz	r3, 80075ba <_vfiprintf_r+0x1d6>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	3307      	adds	r3, #7
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	3308      	adds	r3, #8
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007580:	443b      	add	r3, r7
 8007582:	9309      	str	r3, [sp, #36]	@ 0x24
 8007584:	e76a      	b.n	800745c <_vfiprintf_r+0x78>
 8007586:	460c      	mov	r4, r1
 8007588:	2001      	movs	r0, #1
 800758a:	fb0c 3202 	mla	r2, ip, r2, r3
 800758e:	e7a8      	b.n	80074e2 <_vfiprintf_r+0xfe>
 8007590:	2300      	movs	r3, #0
 8007592:	f04f 0c0a 	mov.w	ip, #10
 8007596:	4619      	mov	r1, r3
 8007598:	3401      	adds	r4, #1
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	4620      	mov	r0, r4
 800759e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a2:	3a30      	subs	r2, #48	@ 0x30
 80075a4:	2a09      	cmp	r2, #9
 80075a6:	d903      	bls.n	80075b0 <_vfiprintf_r+0x1cc>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0c6      	beq.n	800753a <_vfiprintf_r+0x156>
 80075ac:	9105      	str	r1, [sp, #20]
 80075ae:	e7c4      	b.n	800753a <_vfiprintf_r+0x156>
 80075b0:	4604      	mov	r4, r0
 80075b2:	2301      	movs	r3, #1
 80075b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b8:	e7f0      	b.n	800759c <_vfiprintf_r+0x1b8>
 80075ba:	ab03      	add	r3, sp, #12
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	462a      	mov	r2, r5
 80075c0:	4630      	mov	r0, r6
 80075c2:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <_vfiprintf_r+0x22c>)
 80075c4:	a904      	add	r1, sp, #16
 80075c6:	f7fb fec5 	bl	8003354 <_printf_float>
 80075ca:	4607      	mov	r7, r0
 80075cc:	1c78      	adds	r0, r7, #1
 80075ce:	d1d6      	bne.n	800757e <_vfiprintf_r+0x19a>
 80075d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075d2:	07d9      	lsls	r1, r3, #31
 80075d4:	d405      	bmi.n	80075e2 <_vfiprintf_r+0x1fe>
 80075d6:	89ab      	ldrh	r3, [r5, #12]
 80075d8:	059a      	lsls	r2, r3, #22
 80075da:	d402      	bmi.n	80075e2 <_vfiprintf_r+0x1fe>
 80075dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075de:	f7fc fe2b 	bl	8004238 <__retarget_lock_release_recursive>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	065b      	lsls	r3, r3, #25
 80075e6:	f53f af1f 	bmi.w	8007428 <_vfiprintf_r+0x44>
 80075ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ec:	e71e      	b.n	800742c <_vfiprintf_r+0x48>
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4630      	mov	r0, r6
 80075f6:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <_vfiprintf_r+0x22c>)
 80075f8:	a904      	add	r1, sp, #16
 80075fa:	f7fc f949 	bl	8003890 <_printf_i>
 80075fe:	e7e4      	b.n	80075ca <_vfiprintf_r+0x1e6>
 8007600:	08007ca9 	.word	0x08007ca9
 8007604:	08007caf 	.word	0x08007caf
 8007608:	08007cb3 	.word	0x08007cb3
 800760c:	08003355 	.word	0x08003355
 8007610:	080073c1 	.word	0x080073c1

08007614 <__swbuf_r>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	460e      	mov	r6, r1
 8007618:	4614      	mov	r4, r2
 800761a:	4605      	mov	r5, r0
 800761c:	b118      	cbz	r0, 8007626 <__swbuf_r+0x12>
 800761e:	6a03      	ldr	r3, [r0, #32]
 8007620:	b90b      	cbnz	r3, 8007626 <__swbuf_r+0x12>
 8007622:	f7fc fcf1 	bl	8004008 <__sinit>
 8007626:	69a3      	ldr	r3, [r4, #24]
 8007628:	60a3      	str	r3, [r4, #8]
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	071a      	lsls	r2, r3, #28
 800762e:	d501      	bpl.n	8007634 <__swbuf_r+0x20>
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	b943      	cbnz	r3, 8007646 <__swbuf_r+0x32>
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f82a 	bl	8007690 <__swsetup_r>
 800763c:	b118      	cbz	r0, 8007646 <__swbuf_r+0x32>
 800763e:	f04f 37ff 	mov.w	r7, #4294967295
 8007642:	4638      	mov	r0, r7
 8007644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	6922      	ldr	r2, [r4, #16]
 800764a:	b2f6      	uxtb	r6, r6
 800764c:	1a98      	subs	r0, r3, r2
 800764e:	6963      	ldr	r3, [r4, #20]
 8007650:	4637      	mov	r7, r6
 8007652:	4283      	cmp	r3, r0
 8007654:	dc05      	bgt.n	8007662 <__swbuf_r+0x4e>
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f7ff fa4b 	bl	8006af4 <_fflush_r>
 800765e:	2800      	cmp	r0, #0
 8007660:	d1ed      	bne.n	800763e <__swbuf_r+0x2a>
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	3b01      	subs	r3, #1
 8007666:	60a3      	str	r3, [r4, #8]
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	701e      	strb	r6, [r3, #0]
 8007670:	6962      	ldr	r2, [r4, #20]
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	d004      	beq.n	8007682 <__swbuf_r+0x6e>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	07db      	lsls	r3, r3, #31
 800767c:	d5e1      	bpl.n	8007642 <__swbuf_r+0x2e>
 800767e:	2e0a      	cmp	r6, #10
 8007680:	d1df      	bne.n	8007642 <__swbuf_r+0x2e>
 8007682:	4621      	mov	r1, r4
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff fa35 	bl	8006af4 <_fflush_r>
 800768a:	2800      	cmp	r0, #0
 800768c:	d0d9      	beq.n	8007642 <__swbuf_r+0x2e>
 800768e:	e7d6      	b.n	800763e <__swbuf_r+0x2a>

08007690 <__swsetup_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4b29      	ldr	r3, [pc, #164]	@ (8007738 <__swsetup_r+0xa8>)
 8007694:	4605      	mov	r5, r0
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	460c      	mov	r4, r1
 800769a:	b118      	cbz	r0, 80076a4 <__swsetup_r+0x14>
 800769c:	6a03      	ldr	r3, [r0, #32]
 800769e:	b90b      	cbnz	r3, 80076a4 <__swsetup_r+0x14>
 80076a0:	f7fc fcb2 	bl	8004008 <__sinit>
 80076a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a8:	0719      	lsls	r1, r3, #28
 80076aa:	d422      	bmi.n	80076f2 <__swsetup_r+0x62>
 80076ac:	06da      	lsls	r2, r3, #27
 80076ae:	d407      	bmi.n	80076c0 <__swsetup_r+0x30>
 80076b0:	2209      	movs	r2, #9
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e033      	b.n	8007728 <__swsetup_r+0x98>
 80076c0:	0758      	lsls	r0, r3, #29
 80076c2:	d512      	bpl.n	80076ea <__swsetup_r+0x5a>
 80076c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c6:	b141      	cbz	r1, 80076da <__swsetup_r+0x4a>
 80076c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <__swsetup_r+0x46>
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7fd fc15 	bl	8004f00 <_free_r>
 80076d6:	2300      	movs	r3, #0
 80076d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	2300      	movs	r3, #0
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f043 0308 	orr.w	r3, r3, #8
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	b94b      	cbnz	r3, 800770a <__swsetup_r+0x7a>
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007700:	d003      	beq.n	800770a <__swsetup_r+0x7a>
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 f882 	bl	800780e <__smakebuf_r>
 800770a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770e:	f013 0201 	ands.w	r2, r3, #1
 8007712:	d00a      	beq.n	800772a <__swsetup_r+0x9a>
 8007714:	2200      	movs	r2, #0
 8007716:	60a2      	str	r2, [r4, #8]
 8007718:	6962      	ldr	r2, [r4, #20]
 800771a:	4252      	negs	r2, r2
 800771c:	61a2      	str	r2, [r4, #24]
 800771e:	6922      	ldr	r2, [r4, #16]
 8007720:	b942      	cbnz	r2, 8007734 <__swsetup_r+0xa4>
 8007722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007726:	d1c5      	bne.n	80076b4 <__swsetup_r+0x24>
 8007728:	bd38      	pop	{r3, r4, r5, pc}
 800772a:	0799      	lsls	r1, r3, #30
 800772c:	bf58      	it	pl
 800772e:	6962      	ldrpl	r2, [r4, #20]
 8007730:	60a2      	str	r2, [r4, #8]
 8007732:	e7f4      	b.n	800771e <__swsetup_r+0x8e>
 8007734:	2000      	movs	r0, #0
 8007736:	e7f7      	b.n	8007728 <__swsetup_r+0x98>
 8007738:	20000018 	.word	0x20000018

0800773c <_raise_r>:
 800773c:	291f      	cmp	r1, #31
 800773e:	b538      	push	{r3, r4, r5, lr}
 8007740:	4605      	mov	r5, r0
 8007742:	460c      	mov	r4, r1
 8007744:	d904      	bls.n	8007750 <_raise_r+0x14>
 8007746:	2316      	movs	r3, #22
 8007748:	6003      	str	r3, [r0, #0]
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007752:	b112      	cbz	r2, 800775a <_raise_r+0x1e>
 8007754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007758:	b94b      	cbnz	r3, 800776e <_raise_r+0x32>
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f830 	bl	80077c0 <_getpid_r>
 8007760:	4622      	mov	r2, r4
 8007762:	4601      	mov	r1, r0
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800776a:	f000 b817 	b.w	800779c <_kill_r>
 800776e:	2b01      	cmp	r3, #1
 8007770:	d00a      	beq.n	8007788 <_raise_r+0x4c>
 8007772:	1c59      	adds	r1, r3, #1
 8007774:	d103      	bne.n	800777e <_raise_r+0x42>
 8007776:	2316      	movs	r3, #22
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	2001      	movs	r0, #1
 800777c:	e7e7      	b.n	800774e <_raise_r+0x12>
 800777e:	2100      	movs	r1, #0
 8007780:	4620      	mov	r0, r4
 8007782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007786:	4798      	blx	r3
 8007788:	2000      	movs	r0, #0
 800778a:	e7e0      	b.n	800774e <_raise_r+0x12>

0800778c <raise>:
 800778c:	4b02      	ldr	r3, [pc, #8]	@ (8007798 <raise+0xc>)
 800778e:	4601      	mov	r1, r0
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f7ff bfd3 	b.w	800773c <_raise_r>
 8007796:	bf00      	nop
 8007798:	20000018 	.word	0x20000018

0800779c <_kill_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	2300      	movs	r3, #0
 80077a0:	4d06      	ldr	r5, [pc, #24]	@ (80077bc <_kill_r+0x20>)
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	f7f9 fd1e 	bl	80011ea <_kill>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d102      	bne.n	80077b8 <_kill_r+0x1c>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b103      	cbz	r3, 80077b8 <_kill_r+0x1c>
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	bf00      	nop
 80077bc:	200003ac 	.word	0x200003ac

080077c0 <_getpid_r>:
 80077c0:	f7f9 bd0c 	b.w	80011dc <_getpid>

080077c4 <__swhatbuf_r>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	460c      	mov	r4, r1
 80077c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077cc:	4615      	mov	r5, r2
 80077ce:	2900      	cmp	r1, #0
 80077d0:	461e      	mov	r6, r3
 80077d2:	b096      	sub	sp, #88	@ 0x58
 80077d4:	da0c      	bge.n	80077f0 <__swhatbuf_r+0x2c>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	2100      	movs	r1, #0
 80077da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077de:	bf14      	ite	ne
 80077e0:	2340      	movne	r3, #64	@ 0x40
 80077e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077e6:	2000      	movs	r0, #0
 80077e8:	6031      	str	r1, [r6, #0]
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	b016      	add	sp, #88	@ 0x58
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	466a      	mov	r2, sp
 80077f2:	f000 f849 	bl	8007888 <_fstat_r>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	dbed      	blt.n	80077d6 <__swhatbuf_r+0x12>
 80077fa:	9901      	ldr	r1, [sp, #4]
 80077fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007800:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007804:	4259      	negs	r1, r3
 8007806:	4159      	adcs	r1, r3
 8007808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800780c:	e7eb      	b.n	80077e6 <__swhatbuf_r+0x22>

0800780e <__smakebuf_r>:
 800780e:	898b      	ldrh	r3, [r1, #12]
 8007810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007812:	079d      	lsls	r5, r3, #30
 8007814:	4606      	mov	r6, r0
 8007816:	460c      	mov	r4, r1
 8007818:	d507      	bpl.n	800782a <__smakebuf_r+0x1c>
 800781a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	2301      	movs	r3, #1
 8007824:	6163      	str	r3, [r4, #20]
 8007826:	b003      	add	sp, #12
 8007828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800782a:	466a      	mov	r2, sp
 800782c:	ab01      	add	r3, sp, #4
 800782e:	f7ff ffc9 	bl	80077c4 <__swhatbuf_r>
 8007832:	9f00      	ldr	r7, [sp, #0]
 8007834:	4605      	mov	r5, r0
 8007836:	4639      	mov	r1, r7
 8007838:	4630      	mov	r0, r6
 800783a:	f7fd fbd3 	bl	8004fe4 <_malloc_r>
 800783e:	b948      	cbnz	r0, 8007854 <__smakebuf_r+0x46>
 8007840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007844:	059a      	lsls	r2, r3, #22
 8007846:	d4ee      	bmi.n	8007826 <__smakebuf_r+0x18>
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	e7e2      	b.n	800781a <__smakebuf_r+0xc>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800785a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	6020      	str	r0, [r4, #0]
 8007864:	b15b      	cbz	r3, 800787e <__smakebuf_r+0x70>
 8007866:	4630      	mov	r0, r6
 8007868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800786c:	f000 f81e 	bl	80078ac <_isatty_r>
 8007870:	b128      	cbz	r0, 800787e <__smakebuf_r+0x70>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	f043 0301 	orr.w	r3, r3, #1
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	431d      	orrs	r5, r3
 8007882:	81a5      	strh	r5, [r4, #12]
 8007884:	e7cf      	b.n	8007826 <__smakebuf_r+0x18>
	...

08007888 <_fstat_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	2300      	movs	r3, #0
 800788c:	4d06      	ldr	r5, [pc, #24]	@ (80078a8 <_fstat_r+0x20>)
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	f7f9 fd07 	bl	80012a8 <_fstat>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	d102      	bne.n	80078a4 <_fstat_r+0x1c>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	b103      	cbz	r3, 80078a4 <_fstat_r+0x1c>
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	200003ac 	.word	0x200003ac

080078ac <_isatty_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	2300      	movs	r3, #0
 80078b0:	4d05      	ldr	r5, [pc, #20]	@ (80078c8 <_isatty_r+0x1c>)
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7f9 fd05 	bl	80012c6 <_isatty>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_isatty_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_isatty_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	200003ac 	.word	0x200003ac

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
